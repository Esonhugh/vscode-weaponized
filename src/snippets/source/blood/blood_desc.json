{
    "GenericAll": "This entity has GenericAll permissions to the  target object.This is also known as full control. This permission allows the trustee to manipulate the target object however they wish.",
    "MemberOf": "The  controlled object is a member of the group target object.Groups in active directory grant their members any privileges the group itself has. If a group has rights to another principal, users/computers in the group, as well as other groups inside the group inherit those permissions.",
    "AllExtendedRights": "This entity has the AllExtendedRights permission to the  target object.Extended rights are special rights granted on objects which allow reading of privileged attributes, as well as performing special actions.",
    "AdminTo": "This entity has admin rights to the computer target object.By default, administrators have several ways to perform remote code execution on Windows systems, including via RDP, WMI, WinRM, the Service Control Manager, and remote DCOM execution.Further, administrators have several options for impersonating other users logged onto the system, including plaintext password extraction, token impersonation, and injecting into processes running as another user.Finally, administrators can often disable host-based security controls that would otherwise prevent the aforementioned techniques.",
    "HasSession": "The user target object has a session on the computer controlled object.When a user authenticates to a computer, they often leave credentials exposed on the system, which can be retrieved through LSASS injection, token manipulation/theft, or injecting into a user's process.Any user that is an administrator to the system has the capability to retrieve the credential material from memory if it still exists.Note: A session does not guarantee credential material is present, only possible.",
    "AddMember": "This entity has the ability to add arbitrary principals, including itself, to the group target object. Because of security group delegation, the members of a security group have the same privileges as that group.By adding itself to the group, controlled object will gain the same privileges that target object already has.",
    "ForceChangePassword": "This entity has the capability to change the  target object's password without knowing that user's current password.",
    "GenericWrite": "This entity has generic write access to the  target object.Generic Write access grants you the ability to write to any non-protected attribute on the target object, including \"members\" for a group, and \"serviceprincipalnames\" for a user",
    "Owns": "This entity has ownership of the  target object.The owner of an object is implicitly granted the ability to modify object security descriptors, including the DACL, when the following conditions are met:\nThe OWNER RIGHTS SID (S-1-3-4) is not explicitly granted privileges on the object\n```sh\n(Get-ACL -Path (\"AD:\" + \"CN=Object,DC=example,DC=com\")).Access | Where-Object { $_.IdentityReference -eq \"OWNER RIGHTS\" }\n```\nOR\n\nImplicit owner rights are not blockedImplicit owner rights are not blocked and are therefore abusable when the following conditions are met:The domain's BlockOwnerImplicitRights setting is not in enforcement mode. This setting is defined in the 29th character in the domain's dSHeuristics attribute. When set to 0 or 2, implicit owner rights are not blocked.\n```sh\n$searcher = [adsisearcher]\"\"\n$searcher.SearchRoot = \"LDAP://CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=EXAMPLE,DC=LOCAL\"\n$searcher.SearchScope = [System.DirectoryServices.SearchScope]::Base\n$searcher.Filter = \"(objectClass=*)\"\n$searcher.PropertiesToLoad.Add(\"DSHeuristics\") | Out-Null\n$result = $searcher.FindOne()\nWrite-Output \"DSHeuristics: $($result.Properties['DSHeuristics'])\"\n```\nAND EITHER:\n\nThe object is not a computer or derivative of a computer object (e.g., MSA, GMSA)\nOR\n\nThe object is a computer or derivative of a computer object and the owner is a member of the Domain Admins or Enterprise Admins group (or is the SID of either group)",
    "OwnsLimitedRights": "When specific privileges on an object's DACL are explicitly granted to the \"OWNER RIGHTS\" SID (S-1-3-4), implicit owner rights (e.g., WriteDacl) are blocked, and the owner is granted only the specific privileges granted to OWNER RIGHTS. This can be used to limit the rights of the owner of an object.",
    "OwnsRaw": "This edge is established from the principal that owns an object to the owned object. This edge is processed further to determine whether implicit owner rights (e.g., WriteDacl) are blocked, which may prevent the owner from compromising the destination object.",
    "WriteDacl": "This entity has permissions to modify the DACL (Discretionary Access Control List) on the  target objectWith write access to the target object's DACL, you can grant yourself any permission you want on the object.",
    "WriteOwner": "This entity has the ability to modify the owner of the  target object.Implicit owner rights are not blocked and are therefore abusable via change in ownership when the following conditions are met:Inheritance is not configured for any privileges explicitly granted to the OWNER RIGHTS SID (S-1-3-4). Non-inherited privileges granted to OWNER RIGHTS are removed when the owner is changed, allowing the new owner to have the full set of implicit owner rights.The domain's BlockOwnerImplicitRights setting is not in enforcement mode. This setting is defined in the 29th character in the domain's dSHeuristics attribute. When set to 0 or 2, implicit owner rights are not blocked.\n```sh\n$searcher = [adsisearcher]\"\"\n$searcher.SearchRoot = \"LDAP://CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=EXAMPLE,DC=LOCAL\"\n$searcher.SearchScope = [System.DirectoryServices.SearchScope]::Base\n$searcher.Filter = \"(objectClass=*)\"\n$searcher.PropertiesToLoad.Add(\"DSHeuristics\") | Out-Null\n$result = $searcher.FindOne()\nWrite-Output \"DSHeuristics: $($result.Properties['DSHeuristics'])\"\n```The object is not a computer or a derivative of a computer object (e.g., MSA, GMSA).",
    "WriteOwnerLimitedRights": "When specific privileges on an object's DACL are explicitly granted to the \"OWNER RIGHTS\" SID (S-1-3-4), and inheritance is configured for those permissions, they are inherited by the new object owner after a change in ownership. In this case, implicit owner rights are blocked, and the new owner is granted only the specific inherited privileges granted to OWNER RIGHTS.",
    "WriteOwnerRaw": "This edge is established from the principal that can change the owner of an object to the owned object. This edge is processed further to determine whether implicit owner rights (e.g., WriteDacl) are blocked, which may prevent the owner from compromising the destination object.",
    "CanRDP": "This entity has the capability to create a Remote Desktop Connection with the computer target object.Remote Desktop access allows you to enter an interactive session with the target computer. If authenticating as a low privilege user, a privilege escalation may allow you to gain high privileges on the system.Note: This edge does not guarantee privileged execution.",
    "ExecuteDCOM": "This entity has membership in the Distributed COM Users local group on the computer target object.This can allow code execution under certain conditions by instantiating a COM object on a remote machine and invoking its methods.",
    "AllowedToDelegate": "The  controlled object has the constrained delegation permission to the computer target object.The constrained delegation primitive allows a principal to authenticate as any user to specific services (found in the msds-AllowedToDelegateTo LDAP property in the source node tab) on the target computer. That is, a node with this permission can impersonate any domain principal (including Domain Admins) to the specific service on the target host. One caveat- impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked.An issue exists in the constrained delegation where the service name (sname) of the resulting ticket is not a part of the protected ticket information, meaning that an attacker can modify the target service name to any service of their choice. For example, if msds-AllowedToDelegateTo is \"HTTP/host.domain.com\", tickets can be modified for LDAP/HOST/etc. service names, resulting in complete server compromise, regardless of the specific service listed.",
    "CoerceToTGT": "The  controlled object is configured with Kerberos unconstrained delegation.Users and computers authenticating against controlled object will have their Kerberos TGT sent to controlled object, unless they are marked as sensitive or members of Protected Users.An attacker with control over controlled object can coerce a Tier Zero computer (e.g. DC) to authenticate against controlled object and obtain the target's TGT. With the TGT of a DC, the attacker can perform DCSync to compromise the domain. Alternatively, the TGT can be used to obtain admin access to the target host with a shadow credentials + silver ticket attack or a resource-based constrained delegation attack.",
    "GetChanges": "This entity has the DS-Replication-Get-Changes permission on the domain target object.Individually, this edge does not grant the ability to perform an attack. However, in conjunction with DS-Replication-Get-Changes-All, a principal may perform a DCSync attack.",
    "GetChangesAll": "This entity has the DS-Replication-Get-Changes-All permission on the domain target object.Individually, this edge does not grant the ability to perform an attack. However, in conjunction with DS-Replication-Get-Changes, a principal may perform a DCSync attack.",
    "ReadLAPSPassword": "This entity has the ability to read the password set by Local Administrator Password Solution (LAPS) on the computer target object.For systems using legacy LAPS, the following AD computer object properties are relevant:\n- - ms-Mcs-AdmPwd: The plaintext LAPS password\n- - ms-Mcs-AdmPwdExpirationTime: The LAPS password expiration time\nFor systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:\n- - msLAPS-Password: The plaintext LAPS password\n- - msLAPS-PasswordExpirationTime: The LAPS password expiration time\n- - msLAPS-EncryptedPassword: The encrypted LAPS password\n- - msLAPS-EncryptedPasswordHistory: The encrypted LAPS password history\n- - msLAPS-EncryptedDSRMPassword: The encrypted Directory Services Restore Mode (DSRM) password\n- - msLAPS-EncryptedDSRMPasswordHistory: The encrypted DSRM password history\n",
    "Contains": " controlled object contains the  target object.",
    "GPLink": "The GPO controlled object is linked to the  target object.A linked GPO applies its settings to objects in the linked container.",
    "AddAllowedToAct": "This entity has can modify the msds-AllowedToActOnBehalfOfOtherIdentity attribute on the computer target object.The ability to modify the msDS-AllowedToActOnBehalfOfOtherIdentity property allows an attacker to abuse resource-based constrained delegation to compromise the remote computer system. This property is a binary DACL that controls what security principals can pretend to be any domain user to the particular computer object.If the msDS-AllowedToActOnBehalfOfOtherIdentity DACL is set to allow an attack-controller account, the attacker can use said account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket \"as\" this user.One caveat is that impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.",
    "AllowedToAct": "This entity has is added to the msds-AllowedToActOnBehalfOfOtherIdentity attribute on the computer target object.An attacker can use this account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket \"as\" this user.One caveat is that impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.",
    "SQLAdmin": "The user controlled object is a SQL admin on the computer target object.There is at least one MSSQL instance running on target object where the user controlled object is the account configured to run the SQL Server instance. The typical configuration for MSSQL is to have the local Windows account or Active Directory domain account that is configured to run the SQL Server service (the primary database engine for SQL Server) have sysadmin privileges in the SQL Server application. As a result, the SQL Server service account can be used to log into the SQL Server instance remotely, read all of the databases (including those protected with transparent encryption), and run operating systems command through SQL Server (as the service account) using a variety of techniques.For Windows systems that have been joined to an Active Directory domain, the SQL Server instances and the associated service account can be identified by executing a LDAP query for a list of \"MSSQLSvc\" Service Principal Names (SPN) as a domain user. In short, when the Database Engine service starts, it attempts to register the SPN, and the SPN is then used to help facilitate Kerberos authentication.Author: Scott Sutherland",
    "ReadGMSAPassword": "target object is a Group Managed Service Account. The  controlled object can retrieve the password for the GMSA target object.Group Managed Service Accounts are a special type of Active Directory object, where the password for that object is mananaged by and automatically changed by Domain Controllers on a set interval (check the MSDS-ManagedPasswordInterval attribute).The intended use of a GMSA is to allow certain computer accounts to retrieve the password for the GMSA, then run local services as the GMSA. An attacker with control of an authorized principal may abuse that privilege to impersonate the GMSA.",
    "HasSIDHistory": "The  controlled object has, in its SIDHistory attribute, the SID for the  target object.When a kerberos ticket is created for controlled object, it will include the SID for target object, and therefore grantcontrolled object the same privileges and permissions astarget object.",
    "CrossForestTrust": "The CrossForestTrust edge represents a cross-forest (interforest) trust relationship between two domains/forests. In this relationship, the controlled object domain has a cross-forest trust to the target object domain, allowing principals (users and computers) from target object to access resources in controlled object.Trust Edge PropertiesBloodHound stores the following properties for CrossForestTrust edges (listed under Relationship Information):- Spoof SID History Blocked\nAn attacker with control over the trusted domain may attempt to escalate privileges in the trusting domain using a spoof SID history attack by injecting the SID of a privileged principal from the trusting domain into their authentication request. However, this attack can be prevented by SID filtering.SID filtering removes domain SIDs from authentication requests of foreign principals based on the trust configuration. Built-in SIDs (S-1-5-32-*) are always filtered, regardless of the configuration. For cross-forest trusts, blocking spoof SID history attacks requires filtering out SIDs that do not belong to the forest of the trusted domain.Cross-forest trusts blocks spoof SID history attacks by default. Forest trusts filter out SIDs that do not belong to the forest of the trusted domain. However, SID filtering for forest trusts can be relaxed by enabling the trustAttributes flag TREAT_AS_EXTERNAL. When enabled, SID filtering behaves like it does for external trusts (without quarantine mode), meaning only SIDs with a RID below 1000 (built-in AD principals) are filtered, allowing a potential spoof SID history attack.External trusts have quarantine mode (trustAttributes flag QUARANTINED_DOMAIN) enabled by default, protecting the trusting domain by filtering out SIDs that do not belong to the trusted domain in authentication requests. An external trust with quarantine mode disabled does not block spoof SID history attacks.SID filtering is managed from the outbound side of the trust. As a result, this property is only created if trust data from the outbound side has been ingested.- TGT Delegation\nTGT delegation determines whether unconstrained delegation is allowed over the trust. When a principal from the trusted domain authenticates against a Kerberos resource with unconstrained delegation in the trusting domain, their Kerberos TGT (Ticket Granting Ticket) is forwarded to the resource as part of Kerberos authentication, but only if TGT delegation is enabled (true).By default, TGT delegation is disabled for cross-forest trusts. It is enabled if the trustAttributes flag CROSS_ORGANIZATION_ENABLE_TGT_DELEGATION is enabled for the trust and quarantine mode (trustAttributes flag QUARANTINED_DOMAIN) is NOT enabled.TGT delegation is controlled from the inbound side of the trust, and the property is therefore only created if trust data from this side has been ingested.- Transitive\nTransitivity defines whether the trust extends beyond the two domains involved. A transitive trust allows access not only to principals of the trusted domain but also to those from other domains trusted by the trusted domain.Forest trusts are always transitive, external trusts are non-transitive.Attackers can bypass the limitations of non-transitive trusts by manually requesting local Kerberos TGTs for each domain in the trust chain. They can then use these local TGTs to access Kerberos resources that would otherwise be denied if requested directly. For more details, refer to \"External trusts are evil\" under References.- Trust Attributes\nThis property stores the raw value of the trustAttributes LDAP attribute, which defines the trust's configuration settings. BloodHound retains this property from both the outbound and inbound sides of the trust, as they may differ.- Trust Type\nThe trust type for cross-forest trusts can be Forest, External, Kerberos (Realm), or Unknown. Refer to the \"Microsoft AD Trust Technical Documentation\" under References for more details.",
    "SameForestTrust": "The SameForestTrust edge represents a same-forest (intraforest) trust relationship between two domains within the same AD forest. In this relationship, the controlled object domain has a same-forest trust with the target object domain, allowing principals (users and computers) from target object to access resources in controlled object.Since both domains belong to the same forest, they inherently trust each other, granting implicit access to resources across domains. It also means compromising one of the domains enable compromise of the other.Trust Edge PropertiesBloodHound stores the following properties for SameForestTrust edges (listed under Relationship Information):- Spoof SID History Blocked\nAn attacker with control over the trusted domain may attempt to escalate privileges in the trusting domain using a spoof SID history attack by injecting the SID of a privileged principal from the trusting domain into their authentication request. However, this attack can be prevented by SID filtering.SID filtering removes domain SIDs from authentication requests of foreign principals based on the trust configuration. Built-in SIDs (S-1-5-32-*) are always filtered, regardless of the configuration. SID filtering blocks the spoof SID history attack over same-forest trusts when the trust is configured in quarantine mode (trustAttributes flag QUARANTINED_DOMAIN enabled), which filters out SIDs that do not belong to the trusted domain. Same-forest trusts does not have quarantine mode enabled by default.SID filtering is managed from the outbound side of the trust, and the \"Spoof SID History Blocked\" property is therefore only created if trust data from this side has been ingested.- TGT Delegation\nTGT delegation determines whether unconstrained delegation is allowed over the trust. When a principal from the trusted domain authenticates against a Kerberos resource with unconstrained delegation in the trusting domain, their Kerberos TGT (Ticket Granting Ticket) is forwarded to the resource as part of Kerberos authentication, but only if TGT delegation is enabled (true).By default, TGT delegation is enabled for same-forest trusts. It is disabled if quarantine mode (trustAttributes flag QUARANTINED_DOMAIN) is enabled.TGT delegation is controlled from the inbound side of the trust, and the property is therefore only created if trust data from this side has been ingested.- Transitive\nTransitivity defines whether the trust extends beyond the two domains involved. A transitive trust allows access not only to principals of the trusted domain but also to those from other domains trusted by the trusted domain.\n\nSame-forest trusts are always transitive.- Trust Attributes\nThis property stores the raw value of the trustAttributes LDAP attribute, which defines the trust's configuration settings. BloodHound retains this property from both the outbound and inbound sides of the trust, as they may differ.- Trust Type\nThe trust type for same-forest trusts can be TreeRoot, ParentChild, or CrossLink (Shortcut). Refer to the \"Microsoft AD Trust Technical Documentation\" under References for more details.",
    "SpoofSIDHistory": "The cross-forest trust from target object to controlled object has a weak SID filtering configuration (Spoof SID History Blocked = False).The target object domain allows principals of controlled object access by SIDs of target object in their SID history. An attacker with control over the controlled object domain can craft access requests with manipulated SID history containing SIDs of privileged principals of target object to gain control over the target object domain.",
    "AbuseTGTDelegation": "The cross-forest trust from target object to controlled object has TGT delegation enabled.When a resource in controlled object is configured with unconstrained delegation, principals from target object will automatically forward their Ticket Granting Ticket (TGT) to that resource upon access.",
    "CanPSRemote": "This entity has the capability to create a PSRemote Connection with the computer target object.PS Session access allows you to enter an interactive session with the target computer. If authenticating as a low privilege user, a privilege escalation may allow you to gain high privileges on the system.Note: This edge does not guarantee privileged execution.",
    "AZAddMembers": "The ability to add other principals to an Azure security group",
    "AZAddSecret": "Azure provides several systems and mechanisms for granting control of securable objects within Azure Active Directory, including tenant-scoped admin roles, object-scoped admin roles, explicit object ownership, and API permissions.When a principal has been granted \"Cloud App Admin\" or \"App Admin\" against the tenant, that principal gains the ability to add new secrets to all Service Principals and App Registrations. Additionally, a principal that has been granted \"Cloud App Admin\" or \"App Admin\" against, or explicit ownership of a Service Principal or App Registration gains the ability to add secrets to that particular object.",
    "AZAvereContributor": "Any principal granted the Avere Contributor role, scoped to the affected VM, can reset the built-in administrator password on the VM.",
    "AZContains": "This indicates that the parent object contains the child object, such as a resource group containing a virtual machine, or a tenant \"containing\" a subscription.",
    "AZContributor": "The contributor role grants almost all abusable privileges in all circumstances, with some exceptions. Those exceptions are not collected by AzureHound.",
    "AZExecuteCommand": "Principals with the Intune Administrators role are able to execute arbitrary PowerShell scripts on devices that are joined to the Azure Active Directory tenant.",
    "AZGetCertificates": "The ability to read certificates from key vaults",
    "AZGetKeys": "The ability to read keys from key vaults",
    "AZGetSecrets": "The ability to read secrets from key vaults",
    "AZHasRole": "This edge indicates that a principal has been granted a particular AzureAD admin role.",
    "AZManagedIdentity": "Azure resources like Virtual Machines, Logic Apps, and Automation Accounts can be assigned to either System- or User-Assigned Managed Identities. This assignment allows the Azure resource to authenticate to Azure services as the Managed Identity without needing to know the credential for that Managed Identity. Managed Identities, whether System- or User-Assigned, are AzureAD Service Principals.",
    "AZMemberOf": "The  controlled object is a member of the group target object.Groups in Azure Active Directory grant their direct members any privileges the group itself has. If a group has an AzureAD admin role, direct members of the group inherit those permissions.",
    "AZOwns": "Object ownership means almost all abuses are possible against the target object.",
    "AZPrivilegedAuthAdmin": "This edge indicates the principal has the Privileged Authentication Administrator role active against the target tenant. Principals with this role can update sensitive properties for all users. Privileged Authentication Administrator can set or reset any authentication method (including passwords) for any user, including Global Administrators.",
    "AZPrivilegedRoleAdmin": "The Privileged Role Admin role can grant any other admin role to another principal at the tenant level.",
    "AZResetPassword": "The ability to change another user's password without knowing their current password",
    "AZUserAccessAdministrator": "The User Access Administrator role can manage user access to Azure resources, assign roles in Azure RBAC, and assign the Owner role to themselves or others.",
    "AZGlobalAdmin": "This edge indicates the principal has the Global Admin role active against the target tenant. In other words, the principal is a Global Admin. Global Admins can do almost anything against almost every object type in the tenant, this is the highest privilege role in Azure.",
    "AZAppAdmin": "Principals with the Application Admin role can control tenant-resident apps.",
    "AZCloudAppAdmin": "Principals with the Cloud App Admin role can control tenant-resident apps",
    "AZRunsAs": "The Azure App runs as the Service Principal when it needs to authenticate to the tenant",
    "AZVMAdminLogin": "When a virtual machine is configured to allow logon with Azure AD credentials, the VM automatically has certain principals added to its local administrators group, including any principal granted the Virtual Machine Administrator Login (or \"VMAL\") admin role.Any principal granted this role, scoped to the affected VM, can connect to the VM via RDP and will be granted local admin rights on the VM.",
    "AZVMContributor": "The Virtual Machine contributor role grants almost all abusable privileges against Virtual Machines.",
    "WriteSPN": "This entity has the ability to write to the \"serviceprincipalname\" attribute to the  target object.",
    "AddSelf": "This entity has the ability to add itself, to the group target object. Because of security group delegation, the members of a security group have the same privileges as that group.By adding itself to the group, controlled object will gain the same privileges that target object already has.",
    "AddKeyCredentialLink": "This entity has the ability to write to the \"msds-KeyCredentialLink\" property on target object. Writing to this property allows an attacker to create \"Shadow Credentials\" on the object and authenticate as the principal using kerberos PKINIT.",
    "DCSync": "This entity has the DS-Replication-Get-Changes and the DS-Replication-Get-Changes-All permission on the domain target object.These two permissions allow a principal to perform a DCSync attack.",
    "SyncLAPSPassword": "This entity has the ability to synchronize the password set by Local Administrator Password Solution (LAPS) on the computer target object.The local administrator password for a computer managed by LAPS is stored in the confidential and Read-Only Domain Controller (RODC) filtered LDAP attribute \n```sh\nms-mcs-AdmPwd\n```.",
    "WriteAccountRestrictions": "This entity has has write rights on all properties in the User Account Restrictions property set. Having write access to this property set translates to the ability to modify several attributes on computer target object, among which the msDS-AllowedToActOnBehalfOfOtherIdentity attribute is the most interesting. The other attributes in this set are listed in Dirk-jan's blog on this topic (see references).The ability to modify the msDS-AllowedToActOnBehalfOfOtherIdentity property allows an attacker to abuse resource-based constrained delegation to compromise the remote computer system. This property is a binary DACL that controls what security principals can pretend to be any domain user to the particular computer object.If the msDS-AllowedToActOnBehalfOfOtherIdentity DACL is set to allow an attack-controller account, the attacker can use said account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket \"as\" this user.One caveat is that impersonated users can not be in the \"Protected Users\" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.",
    "WriteGPLink": "This entity has has the permissions to modify the gPLink attribute of  target object.The ability to alter the gPLink attribute may allow an attacker to apply a malicious Group Policy Object (GPO) to all child user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them.Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup.Alternatively, the ability to modify the gPLink attribute can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands.",
    "DumpSMSAPassword": "This entity has the Standalone Managed Service Account (sMSA) target object installed on it.With administrative privileges on controlled object, it is possible to dump target object's password stored in LSA secrets.",
    "AZMGAddMember": "This edge is created during post-processing. It is created against non role assignable Azure AD security groups when a Service Principal has one of the following MS Graph app role assignments:Directory.ReadWrite.AllGroup.ReadWrite.AllGroupMember.ReadWrite.AllIt is created against all Azure AD security groups, including those that are role assignable, when a Service Principal has the following MS Graph app role:RoleManagement.ReadWrite.DirectoryYou will not see this privilege when using just the Azure portal or any other Microsoft tooling. If you audit the roles and administrators affecting any particular Azure security group, you will not see that the Service Principal can add members to the group, but it indeed can because of the parallel access management system used by MS Graph.",
    "AZMGAddOwner": "This edge is created during post-processing. It is created against all App Registrations and Service Principals within the same tenant when a Service Principal has the following MS Graph app role:Application.ReadWrite.AllIt is also created against all Azure Service Principals when a Service Principal has the following MS Graph app role:ServicePrincipalEndpoint.ReadWrite.AllIt is also created against all Azure security groups that are not role eligible when a Service Principal has one of the following MS Graph app roles:Directory.ReadWrite.AllGroup.ReadWrite.AllFinally, it is created against all Azure security groups and all Azure App Registrations when a Service Principal has the following MS Graph app role:RoleManagement.ReadWrite.DirectoryYou will not see these privileges when auditing permissions against any of the mentioned objects when you use Microsoft tooling, including the Azure portal and the MS Graph API itself.",
    "AZMGAddSecret": "This edge is created during post-processing. It is created against all Azure App Registrations and Service Principals when a Service Principal has one of the following MS Graph app roles:Application.ReadWrite.AllRoleManagement.ReadWrite.DirectoryYou will not see this privilege when using just the Azure portal or any other Microsoft tooling. If you audit the roles and administrators affecting any particular Azure App or Service Principal, you will not see that the Service Principal can add secrets to the object, but it indeed can because of the parallel access management system used by MS Graph.",
    "AZMGGrantAppRoles": "This edge is created during post-processing. It is created against AzureAD tenant objects when a Service Principal has one of the following MS Graph app role assignments:AppRoleAssignment.ReadWrite.AllRoleManagement.ReadWrite.Directory",
    "AZMGGrantRole": "This edge is created during post-processing. It is created against all AzureAD admin roles when a Service Principal has the following MS Graph app role assignment:RoleManagement.ReadWrite.DirectoryThis privilege allows the Service Principal to promote itself or any other principal to any AzureAD admin role, including Global Administrator.",
    "AZMGAppRoleAssignment_ReadWrite_All": "This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
    "AZMGApplication_ReadWrite_All": "This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
    "AZMGDirectory_ReadWrite_All": "This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
    "AZMGGroupMember_ReadWrite_All": "This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
    "AZMGGroup_ReadWrite_All": "This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
    "AZMGRoleManagement_ReadWrite_Directory": "This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
    "AZMGServicePrincipalEndpoint_ReadWrite_All": "This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges.",
    "AZWebsiteContributor": "The Website Contributor role grants full control of the target Function App or Web App. Full control of either of those types of resources allows for arbitrary command execution against the target resoruce.",
    "AZAddOwner": "This edge is created during post-processing. It is created against all App Registrations and Service Principals within the same tenant when an Azure principal has one of the following Azure Active Directory roles:Hybrid Identity AdministratorPartner Tier1 SupportPartner Tier2 SupportDirectory Synchronization AccountsYou will not see these privileges when auditing permissions against any of the mentioned objects when you use Microsoft tooling, including the Azure portal or any API.",
    "AZAKSContributor": "The Azure Kubernetes Service Contributor role grants full control of the target Azure Kubernetes Service Managed Cluster. This includes the ability to remotely fetch administrator credentials for the cluster as well as the ability to execute arbitrary commands on compute nodes associated with the AKS Managed Cluster.",
    "AZAutomationContributor": "The Azure Automation Contributor role grants full control of the target Azure Automation Account. This includes the ability to execute arbitrary commands on the Automation Account.",
    "AZKeyVaultKVContributor": "The Key Vault Contributor role grants full control of the target Key Vault. This includes the ability to read all secrets stored on the Key Vault.",
    "AZLogicAppContributor": "The Logic Contributor role grants full control of the target Logic App. This includes the ability to execute arbitrary commands on the Logic App.",
    "AZNodeResourceGroup": "This edge is created to link Azure Kubernetes Service Managed Clusters to the Virtual Machine Scale Sets they use to execute commands on.The system-assigned identity for the AKS Cluster will have the Contributor role against the target Resource Group and its child Virtual Machine Scale Sets.",
    "AZRoleApprover": "The Entra user is an approver for the role. If an account which can approve role assignments is compromised, an attacker could approve the assignment or activation of a role and escalate privileges in a tenant. The list of approvers is attached to a role policy and will be the designated principals for any approval requirements on the role. ",
    "AZRoleEligible": "The Entra user or group is eligible for a role assignment. If the user is compromised, an attacker could activate the role, or use a current activation to escalate privileges in the tenant.",
    "Enroll": "The  controlled object has enrollment rights against the target node, target object.The target node may be a Certificate Template or an Enterprise Certification Authority.",
    "EnterpriseCAFor": "The  controlled object is an enterprise certification authority for target object.The Enterprise Certification Authority node is the enrollment service LDAP object for the target AIACA/Root Certification Authority node.",
    "RootCAFor": "The  controlled object is the root certification authority for target object.The CA is trusted as a root certification authority by the domain. Any certificates signed by this CA will be trusted by the domain and all hosts in the domain.",
    "PublishedTo": "The  controlled object is published to target object.The certificate template is published to an enterprise certification authority. This relationship means the certificate template can be used when submitting an enrollment request to the specified certification authority.",
    "NTAuthStoreFor": "The NTAuthStore is the Enterprise NTAuth store (NTAuthCertificates object) for the the AD forest of the domain node. The NTAuthStore holds the list of certificates trusted for authentication in the AD forest of the domain target object. When a user attempts to authenticate against a domain with a certificate, a domain controller will verify that the certificate is signed by a certificate in the NTAuthStore.",
    "IssuedSignedBy": "The  controlled object's certificate is issued and signed by target objectWhen Windows assesses the validity and trustworthiness of a certificate it verifies the certificate chain up to a trusted root certificate. The IssuedSignedBy edge represent a link within the certificate chain.",
    "TrustedForNTAuth": "The NTAuthStore contains the certificate of the Enterprise CA, controlled object. The consequence of the relationship is that certificate issued by the Enterprise CA are trusted for authentication in the AD forest of the NTAuthStore.",
    "HostsCAService": "The  controlled object hosts the enrollment service for the enterprise CA target object.The Enterprise Certification Authority node is the enrollment service LDAP object for CA hosted on the computer node.",
    "DelegatedEnrollmentAgent": "The  controlled object is delegated the privilege to enroll certificates of the certificate template target object as an enrollment agent.The certificate template is published to an enterprise CA where the enrollment agent restrictions are configured to allow this principal to enroll certificates against this template as an enrollment agent. BloodHound does not assess what principals the enrollment agent is allowed to enroll on behalf of.",
    "EnrollOnBehalfOf": "The  controlled object can be used to enroll certificates on behalf of other principals for the certificate template target object.The certificate template controlled object is configured to be used as an enrollment agent. The certificate template target object is configured to allow enrollment by enrollment agents. Both certificate templates are published by an enterprise CA which is trusted for NT authentication and chain up to a root CA for the domain. This enables a principal with a certificate of certificate template controlled object to enroll on behalf of other principals for certificate template target object as long as enrollment agent restrictions configured on the enterprise CA permit it.",
    "GoldenCert": "The  controlled object has a certificate private key that can be abused to sign \"golden\" certificates for authentication of any enabled principal in the AD forest of domain target object.The  controlled object hosts the enrollment service of an enterprise CA which implies it has the private key of the enterprise CA's certificate. This private key allows an attacker to sign certificates for authentication as any enabled principal in the AD forest of domain target object, as the enterprise CA is trusted for NT authentication and chain up to a root CA.It may not be possible to obtain the certificate private key if it is protected with a Trusted Platform Module (TPM) or using a Hardware Security Module (HSM). However, it may still be possible to compromise the AD forest. Administrative access to the enterprise CA host lets an attacker publish certificate templates, approve denied enrollment requests, and more. The  controlled object will have an ESC7 edge to the domain target object if any such attack has been found possible by BloodHound.",
    "ADCSESC1": "This entity has the privileges to perform the ADCS ESC1 attack against the target domain.The principal has permission to enroll on one or more certificate templates, allowing them to specify an alternate subject name and use the certificate for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, along with the certificate chain up to the root CA certificate. This setup lets the principal enroll certificates for any AD forest user or computer, enabling authentication and impersonation of any AD forest user or computer without their credentials.",
    "ADCSESC4": "This entity has has the privileges to perform the ADCS ESC4 attack against the target domain.\n\nThe principal has permissions to modify the settings on one or more certificate templates, enabling the principal configure the certificate templates for ADCS ESC1 conditions, which allows them to specify an alternate subject name and use the certificate for authentication. They also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication and chains up to a root CA for the forest. This setup lets the principal modify the certificate templates to allow enrollment as any targeted AD forest user or computer without knowing their credentials, and impersonation of those targets by certificate authentication.",
    "ADCSESC3": "This entity has the capability to perform the ADCS ESC3 attack against the domain target object.The principal has permission to enroll on a certificate allowing them to obtain an enrollment agent certificate. They also have permission to enroll for a certificate template that permits enrollment by enrollment agents and can be used for authentication. Additionally, they also have enrollment permissions for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, along with the CA certificate chain up to the root CA certificate. This setup lets the principal enroll certificates for any AD forest user or computer, enabling authentication and impersonation of any AD forest user or computer without their credentials, unless the target user or computer is protected by enrollment agent restrictions on the enterprise CA.",
    "ADCSESC6a": "This entity has the privileges to perform the ADCS ESC6 Scenario A attack against the target domain.The principal has permission to enroll on one or more certificate templates allowing for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. The enterprise CA is configured with the EDITF_ATTRIBUTESUBJECTALTNAME2 flag allowing enrollees to specify a Subject Alternate Name (SAN) identifying another principal during certificate enrollment of any published certificate template. This setup allow an attacker principal to obtain a malicious certificate as any AD forest user or computer and use it for authentication and impersonation without knowing their credentials.",
    "ADCSESC6b": "This entity has the privileges to perform the ADCS ESC6 Scenario B attack against the target domain.The principal has permission to enroll on one or more certificate templates allowing for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. The enterprise CA is configured with the EDITF_ATTRIBUTESUBJECTALTNAME2 flag allowing enrollees to specify a Subject Alternate Name (SAN) identifying another principal during certificate enrollment of any published certificate template. This setup allow an attacker principal to obtain a malicious certificate as another principal. There is an affected Domain Controller configured to allow weak certificate mapping enforcement, which enables the attacker principal to authenticate with the malicious certificate and thereby impersonating any AD forest user or computer without their credentials.",
    "ADCSESC9a": "This entity has the privileges to perform the ADCS ESC9 Scenario A attack against the target domain.The principal has control over a victim principal with permission to enroll on one or more certificate templates, configured to: 1) enable certificate authentication, 2) require the userPrincipalName (UPN) of the enrollee included in the Subject Alternative Name (SAN), and 3) do not have the security extension enabled. The victim also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow weak certificate binding enforcement. This setup lets the principal impersonate any AD forest principal (user or computer) without their credentials.The attacker principal can abuse their control over the victim principal to modify the victim’s UPN to match the sAMAccountName of a targeted principal. Example: If the targeted principal is Administrator@corp.local user, the victim's UPN will be populated with \"Administrator\" (without the @corp.local ending). The attacker principal will then abuse their control over the victim principal to obtain the credentials of the victim principal, or a session as the victim principal, and enroll a certificate as the victim in one of the affected certificate templates. The UPN of the victim (\"Administrator\") will be included in the issued certificate under the SAN. As the certificate template does not have the security extension, it will NOT include the SID of the victim user in the issued certificate. Next, the attacker principal will again set the UPN of the victim, this time to an arbitrary string (e.g. the original value). The issued certificate can now be used for authentication against an affected DC. The weak certificate binding configuration on the DC will make the DC accept that the SID of the victim user is not present in the issued certificate when performing Kerberos authentication, and it will use the SAN value to map the certificate to a principal. The DC will attempt to find a principal with a UPN matching the SAN value (“Administrator”) but as the victim’s UPN has been changed after the enrollment, there will be no principals with this UPN. The DC will then attempt to find a principal with a sAMAccountName matching the SAN value and find the targeted user. At last, the DC issues a Kerberos TGT as the targeted user to the attacker, which means the attacker now has a session as the targeted user. In case the target is a computer, the DC will find it as well as the DC will attempt sAMAccountName matching with a $ at the end of the SAN value as last resort.",
    "ADCSESC9b": "This entity has has the privileges to perform the ADCS ESC9 Scenario B attack against the target domain.\n\nThe principal has control over a victim computer with permission to enroll on one or more certificate templates, configured to: 1) enable certificate authentication, 2) require the dNSHostName of the enrollee included in the Subject Alternative Name (SAN), and 3) not have the security extension enabled. The victim computer also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow weak certificate binding enforcement. This setup lets the principal impersonate any AD forest computer without their credentials.\n\nThe attacker principal can abuse their control over the victim computer to modify the victim computer's dNSHostName attribute to match the dNSHostName of a targeted computer. The attacker principal will then abuse their control over the victim computer to obtain the credentials of the victim computer, or a session as the victim computer, and enroll a certificate as the victim in one of the affected certificate templates. The dNSHostName of the victim will be included in the issued certificate under SAN DNS name. As the certificate template does not have the security extension, the issued certificate will NOT include the SID of the victim computer. DCs with strong certificate binding configuration will require a SID to be present in a certificate used for Kerberos authentication, but the affected DCs with weak certificate binding configuration will not. The affected DCs will split the SAN DNS name into a computer name and a domain name, confirm that the domain name is correct, and use the computer name appended a $ to identify principals with a matching sAMAccountName. At last, the DC issues a Kerberos TGT as the targeted computer to the attacker, which means the attacker now has a session as the targeted computer.",
    "ADCSESC10a": "This entity has has the privileges to perform the ADCS ESC10 Scenario A attack against the target domain.\n\nThe principal has control over a victim principal with permission to enroll on one or more certificate templates, configured to enable certificate authentication and require the userPrincipalName (UPN) of the enrollee included in the Subject Alternative Name (SAN). The victim also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow UPN certificate mapping. This setup lets the principal impersonate any AD forest computer, or any user where UPN does not match their sAMAccountName, without knowing their credentials.\n\nThe attacker principal can abuse their control over the victim principal to modify the victim’s UPN to match the sAMAccountName of a targeted principal followed by @CORP.LOCAL. Example: If the targeted principal is Administrator user of domain CORP.LOCAL, the victim's UPN will be populated with \"Administrator@CORP.LOCAL\". The attacker principal will then abuse their control over the victim principal to obtain the credentials of the victim principal, or a session as the victim principal, and enroll a certificate as the victim in one of the affected certificate templates. The UPN of the victim (\"Administrator@CORP.LOCAL\") will be included in the issued certificate under the SAN. Next, the attacker principal will again set the UPN of the victim, this time to an arbitrary string (e.g. the original value). The issued certificate can now be used for authentication against an affected DC. The UPN certificate mapping configuration on the DC make the DC use the SAN value to map the certificate to a principal when performing Schannel authentication. The DC will attempt to find a principal with a UPN matching the SAN value (“Administrator@CORP.LOCAL”) but as the victim’s UPN has been changed after the enrollment, there will be no principals with this UPN. The DC will then attempt to find a principal with a sAMAccountName matching the SAN value and find the targeted user. In case the target is a computer, the DC will find it as well as the DC will attempt sAMAccountName matching with a $ at the end of the SAN value as last resort. At last, the DC will authenticate the attacker as the targeted principal.",
    "ADCSESC10b": "This entity has has the privileges to perform the ADCS ESC10 Scenario B attack against the target domain.\n\nThe principal has control over a victim computer with permission to enroll on one or more certificate templates, configured to enable certificate authentication, and require the dNSHostName of the enrollee included in the Subject Alternative Name (SAN). The victim computer also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow UPN certificate mapping. This setup lets the principal impersonate any AD forest computer without their credentials.\n\nThe attacker principal can abuse their control over the victim computer to modify the victim computer's dNSHostName attribute to match the dNSHostName of a targeted computer. The attacker principal will then abuse their control over the victim computer to obtain the credentials of the victim computer, or a session as the victim computer, and enroll a certificate as the victim in one of the affected certificate templates. The dNSHostName of the victim will be included in the issued certificate under SAN DNS name. The UPN certificate mapping configuration on the affected DCs make it possible to authenticate over Schannel as the targeted computer. The DC will split the SAN DNS name into a computer name and a domain name, confirm that the domain name is correct, and use the computer name appended a $ to identify a computer with matching sAMAccountName which the attacker will be authenticated as.",
    "ADCSESC13": "The  controlled object has the privileges to perform the ADCS ESC13 abuse against the target AD group. The principal has enrollment rights on a certificate template configured with an issuance policy extension. The issuance policy has an OID group link to an AD group. The principal also has enrollment permission for an enterprise CA with the necessary template published. This enterprise CA is trusted for NT authentication and chains up to a root CA for the forest. This setup allows the principal to enroll a certificate that the principal can use to obtain access to the environment as a member of the group specified in the OID group link.",
    "ManageCA": "The principal controlled object has the \"Manage CA\", also known as \"CA Administrator\", permission on the EnterpriseCA. This permission allows the principal to configure the CA to allow subject alternate names, publish certificate templates, grant \"Manage Certificates\" and more.",
    "ManageCertificates": "The principal controlled object has the \"Manage Certificates\", also known as \"CA Officer\", permission on the Enterprise CA. This permission allows the principal to force the CA to issue certificates that the CA had previously denied issuance of.",
    "WritePKIEnrollmentFlag": "This entity has the ability to write to the msPKI-Enrollment-Flag attribute on the  target object, which allows the principal to configure \"manager approval\" for the certificate template and other settings.",
    "WritePKINameFlag": "This entity has the ability to write to the msPKI-Certificate-Name-Flag attribute on the  target object, which allows the principal to configure \"enrollee supplies subject\" for the certificate template among other settings.",
    "DCFor": "This edge indicates that the computer is a domain controller for the domain. This edge is not created for read-only domain controllers.",
    "OIDGroupLink": "The IssuancePolicy controlled object has an OID group link to the group target object. Certificate templates may include controlled object as an issuance policy extension. Users authenticating using a certificate of such a certificate template will be granted access as a member of the target object group.",
    "ExtendedByPolicy": "Certificates of the certificate template controlled object will include the issuance policy target object as a certificate extension.",
    "SyncedToADUser": "The Entra user is synchronized to the on-prem AD user.The Entra user may be able to authenticate as the on-prem AD user with its own password if password write-back is enabled. The Entra user may already have the same password as the on-prem user if password hash synchronization is enabled.",
    "SyncedToEntraUser": "The on-prem AD user is synchronized to the Entra ID user.The on-prem user may be able to authenticate as the Entra user with its own password if password hash synchronization, pass-through authentication, or seamless single sign-on is enabled.",
    "CoerceAndRelayNTLMToSMB": "This edge indicates that an attacker with \"Authenticated Users\" access can compromise the target computer by relaying the NTLM authentication of a victim computer with administrative rights on the target computer. The attack is possible because the attacker can trigger SMB-based coercion from the victim computer to their attacker-controlled host, and the target computer does not enforce SMB signing.Click on Relay Sources to view valid computers with administrative rights on the target computer that can be relayed. Click on Composition to view the full paths that lead to administrative rights on the target computer.",
    "CoerceAndRelayNTLMToLDAP": "This edge indicates that the target computer has the WebClient service running. This enables an attacker with \"Authenticated Users\" access to trigger WebClient-based coercion from the target computer to their attacker-controlled host via NTLM. Since the connection originates from the WebClient instead of SMB, the attacker can relay the authentication attempt to the LDAP service of a domain controller that does not require LDAP signing. This relay can be used to abuse Active Directory permissions or obtain administrative access to the target computer using Resource-Based Constrained Delegation (RBCD) or Shadow Credentials.Click on Relay Targets to view the domain controllers in the domain that do not require LDAP signing.",
    "CoerceAndRelayNTLMToLDAPS": "This edge indicates that the target computer has the WebClient service running. This enables an attacker with \"Authenticated Users\" access to trigger WebClient-based coercion from the target computer to their attacker-controlled host via NTLM. Since the connection originates from the WebClient instead of SMB, the attacker can relay the authentication attempt to LDAPS of a domain controller that does not require LDAPS channel binding. This relay can be used to abuse Active Directory permissions or obtain administrative access to the target computer using Resource-Based Constrained Delegation (RBCD) or Shadow Credentials.Click on Relay Targets to view the domain controllers in the domain that do not require LDAPS channel binding.",
    "CoerceAndRelayNTLMToADCS": "This edge indicates that an attacker with \"Authenticated Users\" access can trigger SMB-based coercion from the target computer to their attacker-controlled host via NTLM. The authentication attempt from the target computer can then be relayed to an ESC8-vulnerable web enrollment endpoint of an Active Directory Certificate Services (ADCS) enterprise CA server. This allows the attacker to obtain a certificate enabling domain authentication as the target computer.Click on Relay Targets to view vulnerable enterprise CA servers that enable certificate enrollment for the target computer.",
    "ClaimSpecialIdentity": "The ClaimSpecialIdentity edge represents the ability to obtain an access token containing a special identity (group) SID. Unlike regular groups, membership in special identities is determined at authentication rather than by an explicit member list.See the Abuse section for specific cases.",
    "HasTrustKeys": "The domain controlled object has the trust keys of the trust account target object. The trust account exists because the source domain has an outbound trust to the domain of the trust account.The trust keys can be leveraged to authenticate as the trust account and gain access to the trust account's domain."
}